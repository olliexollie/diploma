/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./static/js/app.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@material/animation/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@material/animation/index.js ***!
  \***************************************************/
/*! exports provided: transformStyleProperties, getCorrectEventName, getCorrectPropertyName */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformStyleProperties", function() { return transformStyleProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCorrectEventName", function() { return getCorrectEventName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCorrectPropertyName", function() { return getCorrectPropertyName; });
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @typedef {{
 *   noPrefix: string,
 *   webkitPrefix: string,
 *   styleProperty: string
 * }}
 */
let VendorPropertyMapType;

/** @const {Object<string, !VendorPropertyMapType>} */
const eventTypeMap = {
  'animationstart': {
    noPrefix: 'animationstart',
    webkitPrefix: 'webkitAnimationStart',
    styleProperty: 'animation',
  },
  'animationend': {
    noPrefix: 'animationend',
    webkitPrefix: 'webkitAnimationEnd',
    styleProperty: 'animation',
  },
  'animationiteration': {
    noPrefix: 'animationiteration',
    webkitPrefix: 'webkitAnimationIteration',
    styleProperty: 'animation',
  },
  'transitionend': {
    noPrefix: 'transitionend',
    webkitPrefix: 'webkitTransitionEnd',
    styleProperty: 'transition',
  },
};

/** @const {Object<string, !VendorPropertyMapType>} */
const cssPropertyMap = {
  'animation': {
    noPrefix: 'animation',
    webkitPrefix: '-webkit-animation',
  },
  'transform': {
    noPrefix: 'transform',
    webkitPrefix: '-webkit-transform',
  },
  'transition': {
    noPrefix: 'transition',
    webkitPrefix: '-webkit-transition',
  },
};

/**
 * @param {!Object} windowObj
 * @return {boolean}
 */
function hasProperShape(windowObj) {
  return (windowObj['document'] !== undefined && typeof windowObj['document']['createElement'] === 'function');
}

/**
 * @param {string} eventType
 * @return {boolean}
 */
function eventFoundInMaps(eventType) {
  return (eventType in eventTypeMap || eventType in cssPropertyMap);
}

/**
 * @param {string} eventType
 * @param {!Object<string, !VendorPropertyMapType>} map
 * @param {!Element} el
 * @return {string}
 */
function getJavaScriptEventName(eventType, map, el) {
  return map[eventType].styleProperty in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;
}

/**
 * Helper function to determine browser prefix for CSS3 animation events
 * and property names.
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getAnimationName(windowObj, eventType) {
  if (!hasProperShape(windowObj) || !eventFoundInMaps(eventType)) {
    return eventType;
  }

  const map = /** @type {!Object<string, !VendorPropertyMapType>} */ (
    eventType in eventTypeMap ? eventTypeMap : cssPropertyMap
  );
  const el = windowObj['document']['createElement']('div');
  let eventName = '';

  if (map === eventTypeMap) {
    eventName = getJavaScriptEventName(eventType, map, el);
  } else {
    eventName = map[eventType].noPrefix in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;
  }

  return eventName;
}

// Public functions to access getAnimationName() for JavaScript events or CSS
// property names.

const transformStyleProperties = ['transform', 'WebkitTransform', 'MozTransform', 'OTransform', 'MSTransform'];

/**
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getCorrectEventName(windowObj, eventType) {
  return getAnimationName(windowObj, eventType);
}

/**
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getCorrectPropertyName(windowObj, eventType) {
  return getAnimationName(windowObj, eventType);
}




/***/ }),

/***/ "./node_modules/@material/base/component.js":
/*!**************************************************!*\
  !*** ./node_modules/@material/base/component.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/base/foundation.js");
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
 * @template F
 */
class MDCComponent {
  /**
   * @param {!Element} root
   * @return {!MDCComponent}
   */
  static attachTo(root) {
    // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
    // returns an instantiated component with its root set to that element. Also note that in the cases of
    // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
    // from getDefaultFoundation().
    return new MDCComponent(root, new _foundation__WEBPACK_IMPORTED_MODULE_0__["default"]());
  }

  /**
   * @param {!Element} root
   * @param {F=} foundation
   * @param {...?} args
   */
  constructor(root, foundation = undefined, ...args) {
    /** @protected {!Element} */
    this.root_ = root;
    this.initialize(...args);
    // Note that we initialize foundation here and not within the constructor's default param so that
    // this.root_ is defined and can be used within the foundation class.
    /** @protected {!F} */
    this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;
    this.foundation_.init();
    this.initialSyncWithDOM();
  }

  initialize(/* ...args */) {
    // Subclasses can override this to do any additional setup work that would be considered part of a
    // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
    // initialized. Any additional arguments besides root and foundation will be passed in here.
  }

  /**
   * @return {!F} foundation
   */
  getDefaultFoundation() {
    // Subclasses must override this method to return a properly configured foundation class for the
    // component.
    throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' +
      'foundation class');
  }

  initialSyncWithDOM() {
    // Subclasses should override this method if they need to perform work to synchronize with a host DOM
    // object. An example of this would be a form control wrapper that needs to synchronize its internal state
    // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
    // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
  }

  destroy() {
    // Subclasses may implement this method to release any resources / deregister any listeners they have
    // attached. An example of this might be deregistering a resize event from the window object.
    this.foundation_.destroy();
  }

  /**
   * Wrapper method to add an event listener to the component's root element. This is most useful when
   * listening for custom events.
   * @param {string} evtType
   * @param {!Function} handler
   */
  listen(evtType, handler) {
    this.root_.addEventListener(evtType, handler);
  }

  /**
   * Wrapper method to remove an event listener to the component's root element. This is most useful when
   * unlistening for custom events.
   * @param {string} evtType
   * @param {!Function} handler
   */
  unlisten(evtType, handler) {
    this.root_.removeEventListener(evtType, handler);
  }

  /**
   * Fires a cross-browser-compatible custom event from the component root of the given type,
   * with the given data.
   * @param {string} evtType
   * @param {!Object} evtData
   * @param {boolean=} shouldBubble
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === 'function') {
      evt = new CustomEvent(evtType, {
        detail: evtData,
        bubbles: shouldBubble,
      });
    } else {
      evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }

    this.root_.dispatchEvent(evt);
  }
}

/* harmony default export */ __webpack_exports__["default"] = (MDCComponent);


/***/ }),

/***/ "./node_modules/@material/base/foundation.js":
/*!***************************************************!*\
  !*** ./node_modules/@material/base/foundation.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @template A
 */
class MDCFoundation {
  /** @return enum{cssClasses} */
  static get cssClasses() {
    // Classes extending MDCFoundation should implement this method to return an object which exports every
    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
    return {};
  }

  /** @return enum{strings} */
  static get strings() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
    return {};
  }

  /** @return enum{numbers} */
  static get numbers() {
    // Classes extending MDCFoundation should implement this method to return an object which exports all
    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
    return {};
  }

  /** @return {!Object} */
  static get defaultAdapter() {
    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
    // validation.
    return {};
  }

  /**
   * @param {A=} adapter
   */
  constructor(adapter = {}) {
    /** @protected {!A} */
    this.adapter_ = adapter;
  }

  init() {
    // Subclasses should override this method to perform initialization routines (registering events, etc.)
  }

  destroy() {
    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
  }
}

/* harmony default export */ __webpack_exports__["default"] = (MDCFoundation);


/***/ }),

/***/ "./node_modules/@material/base/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@material/base/index.js ***!
  \**********************************************/
/*! exports provided: MDCFoundation, MDCComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/base/foundation.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCFoundation", function() { return _foundation__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component */ "./node_modules/@material/base/component.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCComponent", function() { return _component__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







/***/ }),

/***/ "./node_modules/@material/menu/adapter.js":
/*!************************************************!*\
  !*** ./node_modules/@material/menu/adapter.js ***!
  \************************************************/
/*! exports provided: MDCMenuAdapter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCMenuAdapter", function() { return MDCMenuAdapter; });
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Menu. Provides an interface for managing
 * - classes
 * - dom
 * - focus
 * - position
 * - dimensions
 * - event handlers
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md
 *
 * @record
 */
class MDCMenuAdapter {
  /** @param {string} className */
  addClass(className) {}

  /** @param {string} className */
  removeClass(className) {}

  /**
   * @param {string} className
   * @return {boolean}
   */
  hasClass(className) {}

  /** @return {boolean} */
  hasNecessaryDom() {}

  /**
   * @param {EventTarget} target
   * @param {string} attributeName
   * @return {string}
   */
  getAttributeForEventTarget(target, attributeName) {}

  /** @return {{ width: number, height: number }} */
  getInnerDimensions() {}

  /** @return {boolean} */
  hasAnchor() {}

  /** @return {{width: number, height: number, top: number, right: number, bottom: number, left: number}} */
  getAnchorDimensions() {}

  /** @return {{ width: number, height: number }} */
  getWindowDimensions() {}

  /** @return {number} */
  getNumberOfItems() {}

  /**
   * @param {string} type
   * @param {function(!Event)} handler
   */
  registerInteractionHandler(type, handler) {}

  /**
   * @param {string} type
   * @param {function(!Event)} handler
   */
  deregisterInteractionHandler(type, handler) {}

  /** @param {function(!Event)} handler */
  registerBodyClickHandler(handler) {}

  /** @param {function(!Event)} handler */
  deregisterBodyClickHandler(handler) {}

  /**
   * @param {EventTarget} target
   * @return {number}
   */
  getIndexForEventTarget(target) {}

  /** @param {{index: number}} evtData */
  notifySelected(evtData) {}

  notifyCancel() {}

  saveFocus() {}

  restoreFocus() {}

  /** @return {boolean} */
  isFocused() {}

  focus() {}

  /** @return {number} */
  getFocusedItemIndex() /* number */ {}

  /** @param {number} index */
  focusItemAtIndex(index) {}

  /** @return {boolean} */
  isRtl() {}

  /** @param {string} origin */
  setTransformOrigin(origin) {}

  /** @param {{
  *   top: (string|undefined),
  *   right: (string|undefined),
  *   bottom: (string|undefined),
  *   left: (string|undefined)
  * }} position */
  setPosition(position) {}

  /** @param {string} height */
  setMaxHeight(height) {}

  /**
   * @param {number} index
   * @param {string} attr
   * @param {string} value
   */
  setAttrForOptionAtIndex(index, attr, value) {}

  /**
   * @param {number} index
   * @param {string} attr
   */
  rmAttrForOptionAtIndex(index, attr) {}

  /**
   * @param {number} index
   * @param {string} className
   */
  addClassForOptionAtIndex(index, className) {}

  /**
   * @param {number} index
   * @param {string} className
   */
  rmClassForOptionAtIndex(index, className) {}
}




/***/ }),

/***/ "./node_modules/@material/menu/constants.js":
/*!**************************************************!*\
  !*** ./node_modules/@material/menu/constants.js ***!
  \**************************************************/
/*! exports provided: cssClasses, strings, numbers, CornerBit, Corner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssClasses", function() { return cssClasses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strings", function() { return strings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numbers", function() { return numbers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CornerBit", function() { return CornerBit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Corner", function() { return Corner; });
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @enum {string} */
const cssClasses = {
  ROOT: 'mdc-menu',
  OPEN: 'mdc-menu--open',
  ANIMATING_OPEN: 'mdc-menu--animating-open',
  ANIMATING_CLOSED: 'mdc-menu--animating-closed',
  SELECTED_LIST_ITEM: 'mdc-list-item--selected',
};

/** @enum {string} */
const strings = {
  ITEMS_SELECTOR: '.mdc-menu__items',
  SELECTED_EVENT: 'MDCMenu:selected',
  CANCEL_EVENT: 'MDCMenu:cancel',
  ARIA_DISABLED_ATTR: 'aria-disabled',
};

/** @enum {number} */
const numbers = {
  // Amount of time to wait before triggering a selected event on the menu. Note that this time
  // will most likely be bumped up once interactive lists are supported to allow for the ripple to
  // animate before closing the menu
  SELECTED_TRIGGER_DELAY: 50,
  // Total duration of menu open animation.
  TRANSITION_OPEN_DURATION: 120,
  // Total duration of menu close animation.
  TRANSITION_CLOSE_DURATION: 75,
  // Margin left to the edge of the viewport when menu is at maximum possible height.
  MARGIN_TO_EDGE: 32,
  // Ratio of anchor width to menu width for switching from corner positioning to center positioning.
  ANCHOR_TO_MENU_WIDTH_RATIO: 0.67,
  // Ratio of vertical offset to menu height for switching from corner to mid-way origin positioning.
  OFFSET_TO_MENU_HEIGHT_RATIO: 0.1,
};

/**
 * Enum for bits in the {@see Corner) bitmap.
 * @enum {number}
 */
const CornerBit = {
  BOTTOM: 1,
  CENTER: 2,
  RIGHT: 4,
  FLIP_RTL: 8,
};

/**
 * Enum for representing an element corner for positioning the menu.
 *
 * The START constants map to LEFT if element directionality is left
 * to right and RIGHT if the directionality is right to left.
 * Likewise END maps to RIGHT or LEFT depending on the directionality.
 *
 * @enum {number}
 */
const Corner = {
  TOP_LEFT: 0,
  TOP_RIGHT: CornerBit.RIGHT,
  BOTTOM_LEFT: CornerBit.BOTTOM,
  BOTTOM_RIGHT: CornerBit.BOTTOM | CornerBit.RIGHT,
  TOP_START: CornerBit.FLIP_RTL,
  TOP_END: CornerBit.FLIP_RTL | CornerBit.RIGHT,
  BOTTOM_START: CornerBit.BOTTOM | CornerBit.FLIP_RTL,
  BOTTOM_END: CornerBit.BOTTOM | CornerBit.RIGHT | CornerBit.FLIP_RTL,
};





/***/ }),

/***/ "./node_modules/@material/menu/foundation.js":
/*!***************************************************!*\
  !*** ./node_modules/@material/menu/foundation.js ***!
  \***************************************************/
/*! exports provided: MDCMenuFoundation, AnchorMargin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCMenuFoundation", function() { return MDCMenuFoundation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnchorMargin", function() { return AnchorMargin; });
/* harmony import */ var _material_base_foundation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/base/foundation */ "./node_modules/@material/base/foundation.js");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./node_modules/@material/menu/adapter.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/menu/constants.js");
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @typedef {{
 *   top: number,
 *   right: number,
 *   bottom: number,
 *   left: number
 * }}
 */
let AnchorMargin;

/* eslint-disable no-unused-vars */
/**
 * @typedef {{
 *   viewport: { width: number, height: number },
 *   viewportDistance: {top: number, right: number, bottom: number, left: number},
 *   anchorHeight: number,
 *   anchorWidth: number,
 *   menuHeight: number,
 *   menuWidth: number,
 * }}
 */
let AutoLayoutMeasurements;
/* eslint-enable no-unused-vars */





/**
 * @extends {MDCFoundation<!MDCMenuAdapter>}
 */
class MDCMenuFoundation extends _material_base_foundation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  /** @return enum{cssClasses} */
  static get cssClasses() {
    return _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"];
  }

  /** @return enum{strings} */
  static get strings() {
    return _constants__WEBPACK_IMPORTED_MODULE_2__["strings"];
  }

  /** @return enum{numbers} */
  static get numbers() {
    return _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"];
  }

  /** @return enum{number} */
  static get Corner() {
    return _constants__WEBPACK_IMPORTED_MODULE_2__["Corner"];
  }

  /**
   * {@see MDCMenuAdapter} for typing information on parameters and return
   * types.
   * @return {!MDCMenuAdapter}
   */
  static get defaultAdapter() {
    return /** @type {!MDCMenuAdapter} */ ({
      addClass: () => {},
      removeClass: () => {},
      hasClass: () => false,
      hasNecessaryDom: () => false,
      getAttributeForEventTarget: () => {},
      getInnerDimensions: () => ({}),
      hasAnchor: () => false,
      getAnchorDimensions: () => ({}),
      getWindowDimensions: () => ({}),
      getNumberOfItems: () => 0,
      registerInteractionHandler: () => {},
      deregisterInteractionHandler: () => {},
      registerBodyClickHandler: () => {},
      deregisterBodyClickHandler: () => {},
      getIndexForEventTarget: () => 0,
      notifySelected: () => {},
      notifyCancel: () => {},
      saveFocus: () => {},
      restoreFocus: () => {},
      isFocused: () => false,
      focus: () => {},
      getFocusedItemIndex: () => -1,
      focusItemAtIndex: () => {},
      isRtl: () => false,
      setTransformOrigin: () => {},
      setPosition: () => {},
      setMaxHeight: () => {},
      setAttrForOptionAtIndex: () => {},
      rmAttrForOptionAtIndex: () => {},
      addClassForOptionAtIndex: () => {},
      rmClassForOptionAtIndex: () => {},
    });
  }

  /** @param {!MDCMenuAdapter} adapter */
  constructor(adapter) {
    super(Object.assign(MDCMenuFoundation.defaultAdapter, adapter));

    /** @private {function(!Event)} */
    this.clickHandler_ = (evt) => this.handlePossibleSelected_(evt);
    /** @private {function(!Event)} */
    this.keydownHandler_ = (evt) => this.handleKeyboardDown_(evt);
    /** @private {function(!Event)} */
    this.keyupHandler_ = (evt) => this.handleKeyboardUp_(evt);
    /** @private {function(!Event)} */
    this.documentClickHandler_ = (evt) => this.handleDocumentClick_(evt);
    /** @private {boolean} */
    this.isOpen_ = false;
    /** @private {number} */
    this.openAnimationEndTimerId_ = 0;
    /** @private {number} */
    this.closeAnimationEndTimerId_ = 0;
    /** @private {number} */
    this.selectedTriggerTimerId_ = 0;
    /** @private {number} */
    this.animationRequestId_ = 0;
    /** @private {!{ width: number, height: number }} */
    this.dimensions_;
    /** @private {number} */
    this.itemHeight_;
    /** @private {Corner} */
    this.anchorCorner_ = _constants__WEBPACK_IMPORTED_MODULE_2__["Corner"].TOP_START;
    /** @private {AnchorMargin} */
    this.anchorMargin_ = {top: 0, right: 0, bottom: 0, left: 0};
    /** @private {?AutoLayoutMeasurements} */
    this.measures_ = null;
    /** @private {number} */
    this.selectedIndex_ = -1;
    /** @private {boolean} */
    this.rememberSelection_ = false;
    /** @private {boolean} */
    this.quickOpen_ = false;

    // A keyup event on the menu needs to have a corresponding keydown
    // event on the menu. If the user opens the menu with a keydown event on a
    // button, the menu will only get the key up event causing buggy behavior with selected elements.
    /** @private {boolean} */
    this.keyDownWithinMenu_ = false;
  }

  init() {
    const {ROOT, OPEN} = MDCMenuFoundation.cssClasses;

    if (!this.adapter_.hasClass(ROOT)) {
      throw new Error(`${ROOT} class required in root element.`);
    }

    if (!this.adapter_.hasNecessaryDom()) {
      throw new Error(`Required DOM nodes missing in ${ROOT} component.`);
    }

    if (this.adapter_.hasClass(OPEN)) {
      this.isOpen_ = true;
    }

    this.adapter_.registerInteractionHandler('click', this.clickHandler_);
    this.adapter_.registerInteractionHandler('keyup', this.keyupHandler_);
    this.adapter_.registerInteractionHandler('keydown', this.keydownHandler_);
  }

  destroy() {
    clearTimeout(this.selectedTriggerTimerId_);
    clearTimeout(this.openAnimationEndTimerId_);
    clearTimeout(this.closeAnimationEndTimerId_);
    // Cancel any currently running animations.
    cancelAnimationFrame(this.animationRequestId_);
    this.adapter_.deregisterInteractionHandler('click', this.clickHandler_);
    this.adapter_.deregisterInteractionHandler('keyup', this.keyupHandler_);
    this.adapter_.deregisterInteractionHandler('keydown', this.keydownHandler_);
    this.adapter_.deregisterBodyClickHandler(this.documentClickHandler_);
  }

  /**
   * @param {!Corner} corner Default anchor corner alignment of top-left menu corner.
   */
  setAnchorCorner(corner) {
    this.anchorCorner_ = corner;
  }

  /**
   * @param {!AnchorMargin} margin 4-plet of margins from anchor.
   */
  setAnchorMargin(margin) {
    this.anchorMargin_.top = typeof margin.top === 'number' ? margin.top : 0;
    this.anchorMargin_.right = typeof margin.right === 'number' ? margin.right : 0;
    this.anchorMargin_.bottom = typeof margin.bottom === 'number' ? margin.bottom : 0;
    this.anchorMargin_.left = typeof margin.left === 'number' ? margin.left : 0;
  }

  /** @param {boolean} rememberSelection */
  setRememberSelection(rememberSelection) {
    this.rememberSelection_ = rememberSelection;
    this.setSelectedIndex(-1);
  }

  /** @param {boolean} quickOpen */
  setQuickOpen(quickOpen) {
    this.quickOpen_ = quickOpen;
  }

  /**
   * @param {?number} focusIndex
   * @private
   */
  focusOnOpen_(focusIndex) {
    if (focusIndex === null) {
      // If this instance of MDCMenu remembers selections, and the user has
      // made a selection, then focus the last selected item
      if (this.rememberSelection_ && this.selectedIndex_ >= 0) {
        this.adapter_.focusItemAtIndex(this.selectedIndex_);
        return;
      }

      this.adapter_.focus();
      // If that doesn't work, focus first item instead.
      if (!this.adapter_.isFocused()) {
        this.adapter_.focusItemAtIndex(0);
      }
    } else {
      this.adapter_.focusItemAtIndex(focusIndex);
    }
  }

  /**
   * Handle clicks and cancel the menu if not a child list-item
   * @param {!Event} evt
   * @private
   */
  handleDocumentClick_(evt) {
    let el = evt.target;

    while (el && el !== document.documentElement) {
      if (this.adapter_.getIndexForEventTarget(el) !== -1) {
        return;
      }
      el = el.parentNode;
    }

    this.adapter_.notifyCancel();
    this.close(evt);
  };

  /**
   * Handle keys that we want to repeat on hold (tab and arrows).
   * @param {!Event} evt
   * @return {boolean}
   * @private
   */
  handleKeyboardDown_(evt) {
    // Do nothing if Alt, Ctrl or Meta are pressed.
    if (evt.altKey || evt.ctrlKey || evt.metaKey) {
      return true;
    }

    const {keyCode, key, shiftKey} = evt;
    const isTab = key === 'Tab' || keyCode === 9;
    const isArrowUp = key === 'ArrowUp' || keyCode === 38;
    const isArrowDown = key === 'ArrowDown' || keyCode === 40;
    const isSpace = key === 'Space' || keyCode === 32;
    const isEnter = key === 'Enter' || keyCode === 13;
    // The menu needs to know if the keydown event was triggered on the menu
    this.keyDownWithinMenu_ = isEnter || isSpace;

    const focusedItemIndex = this.adapter_.getFocusedItemIndex();
    const lastItemIndex = this.adapter_.getNumberOfItems() - 1;

    if (shiftKey && isTab && focusedItemIndex === 0) {
      this.adapter_.focusItemAtIndex(lastItemIndex);
      evt.preventDefault();
      return false;
    }

    if (!shiftKey && isTab && focusedItemIndex === lastItemIndex) {
      this.adapter_.focusItemAtIndex(0);
      evt.preventDefault();
      return false;
    }

    // Ensure Arrow{Up,Down} and space do not cause inadvertent scrolling
    if (isArrowUp || isArrowDown || isSpace) {
      evt.preventDefault();
    }

    if (isArrowUp) {
      if (focusedItemIndex === 0 || this.adapter_.isFocused()) {
        this.adapter_.focusItemAtIndex(lastItemIndex);
      } else {
        this.adapter_.focusItemAtIndex(focusedItemIndex - 1);
      }
    } else if (isArrowDown) {
      if (focusedItemIndex === lastItemIndex || this.adapter_.isFocused()) {
        this.adapter_.focusItemAtIndex(0);
      } else {
        this.adapter_.focusItemAtIndex(focusedItemIndex + 1);
      }
    }

    return true;
  }

  /**
   * Handle keys that we don't want to repeat on hold (Enter, Space, Escape).
   * @param {!Event} evt
   * @return {boolean}
   * @private
   */
  handleKeyboardUp_(evt) {
    // Do nothing if Alt, Ctrl or Meta are pressed.
    if (evt.altKey || evt.ctrlKey || evt.metaKey) {
      return true;
    }

    const {keyCode, key} = evt;
    const isEnter = key === 'Enter' || keyCode === 13;
    const isSpace = key === 'Space' || keyCode === 32;
    const isEscape = key === 'Escape' || keyCode === 27;

    if (isEnter || isSpace) {
      // If the keydown event didn't occur on the menu, then it should
      // disregard the possible selected event.
      if (this.keyDownWithinMenu_) {
        this.handlePossibleSelected_(evt);
      }
      this.keyDownWithinMenu_ = false;
    }

    if (isEscape) {
      this.adapter_.notifyCancel();
      this.close();
    }

    return true;
  }

  /**
   * @param {!Event} evt
   * @private
   */
  handlePossibleSelected_(evt) {
    if (this.adapter_.getAttributeForEventTarget(evt.target, _constants__WEBPACK_IMPORTED_MODULE_2__["strings"].ARIA_DISABLED_ATTR) === 'true') {
      return;
    }
    const targetIndex = this.adapter_.getIndexForEventTarget(evt.target);
    if (targetIndex < 0) {
      return;
    }
    // Debounce multiple selections
    if (this.selectedTriggerTimerId_) {
      return;
    }
    this.selectedTriggerTimerId_ = setTimeout(() => {
      this.selectedTriggerTimerId_ = 0;
      this.close();
      if (this.rememberSelection_) {
        this.setSelectedIndex(targetIndex);
      }
      this.adapter_.notifySelected({index: targetIndex});
    }, _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"].SELECTED_TRIGGER_DELAY);
  }

  /**
   * @return {AutoLayoutMeasurements} Measurements used to position menu popup.
   */
  getAutoLayoutMeasurements_() {
    const anchorRect = this.adapter_.getAnchorDimensions();
    const viewport = this.adapter_.getWindowDimensions();

    return {
      viewport: viewport,
      viewportDistance: {
        top: anchorRect.top,
        right: viewport.width - anchorRect.right,
        left: anchorRect.left,
        bottom: viewport.height - anchorRect.bottom,
      },
      anchorHeight: anchorRect.height,
      anchorWidth: anchorRect.width,
      menuHeight: this.dimensions_.height,
      menuWidth: this.dimensions_.width,
    };
  }

  /**
   * Computes the corner of the anchor from which to animate and position the menu.
   * @return {Corner}
   * @private
   */
  getOriginCorner_() {
    // Defaults: open from the top left.
    let corner = _constants__WEBPACK_IMPORTED_MODULE_2__["Corner"].TOP_LEFT;

    const {viewportDistance, anchorHeight, anchorWidth, menuHeight, menuWidth} = this.measures_;
    const isBottomAligned = Boolean(this.anchorCorner_ & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM);
    const availableTop = isBottomAligned ? viewportDistance.top + anchorHeight + this.anchorMargin_.bottom
      : viewportDistance.top + this.anchorMargin_.top;
    const availableBottom = isBottomAligned ? viewportDistance.bottom - this.anchorMargin_.bottom
      : viewportDistance.bottom + anchorHeight - this.anchorMargin_.top;

    const topOverflow = menuHeight - availableTop;
    const bottomOverflow = menuHeight - availableBottom;
    if (bottomOverflow > 0 && topOverflow < bottomOverflow) {
      corner |= _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM;
    }

    const isRtl = this.adapter_.isRtl();
    const isFlipRtl = Boolean(this.anchorCorner_ & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].FLIP_RTL);
    const avoidHorizontalOverlap = Boolean(this.anchorCorner_ & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].RIGHT);
    const isAlignedRight = (avoidHorizontalOverlap && !isRtl) ||
      (!avoidHorizontalOverlap && isFlipRtl && isRtl);
    const availableLeft = isAlignedRight ? viewportDistance.left + anchorWidth + this.anchorMargin_.right :
      viewportDistance.left + this.anchorMargin_.left;
    const availableRight = isAlignedRight ? viewportDistance.right - this.anchorMargin_.right :
      viewportDistance.right + anchorWidth - this.anchorMargin_.left;

    const leftOverflow = menuWidth - availableLeft;
    const rightOverflow = menuWidth - availableRight;

    if ((leftOverflow < 0 && isAlignedRight && isRtl) ||
        (avoidHorizontalOverlap && !isAlignedRight && leftOverflow < 0) ||
        (rightOverflow > 0 && leftOverflow < rightOverflow)) {
      corner |= _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].RIGHT;
    }

    return corner;
  }

  /**
   * @param {Corner} corner Origin corner of the menu.
   * @return {number} Horizontal offset of menu origin corner from corresponding anchor corner.
   * @private
   */
  getHorizontalOriginOffset_(corner) {
    const {anchorWidth} = this.measures_;
    const isRightAligned = Boolean(corner & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].RIGHT);
    const avoidHorizontalOverlap = Boolean(this.anchorCorner_ & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].RIGHT);
    let x = 0;
    if (isRightAligned) {
      const rightOffset = avoidHorizontalOverlap ? anchorWidth - this.anchorMargin_.left : this.anchorMargin_.right;
      x = rightOffset;
    } else {
      const leftOffset = avoidHorizontalOverlap ? anchorWidth - this.anchorMargin_.right : this.anchorMargin_.left;
      x = leftOffset;
    }
    return x;
  }

  /**
   * @param {Corner} corner Origin corner of the menu.
   * @return {number} Vertical offset of menu origin corner from corresponding anchor corner.
   * @private
   */
  getVerticalOriginOffset_(corner) {
    const {viewport, viewportDistance, anchorHeight, menuHeight} = this.measures_;
    const isBottomAligned = Boolean(corner & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM);
    const {MARGIN_TO_EDGE} = MDCMenuFoundation.numbers;
    const avoidVerticalOverlap = Boolean(this.anchorCorner_ & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM);
    const canOverlapVertically = !avoidVerticalOverlap;
    let y = 0;

    if (isBottomAligned) {
      y = avoidVerticalOverlap ? anchorHeight - this.anchorMargin_.top : -this.anchorMargin_.bottom;
      // adjust for when menu can overlap anchor, but too tall to be aligned to bottom
      // anchor corner. Bottom margin is ignored in such cases.
      if (canOverlapVertically && menuHeight > viewportDistance.top + anchorHeight) {
        y = -(Math.min(menuHeight, viewport.height - MARGIN_TO_EDGE) - (viewportDistance.top + anchorHeight));
      }
    } else {
      y = avoidVerticalOverlap ? (anchorHeight + this.anchorMargin_.bottom) : this.anchorMargin_.top;
      // adjust for when menu can overlap anchor, but too tall to be aligned to top
      // anchor corners. Top margin is ignored in that case.
      if (canOverlapVertically && menuHeight > viewportDistance.bottom + anchorHeight) {
        y = -(Math.min(menuHeight, viewport.height - MARGIN_TO_EDGE) - (viewportDistance.bottom + anchorHeight));
      }
    }
    return y;
  }

  /**
   * @param {Corner} corner Origin corner of the menu.
   * @return {number} Maximum height of the menu, based on available space. 0 indicates should not be set.
   * @private
   */
  getMenuMaxHeight_(corner) {
    let maxHeight = 0;
    const {viewportDistance} = this.measures_;
    const isBottomAligned = Boolean(corner & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM);

    // When maximum height is not specified, it is handled from css.
    if (this.anchorCorner_ & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM) {
      if (isBottomAligned) {
        maxHeight = viewportDistance.top + this.anchorMargin_.top;
      } else {
        maxHeight = viewportDistance.bottom - this.anchorMargin_.bottom;
      }
    }

    return maxHeight;
  }

  /** @private */
  autoPosition_() {
    if (!this.adapter_.hasAnchor()) {
      return;
    }

    // Compute measurements for autoposition methods reuse.
    this.measures_ = this.getAutoLayoutMeasurements_();

    const corner = this.getOriginCorner_();
    const maxMenuHeight = this.getMenuMaxHeight_(corner);
    let verticalAlignment = (corner & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM) ? 'bottom' : 'top';
    let horizontalAlignment = (corner & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].RIGHT) ? 'right' : 'left';
    const horizontalOffset = this.getHorizontalOriginOffset_(corner);
    const verticalOffset = this.getVerticalOriginOffset_(corner);
    const position = {
      [horizontalAlignment]: horizontalOffset ? horizontalOffset + 'px' : '0',
      [verticalAlignment]: verticalOffset ? verticalOffset + 'px' : '0',
    };
    const {anchorWidth, menuHeight, menuWidth} = this.measures_;
    // Center align when anchor width is comparable or greater than menu, otherwise keep corner.
    if (anchorWidth / menuWidth > _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"].ANCHOR_TO_MENU_WIDTH_RATIO) {
      horizontalAlignment = 'center';
    }

    // Adjust vertical origin when menu is positioned with significant offset from anchor. This is done so that
    // scale animation is "anchored" on the anchor.
    if (!(this.anchorCorner_ & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM) &&
        Math.abs(verticalOffset / menuHeight) > _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"].OFFSET_TO_MENU_HEIGHT_RATIO) {
      const verticalOffsetPercent = Math.abs(verticalOffset / menuHeight) * 100;
      const originPercent = (corner & _constants__WEBPACK_IMPORTED_MODULE_2__["CornerBit"].BOTTOM) ? 100 - verticalOffsetPercent : verticalOffsetPercent;
      verticalAlignment = Math.round(originPercent * 100) / 100 + '%';
    }

    this.adapter_.setTransformOrigin(`${horizontalAlignment} ${verticalAlignment}`);
    this.adapter_.setPosition(position);
    this.adapter_.setMaxHeight(maxMenuHeight ? maxMenuHeight + 'px' : '');

    // Clear measures after positioning is complete.
    this.measures_ = null;
  }

  /**
   * Open the menu.
   * @param {{focusIndex: ?number}=} options
   */
  open({focusIndex = null} = {}) {
    this.adapter_.saveFocus();

    if (!this.quickOpen_) {
      this.adapter_.addClass(MDCMenuFoundation.cssClasses.ANIMATING_OPEN);
    }

    this.animationRequestId_ = requestAnimationFrame(() => {
      this.dimensions_ = this.adapter_.getInnerDimensions();
      this.autoPosition_();
      this.adapter_.addClass(MDCMenuFoundation.cssClasses.OPEN);
      this.focusOnOpen_(focusIndex);
      this.adapter_.registerBodyClickHandler(this.documentClickHandler_);
      if (!this.quickOpen_) {
        this.openAnimationEndTimerId_ = setTimeout(() => {
          this.openAnimationEndTimerId_ = 0;
          this.adapter_.removeClass(MDCMenuFoundation.cssClasses.ANIMATING_OPEN);
        }, _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"].TRANSITION_OPEN_DURATION);
      }
    });
    this.isOpen_ = true;
  }

  /**
   * Closes the menu.
   * @param {Event=} evt
   */
  close(evt = null) {
    const targetIsDisabled = evt ?
      this.adapter_.getAttributeForEventTarget(evt.target, _constants__WEBPACK_IMPORTED_MODULE_2__["strings"].ARIA_DISABLED_ATTR) === 'true' :
      false;

    if (targetIsDisabled) {
      return;
    }

    this.adapter_.deregisterBodyClickHandler(this.documentClickHandler_);

    if (!this.quickOpen_) {
      this.adapter_.addClass(MDCMenuFoundation.cssClasses.ANIMATING_CLOSED);
    }

    requestAnimationFrame(() => {
      this.adapter_.removeClass(MDCMenuFoundation.cssClasses.OPEN);
      if (!this.quickOpen_) {
        this.closeAnimationEndTimerId_ = setTimeout(() => {
          this.closeAnimationEndTimerId_ = 0;
          this.adapter_.removeClass(MDCMenuFoundation.cssClasses.ANIMATING_CLOSED);
        }, _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"].TRANSITION_CLOSE_DURATION);
      }
    });
    this.isOpen_ = false;
    this.adapter_.restoreFocus();
  }

  /** @return {boolean} */
  isOpen() {
    return this.isOpen_;
  }

  /** @return {number} */
  getSelectedIndex() {
    return this.selectedIndex_;
  }

  /**
   * @param {number} index Index of the item to set as selected.
   */
  setSelectedIndex(index) {
    if (index === this.selectedIndex_) {
      return;
    }

    const prevSelectedIndex = this.selectedIndex_;
    if (prevSelectedIndex >= 0) {
      this.adapter_.rmAttrForOptionAtIndex(prevSelectedIndex, 'aria-selected');
      this.adapter_.rmClassForOptionAtIndex(prevSelectedIndex, _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].SELECTED_LIST_ITEM);
    }

    this.selectedIndex_ = index >= 0 && index < this.adapter_.getNumberOfItems() ? index : -1;
    if (this.selectedIndex_ >= 0) {
      this.adapter_.setAttrForOptionAtIndex(this.selectedIndex_, 'aria-selected', 'true');
      this.adapter_.addClassForOptionAtIndex(this.selectedIndex_, _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"].SELECTED_LIST_ITEM);
    }
  }
}




/***/ }),

/***/ "./node_modules/@material/menu/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@material/menu/index.js ***!
  \**********************************************/
/*! exports provided: MDCMenuFoundation, MDCMenu, AnchorMargin, Corner, CornerBit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCMenu", function() { return MDCMenu; });
/* harmony import */ var _material_base_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/base/component */ "./node_modules/@material/base/component.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "./node_modules/@material/menu/util.js");
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/menu/foundation.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCMenuFoundation", function() { return _foundation__WEBPACK_IMPORTED_MODULE_2__["MDCMenuFoundation"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnchorMargin", function() { return _foundation__WEBPACK_IMPORTED_MODULE_2__["AnchorMargin"]; });

/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/menu/constants.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Corner", function() { return _constants__WEBPACK_IMPORTED_MODULE_3__["Corner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CornerBit", function() { return _constants__WEBPACK_IMPORTED_MODULE_3__["CornerBit"]; });

/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * @extends MDCComponent<!MDCMenuFoundation>
 */
class MDCMenu extends _material_base_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
  /** @param {...?} args */
  constructor(...args) {
    super(...args);
    /** @private {!Element} */
    this.previousFocus_;
  }

  /**
   * @param {!Element} root
   * @return {!MDCMenu}
   */
  static attachTo(root) {
    return new MDCMenu(root);
  }

  /** @return {boolean} */
  get open() {
    return this.foundation_.isOpen();
  }

  /** @param {boolean} value */
  set open(value) {
    if (value) {
      this.foundation_.open();
    } else {
      this.foundation_.close();
    }
  }

  /** @param {{focusIndex: ?number}=} options */
  show({focusIndex = null} = {}) {
    this.foundation_.open({focusIndex: focusIndex});
  }

  hide() {
    this.foundation_.close();
  }

  /**
   * @param {Corner} corner Default anchor corner alignment of top-left
   *     menu corner.
   */
  setAnchorCorner(corner) {
    this.foundation_.setAnchorCorner(corner);
  }

  /**
   * @param {AnchorMargin} margin
   */
  setAnchorMargin(margin) {
    this.foundation_.setAnchorMargin(margin);
  }

  /**
   * Return the item container element inside the component.
   * @return {?Element}
   */
  get itemsContainer_() {
    return this.root_.querySelector(_foundation__WEBPACK_IMPORTED_MODULE_2__["MDCMenuFoundation"].strings.ITEMS_SELECTOR);
  }

  /**
   * Return the items within the menu. Note that this only contains the set of elements within
   * the items container that are proper list items, and not supplemental / presentational DOM
   * elements.
   * @return {!Array<!Element>}
   */
  get items() {
    const {itemsContainer_: itemsContainer} = this;
    return [].slice.call(itemsContainer.querySelectorAll('.mdc-list-item[role]'));
  }

  /**
   * Return the item within the menu that is selected.
   * @param {number} index
   * @return {?Element}
   */
  getOptionByIndex(index) {
    const items = this.items;

    if (index < items.length) {
      return this.items[index];
    } else {
      return null;
    }
  }

  /** @param {number} index */
  set selectedItemIndex(index) {
    this.foundation_.setSelectedIndex(index);
  }

  /** @return {number} */
  get selectedItemIndex() {
    return this.foundation_.getSelectedIndex();
  }

  /** @param {!boolean} rememberSelection */
  set rememberSelection(rememberSelection) {
    this.foundation_.setRememberSelection(rememberSelection);
  }

  /** @param {boolean} quickOpen */
  set quickOpen(quickOpen) {
    this.foundation_.setQuickOpen(quickOpen);
  }

  /** @return {!MDCMenuFoundation} */
  getDefaultFoundation() {
    return new _foundation__WEBPACK_IMPORTED_MODULE_2__["MDCMenuFoundation"]({
      addClass: (className) => this.root_.classList.add(className),
      removeClass: (className) => this.root_.classList.remove(className),
      hasClass: (className) => this.root_.classList.contains(className),
      hasNecessaryDom: () => Boolean(this.itemsContainer_),
      getAttributeForEventTarget: (target, attributeName) => target.getAttribute(attributeName),
      getInnerDimensions: () => {
        const {itemsContainer_: itemsContainer} = this;
        return {width: itemsContainer.offsetWidth, height: itemsContainer.offsetHeight};
      },
      hasAnchor: () => this.root_.parentElement && this.root_.parentElement.classList.contains('mdc-menu-anchor'),
      getAnchorDimensions: () => this.root_.parentElement.getBoundingClientRect(),
      getWindowDimensions: () => {
        return {width: window.innerWidth, height: window.innerHeight};
      },
      getNumberOfItems: () => this.items.length,
      registerInteractionHandler: (type, handler) => this.root_.addEventListener(type, handler),
      deregisterInteractionHandler: (type, handler) => this.root_.removeEventListener(type, handler),
      registerBodyClickHandler: (handler) => document.body.addEventListener('click', handler),
      deregisterBodyClickHandler: (handler) => document.body.removeEventListener('click', handler),
      getIndexForEventTarget: (target) => this.items.indexOf(target),
      notifySelected: (evtData) => this.emit(_foundation__WEBPACK_IMPORTED_MODULE_2__["MDCMenuFoundation"].strings.SELECTED_EVENT, {
        index: evtData.index,
        item: this.items[evtData.index],
      }),
      notifyCancel: () => this.emit(_foundation__WEBPACK_IMPORTED_MODULE_2__["MDCMenuFoundation"].strings.CANCEL_EVENT, {}),
      saveFocus: () => {
        this.previousFocus_ = document.activeElement;
      },
      restoreFocus: () => {
        if (this.previousFocus_ && this.previousFocus_.focus) {
          this.previousFocus_.focus();
        }
      },
      isFocused: () => document.activeElement === this.root_,
      focus: () => this.root_.focus(),
      getFocusedItemIndex: () => this.items.indexOf(document.activeElement),
      focusItemAtIndex: (index) => this.items[index].focus(),
      isRtl: () => getComputedStyle(this.root_).getPropertyValue('direction') === 'rtl',
      setTransformOrigin: (origin) => {
        this.root_.style[`${Object(_util__WEBPACK_IMPORTED_MODULE_1__["getTransformPropertyName"])(window)}-origin`] = origin;
      },
      setPosition: (position) => {
        this.root_.style.left = 'left' in position ? position.left : null;
        this.root_.style.right = 'right' in position ? position.right : null;
        this.root_.style.top = 'top' in position ? position.top : null;
        this.root_.style.bottom = 'bottom' in position ? position.bottom : null;
      },
      setMaxHeight: (height) => {
        this.root_.style.maxHeight = height;
      },
      setAttrForOptionAtIndex: (index, attr, value) => this.items[index].setAttribute(attr, value),
      rmAttrForOptionAtIndex: (index, attr) => this.items[index].removeAttribute(attr),
      addClassForOptionAtIndex: (index, className) => this.items[index].classList.add(className),
      rmClassForOptionAtIndex: (index, className) => this.items[index].classList.remove(className),
    });
  }
}




/***/ }),

/***/ "./node_modules/@material/menu/util.js":
/*!*********************************************!*\
  !*** ./node_modules/@material/menu/util.js ***!
  \*********************************************/
/*! exports provided: getTransformPropertyName, clamp, bezierProgress */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTransformPropertyName", function() { return getTransformPropertyName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return clamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bezierProgress", function() { return bezierProgress; });
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @type {string|undefined} */
let storedTransformPropertyName_;

/**
 * Returns the name of the correct transform property to use on the current browser.
 * @param {!Window} globalObj
 * @param {boolean=} forceRefresh
 * @return {string}
 */
function getTransformPropertyName(globalObj, forceRefresh = false) {
  if (storedTransformPropertyName_ === undefined || forceRefresh) {
    const el = globalObj.document.createElement('div');
    const transformPropertyName = ('transform' in el.style ? 'transform' : 'webkitTransform');
    storedTransformPropertyName_ = transformPropertyName;
  }

  return storedTransformPropertyName_;
}

/**
 * Clamps a value between the minimum and the maximum, returning the clamped value.
 * @param {number} value
 * @param {number} min
 * @param {number} max
 * @return {number}
 */
function clamp(value, min = 0, max = 1) {
  return Math.min(max, Math.max(min, value));
}


/**
 * Returns the easing value to apply at time t, for a given cubic bezier curve.
 * Control points P0 and P3 are assumed to be (0,0) and (1,1), respectively.
 * Parameters are as follows:
 * - time: The current time in the animation, scaled between 0 and 1.
 * - x1: The x value of control point P1.
 * - y1: The y value of control point P1.
 * - x2: The x value of control point P2.
 * - y2: The y value of control point P2.
 * @param {number} time
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {number}
 */
function bezierProgress(time, x1, y1, x2, y2) {
  return getBezierCoordinate_(solvePositionFromXValue_(time, x1, x2), y1, y2);
}

/**
 * Compute a single coordinate at a position point between 0 and 1.
 * c1 and c2 are the matching coordinate on control points P1 and P2, respectively.
 * Control points P0 and P3 are assumed to be (0,0) and (1,1), respectively.
 * Adapted from https://github.com/google/closure-library/blob/master/closure/goog/math/bezier.js.
 * @param {number} t
 * @param {number} c1
 * @param {number} c2
 * @return {number}
 */
function getBezierCoordinate_(t, c1, c2) {
  // Special case start and end.
  if (t === 0 || t === 1) {
    return t;
  }

  // Step one - from 4 points to 3
  let ic0 = t * c1;
  let ic1 = c1 + t * (c2 - c1);
  const ic2 = c2 + t * (1 - c2);

  // Step two - from 3 points to 2
  ic0 += t * (ic1 - ic0);
  ic1 += t * (ic2 - ic1);

  // Final step - last point
  return ic0 + t * (ic1 - ic0);
}

/**
 * Project a point onto the Bezier curve, from a given X. Calculates the position t along the curve.
 * Adapted from https://github.com/google/closure-library/blob/master/closure/goog/math/bezier.js.
 * @param {number} xVal
 * @param {number} x1
 * @param {number} x2
 * @return {number}
 */
function solvePositionFromXValue_(xVal, x1, x2) {
  const EPSILON = 1e-6;
  const MAX_ITERATIONS = 8;

  if (xVal <= 0) {
    return 0;
  } else if (xVal >= 1) {
    return 1;
  }

  // Initial estimate of t using linear interpolation.
  let t = xVal;

  // Try gradient descent to solve for t. If it works, it is very fast.
  let tMin = 0;
  let tMax = 1;
  let value = 0;
  for (let i = 0; i < MAX_ITERATIONS; i++) {
    value = getBezierCoordinate_(t, x1, x2);
    const derivative = (getBezierCoordinate_(t + EPSILON, x1, x2) - value) / EPSILON;
    if (Math.abs(value - xVal) < EPSILON) {
      return t;
    } else if (Math.abs(derivative) < EPSILON) {
      break;
    } else {
      if (value < xVal) {
        tMin = t;
      } else {
        tMax = t;
      }
      t -= (value - xVal) / derivative;
    }
  }

  // If the gradient descent got stuck in a local minimum, e.g. because
  // the derivative was close to 0, use a Dichotomy refinement instead.
  // We limit the number of interations to 8.
  for (let i = 0; Math.abs(value - xVal) > EPSILON && i < MAX_ITERATIONS; i++) {
    if (value < xVal) {
      tMin = t;
      t = (t + tMax) / 2;
    } else {
      tMax = t;
      t = (t + tMin) / 2;
    }
    value = getBezierCoordinate_(t, x1, x2);
  }
  return t;
}




/***/ }),

/***/ "./node_modules/@material/ripple/adapter.js":
/*!**************************************************!*\
  !*** ./node_modules/@material/ripple/adapter.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Ripple. Provides an interface for managing
 * - classes
 * - dom
 * - CSS variables
 * - position
 * - dimensions
 * - scroll position
 * - event handlers
 * - unbounded, active and disabled states
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md
 *
 * @record
 */
class MDCRippleAdapter {
  /** @return {boolean} */
  browserSupportsCssVars() {}

  /** @return {boolean} */
  isUnbounded() {}

  /** @return {boolean} */
  isSurfaceActive() {}

  /** @return {boolean} */
  isSurfaceDisabled() {}

  /** @param {string} className */
  addClass(className) {}

  /** @param {string} className */
  removeClass(className) {}

  /** @param {!EventTarget} target */
  containsEventTarget(target) {}

  /**
   * @param {string} evtType
   * @param {!Function} handler
   */
  registerInteractionHandler(evtType, handler) {}

  /**
   * @param {string} evtType
   * @param {!Function} handler
   */
  deregisterInteractionHandler(evtType, handler) {}

  /**
   * @param {string} evtType
   * @param {!Function} handler
   */
  registerDocumentInteractionHandler(evtType, handler) {}

  /**
   * @param {string} evtType
   * @param {!Function} handler
   */
  deregisterDocumentInteractionHandler(evtType, handler) {}

  /**
   * @param {!Function} handler
   */
  registerResizeHandler(handler) {}

  /**
   * @param {!Function} handler
   */
  deregisterResizeHandler(handler) {}

  /**
   * @param {string} varName
   * @param {?number|string} value
   */
  updateCssVariable(varName, value) {}

  /** @return {!ClientRect} */
  computeBoundingRect() {}

  /** @return {{x: number, y: number}} */
  getWindowPageOffset() {}
}

/* harmony default export */ __webpack_exports__["default"] = (MDCRippleAdapter);


/***/ }),

/***/ "./node_modules/@material/ripple/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/@material/ripple/constants.js ***!
  \****************************************************/
/*! exports provided: cssClasses, strings, numbers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssClasses", function() { return cssClasses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strings", function() { return strings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numbers", function() { return numbers; });
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const cssClasses = {
  // Ripple is a special case where the "root" component is really a "mixin" of sorts,
  // given that it's an 'upgrade' to an existing component. That being said it is the root
  // CSS class that all other CSS classes derive from.
  ROOT: 'mdc-ripple-upgraded',
  UNBOUNDED: 'mdc-ripple-upgraded--unbounded',
  BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
  FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
  FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',
};

const strings = {
  VAR_LEFT: '--mdc-ripple-left',
  VAR_TOP: '--mdc-ripple-top',
  VAR_FG_SIZE: '--mdc-ripple-fg-size',
  VAR_FG_SCALE: '--mdc-ripple-fg-scale',
  VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
  VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',
};

const numbers = {
  PADDING: 10,
  INITIAL_ORIGIN_SCALE: 0.6,
  DEACTIVATION_TIMEOUT_MS: 225, // Corresponds to $mdc-ripple-translate-duration (i.e. activation animation duration)
  FG_DEACTIVATION_MS: 150, // Corresponds to $mdc-ripple-fade-out-duration (i.e. deactivation animation duration)
  TAP_DELAY_MS: 300, // Delay between touch and simulated mouse events on touch devices
};




/***/ }),

/***/ "./node_modules/@material/ripple/foundation.js":
/*!*****************************************************!*\
  !*** ./node_modules/@material/ripple/foundation.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _material_base_foundation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/base/foundation */ "./node_modules/@material/base/foundation.js");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./node_modules/@material/ripple/adapter.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/ripple/constants.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./node_modules/@material/ripple/util.js");
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * @typedef {{
 *   isActivated: (boolean|undefined),
 *   hasDeactivationUXRun: (boolean|undefined),
 *   wasActivatedByPointer: (boolean|undefined),
 *   wasElementMadeActive: (boolean|undefined),
 *   activationEvent: Event,
 *   isProgrammatic: (boolean|undefined)
 * }}
 */
let ActivationStateType;

/**
 * @typedef {{
 *   activate: (string|undefined),
 *   deactivate: (string|undefined),
 *   focus: (string|undefined),
 *   blur: (string|undefined)
 * }}
 */
let ListenerInfoType;

/**
 * @typedef {{
 *   activate: function(!Event),
 *   deactivate: function(!Event),
 *   focus: function(),
 *   blur: function()
 * }}
 */
let ListenersType;

/**
 * @typedef {{
 *   x: number,
 *   y: number
 * }}
 */
let PointType;

// Activation events registered on the root element of each instance for activation
const ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown'];

// Deactivation events registered on documentElement when a pointer-related down event occurs
const POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup'];

// Tracks activations that have occurred on the current frame, to avoid simultaneous nested activations
/** @type {!Array<!EventTarget>} */
let activatedTargets = [];

/**
 * @extends {MDCFoundation<!MDCRippleAdapter>}
 */
class MDCRippleFoundation extends _material_base_foundation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get cssClasses() {
    return _constants__WEBPACK_IMPORTED_MODULE_2__["cssClasses"];
  }

  static get strings() {
    return _constants__WEBPACK_IMPORTED_MODULE_2__["strings"];
  }

  static get numbers() {
    return _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"];
  }

  static get defaultAdapter() {
    return {
      browserSupportsCssVars: () => /* boolean - cached */ {},
      isUnbounded: () => /* boolean */ {},
      isSurfaceActive: () => /* boolean */ {},
      isSurfaceDisabled: () => /* boolean */ {},
      addClass: (/* className: string */) => {},
      removeClass: (/* className: string */) => {},
      containsEventTarget: (/* target: !EventTarget */) => {},
      registerInteractionHandler: (/* evtType: string, handler: EventListener */) => {},
      deregisterInteractionHandler: (/* evtType: string, handler: EventListener */) => {},
      registerDocumentInteractionHandler: (/* evtType: string, handler: EventListener */) => {},
      deregisterDocumentInteractionHandler: (/* evtType: string, handler: EventListener */) => {},
      registerResizeHandler: (/* handler: EventListener */) => {},
      deregisterResizeHandler: (/* handler: EventListener */) => {},
      updateCssVariable: (/* varName: string, value: string */) => {},
      computeBoundingRect: () => /* ClientRect */ {},
      getWindowPageOffset: () => /* {x: number, y: number} */ {},
    };
  }

  constructor(adapter) {
    super(Object.assign(MDCRippleFoundation.defaultAdapter, adapter));

    /** @private {number} */
    this.layoutFrame_ = 0;

    /** @private {!ClientRect} */
    this.frame_ = /** @type {!ClientRect} */ ({width: 0, height: 0});

    /** @private {!ActivationStateType} */
    this.activationState_ = this.defaultActivationState_();

    /** @private {number} */
    this.initialSize_ = 0;

    /** @private {number} */
    this.maxRadius_ = 0;

    /** @private {function(!Event)} */
    this.activateHandler_ = (e) => this.activate_(e);

    /** @private {function(!Event)} */
    this.deactivateHandler_ = (e) => this.deactivate_(e);

    /** @private {function(?Event=)} */
    this.focusHandler_ = () => requestAnimationFrame(
      () => this.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED)
    );

    /** @private {function(?Event=)} */
    this.blurHandler_ = () => requestAnimationFrame(
      () => this.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED)
    );

    /** @private {!Function} */
    this.resizeHandler_ = () => this.layout();

    /** @private {{left: number, top:number}} */
    this.unboundedCoords_ = {
      left: 0,
      top: 0,
    };

    /** @private {number} */
    this.fgScale_ = 0;

    /** @private {number} */
    this.activationTimer_ = 0;

    /** @private {number} */
    this.fgDeactivationRemovalTimer_ = 0;

    /** @private {boolean} */
    this.activationAnimationHasEnded_ = false;

    /** @private {!Function} */
    this.activationTimerCallback_ = () => {
      this.activationAnimationHasEnded_ = true;
      this.runDeactivationUXLogicIfReady_();
    };

    /** @private {?Event} */
    this.previousActivationEvent_ = null;
  }

  /**
   * We compute this property so that we are not querying information about the client
   * until the point in time where the foundation requests it. This prevents scenarios where
   * client-side feature-detection may happen too early, such as when components are rendered on the server
   * and then initialized at mount time on the client.
   * @return {boolean}
   * @private
   */
  isSupported_() {
    return this.adapter_.browserSupportsCssVars();
  }

  /**
   * @return {!ActivationStateType}
   */
  defaultActivationState_() {
    return {
      isActivated: false,
      hasDeactivationUXRun: false,
      wasActivatedByPointer: false,
      wasElementMadeActive: false,
      activationEvent: null,
      isProgrammatic: false,
    };
  }

  init() {
    if (!this.isSupported_()) {
      return;
    }
    this.registerRootHandlers_();

    const {ROOT, UNBOUNDED} = MDCRippleFoundation.cssClasses;
    requestAnimationFrame(() => {
      this.adapter_.addClass(ROOT);
      if (this.adapter_.isUnbounded()) {
        this.adapter_.addClass(UNBOUNDED);
        // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple
        this.layoutInternal_();
      }
    });
  }

  destroy() {
    if (!this.isSupported_()) {
      return;
    }

    if (this.activationTimer_) {
      clearTimeout(this.activationTimer_);
      this.activationTimer_ = 0;
      const {FG_ACTIVATION} = MDCRippleFoundation.cssClasses;
      this.adapter_.removeClass(FG_ACTIVATION);
    }

    this.deregisterRootHandlers_();
    this.deregisterDeactivationHandlers_();

    const {ROOT, UNBOUNDED} = MDCRippleFoundation.cssClasses;
    requestAnimationFrame(() => {
      this.adapter_.removeClass(ROOT);
      this.adapter_.removeClass(UNBOUNDED);
      this.removeCssVars_();
    });
  }

  /** @private */
  registerRootHandlers_() {
    ACTIVATION_EVENT_TYPES.forEach((type) => {
      this.adapter_.registerInteractionHandler(type, this.activateHandler_);
    });
    this.adapter_.registerInteractionHandler('focus', this.focusHandler_);
    this.adapter_.registerInteractionHandler('blur', this.blurHandler_);

    if (this.adapter_.isUnbounded()) {
      this.adapter_.registerResizeHandler(this.resizeHandler_);
    }
  }

  /**
   * @param {!Event} e
   * @private
   */
  registerDeactivationHandlers_(e) {
    if (e.type === 'keydown') {
      this.adapter_.registerInteractionHandler('keyup', this.deactivateHandler_);
    } else {
      POINTER_DEACTIVATION_EVENT_TYPES.forEach((type) => {
        this.adapter_.registerDocumentInteractionHandler(type, this.deactivateHandler_);
      });
    }
  }

  /** @private */
  deregisterRootHandlers_() {
    ACTIVATION_EVENT_TYPES.forEach((type) => {
      this.adapter_.deregisterInteractionHandler(type, this.activateHandler_);
    });
    this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);
    this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);

    if (this.adapter_.isUnbounded()) {
      this.adapter_.deregisterResizeHandler(this.resizeHandler_);
    }
  }

  /** @private */
  deregisterDeactivationHandlers_() {
    this.adapter_.deregisterInteractionHandler('keyup', this.deactivateHandler_);
    POINTER_DEACTIVATION_EVENT_TYPES.forEach((type) => {
      this.adapter_.deregisterDocumentInteractionHandler(type, this.deactivateHandler_);
    });
  }

  /** @private */
  removeCssVars_() {
    const {strings} = MDCRippleFoundation;
    Object.keys(strings).forEach((k) => {
      if (k.indexOf('VAR_') === 0) {
        this.adapter_.updateCssVariable(strings[k], null);
      }
    });
  }

  /**
   * @param {?Event} e
   * @private
   */
  activate_(e) {
    if (this.adapter_.isSurfaceDisabled()) {
      return;
    }

    const activationState = this.activationState_;
    if (activationState.isActivated) {
      return;
    }

    // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction
    const previousActivationEvent = this.previousActivationEvent_;
    const isSameInteraction = previousActivationEvent && e && previousActivationEvent.type !== e.type;
    if (isSameInteraction) {
      return;
    }

    activationState.isActivated = true;
    activationState.isProgrammatic = e === null;
    activationState.activationEvent = e;
    activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : (
      e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'pointerdown'
    );

    const hasActivatedChild =
      e && activatedTargets.length > 0 && activatedTargets.some((target) => this.adapter_.containsEventTarget(target));
    if (hasActivatedChild) {
      // Immediately reset activation state, while preserving logic that prevents touch follow-on events
      this.resetActivationState_();
      return;
    }

    if (e) {
      activatedTargets.push(/** @type {!EventTarget} */ (e.target));
      this.registerDeactivationHandlers_(e);
    }

    activationState.wasElementMadeActive = this.checkElementMadeActive_(e);
    if (activationState.wasElementMadeActive) {
      this.animateActivation_();
    }

    requestAnimationFrame(() => {
      // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
      activatedTargets = [];

      if (!activationState.wasElementMadeActive && (e.key === ' ' || e.keyCode === 32)) {
        // If space was pressed, try again within an rAF call to detect :active, because different UAs report
        // active states inconsistently when they're called within event handling code:
        // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
        // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
        // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
        // variable is set within a rAF callback for a submit button interaction (#2241).
        activationState.wasElementMadeActive = this.checkElementMadeActive_(e);
        if (activationState.wasElementMadeActive) {
          this.animateActivation_();
        }
      }

      if (!activationState.wasElementMadeActive) {
        // Reset activation state immediately if element was not made active.
        this.activationState_ = this.defaultActivationState_();
      }
    });
  }

  /**
   * @param {?Event} e
   * @private
   */
  checkElementMadeActive_(e) {
    return (e && e.type === 'keydown') ? this.adapter_.isSurfaceActive() : true;
  }

  /**
   * @param {?Event=} event Optional event containing position information.
   */
  activate(event = null) {
    this.activate_(event);
  }

  /** @private */
  animateActivation_() {
    const {VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END} = MDCRippleFoundation.strings;
    const {FG_DEACTIVATION, FG_ACTIVATION} = MDCRippleFoundation.cssClasses;
    const {DEACTIVATION_TIMEOUT_MS} = MDCRippleFoundation.numbers;

    this.layoutInternal_();

    let translateStart = '';
    let translateEnd = '';

    if (!this.adapter_.isUnbounded()) {
      const {startPoint, endPoint} = this.getFgTranslationCoordinates_();
      translateStart = `${startPoint.x}px, ${startPoint.y}px`;
      translateEnd = `${endPoint.x}px, ${endPoint.y}px`;
    }

    this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
    this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
    // Cancel any ongoing activation/deactivation animations
    clearTimeout(this.activationTimer_);
    clearTimeout(this.fgDeactivationRemovalTimer_);
    this.rmBoundedActivationClasses_();
    this.adapter_.removeClass(FG_DEACTIVATION);

    // Force layout in order to re-trigger the animation.
    this.adapter_.computeBoundingRect();
    this.adapter_.addClass(FG_ACTIVATION);
    this.activationTimer_ = setTimeout(() => this.activationTimerCallback_(), DEACTIVATION_TIMEOUT_MS);
  }

  /**
   * @private
   * @return {{startPoint: PointType, endPoint: PointType}}
   */
  getFgTranslationCoordinates_() {
    const {activationEvent, wasActivatedByPointer} = this.activationState_;

    let startPoint;
    if (wasActivatedByPointer) {
      startPoint = Object(_util__WEBPACK_IMPORTED_MODULE_3__["getNormalizedEventCoords"])(
        /** @type {!Event} */ (activationEvent),
        this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect()
      );
    } else {
      startPoint = {
        x: this.frame_.width / 2,
        y: this.frame_.height / 2,
      };
    }
    // Center the element around the start point.
    startPoint = {
      x: startPoint.x - (this.initialSize_ / 2),
      y: startPoint.y - (this.initialSize_ / 2),
    };

    const endPoint = {
      x: (this.frame_.width / 2) - (this.initialSize_ / 2),
      y: (this.frame_.height / 2) - (this.initialSize_ / 2),
    };

    return {startPoint, endPoint};
  }

  /** @private */
  runDeactivationUXLogicIfReady_() {
    // This method is called both when a pointing device is released, and when the activation animation ends.
    // The deactivation animation should only run after both of those occur.
    const {FG_DEACTIVATION} = MDCRippleFoundation.cssClasses;
    const {hasDeactivationUXRun, isActivated} = this.activationState_;
    const activationHasEnded = hasDeactivationUXRun || !isActivated;

    if (activationHasEnded && this.activationAnimationHasEnded_) {
      this.rmBoundedActivationClasses_();
      this.adapter_.addClass(FG_DEACTIVATION);
      this.fgDeactivationRemovalTimer_ = setTimeout(() => {
        this.adapter_.removeClass(FG_DEACTIVATION);
      }, _constants__WEBPACK_IMPORTED_MODULE_2__["numbers"].FG_DEACTIVATION_MS);
    }
  }

  /** @private */
  rmBoundedActivationClasses_() {
    const {FG_ACTIVATION} = MDCRippleFoundation.cssClasses;
    this.adapter_.removeClass(FG_ACTIVATION);
    this.activationAnimationHasEnded_ = false;
    this.adapter_.computeBoundingRect();
  }

  resetActivationState_() {
    this.previousActivationEvent_ = this.activationState_.activationEvent;
    this.activationState_ = this.defaultActivationState_();
    // Touch devices may fire additional events for the same interaction within a short time.
    // Store the previous event until it's safe to assume that subsequent events are for new interactions.
    setTimeout(() => this.previousActivationEvent_ = null, MDCRippleFoundation.numbers.TAP_DELAY_MS);
  }

  /**
   * @param {?Event} e
   * @private
   */
  deactivate_(e) {
    const activationState = this.activationState_;
    // This can happen in scenarios such as when you have a keyup event that blurs the element.
    if (!activationState.isActivated) {
      return;
    }

    const state = /** @type {!ActivationStateType} */ (Object.assign({}, activationState));

    if (activationState.isProgrammatic) {
      const evtObject = null;
      requestAnimationFrame(() => this.animateDeactivation_(evtObject, state));
      this.resetActivationState_();
    } else {
      this.deregisterDeactivationHandlers_();
      requestAnimationFrame(() => {
        this.activationState_.hasDeactivationUXRun = true;
        this.animateDeactivation_(e, state);
        this.resetActivationState_();
      });
    }
  }

  /**
   * @param {?Event=} event Optional event containing position information.
   */
  deactivate(event = null) {
    this.deactivate_(event);
  }

  /**
   * @param {Event} e
   * @param {!ActivationStateType} options
   * @private
   */
  animateDeactivation_(e, {wasActivatedByPointer, wasElementMadeActive}) {
    if (wasActivatedByPointer || wasElementMadeActive) {
      this.runDeactivationUXLogicIfReady_();
    }
  }

  layout() {
    if (this.layoutFrame_) {
      cancelAnimationFrame(this.layoutFrame_);
    }
    this.layoutFrame_ = requestAnimationFrame(() => {
      this.layoutInternal_();
      this.layoutFrame_ = 0;
    });
  }

  /** @private */
  layoutInternal_() {
    this.frame_ = this.adapter_.computeBoundingRect();
    const maxDim = Math.max(this.frame_.height, this.frame_.width);

    // Surface diameter is treated differently for unbounded vs. bounded ripples.
    // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
    // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
    // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
    // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
    // `overflow: hidden`.
    const getBoundedRadius = () => {
      const hypotenuse = Math.sqrt(Math.pow(this.frame_.width, 2) + Math.pow(this.frame_.height, 2));
      return hypotenuse + MDCRippleFoundation.numbers.PADDING;
    };

    this.maxRadius_ = this.adapter_.isUnbounded() ? maxDim : getBoundedRadius();

    // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform
    this.initialSize_ = maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE;
    this.fgScale_ = this.maxRadius_ / this.initialSize_;

    this.updateLayoutCssVars_();
  }

  /** @private */
  updateLayoutCssVars_() {
    const {
      VAR_FG_SIZE, VAR_LEFT, VAR_TOP, VAR_FG_SCALE,
    } = MDCRippleFoundation.strings;

    this.adapter_.updateCssVariable(VAR_FG_SIZE, `${this.initialSize_}px`);
    this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);

    if (this.adapter_.isUnbounded()) {
      this.unboundedCoords_ = {
        left: Math.round((this.frame_.width / 2) - (this.initialSize_ / 2)),
        top: Math.round((this.frame_.height / 2) - (this.initialSize_ / 2)),
      };

      this.adapter_.updateCssVariable(VAR_LEFT, `${this.unboundedCoords_.left}px`);
      this.adapter_.updateCssVariable(VAR_TOP, `${this.unboundedCoords_.top}px`);
    }
  }

  /** @param {boolean} unbounded */
  setUnbounded(unbounded) {
    const {UNBOUNDED} = MDCRippleFoundation.cssClasses;
    if (unbounded) {
      this.adapter_.addClass(UNBOUNDED);
    } else {
      this.adapter_.removeClass(UNBOUNDED);
    }
  }
}

/* harmony default export */ __webpack_exports__["default"] = (MDCRippleFoundation);


/***/ }),

/***/ "./node_modules/@material/ripple/index.js":
/*!************************************************!*\
  !*** ./node_modules/@material/ripple/index.js ***!
  \************************************************/
/*! exports provided: MDCRipple, MDCRippleFoundation, RippleCapableSurface, util */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCRipple", function() { return MDCRipple; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RippleCapableSurface", function() { return RippleCapableSurface; });
/* harmony import */ var _material_base_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/base/component */ "./node_modules/@material/base/component.js");
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adapter */ "./node_modules/@material/ripple/adapter.js");
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/ripple/foundation.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCRippleFoundation", function() { return _foundation__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./node_modules/@material/ripple/util.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "util", function() { return _util__WEBPACK_IMPORTED_MODULE_3__; });
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/**
 * @extends MDCComponent<!MDCRippleFoundation>
 */
class MDCRipple extends _material_base_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
  /** @param {...?} args */
  constructor(...args) {
    super(...args);

    /** @type {boolean} */
    this.disabled = false;

    /** @private {boolean} */
    this.unbounded_;
  }

  /**
   * @param {!Element} root
   * @param {{isUnbounded: (boolean|undefined)}=} options
   * @return {!MDCRipple}
   */
  static attachTo(root, {isUnbounded = undefined} = {}) {
    const ripple = new MDCRipple(root);
    // Only override unbounded behavior if option is explicitly specified
    if (isUnbounded !== undefined) {
      ripple.unbounded = /** @type {boolean} */ (isUnbounded);
    }
    return ripple;
  }

  /**
   * @param {!RippleCapableSurface} instance
   * @return {!MDCRippleAdapter}
   */
  static createAdapter(instance) {
    const MATCHES = _util__WEBPACK_IMPORTED_MODULE_3__["getMatchesProperty"](HTMLElement.prototype);

    return {
      browserSupportsCssVars: () => _util__WEBPACK_IMPORTED_MODULE_3__["supportsCssVariables"](window),
      isUnbounded: () => instance.unbounded,
      isSurfaceActive: () => instance.root_[MATCHES](':active'),
      isSurfaceDisabled: () => instance.disabled,
      addClass: (className) => instance.root_.classList.add(className),
      removeClass: (className) => instance.root_.classList.remove(className),
      containsEventTarget: (target) => instance.root_.contains(target),
      registerInteractionHandler: (evtType, handler) =>
        instance.root_.addEventListener(evtType, handler, _util__WEBPACK_IMPORTED_MODULE_3__["applyPassive"]()),
      deregisterInteractionHandler: (evtType, handler) =>
        instance.root_.removeEventListener(evtType, handler, _util__WEBPACK_IMPORTED_MODULE_3__["applyPassive"]()),
      registerDocumentInteractionHandler: (evtType, handler) =>
        document.documentElement.addEventListener(evtType, handler, _util__WEBPACK_IMPORTED_MODULE_3__["applyPassive"]()),
      deregisterDocumentInteractionHandler: (evtType, handler) =>
        document.documentElement.removeEventListener(evtType, handler, _util__WEBPACK_IMPORTED_MODULE_3__["applyPassive"]()),
      registerResizeHandler: (handler) => window.addEventListener('resize', handler),
      deregisterResizeHandler: (handler) => window.removeEventListener('resize', handler),
      updateCssVariable: (varName, value) => instance.root_.style.setProperty(varName, value),
      computeBoundingRect: () => instance.root_.getBoundingClientRect(),
      getWindowPageOffset: () => ({x: window.pageXOffset, y: window.pageYOffset}),
    };
  }

  /** @return {boolean} */
  get unbounded() {
    return this.unbounded_;
  }

  /** @param {boolean} unbounded */
  set unbounded(unbounded) {
    this.unbounded_ = Boolean(unbounded);
    this.setUnbounded_();
  }

  /**
   * Closure Compiler throws an access control error when directly accessing a
   * protected or private property inside a getter/setter, like unbounded above.
   * By accessing the protected property inside a method, we solve that problem.
   * That's why this function exists.
   * @private
   */
  setUnbounded_() {
    this.foundation_.setUnbounded(this.unbounded_);
  }

  activate() {
    this.foundation_.activate();
  }

  deactivate() {
    this.foundation_.deactivate();
  }

  layout() {
    this.foundation_.layout();
  }

  /** @return {!MDCRippleFoundation} */
  getDefaultFoundation() {
    return new _foundation__WEBPACK_IMPORTED_MODULE_2__["default"](MDCRipple.createAdapter(this));
  }

  initialSyncWithDOM() {
    this.unbounded = 'mdcRippleIsUnbounded' in this.root_.dataset;
  }
}

/**
 * See Material Design spec for more details on when to use ripples.
 * https://material.io/guidelines/motion/choreography.html#choreography-creation
 * @record
 */
class RippleCapableSurface {}

/** @protected {!Element} */
RippleCapableSurface.prototype.root_;

/**
 * Whether or not the ripple bleeds out of the bounds of the element.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.unbounded;

/**
 * Whether or not the ripple is attached to a disabled component.
 * @type {boolean|undefined}
 */
RippleCapableSurface.prototype.disabled;




/***/ }),

/***/ "./node_modules/@material/ripple/util.js":
/*!***********************************************!*\
  !*** ./node_modules/@material/ripple/util.js ***!
  \***********************************************/
/*! exports provided: supportsCssVariables, applyPassive, getMatchesProperty, getNormalizedEventCoords */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "supportsCssVariables", function() { return supportsCssVariables; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyPassive", function() { return applyPassive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatchesProperty", function() { return getMatchesProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNormalizedEventCoords", function() { return getNormalizedEventCoords; });
/**
 * @license
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Stores result from supportsCssVariables to avoid redundant processing to detect CSS custom variable support.
 * @private {boolean|undefined}
 */
let supportsCssVariables_;

/**
 * Stores result from applyPassive to avoid redundant processing to detect passive event listener support.
 * @private {boolean|undefined}
 */
let supportsPassive_;

/**
 * @param {!Window} windowObj
 * @return {boolean}
 */
function detectEdgePseudoVarBug(windowObj) {
  // Detect versions of Edge with buggy var() support
  // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/
  const document = windowObj.document;
  const node = document.createElement('div');
  node.className = 'mdc-ripple-surface--test-edge-var-bug';
  document.body.appendChild(node);

  // The bug exists if ::before style ends up propagating to the parent element.
  // Additionally, getComputedStyle returns null in iframes with display: "none" in Firefox,
  // but Firefox is known to support CSS custom properties correctly.
  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397
  const computedStyle = windowObj.getComputedStyle(node);
  const hasPseudoVarBug = computedStyle !== null && computedStyle.borderTopStyle === 'solid';
  node.remove();
  return hasPseudoVarBug;
}

/**
 * @param {!Window} windowObj
 * @param {boolean=} forceRefresh
 * @return {boolean|undefined}
 */

function supportsCssVariables(windowObj, forceRefresh = false) {
  let supportsCssVariables = supportsCssVariables_;
  if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
    return supportsCssVariables;
  }

  const supportsFunctionPresent = windowObj.CSS && typeof windowObj.CSS.supports === 'function';
  if (!supportsFunctionPresent) {
    return;
  }

  const explicitlySupportsCssVars = windowObj.CSS.supports('--css-vars', 'yes');
  // See: https://bugs.webkit.org/show_bug.cgi?id=154669
  // See: README section on Safari
  const weAreFeatureDetectingSafari10plus = (
    windowObj.CSS.supports('(--css-vars: yes)') &&
    windowObj.CSS.supports('color', '#00000000')
  );

  if (explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus) {
    supportsCssVariables = !detectEdgePseudoVarBug(windowObj);
  } else {
    supportsCssVariables = false;
  }

  if (!forceRefresh) {
    supportsCssVariables_ = supportsCssVariables;
  }
  return supportsCssVariables;
}

//
/**
 * Determine whether the current browser supports passive event listeners, and if so, use them.
 * @param {!Window=} globalObj
 * @param {boolean=} forceRefresh
 * @return {boolean|{passive: boolean}}
 */
function applyPassive(globalObj = window, forceRefresh = false) {
  if (supportsPassive_ === undefined || forceRefresh) {
    let isSupported = false;
    try {
      globalObj.document.addEventListener('test', null, {get passive() {
        isSupported = true;
      }});
    } catch (e) { }

    supportsPassive_ = isSupported;
  }

  return supportsPassive_ ? {passive: true} : false;
}

/**
 * @param {!Object} HTMLElementPrototype
 * @return {!Array<string>}
 */
function getMatchesProperty(HTMLElementPrototype) {
  return [
    'webkitMatchesSelector', 'msMatchesSelector', 'matches',
  ].filter((p) => p in HTMLElementPrototype).pop();
}

/**
 * @param {!Event} ev
 * @param {{x: number, y: number}} pageOffset
 * @param {!ClientRect} clientRect
 * @return {{x: number, y: number}}
 */
function getNormalizedEventCoords(ev, pageOffset, clientRect) {
  const {x, y} = pageOffset;
  const documentX = x + clientRect.left;
  const documentY = y + clientRect.top;

  let normalizedX;
  let normalizedY;
  // Determine touch point relative to the ripple container.
  if (ev.type === 'touchstart') {
    normalizedX = ev.changedTouches[0].pageX - documentX;
    normalizedY = ev.changedTouches[0].pageY - documentY;
  } else {
    normalizedX = ev.pageX - documentX;
    normalizedY = ev.pageY - documentY;
  }

  return {x: normalizedX, y: normalizedY};
}




/***/ }),

/***/ "./node_modules/@material/snackbar/constants.js":
/*!******************************************************!*\
  !*** ./node_modules/@material/snackbar/constants.js ***!
  \******************************************************/
/*! exports provided: cssClasses, strings, numbers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssClasses", function() { return cssClasses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strings", function() { return strings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numbers", function() { return numbers; });
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const cssClasses = {
  ROOT: 'mdc-snackbar',
  TEXT: 'mdc-snackbar__text',
  ACTION_WRAPPER: 'mdc-snackbar__action-wrapper',
  ACTION_BUTTON: 'mdc-snackbar__action-button',
  ACTIVE: 'mdc-snackbar--active',
  MULTILINE: 'mdc-snackbar--multiline',
  ACTION_ON_BOTTOM: 'mdc-snackbar--action-on-bottom',
};

const strings = {
  TEXT_SELECTOR: '.mdc-snackbar__text',
  ACTION_WRAPPER_SELECTOR: '.mdc-snackbar__action-wrapper',
  ACTION_BUTTON_SELECTOR: '.mdc-snackbar__action-button',
  SHOW_EVENT: 'MDCSnackbar:show',
  HIDE_EVENT: 'MDCSnackbar:hide',
};

const numbers = {
  MESSAGE_TIMEOUT: 2750,
};


/***/ }),

/***/ "./node_modules/@material/snackbar/foundation.js":
/*!*******************************************************!*\
  !*** ./node_modules/@material/snackbar/foundation.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MDCSnackbarFoundation; });
/* harmony import */ var _material_base_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/base/index */ "./node_modules/@material/base/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./node_modules/@material/snackbar/constants.js");
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




class MDCSnackbarFoundation extends _material_base_index__WEBPACK_IMPORTED_MODULE_0__["MDCFoundation"] {
  static get cssClasses() {
    return _constants__WEBPACK_IMPORTED_MODULE_1__["cssClasses"];
  }

  static get strings() {
    return _constants__WEBPACK_IMPORTED_MODULE_1__["strings"];
  }

  static get defaultAdapter() {
    return {
      addClass: (/* className: string */) => {},
      removeClass: (/* className: string */) => {},
      setAriaHidden: () => {},
      unsetAriaHidden: () => {},
      setActionAriaHidden: () => {},
      unsetActionAriaHidden: () => {},
      setActionText: (/* actionText: string */) => {},
      setMessageText: (/* message: string */) => {},
      setFocus: () => {},
      visibilityIsHidden: () => /* boolean */ false,
      registerCapturedBlurHandler: (/* handler: EventListener */) => {},
      deregisterCapturedBlurHandler: (/* handler: EventListener */) => {},
      registerVisibilityChangeHandler: (/* handler: EventListener */) => {},
      deregisterVisibilityChangeHandler: (/* handler: EventListener */) => {},
      registerCapturedInteractionHandler: (/* evtType: string, handler: EventListener */) => {},
      deregisterCapturedInteractionHandler: (/* evtType: string, handler: EventListener */) => {},
      registerActionClickHandler: (/* handler: EventListener */) => {},
      deregisterActionClickHandler: (/* handler: EventListener */) => {},
      registerTransitionEndHandler: (/* handler: EventListener */) => {},
      deregisterTransitionEndHandler: (/* handler: EventListener */) => {},
      notifyShow: () => {},
      notifyHide: () => {},
    };
  }

  get active() {
    return this.active_;
  }

  constructor(adapter) {
    super(Object.assign(MDCSnackbarFoundation.defaultAdapter, adapter));

    this.active_ = false;
    this.actionWasClicked_ = false;
    this.dismissOnAction_ = true;
    this.firstFocus_ = true;
    this.pointerDownRecognized_ = false;
    this.snackbarHasFocus_ = false;
    this.snackbarData_ = null;
    this.queue_ = [];
    this.actionClickHandler_ = () => {
      this.actionWasClicked_ = true;
      this.invokeAction_();
    };
    this.visibilitychangeHandler_ = () => {
      clearTimeout(this.timeoutId_);
      this.snackbarHasFocus_ = true;

      if (!this.adapter_.visibilityIsHidden()) {
        setTimeout(this.cleanup_.bind(this), this.snackbarData_.timeout || _constants__WEBPACK_IMPORTED_MODULE_1__["numbers"].MESSAGE_TIMEOUT);
      }
    };
    this.interactionHandler_ = (evt) => {
      if (evt.type == 'touchstart' || evt.type == 'mousedown') {
        this.pointerDownRecognized_ = true;
      }
      this.handlePossibleTabKeyboardFocus_(evt);

      if (evt.type == 'focus') {
        this.pointerDownRecognized_ = false;
      }
    };
    this.blurHandler_ = () => {
      clearTimeout(this.timeoutId_);
      this.snackbarHasFocus_ = false;
      this.timeoutId_ = setTimeout(this.cleanup_.bind(this), this.snackbarData_.timeout || _constants__WEBPACK_IMPORTED_MODULE_1__["numbers"].MESSAGE_TIMEOUT);
    };
  }

  init() {
    this.adapter_.registerActionClickHandler(this.actionClickHandler_);
    this.adapter_.setAriaHidden();
    this.adapter_.setActionAriaHidden();
  }

  destroy() {
    this.adapter_.deregisterActionClickHandler(this.actionClickHandler_);
    this.adapter_.deregisterCapturedBlurHandler(this.blurHandler_);
    this.adapter_.deregisterVisibilityChangeHandler(this.visibilitychangeHandler_);
    ['touchstart', 'mousedown', 'focus'].forEach((evtType) => {
      this.adapter_.deregisterCapturedInteractionHandler(evtType, this.interactionHandler_);
    });
  }

  dismissesOnAction() {
    return this.dismissOnAction_;
  }

  setDismissOnAction(dismissOnAction) {
    this.dismissOnAction_ = !!dismissOnAction;
  }

  show(data) {
    if (!data) {
      throw new Error(
        'Please provide a data object with at least a message to display.');
    }
    if (!data.message) {
      throw new Error('Please provide a message to be displayed.');
    }
    if (data.actionHandler && !data.actionText) {
      throw new Error('Please provide action text with the handler.');
    }
    if (this.active) {
      this.queue_.push(data);
      return;
    }
    clearTimeout(this.timeoutId_);
    this.snackbarData_ = data;
    this.firstFocus_ = true;
    this.adapter_.registerVisibilityChangeHandler(this.visibilitychangeHandler_);
    this.adapter_.registerCapturedBlurHandler(this.blurHandler_);
    ['touchstart', 'mousedown', 'focus'].forEach((evtType) => {
      this.adapter_.registerCapturedInteractionHandler(evtType, this.interactionHandler_);
    });

    const {ACTIVE, MULTILINE, ACTION_ON_BOTTOM} = _constants__WEBPACK_IMPORTED_MODULE_1__["cssClasses"];

    this.adapter_.setMessageText(this.snackbarData_.message);

    if (this.snackbarData_.multiline) {
      this.adapter_.addClass(MULTILINE);
      if (this.snackbarData_.actionOnBottom) {
        this.adapter_.addClass(ACTION_ON_BOTTOM);
      }
    }

    if (this.snackbarData_.actionHandler) {
      this.adapter_.setActionText(this.snackbarData_.actionText);
      this.actionHandler_ = this.snackbarData_.actionHandler;
      this.setActionHidden_(false);
    } else {
      this.setActionHidden_(true);
      this.actionHandler_ = null;
      this.adapter_.setActionText(null);
    }

    this.active_ = true;
    this.adapter_.addClass(ACTIVE);
    this.adapter_.unsetAriaHidden();
    this.adapter_.notifyShow();

    this.timeoutId_ = setTimeout(this.cleanup_.bind(this), this.snackbarData_.timeout || _constants__WEBPACK_IMPORTED_MODULE_1__["numbers"].MESSAGE_TIMEOUT);
  }

  handlePossibleTabKeyboardFocus_() {
    const hijackFocus =
      this.firstFocus_ && !this.pointerDownRecognized_;

    if (hijackFocus) {
      this.setFocusOnAction_();
    }

    this.firstFocus_ = false;
  }

  setFocusOnAction_() {
    this.adapter_.setFocus();
    this.snackbarHasFocus_ = true;
    this.firstFocus_ = false;
  }

  invokeAction_() {
    try {
      if (!this.actionHandler_) {
        return;
      }

      this.actionHandler_();
    } finally {
      if (this.dismissOnAction_) {
        this.cleanup_();
      }
    }
  }

  cleanup_() {
    const allowDismissal = !this.snackbarHasFocus_ || this.actionWasClicked_;

    if (allowDismissal) {
      const {ACTIVE, MULTILINE, ACTION_ON_BOTTOM} = _constants__WEBPACK_IMPORTED_MODULE_1__["cssClasses"];

      this.adapter_.removeClass(ACTIVE);

      const handler = () => {
        clearTimeout(this.timeoutId_);
        this.adapter_.deregisterTransitionEndHandler(handler);
        this.adapter_.removeClass(MULTILINE);
        this.adapter_.removeClass(ACTION_ON_BOTTOM);
        this.setActionHidden_(true);
        this.adapter_.setAriaHidden();
        this.active_ = false;
        this.snackbarHasFocus_ = false;
        this.adapter_.notifyHide();
        this.showNext_();
      };

      this.adapter_.registerTransitionEndHandler(handler);
    }
  }

  showNext_() {
    if (!this.queue_.length) {
      return;
    }
    this.show(this.queue_.shift());
  }

  setActionHidden_(isHidden) {
    if (isHidden) {
      this.adapter_.setActionAriaHidden();
    } else {
      this.adapter_.unsetActionAriaHidden();
    }
  }
}


/***/ }),

/***/ "./node_modules/@material/snackbar/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@material/snackbar/index.js ***!
  \**************************************************/
/*! exports provided: MDCSnackbarFoundation, MDCSnackbar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDCSnackbar", function() { return MDCSnackbar; });
/* harmony import */ var _material_base_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/base/index */ "./node_modules/@material/base/index.js");
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation */ "./node_modules/@material/snackbar/foundation.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MDCSnackbarFoundation", function() { return _foundation__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _material_animation_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/animation/index */ "./node_modules/@material/animation/index.js");
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */







class MDCSnackbar extends _material_base_index__WEBPACK_IMPORTED_MODULE_0__["MDCComponent"] {
  static attachTo(root) {
    return new MDCSnackbar(root);
  }

  show(data) {
    this.foundation_.show(data);
  }

  getDefaultFoundation() {
    const {
      TEXT_SELECTOR,
      ACTION_BUTTON_SELECTOR,
    } = _foundation__WEBPACK_IMPORTED_MODULE_1__["default"].strings;
    const getText = () => this.root_.querySelector(TEXT_SELECTOR);
    const getActionButton = () => this.root_.querySelector(ACTION_BUTTON_SELECTOR);

    /* eslint brace-style: "off" */
    return new _foundation__WEBPACK_IMPORTED_MODULE_1__["default"]({
      addClass: (className) => this.root_.classList.add(className),
      removeClass: (className) => this.root_.classList.remove(className),
      setAriaHidden: () => this.root_.setAttribute('aria-hidden', 'true'),
      unsetAriaHidden: () => this.root_.removeAttribute('aria-hidden'),
      setActionAriaHidden: () => getActionButton().setAttribute('aria-hidden', 'true'),
      unsetActionAriaHidden: () => getActionButton().removeAttribute('aria-hidden'),
      setActionText: (text) => {getActionButton().textContent = text;},
      setMessageText: (text) => {getText().textContent = text;},
      setFocus: () => getActionButton().focus(),
      visibilityIsHidden: () => document.hidden,
      registerCapturedBlurHandler: (handler) => getActionButton().addEventListener('blur', handler, true),
      deregisterCapturedBlurHandler: (handler) => getActionButton().removeEventListener('blur', handler, true),
      registerVisibilityChangeHandler: (handler) => document.addEventListener('visibilitychange', handler),
      deregisterVisibilityChangeHandler: (handler) => document.removeEventListener('visibilitychange', handler),
      registerCapturedInteractionHandler: (evt, handler) =>
        document.body.addEventListener(evt, handler, true),
      deregisterCapturedInteractionHandler: (evt, handler) =>
        document.body.removeEventListener(evt, handler, true),
      registerActionClickHandler: (handler) => getActionButton().addEventListener('click', handler),
      deregisterActionClickHandler: (handler) => getActionButton().removeEventListener('click', handler),
      registerTransitionEndHandler:
        (handler) => this.root_.addEventListener(Object(_material_animation_index__WEBPACK_IMPORTED_MODULE_2__["getCorrectEventName"])(window, 'transitionend'), handler),
      deregisterTransitionEndHandler:
        (handler) => this.root_.removeEventListener(Object(_material_animation_index__WEBPACK_IMPORTED_MODULE_2__["getCorrectEventName"])(window, 'transitionend'), handler),
      notifyShow: () => this.emit(_foundation__WEBPACK_IMPORTED_MODULE_1__["default"].strings.SHOW_EVENT),
      notifyHide: () => this.emit(_foundation__WEBPACK_IMPORTED_MODULE_1__["default"].strings.HIDE_EVENT),
    });
  }

  get dismissesOnAction() {
    return this.foundation_.dismissesOnAction();
  }

  set dismissesOnAction(dismissesOnAction) {
    this.foundation_.setDismissOnAction(dismissesOnAction);
  }
}


/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");
var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(/*! ./../helpers/btoa */ "./node_modules/axios/lib/helpers/btoa.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if ("development" !== 'test' &&
        typeof window !== 'undefined' &&
        window.XDomainRequest && !('withCredentials' in request) &&
        !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || (request.readyState !== 4 && !xDomain)) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defaults = __webpack_require__(/*! ./../defaults */ "./node_modules/axios/lib/defaults.js");
var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);
  config.method = config.method.toLowerCase();

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");
var isAbsoluteURL = __webpack_require__(/*! ./../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ./../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/btoa.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/btoa.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error;
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
    // initialize result and counter
    var block, charCode, idx = 0, map = chars;
    // if the next str index does not exist:
    //   change the mapping table to "="
    //   check if d has no fractional digits
    str.charAt(idx | 0) || (map = '=', idx % 1);
    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
  ) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var isBuffer = __webpack_require__(/*! is-buffer */ "./node_modules/is-buffer/index.js");

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};


/***/ }),

/***/ "./node_modules/clipboard/dist/clipboard.js":
/*!**************************************************!*\
  !*** ./node_modules/clipboard/dist/clipboard.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * clipboard.js v2.0.1
 * https://zenorocha.github.io/clipboard.js
 * 
 * Licensed MIT © Zeno Rocha
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(7)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else { var mod; }
})(this, function (module, _select) {
    'use strict';

    var _select2 = _interopRequireDefault(_select);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var ClipboardAction = function () {
        /**
         * @param {Object} options
         */
        function ClipboardAction(options) {
            _classCallCheck(this, ClipboardAction);

            this.resolveOptions(options);
            this.initSelection();
        }

        /**
         * Defines base properties passed from constructor.
         * @param {Object} options
         */


        _createClass(ClipboardAction, [{
            key: 'resolveOptions',
            value: function resolveOptions() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                this.action = options.action;
                this.container = options.container;
                this.emitter = options.emitter;
                this.target = options.target;
                this.text = options.text;
                this.trigger = options.trigger;

                this.selectedText = '';
            }
        }, {
            key: 'initSelection',
            value: function initSelection() {
                if (this.text) {
                    this.selectFake();
                } else if (this.target) {
                    this.selectTarget();
                }
            }
        }, {
            key: 'selectFake',
            value: function selectFake() {
                var _this = this;

                var isRTL = document.documentElement.getAttribute('dir') == 'rtl';

                this.removeFake();

                this.fakeHandlerCallback = function () {
                    return _this.removeFake();
                };
                this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;

                this.fakeElem = document.createElement('textarea');
                // Prevent zooming on iOS
                this.fakeElem.style.fontSize = '12pt';
                // Reset box model
                this.fakeElem.style.border = '0';
                this.fakeElem.style.padding = '0';
                this.fakeElem.style.margin = '0';
                // Move element out of screen horizontally
                this.fakeElem.style.position = 'absolute';
                this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';
                // Move element to the same position vertically
                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                this.fakeElem.style.top = yPosition + 'px';

                this.fakeElem.setAttribute('readonly', '');
                this.fakeElem.value = this.text;

                this.container.appendChild(this.fakeElem);

                this.selectedText = (0, _select2.default)(this.fakeElem);
                this.copyText();
            }
        }, {
            key: 'removeFake',
            value: function removeFake() {
                if (this.fakeHandler) {
                    this.container.removeEventListener('click', this.fakeHandlerCallback);
                    this.fakeHandler = null;
                    this.fakeHandlerCallback = null;
                }

                if (this.fakeElem) {
                    this.container.removeChild(this.fakeElem);
                    this.fakeElem = null;
                }
            }
        }, {
            key: 'selectTarget',
            value: function selectTarget() {
                this.selectedText = (0, _select2.default)(this.target);
                this.copyText();
            }
        }, {
            key: 'copyText',
            value: function copyText() {
                var succeeded = void 0;

                try {
                    succeeded = document.execCommand(this.action);
                } catch (err) {
                    succeeded = false;
                }

                this.handleResult(succeeded);
            }
        }, {
            key: 'handleResult',
            value: function handleResult(succeeded) {
                this.emitter.emit(succeeded ? 'success' : 'error', {
                    action: this.action,
                    text: this.selectedText,
                    trigger: this.trigger,
                    clearSelection: this.clearSelection.bind(this)
                });
            }
        }, {
            key: 'clearSelection',
            value: function clearSelection() {
                if (this.trigger) {
                    this.trigger.focus();
                }

                window.getSelection().removeAllRanges();
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                this.removeFake();
            }
        }, {
            key: 'action',
            set: function set() {
                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';

                this._action = action;

                if (this._action !== 'copy' && this._action !== 'cut') {
                    throw new Error('Invalid "action" value, use either "copy" or "cut"');
                }
            },
            get: function get() {
                return this._action;
            }
        }, {
            key: 'target',
            set: function set(target) {
                if (target !== undefined) {
                    if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {
                        if (this.action === 'copy' && target.hasAttribute('disabled')) {
                            throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                        }

                        if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                            throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                        }

                        this._target = target;
                    } else {
                        throw new Error('Invalid "target" value, use a valid Element');
                    }
                }
            },
            get: function get() {
                return this._target;
            }
        }]);

        return ClipboardAction;
    }();

    module.exports = ClipboardAction;
});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var is = __webpack_require__(6);
var delegate = __webpack_require__(5);

/**
 * Validates all params and calls the right
 * listener function based on its target type.
 *
 * @param {String|HTMLElement|HTMLCollection|NodeList} target
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listen(target, type, callback) {
    if (!target && !type && !callback) {
        throw new Error('Missing required arguments');
    }

    if (!is.string(type)) {
        throw new TypeError('Second argument must be a String');
    }

    if (!is.fn(callback)) {
        throw new TypeError('Third argument must be a Function');
    }

    if (is.node(target)) {
        return listenNode(target, type, callback);
    }
    else if (is.nodeList(target)) {
        return listenNodeList(target, type, callback);
    }
    else if (is.string(target)) {
        return listenSelector(target, type, callback);
    }
    else {
        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
    }
}

/**
 * Adds an event listener to a HTML element
 * and returns a remove listener function.
 *
 * @param {HTMLElement} node
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNode(node, type, callback) {
    node.addEventListener(type, callback);

    return {
        destroy: function() {
            node.removeEventListener(type, callback);
        }
    }
}

/**
 * Add an event listener to a list of HTML elements
 * and returns a remove listener function.
 *
 * @param {NodeList|HTMLCollection} nodeList
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNodeList(nodeList, type, callback) {
    Array.prototype.forEach.call(nodeList, function(node) {
        node.addEventListener(type, callback);
    });

    return {
        destroy: function() {
            Array.prototype.forEach.call(nodeList, function(node) {
                node.removeEventListener(type, callback);
            });
        }
    }
}

/**
 * Add an event listener to a selector
 * and returns a remove listener function.
 *
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenSelector(selector, type, callback) {
    return delegate(document.body, selector, type, callback);
}

module.exports = listen;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

function E () {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener () {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    };

    listener._ = callback
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    (liveEvents.length)
      ? e[name] = liveEvents
      : delete e[name];

    return this;
  }
};

module.exports = E;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(0), __webpack_require__(2), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else { var mod; }
})(this, function (module, _clipboardAction, _tinyEmitter, _goodListener) {
    'use strict';

    var _clipboardAction2 = _interopRequireDefault(_clipboardAction);

    var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);

    var _goodListener2 = _interopRequireDefault(_goodListener);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var Clipboard = function (_Emitter) {
        _inherits(Clipboard, _Emitter);

        /**
         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
         * @param {Object} options
         */
        function Clipboard(trigger, options) {
            _classCallCheck(this, Clipboard);

            var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));

            _this.resolveOptions(options);
            _this.listenClick(trigger);
            return _this;
        }

        /**
         * Defines if attributes would be resolved using internal setter functions
         * or custom functions that were passed in the constructor.
         * @param {Object} options
         */


        _createClass(Clipboard, [{
            key: 'resolveOptions',
            value: function resolveOptions() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
                this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
                this.text = typeof options.text === 'function' ? options.text : this.defaultText;
                this.container = _typeof(options.container) === 'object' ? options.container : document.body;
            }
        }, {
            key: 'listenClick',
            value: function listenClick(trigger) {
                var _this2 = this;

                this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {
                    return _this2.onClick(e);
                });
            }
        }, {
            key: 'onClick',
            value: function onClick(e) {
                var trigger = e.delegateTarget || e.currentTarget;

                if (this.clipboardAction) {
                    this.clipboardAction = null;
                }

                this.clipboardAction = new _clipboardAction2.default({
                    action: this.action(trigger),
                    target: this.target(trigger),
                    text: this.text(trigger),
                    container: this.container,
                    trigger: trigger,
                    emitter: this
                });
            }
        }, {
            key: 'defaultAction',
            value: function defaultAction(trigger) {
                return getAttributeValue('action', trigger);
            }
        }, {
            key: 'defaultTarget',
            value: function defaultTarget(trigger) {
                var selector = getAttributeValue('target', trigger);

                if (selector) {
                    return document.querySelector(selector);
                }
            }
        }, {
            key: 'defaultText',
            value: function defaultText(trigger) {
                return getAttributeValue('text', trigger);
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                this.listener.destroy();

                if (this.clipboardAction) {
                    this.clipboardAction.destroy();
                    this.clipboardAction = null;
                }
            }
        }], [{
            key: 'isSupported',
            value: function isSupported() {
                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];

                var actions = typeof action === 'string' ? [action] : action;
                var support = !!document.queryCommandSupported;

                actions.forEach(function (action) {
                    support = support && !!document.queryCommandSupported(action);
                });

                return support;
            }
        }]);

        return Clipboard;
    }(_tinyEmitter2.default);

    /**
     * Helper function to retrieve attribute value.
     * @param {String} suffix
     * @param {Element} element
     */
    function getAttributeValue(suffix, element) {
        var attribute = 'data-clipboard-' + suffix;

        if (!element.hasAttribute(attribute)) {
            return;
        }

        return element.getAttribute(attribute);
    }

    module.exports = Clipboard;
});

/***/ }),
/* 4 */
/***/ (function(module, exports) {

var DOCUMENT_NODE_TYPE = 9;

/**
 * A polyfill for Element.matches()
 */
if (typeof Element !== 'undefined' && !Element.prototype.matches) {
    var proto = Element.prototype;

    proto.matches = proto.matchesSelector ||
                    proto.mozMatchesSelector ||
                    proto.msMatchesSelector ||
                    proto.oMatchesSelector ||
                    proto.webkitMatchesSelector;
}

/**
 * Finds the closest parent that matches a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @return {Function}
 */
function closest (element, selector) {
    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
        if (typeof element.matches === 'function' &&
            element.matches(selector)) {
          return element;
        }
        element = element.parentNode;
    }
}

module.exports = closest;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var closest = __webpack_require__(4);

/**
 * Delegates event to a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */
function _delegate(element, selector, type, callback, useCapture) {
    var listenerFn = listener.apply(this, arguments);

    element.addEventListener(type, listenerFn, useCapture);

    return {
        destroy: function() {
            element.removeEventListener(type, listenerFn, useCapture);
        }
    }
}

/**
 * Delegates event to a selector.
 *
 * @param {Element|String|Array} [elements]
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */
function delegate(elements, selector, type, callback, useCapture) {
    // Handle the regular Element usage
    if (typeof elements.addEventListener === 'function') {
        return _delegate.apply(null, arguments);
    }

    // Handle Element-less usage, it defaults to global delegation
    if (typeof type === 'function') {
        // Use `document` as the first parameter, then apply arguments
        // This is a short way to .unshift `arguments` without running into deoptimizations
        return _delegate.bind(null, document).apply(null, arguments);
    }

    // Handle Selector-based usage
    if (typeof elements === 'string') {
        elements = document.querySelectorAll(elements);
    }

    // Handle Array-like based usage
    return Array.prototype.map.call(elements, function (element) {
        return _delegate(element, selector, type, callback, useCapture);
    });
}

/**
 * Finds closest match and invokes callback.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Function}
 */
function listener(element, selector, type, callback) {
    return function(e) {
        e.delegateTarget = closest(e.target, selector);

        if (e.delegateTarget) {
            callback.call(element, e);
        }
    }
}

module.exports = delegate;


/***/ }),
/* 6 */
/***/ (function(module, exports) {

/**
 * Check if argument is a HTML element.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.node = function(value) {
    return value !== undefined
        && value instanceof HTMLElement
        && value.nodeType === 1;
};

/**
 * Check if argument is a list of HTML elements.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.nodeList = function(value) {
    var type = Object.prototype.toString.call(value);

    return value !== undefined
        && (type === '[object NodeList]' || type === '[object HTMLCollection]')
        && ('length' in value)
        && (value.length === 0 || exports.node(value[0]));
};

/**
 * Check if argument is a string.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.string = function(value) {
    return typeof value === 'string'
        || value instanceof String;
};

/**
 * Check if argument is a function.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.fn = function(value) {
    var type = Object.prototype.toString.call(value);

    return type === '[object Function]';
};


/***/ }),
/* 7 */
/***/ (function(module, exports) {

function select(element) {
    var selectedText;

    if (element.nodeName === 'SELECT') {
        element.focus();

        selectedText = element.value;
    }
    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
        var isReadOnly = element.hasAttribute('readonly');

        if (!isReadOnly) {
            element.setAttribute('readonly', '');
        }

        element.select();
        element.setSelectionRange(0, element.value.length);

        if (!isReadOnly) {
            element.removeAttribute('readonly');
        }

        selectedText = element.value;
    }
    else {
        if (element.hasAttribute('contenteditable')) {
            element.focus();
        }

        var selection = window.getSelection();
        var range = document.createRange();

        range.selectNodeContents(element);
        selection.removeAllRanges();
        selection.addRange(range);

        selectedText = selection.toString();
    }

    return selectedText;
}

module.exports = select;


/***/ })
/******/ ]);
});

/***/ }),

/***/ "./node_modules/core-decorators/es/applyDecorators.js":
/*!************************************************************!*\
  !*** ./node_modules/core-decorators/es/applyDecorators.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return applyDecorators; });
var defineProperty = Object.defineProperty,
    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;


function applyDecorators(Class, props) {
  var prototype = Class.prototype;


  for (var key in props) {
    var decorators = props[key];

    for (var i = 0, l = decorators.length; i < l; i++) {
      var decorator = decorators[i];

      defineProperty(prototype, key, decorator(prototype, key, getOwnPropertyDescriptor(prototype, key)));
    }
  }

  return Class;
}

/***/ }),

/***/ "./node_modules/core-decorators/es/autobind.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-decorators/es/autobind.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return autobind; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }


var defineProperty = Object.defineProperty,
    getPrototypeOf = Object.getPrototypeOf;


var mapStore = void 0;

function getBoundSuper(obj, fn) {
  if (typeof WeakMap === 'undefined') {
    throw new Error('Using @autobind on ' + fn.name + '() requires WeakMap support due to its use of super.' + fn.name + '()\n      See https://github.com/jayphelps/core-decorators.js/issues/20');
  }

  if (!mapStore) {
    mapStore = new WeakMap();
  }

  if (mapStore.has(obj) === false) {
    mapStore.set(obj, new WeakMap());
  }

  var superStore = mapStore.get(obj);

  if (superStore.has(fn) === false) {
    superStore.set(fn, Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["bind"])(fn, obj));
  }

  return superStore.get(fn);
}

function autobindClass(klass) {
  var descs = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["getOwnPropertyDescriptors"])(klass.prototype);
  var keys = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["getOwnKeys"])(descs);

  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    var desc = descs[key];

    if (typeof desc.value !== 'function' || key === 'constructor') {
      continue;
    }

    defineProperty(klass.prototype, key, autobindMethod(klass.prototype, key, desc));
  }
}

function autobindMethod(target, key, _ref) {
  var fn = _ref.value,
      configurable = _ref.configurable,
      enumerable = _ref.enumerable;

  if (typeof fn !== 'function') {
    throw new SyntaxError('@autobind can only be used on functions, not: ' + fn);
  }

  var constructor = target.constructor;


  return {
    configurable: configurable,
    enumerable: enumerable,

    get: function get() {
      // Class.prototype.key lookup
      // Someone accesses the property directly on the prototype on which it is
      // actually defined on, i.e. Class.prototype.hasOwnProperty(key)
      if (this === target) {
        return fn;
      }

      // Class.prototype.key lookup
      // Someone accesses the property directly on a prototype but it was found
      // up the chain, not defined directly on it
      // i.e. Class.prototype.hasOwnProperty(key) == false && key in Class.prototype
      if (this.constructor !== constructor && getPrototypeOf(this).constructor === constructor) {
        return fn;
      }

      // Autobound method calling super.sameMethod() which is also autobound and so on.
      if (this.constructor !== constructor && key in this.constructor.prototype) {
        return getBoundSuper(this, fn);
      }

      var boundFn = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["bind"])(fn, this);

      defineProperty(this, key, {
        configurable: true,
        writable: true,
        // NOT enumerable when it's a bound method
        enumerable: false,
        value: boundFn
      });

      return boundFn;
    },

    set: Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["createDefaultSetter"])(key)
  };
}

function handle(args) {
  if (args.length === 1) {
    return autobindClass.apply(undefined, _toConsumableArray(args));
  } else {
    return autobindMethod.apply(undefined, _toConsumableArray(args));
  }
}

function autobind() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (args.length === 0) {
    return function () {
      return handle(arguments);
    };
  } else {
    return handle(args);
  }
}

/***/ }),

/***/ "./node_modules/core-decorators/es/core-decorators.js":
/*!************************************************************!*\
  !*** ./node_modules/core-decorators/es/core-decorators.js ***!
  \************************************************************/
/*! exports provided: override, deprecate, deprecated, suppressWarnings, memoize, autobind, readonly, enumerable, nonenumerable, nonconfigurable, debounce, throttle, decorate, mixin, mixins, lazyInitialize, time, extendDescriptor, profile, applyDecorators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _override__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./override */ "./node_modules/core-decorators/es/override.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "override", function() { return _override__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _deprecate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deprecate */ "./node_modules/core-decorators/es/deprecate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deprecate", function() { return _deprecate__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deprecated", function() { return _deprecate__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _suppress_warnings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./suppress-warnings */ "./node_modules/core-decorators/es/suppress-warnings.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "suppressWarnings", function() { return _suppress_warnings__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _memoize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./memoize */ "./node_modules/core-decorators/es/memoize.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "memoize", function() { return _memoize__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _autobind__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./autobind */ "./node_modules/core-decorators/es/autobind.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "autobind", function() { return _autobind__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _readonly__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./readonly */ "./node_modules/core-decorators/es/readonly.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "readonly", function() { return _readonly__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _enumerable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./enumerable */ "./node_modules/core-decorators/es/enumerable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "enumerable", function() { return _enumerable__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _nonenumerable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./nonenumerable */ "./node_modules/core-decorators/es/nonenumerable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "nonenumerable", function() { return _nonenumerable__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _nonconfigurable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./nonconfigurable */ "./node_modules/core-decorators/es/nonconfigurable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "nonconfigurable", function() { return _nonconfigurable__WEBPACK_IMPORTED_MODULE_8__["default"]; });

/* harmony import */ var _debounce__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./debounce */ "./node_modules/core-decorators/es/debounce.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "debounce", function() { return _debounce__WEBPACK_IMPORTED_MODULE_9__["default"]; });

/* harmony import */ var _throttle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./throttle */ "./node_modules/core-decorators/es/throttle.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "throttle", function() { return _throttle__WEBPACK_IMPORTED_MODULE_10__["default"]; });

/* harmony import */ var _decorate__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./decorate */ "./node_modules/core-decorators/es/decorate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "decorate", function() { return _decorate__WEBPACK_IMPORTED_MODULE_11__["default"]; });

/* harmony import */ var _mixin__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./mixin */ "./node_modules/core-decorators/es/mixin.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mixin", function() { return _mixin__WEBPACK_IMPORTED_MODULE_12__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mixins", function() { return _mixin__WEBPACK_IMPORTED_MODULE_12__["default"]; });

/* harmony import */ var _lazy_initialize__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./lazy-initialize */ "./node_modules/core-decorators/es/lazy-initialize.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lazyInitialize", function() { return _lazy_initialize__WEBPACK_IMPORTED_MODULE_13__["default"]; });

/* harmony import */ var _time__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./time */ "./node_modules/core-decorators/es/time.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "time", function() { return _time__WEBPACK_IMPORTED_MODULE_14__["default"]; });

/* harmony import */ var _extendDescriptor__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./extendDescriptor */ "./node_modules/core-decorators/es/extendDescriptor.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extendDescriptor", function() { return _extendDescriptor__WEBPACK_IMPORTED_MODULE_15__["default"]; });

/* harmony import */ var _profile__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./profile */ "./node_modules/core-decorators/es/profile.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "profile", function() { return _profile__WEBPACK_IMPORTED_MODULE_16__["default"]; });

/* harmony import */ var _applyDecorators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./applyDecorators */ "./node_modules/core-decorators/es/applyDecorators.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyDecorators", function() { return _applyDecorators__WEBPACK_IMPORTED_MODULE_17__["default"]; });

/**
 * core-decorators.js
 * (c) 2017 Jay Phelps and contributors
 * MIT Licensed
 * https://github.com/jayphelps/core-decorators.js
 * @license
 */


















// Helper to apply decorators to a class without transpiler support


/***/ }),

/***/ "./node_modules/core-decorators/es/debounce.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-decorators/es/debounce.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return debounce; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();



var DEFAULT_TIMEOUT = 300;

function handleDescriptor(target, key, descriptor, _ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      _ref2$ = _ref2[0],
      wait = _ref2$ === undefined ? DEFAULT_TIMEOUT : _ref2$,
      _ref2$2 = _ref2[1],
      immediate = _ref2$2 === undefined ? false : _ref2$2;

  var callback = descriptor.value;

  if (typeof callback !== 'function') {
    throw new SyntaxError('Only functions can be debounced');
  }

  return _extends({}, descriptor, {
    value: function value() {
      var _this = this;

      var _metaFor = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["metaFor"])(this),
          debounceTimeoutIds = _metaFor.debounceTimeoutIds;

      var timeout = debounceTimeoutIds[key];
      var callNow = immediate && !timeout;
      var args = arguments;

      clearTimeout(timeout);

      debounceTimeoutIds[key] = setTimeout(function () {
        delete debounceTimeoutIds[key];
        if (!immediate) {
          callback.apply(_this, args);
        }
      }, wait);

      if (callNow) {
        callback.apply(this, args);
      }
    }
  });
}

function debounce() {
  Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["internalDeprecation"])('@debounce is deprecated and will be removed shortly. Use @debounce from lodash-decorators.\n\n  https://www.npmjs.com/package/lodash-decorators');

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/decorate.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-decorators/es/decorate.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return decorate; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }


var defineProperty = Object.defineProperty;


function handleDescriptor(target, key, descriptor, _ref) {
  var _ref2 = _toArray(_ref),
      decorator = _ref2[0],
      args = _ref2.slice(1);

  var configurable = descriptor.configurable,
      enumerable = descriptor.enumerable,
      writable = descriptor.writable;

  var originalGet = descriptor.get;
  var originalSet = descriptor.set;
  var originalValue = descriptor.value;
  var isGetter = !!originalGet;

  return {
    configurable: configurable,
    enumerable: enumerable,
    get: function get() {
      var fn = isGetter ? originalGet.call(this) : originalValue;
      var value = decorator.call.apply(decorator, [this, fn].concat(_toConsumableArray(args)));

      if (isGetter) {
        return value;
      } else {
        var desc = {
          configurable: configurable,
          enumerable: enumerable
        };

        desc.value = value;
        desc.writable = writable;

        defineProperty(this, key, desc);

        return value;
      }
    },

    set: isGetter ? originalSet : Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["createDefaultSetter"])()
  };
}

function decorate() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/deprecate.js":
/*!******************************************************!*\
  !*** ./node_modules/core-decorators/es/deprecate.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return deprecate; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();



var DEFAULT_MSG = 'This function will be removed in future versions.';

function handleDescriptor(target, key, descriptor, _ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      _ref2$ = _ref2[0],
      msg = _ref2$ === undefined ? DEFAULT_MSG : _ref2$,
      _ref2$2 = _ref2[1],
      options = _ref2$2 === undefined ? {} : _ref2$2;

  if (typeof descriptor.value !== 'function') {
    throw new SyntaxError('Only functions can be marked as deprecated');
  }

  var methodSignature = target.constructor.name + '#' + key;

  if (options.url) {
    msg += '\n\n    See ' + options.url + ' for more details.\n\n';
  }

  return _extends({}, descriptor, {
    value: function deprecationWrapper() {
      Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["warn"])('DEPRECATION ' + methodSignature + ': ' + msg);
      return descriptor.value.apply(this, arguments);
    }
  });
}

function deprecate() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/enumerable.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-decorators/es/enumerable.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return enumerable; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");


function handleDescriptor(target, key, descriptor) {
  descriptor.enumerable = true;
  return descriptor;
}

function enumerable() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/extendDescriptor.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-decorators/es/extendDescriptor.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return extendDescriptor; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };


var getPrototypeOf = Object.getPrototypeOf,
    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;


function handleDescriptor(target, key, descriptor) {
  var superKlass = getPrototypeOf(target);
  var superDesc = getOwnPropertyDescriptor(superKlass, key);

  return _extends({}, superDesc, {
    value: descriptor.value,
    initializer: descriptor.initializer,
    get: descriptor.get || superDesc.get,
    set: descriptor.set || superDesc.set
  });
}

function extendDescriptor() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/lazy-initialize.js":
/*!************************************************************!*\
  !*** ./node_modules/core-decorators/es/lazy-initialize.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return lazyInitialize; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");

var defineProperty = Object.defineProperty;


function handleDescriptor(target, key, descriptor) {
  var configurable = descriptor.configurable,
      enumerable = descriptor.enumerable,
      initializer = descriptor.initializer,
      value = descriptor.value;

  return {
    configurable: configurable,
    enumerable: enumerable,

    get: function get() {
      // This happens if someone accesses the
      // property directly on the prototype
      if (this === target) {
        return;
      }

      var ret = initializer ? initializer.call(this) : value;

      defineProperty(this, key, {
        configurable: configurable,
        enumerable: enumerable,
        writable: true,
        value: ret
      });

      return ret;
    },


    set: Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["createDefaultSetter"])(key)
  };
}

function lazyInitialize() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/memoize.js":
/*!****************************************************!*\
  !*** ./node_modules/core-decorators/es/memoize.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return memoize; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



function toObject(cache, value) {
  if (value === Object(value)) {
    return value;
  }
  return cache[value] || (cache[value] = {});
}

function applyAndCache(context, fn, args, cache, signature) {
  var ret = fn.apply(context, args);
  cache[signature] = ret;
  return ret;
}

function metaForDescriptor(descriptor) {
  var fn = void 0,
      wrapKey = void 0;

  // This is ugly code, but way faster than other
  // ways I tried that *looked* pretty

  if (descriptor.value) {
    fn = descriptor.value;
    wrapKey = 'value';
  } else if (descriptor.get) {
    fn = descriptor.get;
    wrapKey = 'get';
  } else if (descriptor.set) {
    fn = descriptor.set;
    wrapKey = 'set';
  }

  return { fn: fn, wrapKey: wrapKey };
}

function handleDescriptor(target, key, descriptor) {
  var _metaForDescriptor = metaForDescriptor(descriptor),
      fn = _metaForDescriptor.fn,
      wrapKey = _metaForDescriptor.wrapKey;

  var argumentCache = new WeakMap();
  var signatureCache = Object.create(null);
  var primativeRefCache = Object.create(null);
  var argumentIdCounter = 0;

  return _extends({}, descriptor, _defineProperty({}, wrapKey, function memoizeWrapper() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var signature = '0';

    for (var i = 0, l = args.length; i < l; i++) {
      var arg = args[i];
      var argRef = toObject(primativeRefCache, arg);
      var argKey = argumentCache.get(argRef);

      if (argKey === undefined) {
        argKey = ++argumentIdCounter;
        argumentCache.set(argRef, argKey);
      }

      signature += argKey;
    }

    return signatureCache[signature] || applyAndCache(this, fn, arguments, signatureCache, signature);
  }));
}

function memoize() {
  Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["internalDeprecation"])('@memoize is deprecated and will be removed shortly. Use @memoize from lodash-decorators.\n\n  https://www.npmjs.com/package/lodash-decorators');

  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/mixin.js":
/*!**************************************************!*\
  !*** ./node_modules/core-decorators/es/mixin.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return mixin; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



var defineProperty = Object.defineProperty,
    getPrototypeOf = Object.getPrototypeOf;


function buggySymbol(symbol) {
  return Object.prototype.toString.call(symbol) === '[object Symbol]' && (typeof symbol === 'undefined' ? 'undefined' : _typeof(symbol)) === 'object';
}

function hasProperty(prop, obj) {
  // We have to traverse manually prototypes' chain for polyfilled ES6 Symbols
  // like "in" operator does.
  // I.e.: Babel 5 Symbol polyfill stores every created symbol in Object.prototype.
  // That's why we cannot use construction like "prop in obj" to check, if needed
  // prop actually exists in given object/prototypes' chain.
  if (buggySymbol(prop)) {
    do {
      if (obj === Object.prototype) {
        // Polyfill assigns undefined as value for stored symbol key.
        // We can assume in this special case if there is nothing assigned it doesn't exist.
        return typeof obj[prop] !== 'undefined';
      }
      if (obj.hasOwnProperty(prop)) {
        return true;
      }
    } while (obj = getPrototypeOf(obj));
    return false;
  } else {
    return prop in obj;
  }
}

function handleClass(target, mixins) {
  if (!mixins.length) {
    throw new SyntaxError('@mixin() class ' + target.name + ' requires at least one mixin as an argument');
  }

  for (var i = 0, l = mixins.length; i < l; i++) {
    var descs = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["getOwnPropertyDescriptors"])(mixins[i]);
    var keys = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["getOwnKeys"])(descs);

    for (var j = 0, k = keys.length; j < k; j++) {
      var key = keys[j];

      if (!hasProperty(key, target.prototype)) {
        defineProperty(target.prototype, key, descs[key]);
      }
    }
  }
}

function mixin() {
  for (var _len = arguments.length, mixins = Array(_len), _key = 0; _key < _len; _key++) {
    mixins[_key] = arguments[_key];
  }

  Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["internalDeprecation"])('@mixin is deprecated and will be removed shortly. Use @mixin from lodash-decorators.\n\n  https://www.npmjs.com/package/lodash-decorators');

  if (typeof mixins[0] === 'function') {
    return handleClass(mixins[0], []);
  } else {
    return function (target) {
      return handleClass(target, mixins);
    };
  }
}

/***/ }),

/***/ "./node_modules/core-decorators/es/nonconfigurable.js":
/*!************************************************************!*\
  !*** ./node_modules/core-decorators/es/nonconfigurable.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return nonconfigurable; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");


function handleDescriptor(target, key, descriptor) {
  descriptor.configurable = false;
  return descriptor;
}

function nonconfigurable() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/nonenumerable.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-decorators/es/nonenumerable.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return nonenumerable; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");


function handleDescriptor(target, key, descriptor) {
  descriptor.enumerable = false;
  return descriptor;
}

function nonenumerable() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/override.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-decorators/es/override.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return override; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var GENERIC_FUNCTION_ERROR = '{child} does not properly override {parent}';
var FUNCTION_REGEXP = /^function ([_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)?(\([^\)]*\))[\s\S]+$/;

var SyntaxErrorReporter = function () {
  _createClass(SyntaxErrorReporter, [{
    key: '_getTopic',
    value: function _getTopic(descriptor) {
      if (descriptor === undefined) {
        return null;
      }

      if ('value' in descriptor) {
        return descriptor.value;
      }

      if ('get' in descriptor) {
        return descriptor.get;
      }

      if ('set' in descriptor) {
        return descriptor.set;
      }
    }
  }, {
    key: '_extractTopicSignature',
    value: function _extractTopicSignature(topic) {
      switch (typeof topic === 'undefined' ? 'undefined' : _typeof(topic)) {
        case 'function':
          return this._extractFunctionSignature(topic);
        default:
          return this.key;
      }
    }
  }, {
    key: '_extractFunctionSignature',
    value: function _extractFunctionSignature(fn) {
      var _this = this;

      return fn.toString().replace(FUNCTION_REGEXP, function (match) {
        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;
        var params = arguments[2];
        return name + params;
      });
    }
  }, {
    key: 'key',
    get: function get() {
      return this.childDescriptor.key;
    }
  }, {
    key: 'parentNotation',
    get: function get() {
      return this.parentKlass.constructor.name + '#' + this.parentPropertySignature;
    }
  }, {
    key: 'childNotation',
    get: function get() {
      return this.childKlass.constructor.name + '#' + this.childPropertySignature;
    }
  }, {
    key: 'parentTopic',
    get: function get() {
      return this._getTopic(this.parentDescriptor);
    }
  }, {
    key: 'childTopic',
    get: function get() {
      return this._getTopic(this.childDescriptor);
    }
  }, {
    key: 'parentPropertySignature',
    get: function get() {
      return this._extractTopicSignature(this.parentTopic);
    }
  }, {
    key: 'childPropertySignature',
    get: function get() {
      return this._extractTopicSignature(this.childTopic);
    }
  }]);

  function SyntaxErrorReporter(parentKlass, childKlass, parentDescriptor, childDescriptor) {
    _classCallCheck(this, SyntaxErrorReporter);

    this.parentKlass = parentKlass;
    this.childKlass = childKlass;
    this.parentDescriptor = parentDescriptor;
    this.childDescriptor = childDescriptor;
  }

  _createClass(SyntaxErrorReporter, [{
    key: 'assert',
    value: function assert(condition) {
      var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      if (condition !== true) {
        this.error(GENERIC_FUNCTION_ERROR + msg);
      }
    }
  }, {
    key: 'error',
    value: function error(msg) {
      var _this2 = this;

      msg = msg
      // Replace lazily, because they actually might not
      // be available in all cases
      .replace('{parent}', function (m) {
        return _this2.parentNotation;
      }).replace('{child}', function (m) {
        return _this2.childNotation;
      });
      throw new SyntaxError(msg);
    }
  }]);

  return SyntaxErrorReporter;
}();

function getDescriptorType(descriptor) {
  if (descriptor.hasOwnProperty('value')) {
    return 'data';
  }

  if (descriptor.hasOwnProperty('get') || descriptor.hasOwnProperty('set')) {
    return 'accessor';
  }

  // If none of them exist, browsers treat it as
  // a data descriptor with a value of `undefined`
  return 'data';
}

function checkFunctionSignatures(parent, child, reporter) {
  reporter.assert(parent.length === child.length);
}

function checkDataDescriptors(parent, child, reporter) {
  var parentValueType = _typeof(parent.value);
  var childValueType = _typeof(child.value);

  if (parentValueType === 'undefined' && childValueType === 'undefined') {
    // class properties can be any expression, which isn't ran until the
    // the instance is created, so we can't reliably get type information
    // for them yet (per spec). Perhaps when Babel includes flow-type info
    // in runtime? Tried regex solutions, but super hacky and only feasible
    // on primitives, which is confusing for usage...
    reporter.error('descriptor values are both undefined. (class properties are are not currently supported)\'');
  }

  if (parentValueType !== childValueType) {
    var isFunctionOverUndefined = childValueType === 'function' && parentValueType === undefined;
    // Even though we don't support class properties, this
    // will still handle more than just functions, just in case.
    // Shadowing an undefined value is an error if the inherited
    // value was undefined (usually a class property, not a method)
    if (isFunctionOverUndefined || parentValueType !== undefined) {
      reporter.error('value types do not match. {parent} is "' + parentValueType + '", {child} is "' + childValueType + '"');
    }
  }

  // Switch, in preparation for supporting more types
  switch (childValueType) {
    case 'function':
      checkFunctionSignatures(parent.value, child.value, reporter);
      break;

    default:
      reporter.error('Unexpected error. Please file a bug with: {parent} is "' + parentValueType + '", {child} is "' + childValueType + '"');
      break;
  }
}

function checkAccessorDescriptors(parent, child, reporter) {
  var parentHasGetter = typeof parent.get === 'function';
  var childHasGetter = typeof child.get === 'function';
  var parentHasSetter = typeof parent.set === 'function';
  var childHasSetter = typeof child.set === 'function';

  if (parentHasGetter || childHasGetter) {
    if (!parentHasGetter && parentHasSetter) {
      reporter.error('{parent} is setter but {child} is getter');
    }

    if (!childHasGetter && childHasSetter) {
      reporter.error('{parent} is getter but {child} is setter');
    }

    checkFunctionSignatures(parent.get, child.get, reporter);
  }

  if (parentHasSetter || childHasSetter) {
    if (!parentHasSetter && parentHasGetter) {
      reporter.error('{parent} is getter but {child} is setter');
    }

    if (!childHasSetter && childHasGetter) {
      reporter.error('{parent} is setter but {child} is getter');
    }

    checkFunctionSignatures(parent.set, child.set, reporter);
  }
}

function checkDescriptors(parent, child, reporter) {
  var parentType = getDescriptorType(parent);
  var childType = getDescriptorType(child);

  if (parentType !== childType) {
    reporter.error('descriptor types do not match. {parent} is "' + parentType + '", {child} is "' + childType + '"');
  }

  switch (childType) {
    case 'data':
      checkDataDescriptors(parent, child, reporter);
      break;

    case 'accessor':
      checkAccessorDescriptors(parent, child, reporter);
      break;
  }
}

var suggestionTransforms = [function (key) {
  return key.toLowerCase();
}, function (key) {
  return key.toUpperCase();
}, function (key) {
  return key + 's';
}, function (key) {
  return key.slice(0, -1);
}, function (key) {
  return key.slice(1, key.length);
}];

function findPossibleAlternatives(superKlass, key) {
  for (var i = 0, l = suggestionTransforms.length; i < l; i++) {
    var fn = suggestionTransforms[i];
    var suggestion = fn(key);

    if (suggestion in superKlass) {
      return suggestion;
    }
  }

  return null;
}

function handleDescriptor(target, key, descriptor) {
  descriptor.key = key;
  var superKlass = Object.getPrototypeOf(target);
  var superDescriptor = Object.getOwnPropertyDescriptor(superKlass, key);
  var reporter = new SyntaxErrorReporter(superKlass, target, superDescriptor, descriptor);

  if (superDescriptor === undefined) {
    var suggestedKey = findPossibleAlternatives(superKlass, key);
    var suggestion = suggestedKey ? '\n\n  Did you mean "' + suggestedKey + '"?' : '';
    reporter.error('No descriptor matching {child} was found on the prototype chain.' + suggestion);
  }

  checkDescriptors(superDescriptor, descriptor, reporter);

  return descriptor;
}

function override() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/private/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-decorators/es/private/utils.js ***!
  \**********************************************************/
/*! exports provided: isDescriptor, decorate, metaFor, getOwnKeys, getOwnPropertyDescriptors, createDefaultSetter, bind, warn, internalDeprecation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDescriptor", function() { return isDescriptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decorate", function() { return decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "metaFor", function() { return metaFor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOwnKeys", function() { return getOwnKeys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOwnPropertyDescriptors", function() { return getOwnPropertyDescriptors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDefaultSetter", function() { return createDefaultSetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bind", function() { return bind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "warn", function() { return warn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "internalDeprecation", function() { return internalDeprecation; });
/* harmony import */ var _lazy_initialize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lazy-initialize */ "./node_modules/core-decorators/es/lazy-initialize.js");
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }



var defineProperty = Object.defineProperty,
    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
    getOwnPropertyNames = Object.getOwnPropertyNames,
    getOwnPropertySymbols = Object.getOwnPropertySymbols;


function isDescriptor(desc) {
  if (!desc || !desc.hasOwnProperty) {
    return false;
  }

  var keys = ['value', 'initializer', 'get', 'set'];

  for (var i = 0, l = keys.length; i < l; i++) {
    if (desc.hasOwnProperty(keys[i])) {
      return true;
    }
  }

  return false;
}

function decorate(handleDescriptor, entryArgs) {
  if (isDescriptor(entryArgs[entryArgs.length - 1])) {
    return handleDescriptor.apply(undefined, _toConsumableArray(entryArgs).concat([[]]));
  } else {
    return function () {
      return handleDescriptor.apply(undefined, _toConsumableArray(Array.prototype.slice.call(arguments)).concat([entryArgs]));
    };
  }
}

var Meta = (_class = function Meta() {
  _classCallCheck(this, Meta);

  _initDefineProp(this, 'debounceTimeoutIds', _descriptor, this);

  _initDefineProp(this, 'throttleTimeoutIds', _descriptor2, this);

  _initDefineProp(this, 'throttlePreviousTimestamps', _descriptor3, this);

  _initDefineProp(this, 'throttleTrailingArgs', _descriptor4, this);

  _initDefineProp(this, 'profileLastRan', _descriptor5, this);
}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'debounceTimeoutIds', [_lazy_initialize__WEBPACK_IMPORTED_MODULE_0__["default"]], {
  enumerable: true,
  initializer: function initializer() {
    return {};
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'throttleTimeoutIds', [_lazy_initialize__WEBPACK_IMPORTED_MODULE_0__["default"]], {
  enumerable: true,
  initializer: function initializer() {
    return {};
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'throttlePreviousTimestamps', [_lazy_initialize__WEBPACK_IMPORTED_MODULE_0__["default"]], {
  enumerable: true,
  initializer: function initializer() {
    return {};
  }
}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, 'throttleTrailingArgs', [_lazy_initialize__WEBPACK_IMPORTED_MODULE_0__["default"]], {
  enumerable: true,
  initializer: function initializer() {
    return null;
  }
}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, 'profileLastRan', [_lazy_initialize__WEBPACK_IMPORTED_MODULE_0__["default"]], {
  enumerable: true,
  initializer: function initializer() {
    return null;
  }
})), _class);


var META_KEY = typeof Symbol === 'function' ? Symbol('__core_decorators__') : '__core_decorators__';

function metaFor(obj) {
  if (obj.hasOwnProperty(META_KEY) === false) {
    defineProperty(obj, META_KEY, {
      // Defaults: NOT enumerable, configurable, or writable
      value: new Meta()
    });
  }

  return obj[META_KEY];
}

var getOwnKeys = getOwnPropertySymbols ? function (object) {
  return getOwnPropertyNames(object).concat(getOwnPropertySymbols(object));
} : getOwnPropertyNames;

function getOwnPropertyDescriptors(obj) {
  var descs = {};

  getOwnKeys(obj).forEach(function (key) {
    return descs[key] = getOwnPropertyDescriptor(obj, key);
  });

  return descs;
}

function createDefaultSetter(key) {
  return function set(newValue) {
    Object.defineProperty(this, key, {
      configurable: true,
      writable: true,
      // IS enumerable when reassigned by the outside word
      enumerable: true,
      value: newValue
    });

    return newValue;
  };
}

function bind(fn, context) {
  if (fn.bind) {
    return fn.bind(context);
  } else {
    return function __autobind__() {
      return fn.apply(context, arguments);
    };
  }
}

var warn = function () {
  if ((typeof console === 'undefined' ? 'undefined' : _typeof(console)) !== 'object' || !console || typeof console.warn !== 'function') {
    return function () {};
  } else {
    return bind(console.warn, console);
  }
}();

var seenDeprecations = {};
function internalDeprecation(msg) {
  if (seenDeprecations[msg] !== true) {
    seenDeprecations[msg] = true;
    warn('DEPRECATION: ' + msg);
  }
}

/***/ }),

/***/ "./node_modules/core-decorators/es/profile.js":
/*!****************************************************!*\
  !*** ./node_modules/core-decorators/es/profile.js ***!
  \****************************************************/
/*! exports provided: defaultConsole, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultConsole", function() { return defaultConsole; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return profile; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();



var oc = console;

// Exported for mocking in tests
var defaultConsole = {
  profile: console.profile ? Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["bind"])(console.profile, console) : function () {},
  profileEnd: console.profileEnd ? Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["bind"])(console.profileEnd, console) : function () {},
  warn: _private_utils__WEBPACK_IMPORTED_MODULE_0__["warn"]
};

function handleDescriptor(target, key, descriptor, _ref) {
  var _ref2 = _slicedToArray(_ref, 3),
      _ref2$ = _ref2[0],
      prefix = _ref2$ === undefined ? null : _ref2$,
      _ref2$2 = _ref2[1],
      onceThrottleOrFunction = _ref2$2 === undefined ? false : _ref2$2,
      _ref2$3 = _ref2[2],
      console = _ref2$3 === undefined ? defaultConsole : _ref2$3;

  if (!profile.__enabled) {
    if (!profile.__warned) {
      console.warn('console.profile is not supported. All @profile decorators are disabled.');
      profile.__warned = true;
    }
    return descriptor;
  }

  var fn = descriptor.value;

  if (prefix === null) {
    prefix = target.constructor.name + '.' + key;
  }

  if (typeof fn !== 'function') {
    throw new SyntaxError('@profile can only be used on functions, not: ' + fn);
  }

  return _extends({}, descriptor, {
    value: function value() {
      var now = Date.now();
      var meta = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["metaFor"])(this);
      if (onceThrottleOrFunction === true && !meta.profileLastRan || onceThrottleOrFunction === false || typeof onceThrottleOrFunction === 'number' && now - meta.profileLastRan > onceThrottleOrFunction || typeof onceThrottleOrFunction === 'function' && onceThrottleOrFunction.apply(this, arguments)) {
        console.profile(prefix);
        meta.profileLastRan = now;
      }

      try {
        return fn.apply(this, arguments);
      } finally {
        console.profileEnd(prefix);
      }
    }
  });
}

function profile() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

// Only Chrome, Firefox, and Edge support profile.
// Exposing properties for testing.
profile.__enabled = !!console.profile;
profile.__warned = false;

/***/ }),

/***/ "./node_modules/core-decorators/es/readonly.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-decorators/es/readonly.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return readonly; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");


function handleDescriptor(target, key, descriptor) {
  descriptor.writable = false;
  return descriptor;
}

function readonly() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/suppress-warnings.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-decorators/es/suppress-warnings.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return suppressWarnings; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



function suppressedWarningNoop() {
  // Warnings are currently suppressed via @suppressWarnings
}

function applyWithoutWarnings(context, fn, args) {
  if ((typeof console === 'undefined' ? 'undefined' : _typeof(console)) === 'object') {
    var nativeWarn = console.warn;
    console.warn = suppressedWarningNoop;
    var ret = fn.apply(context, args);
    console.warn = nativeWarn;
    return ret;
  } else {
    return fn.apply(context, args);
  }
}

function handleDescriptor(target, key, descriptor) {
  return _extends({}, descriptor, {
    value: function suppressWarningsWrapper() {
      return applyWithoutWarnings(this, descriptor.value, arguments);
    }
  });
}

function suppressWarnings() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/throttle.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-decorators/es/throttle.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return throttle; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();



var DEFAULT_TIMEOUT = 300;

function handleDescriptor(target, key, descriptor, _ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      _ref2$ = _ref2[0],
      wait = _ref2$ === undefined ? DEFAULT_TIMEOUT : _ref2$,
      _ref2$2 = _ref2[1],
      options = _ref2$2 === undefined ? {} : _ref2$2;

  var callback = descriptor.value;

  if (typeof callback !== 'function') {
    throw new SyntaxError('Only functions can be throttled');
  }

  if (options.leading !== false) {
    options.leading = true;
  }

  if (options.trailing !== false) {
    options.trailing = true;
  }

  return _extends({}, descriptor, {
    value: function value() {
      var _this = this;

      var meta = Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["metaFor"])(this);
      var throttleTimeoutIds = meta.throttleTimeoutIds,
          throttlePreviousTimestamps = meta.throttlePreviousTimestamps;

      var timeout = throttleTimeoutIds[key];
      // last execute timestamp
      var previous = throttlePreviousTimestamps[key] || 0;
      var now = Date.now();

      if (options.trailing) {
        meta.throttleTrailingArgs = arguments;
      }

      // if first be called and disable the execution on the leading edge
      // set last execute timestamp to now
      if (!previous && options.leading === false) {
        previous = now;
      }

      var remaining = wait - (now - previous);

      if (remaining <= 0) {
        clearTimeout(timeout);
        delete throttleTimeoutIds[key];
        throttlePreviousTimestamps[key] = now;
        callback.apply(this, arguments);
      } else if (!timeout && options.trailing) {
        throttleTimeoutIds[key] = setTimeout(function () {
          throttlePreviousTimestamps[key] = options.leading === false ? 0 : Date.now();
          delete throttleTimeoutIds[key];
          callback.apply(_this, meta.throttleTrailingArgs);
          // don't leak memory!
          meta.throttleTrailingArgs = null;
        }, remaining);
      }
    }
  });
}

function throttle() {
  Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["internalDeprecation"])('@throttle is deprecated and will be removed shortly. Use @throttle from lodash-decorators.\n\n  https://www.npmjs.com/package/lodash-decorators');

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/core-decorators/es/time.js":
/*!*************************************************!*\
  !*** ./node_modules/core-decorators/es/time.js ***!
  \*************************************************/
/*! exports provided: defaultConsole, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultConsole", function() { return defaultConsole; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return time; });
/* harmony import */ var _private_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/utils */ "./node_modules/core-decorators/es/private/utils.js");
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();



var labels = {};

// Exported for mocking in tests
var defaultConsole = {
  time: console.time ? console.time.bind(console) : function (label) {
    labels[label] = new Date();
  },
  timeEnd: console.timeEnd ? console.timeEnd.bind(console) : function (label) {
    var timeNow = new Date();
    var timeTaken = timeNow - labels[label];
    delete labels[label];
    console.log(label + ': ' + timeTaken + 'ms');
  }
};

var count = 0;

function handleDescriptor(target, key, descriptor, _ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      _ref2$ = _ref2[0],
      prefix = _ref2$ === undefined ? null : _ref2$,
      _ref2$2 = _ref2[1],
      console = _ref2$2 === undefined ? defaultConsole : _ref2$2;

  var fn = descriptor.value;

  if (prefix === null) {
    prefix = target.constructor.name + '.' + key;
  }

  if (typeof fn !== 'function') {
    throw new SyntaxError('@time can only be used on functions, not: ' + fn);
  }

  return _extends({}, descriptor, {
    value: function value() {
      var label = prefix + '-' + count;
      count++;
      console.time(label);

      try {
        return fn.apply(this, arguments);
      } finally {
        console.timeEnd(label);
      }
    }
  });
}

function time() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object(_private_utils__WEBPACK_IMPORTED_MODULE_0__["decorate"])(handleDescriptor, args);
}

/***/ }),

/***/ "./node_modules/hammerjs/hammer.js":
/*!*****************************************!*\
  !*** ./node_modules/hammerjs/hammer.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
(function(window, document, exportName, undefined) {
  'use strict';

var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
var TEST_ELEMENT = document.createElement('div');

var TYPE_FUNCTION = 'function';

var round = Math.round;
var abs = Math.abs;
var now = Date.now;

/**
 * set a timeout with a given scope
 * @param {Function} fn
 * @param {Number} timeout
 * @param {Object} context
 * @returns {number}
 */
function setTimeoutContext(fn, timeout, context) {
    return setTimeout(bindFn(fn, context), timeout);
}

/**
 * if the argument is an array, we want to execute the fn on each entry
 * if it aint an array we don't want to do a thing.
 * this is used by all the methods that accept a single and array argument.
 * @param {*|Array} arg
 * @param {String} fn
 * @param {Object} [context]
 * @returns {Boolean}
 */
function invokeArrayArg(arg, fn, context) {
    if (Array.isArray(arg)) {
        each(arg, context[fn], context);
        return true;
    }
    return false;
}

/**
 * walk objects and arrays
 * @param {Object} obj
 * @param {Function} iterator
 * @param {Object} context
 */
function each(obj, iterator, context) {
    var i;

    if (!obj) {
        return;
    }

    if (obj.forEach) {
        obj.forEach(iterator, context);
    } else if (obj.length !== undefined) {
        i = 0;
        while (i < obj.length) {
            iterator.call(context, obj[i], i, obj);
            i++;
        }
    } else {
        for (i in obj) {
            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
        }
    }
}

/**
 * wrap a method with a deprecation warning and stack trace
 * @param {Function} method
 * @param {String} name
 * @param {String} message
 * @returns {Function} A new function wrapping the supplied method.
 */
function deprecate(method, name, message) {
    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
    return function() {
        var e = new Error('get-stack-trace');
        var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
            .replace(/^\s+at\s+/gm, '')
            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

        var log = window.console && (window.console.warn || window.console.log);
        if (log) {
            log.call(window.console, deprecationMessage, stack);
        }
        return method.apply(this, arguments);
    };
}

/**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} target
 * @param {...Object} objects_to_assign
 * @returns {Object} target
 */
var assign;
if (typeof Object.assign !== 'function') {
    assign = function assign(target) {
        if (target === undefined || target === null) {
            throw new TypeError('Cannot convert undefined or null to object');
        }

        var output = Object(target);
        for (var index = 1; index < arguments.length; index++) {
            var source = arguments[index];
            if (source !== undefined && source !== null) {
                for (var nextKey in source) {
                    if (source.hasOwnProperty(nextKey)) {
                        output[nextKey] = source[nextKey];
                    }
                }
            }
        }
        return output;
    };
} else {
    assign = Object.assign;
}

/**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} dest
 * @param {Object} src
 * @param {Boolean} [merge=false]
 * @returns {Object} dest
 */
var extend = deprecate(function extend(dest, src, merge) {
    var keys = Object.keys(src);
    var i = 0;
    while (i < keys.length) {
        if (!merge || (merge && dest[keys[i]] === undefined)) {
            dest[keys[i]] = src[keys[i]];
        }
        i++;
    }
    return dest;
}, 'extend', 'Use `assign`.');

/**
 * merge the values from src in the dest.
 * means that properties that exist in dest will not be overwritten by src
 * @param {Object} dest
 * @param {Object} src
 * @returns {Object} dest
 */
var merge = deprecate(function merge(dest, src) {
    return extend(dest, src, true);
}, 'merge', 'Use `assign`.');

/**
 * simple class inheritance
 * @param {Function} child
 * @param {Function} base
 * @param {Object} [properties]
 */
function inherit(child, base, properties) {
    var baseP = base.prototype,
        childP;

    childP = child.prototype = Object.create(baseP);
    childP.constructor = child;
    childP._super = baseP;

    if (properties) {
        assign(childP, properties);
    }
}

/**
 * simple function bind
 * @param {Function} fn
 * @param {Object} context
 * @returns {Function}
 */
function bindFn(fn, context) {
    return function boundFn() {
        return fn.apply(context, arguments);
    };
}

/**
 * let a boolean value also be a function that must return a boolean
 * this first item in args will be used as the context
 * @param {Boolean|Function} val
 * @param {Array} [args]
 * @returns {Boolean}
 */
function boolOrFn(val, args) {
    if (typeof val == TYPE_FUNCTION) {
        return val.apply(args ? args[0] || undefined : undefined, args);
    }
    return val;
}

/**
 * use the val2 when val1 is undefined
 * @param {*} val1
 * @param {*} val2
 * @returns {*}
 */
function ifUndefined(val1, val2) {
    return (val1 === undefined) ? val2 : val1;
}

/**
 * addEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function addEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
        target.addEventListener(type, handler, false);
    });
}

/**
 * removeEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function removeEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
        target.removeEventListener(type, handler, false);
    });
}

/**
 * find if a node is in the given parent
 * @method hasParent
 * @param {HTMLElement} node
 * @param {HTMLElement} parent
 * @return {Boolean} found
 */
function hasParent(node, parent) {
    while (node) {
        if (node == parent) {
            return true;
        }
        node = node.parentNode;
    }
    return false;
}

/**
 * small indexOf wrapper
 * @param {String} str
 * @param {String} find
 * @returns {Boolean} found
 */
function inStr(str, find) {
    return str.indexOf(find) > -1;
}

/**
 * split string on whitespace
 * @param {String} str
 * @returns {Array} words
 */
function splitStr(str) {
    return str.trim().split(/\s+/g);
}

/**
 * find if a array contains the object using indexOf or a simple polyFill
 * @param {Array} src
 * @param {String} find
 * @param {String} [findByKey]
 * @return {Boolean|Number} false when not found, or the index
 */
function inArray(src, find, findByKey) {
    if (src.indexOf && !findByKey) {
        return src.indexOf(find);
    } else {
        var i = 0;
        while (i < src.length) {
            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
                return i;
            }
            i++;
        }
        return -1;
    }
}

/**
 * convert array-like objects to real arrays
 * @param {Object} obj
 * @returns {Array}
 */
function toArray(obj) {
    return Array.prototype.slice.call(obj, 0);
}

/**
 * unique array with objects based on a key (like 'id') or just by the array's value
 * @param {Array} src [{id:1},{id:2},{id:1}]
 * @param {String} [key]
 * @param {Boolean} [sort=False]
 * @returns {Array} [{id:1},{id:2}]
 */
function uniqueArray(src, key, sort) {
    var results = [];
    var values = [];
    var i = 0;

    while (i < src.length) {
        var val = key ? src[i][key] : src[i];
        if (inArray(values, val) < 0) {
            results.push(src[i]);
        }
        values[i] = val;
        i++;
    }

    if (sort) {
        if (!key) {
            results = results.sort();
        } else {
            results = results.sort(function sortUniqueArray(a, b) {
                return a[key] > b[key];
            });
        }
    }

    return results;
}

/**
 * get the prefixed property
 * @param {Object} obj
 * @param {String} property
 * @returns {String|Undefined} prefixed
 */
function prefixed(obj, property) {
    var prefix, prop;
    var camelProp = property[0].toUpperCase() + property.slice(1);

    var i = 0;
    while (i < VENDOR_PREFIXES.length) {
        prefix = VENDOR_PREFIXES[i];
        prop = (prefix) ? prefix + camelProp : property;

        if (prop in obj) {
            return prop;
        }
        i++;
    }
    return undefined;
}

/**
 * get a unique id
 * @returns {number} uniqueId
 */
var _uniqueId = 1;
function uniqueId() {
    return _uniqueId++;
}

/**
 * get the window object of an element
 * @param {HTMLElement} element
 * @returns {DocumentView|Window}
 */
function getWindowForElement(element) {
    var doc = element.ownerDocument || element;
    return (doc.defaultView || doc.parentWindow || window);
}

var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

var SUPPORT_TOUCH = ('ontouchstart' in window);
var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

var INPUT_TYPE_TOUCH = 'touch';
var INPUT_TYPE_PEN = 'pen';
var INPUT_TYPE_MOUSE = 'mouse';
var INPUT_TYPE_KINECT = 'kinect';

var COMPUTE_INTERVAL = 25;

var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;

var DIRECTION_NONE = 1;
var DIRECTION_LEFT = 2;
var DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;

var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

var PROPS_XY = ['x', 'y'];
var PROPS_CLIENT_XY = ['clientX', 'clientY'];

/**
 * create new input type manager
 * @param {Manager} manager
 * @param {Function} callback
 * @returns {Input}
 * @constructor
 */
function Input(manager, callback) {
    var self = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;

    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
    // so when disabled the input events are completely bypassed.
    this.domHandler = function(ev) {
        if (boolOrFn(manager.options.enable, [manager])) {
            self.handler(ev);
        }
    };

    this.init();

}

Input.prototype = {
    /**
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */
    handler: function() { },

    /**
     * bind the events
     */
    init: function() {
        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    },

    /**
     * unbind the events
     */
    destroy: function() {
        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    }
};

/**
 * create new input type manager
 * called by the Manager constructor
 * @param {Hammer} manager
 * @returns {Input}
 */
function createInputInstance(manager) {
    var Type;
    var inputClass = manager.options.inputClass;

    if (inputClass) {
        Type = inputClass;
    } else if (SUPPORT_POINTER_EVENTS) {
        Type = PointerEventInput;
    } else if (SUPPORT_ONLY_TOUCH) {
        Type = TouchInput;
    } else if (!SUPPORT_TOUCH) {
        Type = MouseInput;
    } else {
        Type = TouchMouseInput;
    }
    return new (Type)(manager, inputHandler);
}

/**
 * handle input events
 * @param {Manager} manager
 * @param {String} eventType
 * @param {Object} input
 */
function inputHandler(manager, eventType, input) {
    var pointersLen = input.pointers.length;
    var changedPointersLen = input.changedPointers.length;
    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

    input.isFirst = !!isFirst;
    input.isFinal = !!isFinal;

    if (isFirst) {
        manager.session = {};
    }

    // source event is the normalized value of the domEvents
    // like 'touchstart, mouseup, pointerdown'
    input.eventType = eventType;

    // compute scale, rotation etc
    computeInputData(manager, input);

    // emit secret event
    manager.emit('hammer.input', input);

    manager.recognize(input);
    manager.session.prevInput = input;
}

/**
 * extend the data with some usable properties like scale, rotate, velocity etc
 * @param {Object} manager
 * @param {Object} input
 */
function computeInputData(manager, input) {
    var session = manager.session;
    var pointers = input.pointers;
    var pointersLength = pointers.length;

    // store the first input to calculate the distance and direction
    if (!session.firstInput) {
        session.firstInput = simpleCloneInputData(input);
    }

    // to compute scale and rotation we need to store the multiple touches
    if (pointersLength > 1 && !session.firstMultiple) {
        session.firstMultiple = simpleCloneInputData(input);
    } else if (pointersLength === 1) {
        session.firstMultiple = false;
    }

    var firstInput = session.firstInput;
    var firstMultiple = session.firstMultiple;
    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

    var center = input.center = getCenter(pointers);
    input.timeStamp = now();
    input.deltaTime = input.timeStamp - firstInput.timeStamp;

    input.angle = getAngle(offsetCenter, center);
    input.distance = getDistance(offsetCenter, center);

    computeDeltaXY(session, input);
    input.offsetDirection = getDirection(input.deltaX, input.deltaY);

    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
    input.overallVelocityX = overallVelocity.x;
    input.overallVelocityY = overallVelocity.y;
    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

    computeIntervalInputData(session, input);

    // find the correct target
    var target = manager.element;
    if (hasParent(input.srcEvent.target, target)) {
        target = input.srcEvent.target;
    }
    input.target = target;
}

function computeDeltaXY(session, input) {
    var center = input.center;
    var offset = session.offsetDelta || {};
    var prevDelta = session.prevDelta || {};
    var prevInput = session.prevInput || {};

    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
        prevDelta = session.prevDelta = {
            x: prevInput.deltaX || 0,
            y: prevInput.deltaY || 0
        };

        offset = session.offsetDelta = {
            x: center.x,
            y: center.y
        };
    }

    input.deltaX = prevDelta.x + (center.x - offset.x);
    input.deltaY = prevDelta.y + (center.y - offset.y);
}

/**
 * velocity is calculated every x ms
 * @param {Object} session
 * @param {Object} input
 */
function computeIntervalInputData(session, input) {
    var last = session.lastInterval || input,
        deltaTime = input.timeStamp - last.timeStamp,
        velocity, velocityX, velocityY, direction;

    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
        var deltaX = input.deltaX - last.deltaX;
        var deltaY = input.deltaY - last.deltaY;

        var v = getVelocity(deltaTime, deltaX, deltaY);
        velocityX = v.x;
        velocityY = v.y;
        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
        direction = getDirection(deltaX, deltaY);

        session.lastInterval = input;
    } else {
        // use latest velocity info if it doesn't overtake a minimum period
        velocity = last.velocity;
        velocityX = last.velocityX;
        velocityY = last.velocityY;
        direction = last.direction;
    }

    input.velocity = velocity;
    input.velocityX = velocityX;
    input.velocityY = velocityY;
    input.direction = direction;
}

/**
 * create a simple clone from the input used for storage of firstInput and firstMultiple
 * @param {Object} input
 * @returns {Object} clonedInputData
 */
function simpleCloneInputData(input) {
    // make a simple copy of the pointers because we will get a reference if we don't
    // we only need clientXY for the calculations
    var pointers = [];
    var i = 0;
    while (i < input.pointers.length) {
        pointers[i] = {
            clientX: round(input.pointers[i].clientX),
            clientY: round(input.pointers[i].clientY)
        };
        i++;
    }

    return {
        timeStamp: now(),
        pointers: pointers,
        center: getCenter(pointers),
        deltaX: input.deltaX,
        deltaY: input.deltaY
    };
}

/**
 * get the center of all the pointers
 * @param {Array} pointers
 * @return {Object} center contains `x` and `y` properties
 */
function getCenter(pointers) {
    var pointersLength = pointers.length;

    // no need to loop when only one touch
    if (pointersLength === 1) {
        return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
    }

    var x = 0, y = 0, i = 0;
    while (i < pointersLength) {
        x += pointers[i].clientX;
        y += pointers[i].clientY;
        i++;
    }

    return {
        x: round(x / pointersLength),
        y: round(y / pointersLength)
    };
}

/**
 * calculate the velocity between two points. unit is in px per ms.
 * @param {Number} deltaTime
 * @param {Number} x
 * @param {Number} y
 * @return {Object} velocity `x` and `y`
 */
function getVelocity(deltaTime, x, y) {
    return {
        x: x / deltaTime || 0,
        y: y / deltaTime || 0
    };
}

/**
 * get the direction between two points
 * @param {Number} x
 * @param {Number} y
 * @return {Number} direction
 */
function getDirection(x, y) {
    if (x === y) {
        return DIRECTION_NONE;
    }

    if (abs(x) >= abs(y)) {
        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
    }
    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
}

/**
 * calculate the absolute distance between two points
 * @param {Object} p1 {x, y}
 * @param {Object} p2 {x, y}
 * @param {Array} [props] containing x and y keys
 * @return {Number} distance
 */
function getDistance(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];

    return Math.sqrt((x * x) + (y * y));
}

/**
 * calculate the angle between two coordinates
 * @param {Object} p1
 * @param {Object} p2
 * @param {Array} [props] containing x and y keys
 * @return {Number} angle
 */
function getAngle(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];
    return Math.atan2(y, x) * 180 / Math.PI;
}

/**
 * calculate the rotation degrees between two pointersets
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} rotation
 */
function getRotation(start, end) {
    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
}

/**
 * calculate the scale factor between two pointersets
 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} scale
 */
function getScale(start, end) {
    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
}

var MOUSE_INPUT_MAP = {
    mousedown: INPUT_START,
    mousemove: INPUT_MOVE,
    mouseup: INPUT_END
};

var MOUSE_ELEMENT_EVENTS = 'mousedown';
var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

/**
 * Mouse events input
 * @constructor
 * @extends Input
 */
function MouseInput() {
    this.evEl = MOUSE_ELEMENT_EVENTS;
    this.evWin = MOUSE_WINDOW_EVENTS;

    this.pressed = false; // mousedown state

    Input.apply(this, arguments);
}

inherit(MouseInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function MEhandler(ev) {
        var eventType = MOUSE_INPUT_MAP[ev.type];

        // on start we want to have the left mouse button down
        if (eventType & INPUT_START && ev.button === 0) {
            this.pressed = true;
        }

        if (eventType & INPUT_MOVE && ev.which !== 1) {
            eventType = INPUT_END;
        }

        // mouse must be down
        if (!this.pressed) {
            return;
        }

        if (eventType & INPUT_END) {
            this.pressed = false;
        }

        this.callback(this.manager, eventType, {
            pointers: [ev],
            changedPointers: [ev],
            pointerType: INPUT_TYPE_MOUSE,
            srcEvent: ev
        });
    }
});

var POINTER_INPUT_MAP = {
    pointerdown: INPUT_START,
    pointermove: INPUT_MOVE,
    pointerup: INPUT_END,
    pointercancel: INPUT_CANCEL,
    pointerout: INPUT_CANCEL
};

// in IE10 the pointer types is defined as an enum
var IE10_POINTER_TYPE_ENUM = {
    2: INPUT_TYPE_TOUCH,
    3: INPUT_TYPE_PEN,
    4: INPUT_TYPE_MOUSE,
    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
};

var POINTER_ELEMENT_EVENTS = 'pointerdown';
var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

// IE10 has prefixed support, and case-sensitive
if (window.MSPointerEvent && !window.PointerEvent) {
    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
}

/**
 * Pointer events input
 * @constructor
 * @extends Input
 */
function PointerEventInput() {
    this.evEl = POINTER_ELEMENT_EVENTS;
    this.evWin = POINTER_WINDOW_EVENTS;

    Input.apply(this, arguments);

    this.store = (this.manager.session.pointerEvents = []);
}

inherit(PointerEventInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function PEhandler(ev) {
        var store = this.store;
        var removePointer = false;

        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

        var isTouch = (pointerType == INPUT_TYPE_TOUCH);

        // get index of the event in the store
        var storeIndex = inArray(store, ev.pointerId, 'pointerId');

        // start and mouse must be down
        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
            if (storeIndex < 0) {
                store.push(ev);
                storeIndex = store.length - 1;
            }
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            removePointer = true;
        }

        // it not found, so the pointer hasn't been down (so it's probably a hover)
        if (storeIndex < 0) {
            return;
        }

        // update the event in the store
        store[storeIndex] = ev;

        this.callback(this.manager, eventType, {
            pointers: store,
            changedPointers: [ev],
            pointerType: pointerType,
            srcEvent: ev
        });

        if (removePointer) {
            // remove from the store
            store.splice(storeIndex, 1);
        }
    }
});

var SINGLE_TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};

var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

/**
 * Touch events input
 * @constructor
 * @extends Input
 */
function SingleTouchInput() {
    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
    this.started = false;

    Input.apply(this, arguments);
}

inherit(SingleTouchInput, Input, {
    handler: function TEhandler(ev) {
        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

        // should we handle the touch events?
        if (type === INPUT_START) {
            this.started = true;
        }

        if (!this.started) {
            return;
        }

        var touches = normalizeSingleTouches.call(this, ev, type);

        // when done, reset the started state
        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
            this.started = false;
        }

        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});

/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function normalizeSingleTouches(ev, type) {
    var all = toArray(ev.touches);
    var changed = toArray(ev.changedTouches);

    if (type & (INPUT_END | INPUT_CANCEL)) {
        all = uniqueArray(all.concat(changed), 'identifier', true);
    }

    return [all, changed];
}

var TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};

var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

/**
 * Multi-user touch events input
 * @constructor
 * @extends Input
 */
function TouchInput() {
    this.evTarget = TOUCH_TARGET_EVENTS;
    this.targetIds = {};

    Input.apply(this, arguments);
}

inherit(TouchInput, Input, {
    handler: function MTEhandler(ev) {
        var type = TOUCH_INPUT_MAP[ev.type];
        var touches = getTouches.call(this, ev, type);
        if (!touches) {
            return;
        }

        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});

/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function getTouches(ev, type) {
    var allTouches = toArray(ev.touches);
    var targetIds = this.targetIds;

    // when there is only one touch, the process can be simplified
    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
        targetIds[allTouches[0].identifier] = true;
        return [allTouches, allTouches];
    }

    var i,
        targetTouches,
        changedTouches = toArray(ev.changedTouches),
        changedTargetTouches = [],
        target = this.target;

    // get target touches from touches
    targetTouches = allTouches.filter(function(touch) {
        return hasParent(touch.target, target);
    });

    // collect touches
    if (type === INPUT_START) {
        i = 0;
        while (i < targetTouches.length) {
            targetIds[targetTouches[i].identifier] = true;
            i++;
        }
    }

    // filter changed touches to only contain touches that exist in the collected target ids
    i = 0;
    while (i < changedTouches.length) {
        if (targetIds[changedTouches[i].identifier]) {
            changedTargetTouches.push(changedTouches[i]);
        }

        // cleanup removed touches
        if (type & (INPUT_END | INPUT_CANCEL)) {
            delete targetIds[changedTouches[i].identifier];
        }
        i++;
    }

    if (!changedTargetTouches.length) {
        return;
    }

    return [
        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
        changedTargetTouches
    ];
}

/**
 * Combined touch and mouse input
 *
 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
 * This because touch devices also emit mouse events while doing a touch.
 *
 * @constructor
 * @extends Input
 */

var DEDUP_TIMEOUT = 2500;
var DEDUP_DISTANCE = 25;

function TouchMouseInput() {
    Input.apply(this, arguments);

    var handler = bindFn(this.handler, this);
    this.touch = new TouchInput(this.manager, handler);
    this.mouse = new MouseInput(this.manager, handler);

    this.primaryTouch = null;
    this.lastTouches = [];
}

inherit(TouchMouseInput, Input, {
    /**
     * handle mouse and touch events
     * @param {Hammer} manager
     * @param {String} inputEvent
     * @param {Object} inputData
     */
    handler: function TMEhandler(manager, inputEvent, inputData) {
        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
            return;
        }

        // when we're in a touch event, record touches to  de-dupe synthetic mouse event
        if (isTouch) {
            recordTouches.call(this, inputEvent, inputData);
        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
            return;
        }

        this.callback(manager, inputEvent, inputData);
    },

    /**
     * remove the event listeners
     */
    destroy: function destroy() {
        this.touch.destroy();
        this.mouse.destroy();
    }
});

function recordTouches(eventType, eventData) {
    if (eventType & INPUT_START) {
        this.primaryTouch = eventData.changedPointers[0].identifier;
        setLastTouch.call(this, eventData);
    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
        setLastTouch.call(this, eventData);
    }
}

function setLastTouch(eventData) {
    var touch = eventData.changedPointers[0];

    if (touch.identifier === this.primaryTouch) {
        var lastTouch = {x: touch.clientX, y: touch.clientY};
        this.lastTouches.push(lastTouch);
        var lts = this.lastTouches;
        var removeLastTouch = function() {
            var i = lts.indexOf(lastTouch);
            if (i > -1) {
                lts.splice(i, 1);
            }
        };
        setTimeout(removeLastTouch, DEDUP_TIMEOUT);
    }
}

function isSyntheticEvent(eventData) {
    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
    for (var i = 0; i < this.lastTouches.length; i++) {
        var t = this.lastTouches[i];
        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
            return true;
        }
    }
    return false;
}

var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

// magical touchAction value
var TOUCH_ACTION_COMPUTE = 'compute';
var TOUCH_ACTION_AUTO = 'auto';
var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
var TOUCH_ACTION_NONE = 'none';
var TOUCH_ACTION_PAN_X = 'pan-x';
var TOUCH_ACTION_PAN_Y = 'pan-y';
var TOUCH_ACTION_MAP = getTouchActionProps();

/**
 * Touch Action
 * sets the touchAction property or uses the js alternative
 * @param {Manager} manager
 * @param {String} value
 * @constructor
 */
function TouchAction(manager, value) {
    this.manager = manager;
    this.set(value);
}

TouchAction.prototype = {
    /**
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */
    set: function(value) {
        // find out the touch-action by the event handlers
        if (value == TOUCH_ACTION_COMPUTE) {
            value = this.compute();
        }

        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
        }
        this.actions = value.toLowerCase().trim();
    },

    /**
     * just re-set the touchAction value
     */
    update: function() {
        this.set(this.manager.options.touchAction);
    },

    /**
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */
    compute: function() {
        var actions = [];
        each(this.manager.recognizers, function(recognizer) {
            if (boolOrFn(recognizer.options.enable, [recognizer])) {
                actions = actions.concat(recognizer.getTouchAction());
            }
        });
        return cleanTouchActions(actions.join(' '));
    },

    /**
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */
    preventDefaults: function(input) {
        var srcEvent = input.srcEvent;
        var direction = input.offsetDirection;

        // if the touch action did prevented once this session
        if (this.manager.session.prevented) {
            srcEvent.preventDefault();
            return;
        }

        var actions = this.actions;
        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

        if (hasNone) {
            //do not prevent defaults if this is a tap gesture

            var isTapPointer = input.pointers.length === 1;
            var isTapMovement = input.distance < 2;
            var isTapTouchTime = input.deltaTime < 250;

            if (isTapPointer && isTapMovement && isTapTouchTime) {
                return;
            }
        }

        if (hasPanX && hasPanY) {
            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
        }

        if (hasNone ||
            (hasPanY && direction & DIRECTION_HORIZONTAL) ||
            (hasPanX && direction & DIRECTION_VERTICAL)) {
            return this.preventSrc(srcEvent);
        }
    },

    /**
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */
    preventSrc: function(srcEvent) {
        this.manager.session.prevented = true;
        srcEvent.preventDefault();
    }
};

/**
 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
 * @param {String} actions
 * @returns {*}
 */
function cleanTouchActions(actions) {
    // none
    if (inStr(actions, TOUCH_ACTION_NONE)) {
        return TOUCH_ACTION_NONE;
    }

    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

    // if both pan-x and pan-y are set (different recognizers
    // for different directions, e.g. horizontal pan but vertical swipe?)
    // we need none (as otherwise with pan-x pan-y combined none of these
    // recognizers will work, since the browser would handle all panning
    if (hasPanX && hasPanY) {
        return TOUCH_ACTION_NONE;
    }

    // pan-x OR pan-y
    if (hasPanX || hasPanY) {
        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
    }

    // manipulation
    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
        return TOUCH_ACTION_MANIPULATION;
    }

    return TOUCH_ACTION_AUTO;
}

function getTouchActionProps() {
    if (!NATIVE_TOUCH_ACTION) {
        return false;
    }
    var touchMap = {};
    var cssSupports = window.CSS && window.CSS.supports;
    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

        // If css.supports is not supported but there is native touch-action assume it supports
        // all values. This is the case for IE 10 and 11.
        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
    });
    return touchMap;
}

/**
 * Recognizer flow explained; *
 * All recognizers have the initial state of POSSIBLE when a input session starts.
 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
 * Example session for mouse-input: mousedown -> mousemove -> mouseup
 *
 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
 * which determines with state it should be.
 *
 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
 * POSSIBLE to give it another change on the next cycle.
 *
 *               Possible
 *                  |
 *            +-----+---------------+
 *            |                     |
 *      +-----+-----+               |
 *      |           |               |
 *   Failed      Cancelled          |
 *                          +-------+------+
 *                          |              |
 *                      Recognized       Began
 *                                         |
 *                                      Changed
 *                                         |
 *                                  Ended/Recognized
 */
var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;

/**
 * Recognizer
 * Every recognizer needs to extend from this class.
 * @constructor
 * @param {Object} options
 */
function Recognizer(options) {
    this.options = assign({}, this.defaults, options || {});

    this.id = uniqueId();

    this.manager = null;

    // default is enable true
    this.options.enable = ifUndefined(this.options.enable, true);

    this.state = STATE_POSSIBLE;

    this.simultaneous = {};
    this.requireFail = [];
}

Recognizer.prototype = {
    /**
     * @virtual
     * @type {Object}
     */
    defaults: {},

    /**
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */
    set: function(options) {
        assign(this.options, options);

        // also update the touchAction, in case something changed about the directions/enabled state
        this.manager && this.manager.touchAction.update();
        return this;
    },

    /**
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    recognizeWith: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
            return this;
        }

        var simultaneous = this.simultaneous;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (!simultaneous[otherRecognizer.id]) {
            simultaneous[otherRecognizer.id] = otherRecognizer;
            otherRecognizer.recognizeWith(this);
        }
        return this;
    },

    /**
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRecognizeWith: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
            return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        delete this.simultaneous[otherRecognizer.id];
        return this;
    },

    /**
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    requireFailure: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
            return this;
        }

        var requireFail = this.requireFail;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (inArray(requireFail, otherRecognizer) === -1) {
            requireFail.push(otherRecognizer);
            otherRecognizer.requireFailure(this);
        }
        return this;
    },

    /**
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRequireFailure: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
            return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        var index = inArray(this.requireFail, otherRecognizer);
        if (index > -1) {
            this.requireFail.splice(index, 1);
        }
        return this;
    },

    /**
     * has require failures boolean
     * @returns {boolean}
     */
    hasRequireFailures: function() {
        return this.requireFail.length > 0;
    },

    /**
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */
    canRecognizeWith: function(otherRecognizer) {
        return !!this.simultaneous[otherRecognizer.id];
    },

    /**
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */
    emit: function(input) {
        var self = this;
        var state = this.state;

        function emit(event) {
            self.manager.emit(event, input);
        }

        // 'panstart' and 'panmove'
        if (state < STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }

        emit(self.options.event); // simple 'eventName' events

        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
            emit(input.additionalEvent);
        }

        // panend and pancancel
        if (state >= STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }
    },

    /**
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */
    tryEmit: function(input) {
        if (this.canEmit()) {
            return this.emit(input);
        }
        // it's failing anyway
        this.state = STATE_FAILED;
    },

    /**
     * can we emit?
     * @returns {boolean}
     */
    canEmit: function() {
        var i = 0;
        while (i < this.requireFail.length) {
            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                return false;
            }
            i++;
        }
        return true;
    },

    /**
     * update the recognizer
     * @param {Object} inputData
     */
    recognize: function(inputData) {
        // make a new copy of the inputData
        // so we can change the inputData without messing up the other recognizers
        var inputDataClone = assign({}, inputData);

        // is is enabled and allow recognizing?
        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
            this.reset();
            this.state = STATE_FAILED;
            return;
        }

        // reset when we've reached the end
        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
            this.state = STATE_POSSIBLE;
        }

        this.state = this.process(inputDataClone);

        // the recognizer has recognized a gesture
        // so trigger an event
        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
            this.tryEmit(inputDataClone);
        }
    },

    /**
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {Const} STATE
     */
    process: function(inputData) { }, // jshint ignore:line

    /**
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */
    getTouchAction: function() { },

    /**
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */
    reset: function() { }
};

/**
 * get a usable string, used as event postfix
 * @param {Const} state
 * @returns {String} state
 */
function stateStr(state) {
    if (state & STATE_CANCELLED) {
        return 'cancel';
    } else if (state & STATE_ENDED) {
        return 'end';
    } else if (state & STATE_CHANGED) {
        return 'move';
    } else if (state & STATE_BEGAN) {
        return 'start';
    }
    return '';
}

/**
 * direction cons to string
 * @param {Const} direction
 * @returns {String}
 */
function directionStr(direction) {
    if (direction == DIRECTION_DOWN) {
        return 'down';
    } else if (direction == DIRECTION_UP) {
        return 'up';
    } else if (direction == DIRECTION_LEFT) {
        return 'left';
    } else if (direction == DIRECTION_RIGHT) {
        return 'right';
    }
    return '';
}

/**
 * get a recognizer by name if it is bound to a manager
 * @param {Recognizer|String} otherRecognizer
 * @param {Recognizer} recognizer
 * @returns {Recognizer}
 */
function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
    var manager = recognizer.manager;
    if (manager) {
        return manager.get(otherRecognizer);
    }
    return otherRecognizer;
}

/**
 * This recognizer is just used as a base for the simple attribute recognizers.
 * @constructor
 * @extends Recognizer
 */
function AttrRecognizer() {
    Recognizer.apply(this, arguments);
}

inherit(AttrRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof AttrRecognizer
     */
    defaults: {
        /**
         * @type {Number}
         * @default 1
         */
        pointers: 1
    },

    /**
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */
    attrTest: function(input) {
        var optionPointers = this.options.pointers;
        return optionPointers === 0 || input.pointers.length === optionPointers;
    },

    /**
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */
    process: function(input) {
        var state = this.state;
        var eventType = input.eventType;

        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
        var isValid = this.attrTest(input);

        // on cancel input and we've recognized before, return STATE_CANCELLED
        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
            return state | STATE_CANCELLED;
        } else if (isRecognized || isValid) {
            if (eventType & INPUT_END) {
                return state | STATE_ENDED;
            } else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
            }
            return state | STATE_CHANGED;
        }
        return STATE_FAILED;
    }
});

/**
 * Pan
 * Recognized when the pointer is down and moved in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function PanRecognizer() {
    AttrRecognizer.apply(this, arguments);

    this.pX = null;
    this.pY = null;
}

inherit(PanRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PanRecognizer
     */
    defaults: {
        event: 'pan',
        threshold: 10,
        pointers: 1,
        direction: DIRECTION_ALL
    },

    getTouchAction: function() {
        var direction = this.options.direction;
        var actions = [];
        if (direction & DIRECTION_HORIZONTAL) {
            actions.push(TOUCH_ACTION_PAN_Y);
        }
        if (direction & DIRECTION_VERTICAL) {
            actions.push(TOUCH_ACTION_PAN_X);
        }
        return actions;
    },

    directionTest: function(input) {
        var options = this.options;
        var hasMoved = true;
        var distance = input.distance;
        var direction = input.direction;
        var x = input.deltaX;
        var y = input.deltaY;

        // lock to axis?
        if (!(direction & options.direction)) {
            if (options.direction & DIRECTION_HORIZONTAL) {
                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
                hasMoved = x != this.pX;
                distance = Math.abs(input.deltaX);
            } else {
                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
                hasMoved = y != this.pY;
                distance = Math.abs(input.deltaY);
            }
        }
        input.direction = direction;
        return hasMoved && distance > options.threshold && direction & options.direction;
    },

    attrTest: function(input) {
        return AttrRecognizer.prototype.attrTest.call(this, input) &&
            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
    },

    emit: function(input) {

        this.pX = input.deltaX;
        this.pY = input.deltaY;

        var direction = directionStr(input.direction);

        if (direction) {
            input.additionalEvent = this.options.event + direction;
        }
        this._super.emit.call(this, input);
    }
});

/**
 * Pinch
 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
 * @constructor
 * @extends AttrRecognizer
 */
function PinchRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(PinchRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'pinch',
        threshold: 0,
        pointers: 2
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_NONE];
    },

    attrTest: function(input) {
        return this._super.attrTest.call(this, input) &&
            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
    },

    emit: function(input) {
        if (input.scale !== 1) {
            var inOut = input.scale < 1 ? 'in' : 'out';
            input.additionalEvent = this.options.event + inOut;
        }
        this._super.emit.call(this, input);
    }
});

/**
 * Press
 * Recognized when the pointer is down for x ms without any movement.
 * @constructor
 * @extends Recognizer
 */
function PressRecognizer() {
    Recognizer.apply(this, arguments);

    this._timer = null;
    this._input = null;
}

inherit(PressRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PressRecognizer
     */
    defaults: {
        event: 'press',
        pointers: 1,
        time: 251, // minimal time of the pointer to be pressed
        threshold: 9 // a minimal movement is ok, but keep it low
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_AUTO];
    },

    process: function(input) {
        var options = this.options;
        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTime = input.deltaTime > options.time;

        this._input = input;

        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
            this.reset();
        } else if (input.eventType & INPUT_START) {
            this.reset();
            this._timer = setTimeoutContext(function() {
                this.state = STATE_RECOGNIZED;
                this.tryEmit();
            }, options.time, this);
        } else if (input.eventType & INPUT_END) {
            return STATE_RECOGNIZED;
        }
        return STATE_FAILED;
    },

    reset: function() {
        clearTimeout(this._timer);
    },

    emit: function(input) {
        if (this.state !== STATE_RECOGNIZED) {
            return;
        }

        if (input && (input.eventType & INPUT_END)) {
            this.manager.emit(this.options.event + 'up', input);
        } else {
            this._input.timeStamp = now();
            this.manager.emit(this.options.event, this._input);
        }
    }
});

/**
 * Rotate
 * Recognized when two or more pointer are moving in a circular motion.
 * @constructor
 * @extends AttrRecognizer
 */
function RotateRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(RotateRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof RotateRecognizer
     */
    defaults: {
        event: 'rotate',
        threshold: 0,
        pointers: 2
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_NONE];
    },

    attrTest: function(input) {
        return this._super.attrTest.call(this, input) &&
            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
    }
});

/**
 * Swipe
 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function SwipeRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(SwipeRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof SwipeRecognizer
     */
    defaults: {
        event: 'swipe',
        threshold: 10,
        velocity: 0.3,
        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
        pointers: 1
    },

    getTouchAction: function() {
        return PanRecognizer.prototype.getTouchAction.call(this);
    },

    attrTest: function(input) {
        var direction = this.options.direction;
        var velocity;

        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
            velocity = input.overallVelocity;
        } else if (direction & DIRECTION_HORIZONTAL) {
            velocity = input.overallVelocityX;
        } else if (direction & DIRECTION_VERTICAL) {
            velocity = input.overallVelocityY;
        }

        return this._super.attrTest.call(this, input) &&
            direction & input.offsetDirection &&
            input.distance > this.options.threshold &&
            input.maxPointers == this.options.pointers &&
            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
    },

    emit: function(input) {
        var direction = directionStr(input.offsetDirection);
        if (direction) {
            this.manager.emit(this.options.event + direction, input);
        }

        this.manager.emit(this.options.event, input);
    }
});

/**
 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
 * a single tap.
 *
 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
 * multi-taps being recognized.
 * @constructor
 * @extends Recognizer
 */
function TapRecognizer() {
    Recognizer.apply(this, arguments);

    // previous time and center,
    // used for tap counting
    this.pTime = false;
    this.pCenter = false;

    this._timer = null;
    this._input = null;
    this.count = 0;
}

inherit(TapRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'tap',
        pointers: 1,
        taps: 1,
        interval: 300, // max time between the multi-tap taps
        time: 250, // max time of the pointer to be down (like finger on the screen)
        threshold: 9, // a minimal movement is ok, but keep it low
        posThreshold: 10 // a multi-tap can be a bit off the initial position
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_MANIPULATION];
    },

    process: function(input) {
        var options = this.options;

        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTouchTime = input.deltaTime < options.time;

        this.reset();

        if ((input.eventType & INPUT_START) && (this.count === 0)) {
            return this.failTimeout();
        }

        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (validMovement && validTouchTime && validPointers) {
            if (input.eventType != INPUT_END) {
                return this.failTimeout();
            }

            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

            this.pTime = input.timeStamp;
            this.pCenter = input.center;

            if (!validMultiTap || !validInterval) {
                this.count = 1;
            } else {
                this.count += 1;
            }

            this._input = input;

            // if tap count matches we have recognized it,
            // else it has began recognizing...
            var tapCount = this.count % options.taps;
            if (tapCount === 0) {
                // no failing requirements, immediately trigger the tap event
                // or wait as long as the multitap interval to trigger
                if (!this.hasRequireFailures()) {
                    return STATE_RECOGNIZED;
                } else {
                    this._timer = setTimeoutContext(function() {
                        this.state = STATE_RECOGNIZED;
                        this.tryEmit();
                    }, options.interval, this);
                    return STATE_BEGAN;
                }
            }
        }
        return STATE_FAILED;
    },

    failTimeout: function() {
        this._timer = setTimeoutContext(function() {
            this.state = STATE_FAILED;
        }, this.options.interval, this);
        return STATE_FAILED;
    },

    reset: function() {
        clearTimeout(this._timer);
    },

    emit: function() {
        if (this.state == STATE_RECOGNIZED) {
            this._input.tapCount = this.count;
            this.manager.emit(this.options.event, this._input);
        }
    }
});

/**
 * Simple way to create a manager with a default set of recognizers.
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Hammer(element, options) {
    options = options || {};
    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
    return new Manager(element, options);
}

/**
 * @const {string}
 */
Hammer.VERSION = '2.0.7';

/**
 * default settings
 * @namespace
 */
Hammer.defaults = {
    /**
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */
    domEvents: false,

    /**
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */
    touchAction: TOUCH_ACTION_COMPUTE,

    /**
     * @type {Boolean}
     * @default true
     */
    enable: true,

    /**
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */
    inputTarget: null,

    /**
     * force an input class
     * @type {Null|Function}
     * @default null
     */
    inputClass: null,

    /**
     * Default recognizer setup when calling `Hammer()`
     * When creating a new Manager these will be skipped.
     * @type {Array}
     */
    preset: [
        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
        [RotateRecognizer, {enable: false}],
        [PinchRecognizer, {enable: false}, ['rotate']],
        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
        [TapRecognizer],
        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
        [PressRecognizer]
    ],

    /**
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */
    cssProps: {
        /**
         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userSelect: 'none',

        /**
         * Disable the Windows Phone grippers when pressing an element.
         * @type {String}
         * @default 'none'
         */
        touchSelect: 'none',

        /**
         * Disables the default callout shown when you touch and hold a touch target.
         * On iOS, when you touch and hold a touch target such as a link, Safari displays
         * a callout containing information about the link. This property allows you to disable that callout.
         * @type {String}
         * @default 'none'
         */
        touchCallout: 'none',

        /**
         * Specifies whether zooming is enabled. Used by IE10>
         * @type {String}
         * @default 'none'
         */
        contentZooming: 'none',

        /**
         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userDrag: 'none',

        /**
         * Overrides the highlight color shown when the user taps a link or a JavaScript
         * clickable element in iOS. This property obeys the alpha value, if specified.
         * @type {String}
         * @default 'rgba(0,0,0,0)'
         */
        tapHighlightColor: 'rgba(0,0,0,0)'
    }
};

var STOP = 1;
var FORCED_STOP = 2;

/**
 * Manager
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Manager(element, options) {
    this.options = assign({}, Hammer.defaults, options || {});

    this.options.inputTarget = this.options.inputTarget || element;

    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.oldCssProps = {};

    this.element = element;
    this.input = createInputInstance(this);
    this.touchAction = new TouchAction(this, this.options.touchAction);

    toggleCssProps(this, true);

    each(this.options.recognizers, function(item) {
        var recognizer = this.add(new (item[0])(item[1]));
        item[2] && recognizer.recognizeWith(item[2]);
        item[3] && recognizer.requireFailure(item[3]);
    }, this);
}

Manager.prototype = {
    /**
     * set options
     * @param {Object} options
     * @returns {Manager}
     */
    set: function(options) {
        assign(this.options, options);

        // Options that need a little more setup
        if (options.touchAction) {
            this.touchAction.update();
        }
        if (options.inputTarget) {
            // Clean up existing event listeners and reinitialize
            this.input.destroy();
            this.input.target = options.inputTarget;
            this.input.init();
        }
        return this;
    },

    /**
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */
    stop: function(force) {
        this.session.stopped = force ? FORCED_STOP : STOP;
    },

    /**
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */
    recognize: function(inputData) {
        var session = this.session;
        if (session.stopped) {
            return;
        }

        // run the touch-action polyfill
        this.touchAction.preventDefaults(inputData);

        var recognizer;
        var recognizers = this.recognizers;

        // this holds the recognizer that is being recognized.
        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
        // if no recognizer is detecting a thing, it is set to `null`
        var curRecognizer = session.curRecognizer;

        // reset when the last recognizer is recognized
        // or when we're in a new session
        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
            curRecognizer = session.curRecognizer = null;
        }

        var i = 0;
        while (i < recognizers.length) {
            recognizer = recognizers[i];

            // find out if we are allowed try to recognize the input for this one.
            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
            //      that is being recognized.
            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
            //      this can be setup with the `recognizeWith()` method on the recognizer.
            if (session.stopped !== FORCED_STOP && ( // 1
                    !curRecognizer || recognizer == curRecognizer || // 2
                    recognizer.canRecognizeWith(curRecognizer))) { // 3
                recognizer.recognize(inputData);
            } else {
                recognizer.reset();
            }

            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
            // current active recognizer. but only if we don't already have an active recognizer
            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                curRecognizer = session.curRecognizer = recognizer;
            }
            i++;
        }
    },

    /**
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */
    get: function(recognizer) {
        if (recognizer instanceof Recognizer) {
            return recognizer;
        }

        var recognizers = this.recognizers;
        for (var i = 0; i < recognizers.length; i++) {
            if (recognizers[i].options.event == recognizer) {
                return recognizers[i];
            }
        }
        return null;
    },

    /**
     * add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */
    add: function(recognizer) {
        if (invokeArrayArg(recognizer, 'add', this)) {
            return this;
        }

        // remove existing
        var existing = this.get(recognizer.options.event);
        if (existing) {
            this.remove(existing);
        }

        this.recognizers.push(recognizer);
        recognizer.manager = this;

        this.touchAction.update();
        return recognizer;
    },

    /**
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */
    remove: function(recognizer) {
        if (invokeArrayArg(recognizer, 'remove', this)) {
            return this;
        }

        recognizer = this.get(recognizer);

        // let's make sure this recognizer exists
        if (recognizer) {
            var recognizers = this.recognizers;
            var index = inArray(recognizers, recognizer);

            if (index !== -1) {
                recognizers.splice(index, 1);
                this.touchAction.update();
            }
        }

        return this;
    },

    /**
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */
    on: function(events, handler) {
        if (events === undefined) {
            return;
        }
        if (handler === undefined) {
            return;
        }

        var handlers = this.handlers;
        each(splitStr(events), function(event) {
            handlers[event] = handlers[event] || [];
            handlers[event].push(handler);
        });
        return this;
    },

    /**
     * unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */
    off: function(events, handler) {
        if (events === undefined) {
            return;
        }

        var handlers = this.handlers;
        each(splitStr(events), function(event) {
            if (!handler) {
                delete handlers[event];
            } else {
                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            }
        });
        return this;
    },

    /**
     * emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */
    emit: function(event, data) {
        // we also want to trigger dom events
        if (this.options.domEvents) {
            triggerDomEvent(event, data);
        }

        // no handlers, so skip it all
        var handlers = this.handlers[event] && this.handlers[event].slice();
        if (!handlers || !handlers.length) {
            return;
        }

        data.type = event;
        data.preventDefault = function() {
            data.srcEvent.preventDefault();
        };

        var i = 0;
        while (i < handlers.length) {
            handlers[i](data);
            i++;
        }
    },

    /**
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */
    destroy: function() {
        this.element && toggleCssProps(this, false);

        this.handlers = {};
        this.session = {};
        this.input.destroy();
        this.element = null;
    }
};

/**
 * add/remove the css properties as defined in manager.options.cssProps
 * @param {Manager} manager
 * @param {Boolean} add
 */
function toggleCssProps(manager, add) {
    var element = manager.element;
    if (!element.style) {
        return;
    }
    var prop;
    each(manager.options.cssProps, function(value, name) {
        prop = prefixed(element.style, name);
        if (add) {
            manager.oldCssProps[prop] = element.style[prop];
            element.style[prop] = value;
        } else {
            element.style[prop] = manager.oldCssProps[prop] || '';
        }
    });
    if (!add) {
        manager.oldCssProps = {};
    }
}

/**
 * trigger dom event
 * @param {String} event
 * @param {Object} data
 */
function triggerDomEvent(event, data) {
    var gestureEvent = document.createEvent('Event');
    gestureEvent.initEvent(event, true, true);
    gestureEvent.gesture = data;
    data.target.dispatchEvent(gestureEvent);
}

assign(Hammer, {
    INPUT_START: INPUT_START,
    INPUT_MOVE: INPUT_MOVE,
    INPUT_END: INPUT_END,
    INPUT_CANCEL: INPUT_CANCEL,

    STATE_POSSIBLE: STATE_POSSIBLE,
    STATE_BEGAN: STATE_BEGAN,
    STATE_CHANGED: STATE_CHANGED,
    STATE_ENDED: STATE_ENDED,
    STATE_RECOGNIZED: STATE_RECOGNIZED,
    STATE_CANCELLED: STATE_CANCELLED,
    STATE_FAILED: STATE_FAILED,

    DIRECTION_NONE: DIRECTION_NONE,
    DIRECTION_LEFT: DIRECTION_LEFT,
    DIRECTION_RIGHT: DIRECTION_RIGHT,
    DIRECTION_UP: DIRECTION_UP,
    DIRECTION_DOWN: DIRECTION_DOWN,
    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
    DIRECTION_ALL: DIRECTION_ALL,

    Manager: Manager,
    Input: Input,
    TouchAction: TouchAction,

    TouchInput: TouchInput,
    MouseInput: MouseInput,
    PointerEventInput: PointerEventInput,
    TouchMouseInput: TouchMouseInput,
    SingleTouchInput: SingleTouchInput,

    Recognizer: Recognizer,
    AttrRecognizer: AttrRecognizer,
    Tap: TapRecognizer,
    Pan: PanRecognizer,
    Swipe: SwipeRecognizer,
    Pinch: PinchRecognizer,
    Rotate: RotateRecognizer,
    Press: PressRecognizer,

    on: addEventListeners,
    off: removeEventListeners,
    each: each,
    merge: merge,
    extend: extend,
    assign: assign,
    inherit: inherit,
    bindFn: bindFn,
    prefixed: prefixed
});

// this prevents errors when Hammer is loaded in the presence of an AMD
//  style loader but by script tag, not by the loader.
var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
freeGlobal.Hammer = Hammer;

if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
        return Hammer;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {}

})(window, document, 'Hammer');


/***/ }),

/***/ "./node_modules/is-buffer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./static/js/Core.ts":
/*!***************************!*\
  !*** ./static/js/Core.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var components_1 = __webpack_require__(/*! ./components */ "./static/js/components/index.ts");
var pages_1 = __webpack_require__(/*! ./pages */ "./static/js/pages/index.ts");
var components_2 = __webpack_require__(/*! ./components */ "./static/js/components/index.ts");
var forms_1 = __webpack_require__(/*! ./forms */ "./static/js/forms/index.ts");
var util_1 = __webpack_require__(/*! ./util */ "./static/js/util/index.ts");
var SELECTORS = {
    MDC_BUTTONS: '.mdc-button',
};
var Core = (function () {
    function Core(page) {
        this.page = page;
        this.phase = document.body.dataset.phase;
        this.header = new components_1.Header(this);
        this.footer = new components_1.Footer(this);
        this.mdcButtons = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.MDC_BUTTONS));
        this.prefersReducedMotion = window.matchMedia('(prefers-reduced-motion)').matches;
    }
    Core.prototype.init = function () {
        this.mdcButtons.forEach(function (button) {
            if (util_1.Ripple) {
                new util_1.Ripple(button);
            }
        });
        if (this.prefersReducedMotion) {
            document.documentElement.classList.add(util_1.ACTION_CLASSES.REDUCE_MOTION);
        }
        this.angularBootstrap();
        if (!this.page) {
            return;
        }
        switch (this.page) {
            case 'competition-info':
                this.cardStack = new components_2.CardStack();
                this.ajaxModal = new components_2.AjaxModal(this);
                if (!this.prefersReducedMotion) {
                    new components_2.AnimateShapes();
                }
                break;
            case 'educator-resources':
                this.cardStack = new components_2.CardStack();
                break;
            case 'student-resources':
                this.cardStack = new components_2.CardStack();
                break;
            case 'faq':
                new components_2.ScrollTo();
                new components_2.Accordion();
                break;
            case 'home':
                if (this.phase === 'open') {
                    this.cardStack = new components_2.CardStack();
                    this.ajaxModal = new components_2.AjaxModal(this);
                    new components_2.CategoryFilter();
                    this.home = new pages_1.Home(this);
                    if (!this.prefersReducedMotion) {
                        this.homeConclusionShapes = new components_2.HomeConclusionShapes();
                    }
                    this.homeNumberAnimations = new components_2.HomeNumberAnimation(this);
                    this.homeThoughtStarter = new components_2.HomeThoughtStarter(this);
                    this.homeVideoPlayer = new components_2.HomeVideoPlayer();
                }
                else if (this.phase === 'judging') {
                    this.home = new pages_1.Home(this);
                    new forms_1.TeaserForm(this);
                    this.forms = new forms_1.Forms(this);
                    this.homeThoughtStarter = new components_2.HomeThoughtStarter();
                    this.homeVideoPlayer = new components_2.HomeVideoPlayer();
                    this.ajaxModal = new components_2.AjaxModal(this);
                }
                else {
                    this.home = new pages_1.Home(this);
                    new forms_1.TeaserForm(this);
                    this.forms = new forms_1.Forms(this);
                    this.ajaxModal = new components_2.AjaxModal(this);
                }
                break;
            case 'competition-past-projects':
                this.ajaxModal = new components_2.AjaxModal(this);
                var listAccordion = new components_2.ListAccordion('.js-past-projects-list', '.js-past-projects-button');
                new components_2.CategoryFilter(listAccordion.expandList);
                break;
            case 'register':
                new components_1.StickyBar(true);
                this.register = new pages_1.Register(this);
                this.forms = new forms_1.Forms(this);
                break;
            case 'styleguide':
                this.styleguide = new pages_1.Styleguide(this);
                this.forms = new forms_1.Forms(this);
                break;
            case 'teaser':
                this.teaser = new pages_1.Teaser(this);
                this.forms = new forms_1.Forms(this);
                break;
            case 'dashboard':
                new pages_1.Dashboard(this);
                new components_1.StickyBar(true);
                new components_2.Alert(this);
                break;
            case 'your-project-about-me':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'your-project-bibliography':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'your-project-health-safety':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'project-preview':
                new components_1.StickyBar(true);
                new components_2.ScrollTo();
                this.projectPreview = new pages_1.ProjectPreview(this);
                break;
            case 'your-project-submit-review':
                new components_2.ScrollTo();
                new components_1.StickyBar(true);
                break;
            case 'your-project-summary':
                this.forms = new forms_1.Forms(this);
                this.stepSummaryForm = new forms_1.StepSummaryForm(this);
                break;
            case 'your-project-question':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'your-project-research':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'your-project-method':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'your-project-results':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'your-project-conclusion':
                this.forms = new forms_1.Forms(this);
                this.stepForm = new forms_1.StepForm(this);
                break;
            case 'your-account':
                new components_2.ScrollTo();
                this.forms = new forms_1.Forms(this);
                this.profile = new forms_1.Profile(this);
                break;
            case 'your-account-team':
                new components_2.ScrollTo();
                this.forms = new forms_1.Forms(this);
                this.teamForm = new forms_1.TeamForm(this);
                break;
            case 'your-account-consent':
                new components_2.ScrollTo();
                this.forms = new forms_1.Forms(this);
                new forms_1.ConsentForm(this);
                break;
            case 'your-project-submit-checklist':
                new forms_1.CheckList(this);
                new components_1.StickyBar(true);
                break;
            case 'parental-consent':
                new forms_1.ParentalConsent(this);
                new components_1.StickyBar(true);
                break;
            case 'your-project-inspiring-educator':
                this.forms = new forms_1.Forms(this);
                new forms_1.InspiringEducator(this);
                break;
        }
        if (this.page.includes('student-resources-') || this.page.includes('educator-resources-')) {
            new components_2.ResourceNav();
            if (!this.prefersReducedMotion) {
                new components_2.AnimateShapes();
            }
        }
    };
    Core.prototype.angularBootstrap = function () {
        angular.module('gsf', [
            glue.lite.module.name,
            glue.ng.carousel.module.name,
            glue.ng.carousel.breakpoints.module.name,
            glue.ng.pagination.module.name,
            glue.ng.zippy.module.name,
            glue.ng.zippy.set.module.name,
            glue.ng.zippy.toggleAll.module.name,
            glue.ng.tabby.module.name,
            hercules.templates.module.name,
            hercules.components.header.module.name,
        ])
            .value('glueZippySmoothExpandFxDuration', 300)
            .value('glueModalServiceStoreRouteDisable', true)
            .config(['$provide', function ($provide) {
                $provide.decorator('$browser', ['$delegate', function ($delegate) {
                        $delegate.onUrlChange = function () { };
                        $delegate.url = function () { return ''; };
                        return $delegate;
                    }]);
            }]);
        glue.app.bootstrap('gsf');
    };
    return Core;
}());
exports.default = Core;


/***/ }),

/***/ "./static/js/app.ts":
/*!**************************!*\
  !*** ./static/js/app.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Core_1 = __webpack_require__(/*! ./Core */ "./static/js/Core.ts");
var core = new Core_1.default(document.body.dataset['page']);
core.init();


/***/ }),

/***/ "./static/js/components/Accordion.ts":
/*!*******************************************!*\
  !*** ./static/js/components/Accordion.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var DEFAULT_ANIMATION_TIMING = 0.5;
var LINK_SELECTOR = '.js-accordion-item';
var PANEL_SELECTOR = '.js-accordion-panel';
var Accordion = (function () {
    function Accordion() {
        var linkElements = util_1.nodeListToArray(document.querySelectorAll(LINK_SELECTOR));
        this.items = linkElements.map(function (element) {
            var targetId = element.getAttribute('href');
            var target = targetId ? document.querySelector(targetId) : null;
            return {
                link: element,
                targetId: targetId || '',
                target: target,
                panel: target ? target.querySelector(PANEL_SELECTOR) : null,
                isExpanded: false,
            };
        });
        if (this.items) {
            this.init();
        }
    }
    Accordion.prototype.init = function () {
        this.checkHash();
        this.bindEvents();
    };
    Accordion.prototype.bindEvents = function () {
        var _this = this;
        this.items.forEach(function (item) {
            item.link.addEventListener('click', function (e) {
                e.preventDefault();
                _this.handleAccordionClick(item);
            });
        });
        window.addEventListener('popstate', this.checkHash);
    };
    Accordion.prototype.handleAccordionClick = function (item) {
        if (item.isExpanded) {
            this.collapseItem(item);
        }
        else {
            this.expandItem(item);
        }
    };
    Accordion.prototype.checkHash = function () {
        var _this = this;
        var currentHash = window.location.hash;
        this.items.forEach(function (item) {
            if (currentHash === item.targetId) {
                setTimeout(function () {
                    var currentScroll = window.scrollY || document.documentElement.scrollTop;
                    if (item.panel) {
                        window.scrollTo(0, currentScroll - (item.panel.offsetHeight));
                    }
                }, 10);
                _this.expandItem(item);
            }
        });
    };
    Accordion.prototype.collapseItem = function (item) {
        if (!item.isExpanded) {
            return;
        }
        item.isExpanded = false;
        window.history.replaceState(null, undefined, ' ');
        TweenMax.to(item.target, DEFAULT_ANIMATION_TIMING, {
            height: 0,
            ease: Quad.easeOut,
            onStart: function () {
                item.link.setAttribute('aria-expanded', 'false');
                if (item.target) {
                    item.target.setAttribute('aria-expanded', 'false');
                }
            },
        });
    };
    Accordion.prototype.expandItem = function (item) {
        if (item.isExpanded || !item.panel) {
            return;
        }
        item.isExpanded = true;
        window.history.replaceState(null, undefined, item.targetId);
        TweenMax.to(item.target, DEFAULT_ANIMATION_TIMING, {
            height: item.panel.offsetHeight,
            ease: Quad.easeOut,
            onStart: function () {
                item.link.setAttribute('aria-expanded', 'true');
                if (item.target) {
                    item.target.setAttribute('aria-expanded', 'true');
                }
            },
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], Accordion.prototype, "handleAccordionClick", null);
    __decorate([
        core_decorators_1.autobind
    ], Accordion.prototype, "checkHash", null);
    return Accordion;
}());
exports.Accordion = Accordion;


/***/ }),

/***/ "./static/js/components/AgeRangeRestriction.ts":
/*!*****************************************************!*\
  !*** ./static/js/components/AgeRangeRestriction.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var UPPER_AGE_RANGE_COUNTRIES = new Set(['AT', 'BE', 'BG', 'HR', 'CY', 'CZ', 'DK', 'EE',
    'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT',
    'RO', 'SK', 'SI', 'ES', 'SE', 'UK', 'GB']);
var MID_AGE_RANGE_COUNTRIES = new Set(['IL', 'KR']);
var AgeRangeRestrictions = (function () {
    function AgeRangeRestrictions(country, ageRangeContainer, registerTerms) {
        this.ageRange = '';
        this.country = country;
        this.registerTerms = registerTerms;
        this.ageRangeContainer = ageRangeContainer;
        this.ageRanges = util_1.nodeListToArray(this.ageRangeContainer
            .querySelectorAll('input'));
        this.ageRangeLabels = util_1.nodeListToArray(this.ageRangeContainer
            .querySelectorAll('label'));
        this.country.addEventListener('change', this.handleCountryChange);
        this.init();
    }
    AgeRangeRestrictions.prototype.init = function () {
        var _this = this;
        this.ageRanges.forEach(function (input) {
            input.addEventListener('change', _this.handleAgeChange);
            if (input.checked) {
                _this.ageRange = input.value;
            }
        });
        this.setAgeVisibility();
    };
    AgeRangeRestrictions.prototype.handleCountryChange = function () {
        this.resetAges();
        this.setAgeVisibility();
    };
    AgeRangeRestrictions.prototype.handleAgeChange = function (event) {
        if (event.target.checked) {
            this.ageRange = event.target.value;
        }
    };
    AgeRangeRestrictions.prototype.resetAges = function () {
        this.ageRanges.forEach(function (range) {
            range.checked = false;
            range.disabled = false;
        });
        this.ageRangeLabels.forEach(function (label) {
            label.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            label.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        });
        this.ageRange = '';
    };
    AgeRangeRestrictions.prototype.setAgeVisibility = function () {
        var upperAgeRange = UPPER_AGE_RANGE_COUNTRIES.has(this.country.value);
        var midAgeRange = MID_AGE_RANGE_COUNTRIES.has(this.country.value);
        if (upperAgeRange) {
            this.setAgeInputsHidden(new Set(['13-15', '14-15']));
            this.registerTerms && this.registerTerms.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        }
        else if (midAgeRange) {
            this.setAgeInputsHidden(new Set(['13-15']));
            this.registerTerms && this.registerTerms.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        }
        else {
            this.setAgeInputsHidden(new Set(['14-15']));
            this.registerTerms && this.registerTerms.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        }
    };
    AgeRangeRestrictions.prototype.setAgeInputsHidden = function (rangeString) {
        var _this = this;
        this.ageRanges.map(function (range) {
            if (rangeString.has(range.value)) {
                return range;
            }
        }).forEach(function (input) {
            if (!input) {
                return;
            }
            input.disabled = true;
            _this.ageRangeContainer.querySelector("label[for=\"" + input.id + "\"]")
                .classList.add(util_1.ACTION_CLASSES.HIDDEN);
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], AgeRangeRestrictions.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], AgeRangeRestrictions.prototype, "handleCountryChange", null);
    __decorate([
        core_decorators_1.autobind
    ], AgeRangeRestrictions.prototype, "handleAgeChange", null);
    __decorate([
        core_decorators_1.autobind
    ], AgeRangeRestrictions.prototype, "resetAges", null);
    __decorate([
        core_decorators_1.autobind
    ], AgeRangeRestrictions.prototype, "setAgeVisibility", null);
    __decorate([
        core_decorators_1.autobind
    ], AgeRangeRestrictions.prototype, "setAgeInputsHidden", null);
    return AgeRangeRestrictions;
}());
exports.default = AgeRangeRestrictions;


/***/ }),

/***/ "./static/js/components/AjaxModal.ts":
/*!*******************************************!*\
  !*** ./static/js/components/AjaxModal.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    MODAL: '.js-modal-container',
    MODAL_LINK: '.js-modal-link',
    MODAL_CLOSE: '.h-c-modal__close',
    MODAL_OVERLAY: '.glue-c-modal__overlay',
    MODAL_CONTENT: '.glue-c-modal__content',
};
var loaderHtml = "\n<div role=\"progressbar\" class=\"mdc-linear-progress mdc-linear-progress--indeterminate\">\n  <div class=\"mdc-linear-progress__buffering-dots\"></div>\n  <div class=\"mdc-linear-progress__buffer\"></div>\n  <div class=\"mdc-linear-progress__bar mdc-linear-progress__primary-bar\">\n    <span class=\"mdc-linear-progress__bar-inner\"></span>\n  </div>\n  <div class=\"mdc-linear-progress__bar mdc-linear-progress__secondary-bar\">\n    <span class=\"mdc-linear-progress__bar-inner\"></span>\n  </div>\n</div>\n";
var AjaxModal = (function () {
    function AjaxModal(core) {
        this.core = core;
        this.modalLinks = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.MODAL_LINK));
        this.modal = document.querySelector(SELECTORS.MODAL);
        this.modalCloseButton = this.modal.querySelector(SELECTORS.MODAL_CLOSE);
        this.modalOverlay = this.modal.querySelector(SELECTORS.MODAL_OVERLAY);
        this.attachEvents();
    }
    AjaxModal.prototype.attachEvents = function () {
        var _this = this;
        this.modalLinks.forEach(function (link) {
            link.addEventListener('click', _this.handleModalLinkClick);
        });
        if (this.modalCloseButton) {
            this.modalCloseButton.addEventListener('click', this.onModalClose);
        }
        document.addEventListener('keydown', function (e) {
            var keyEvent = e;
            if (keyEvent.code === 'Escape') {
                _this.onModalClose();
            }
        });
        this.modalOverlay.addEventListener('click', function (e) {
            if (e.currentTarget !== e.target) {
                return;
            }
            _this.onModalClose();
        });
    };
    AjaxModal.prototype.handleModalLinkClick = function (e) {
        if (e.currentTarget === null) {
            return;
        }
        var modalContentContainer = this.modal
            .querySelector(SELECTORS.MODAL_CONTENT);
        modalContentContainer.innerHTML = loaderHtml;
        var target = e.currentTarget.href;
        util_1.axiosInstance.get(target).then(function (response) {
            var responseHtml = response.data;
            var wrapper = document.createElement('div');
            wrapper.innerHTML = responseHtml;
            var content = wrapper.querySelector('#content');
            if (content === null) {
                return;
            }
            modalContentContainer.innerHTML = '';
            modalContentContainer.appendChild(content);
        });
    };
    AjaxModal.prototype.onModalClose = function () {
        var modalContentContainer = this.modal
            .querySelector(SELECTORS.MODAL_CONTENT);
        modalContentContainer.innerHTML = '';
    };
    __decorate([
        core_decorators_1.autobind
    ], AjaxModal.prototype, "handleModalLinkClick", null);
    __decorate([
        core_decorators_1.autobind
    ], AjaxModal.prototype, "onModalClose", null);
    return AjaxModal;
}());
exports.default = AjaxModal;


/***/ }),

/***/ "./static/js/components/Alert.ts":
/*!***************************************!*\
  !*** ./static/js/components/Alert.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    ALERTS: '.js-alert',
    DISMISS_BUTTONS: '.js-dismiss-alert',
};
var Alert = (function () {
    function Alert(core) {
        this.core = core;
        this.dismissButtons = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.DISMISS_BUTTONS));
        this.alerts = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.ALERTS));
        this.cookieValue = util_1.readCookie('alert-dismissed') !== null ?
            new Set(util_1.readCookie('alert-dismissed').replace(/"/g, '').split(',')) : new Set();
        this.init();
    }
    Alert.prototype.init = function () {
        var _this = this;
        this.setAlertVisibility();
        this.dismissButtons.forEach(function (button) {
            button.addEventListener('click', _this.handleDismiss);
        });
    };
    Alert.prototype.tearDown = function () {
        var _this = this;
        this.dismissButtons.forEach(function (button) {
            button.removeEventListener('click', _this.handleDismiss);
        });
    };
    Alert.prototype.setAlertVisibility = function () {
        var _this = this;
        this.alerts.forEach(function (alert) {
            if (_this.cookieValue.has(alert.dataset.alert)) {
                alert.classList.add(util_1.ACTION_CLASSES.HIDDEN);
            }
        });
    };
    Alert.prototype.handleDismiss = function (e) {
        e.preventDefault();
        var alertType = e.currentTarget.dataset.alert;
        if (!alertType) {
            return;
        }
        this.cookieValue = this.cookieValue.add(alertType.replace(/"/g, ''));
        util_1.writeCookie('alert-dismissed', Array.from(this.cookieValue).toString());
        this.setAlertVisibility();
    };
    __decorate([
        core_decorators_1.autobind
    ], Alert.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], Alert.prototype, "tearDown", null);
    __decorate([
        core_decorators_1.autobind
    ], Alert.prototype, "setAlertVisibility", null);
    __decorate([
        core_decorators_1.autobind
    ], Alert.prototype, "handleDismiss", null);
    return Alert;
}());
exports.default = Alert;


/***/ }),

/***/ "./static/js/components/AnimateShapes.ts":
/*!***********************************************!*\
  !*** ./static/js/components/AnimateShapes.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    SHAPES_CONTAINER: '.js-animate-shapes',
};
var AnimateShapes = (function () {
    function AnimateShapes() {
        var _this = this;
        this.shapesContainer = document.querySelector(SELECTORS.SHAPES_CONTAINER);
        this.shapePaths = util_1.nodeListToArray(this.shapesContainer.querySelectorAll('path, polygon'));
        this.shapesToAnimate = this.shapePaths.map(function (path) {
            path.style.opacity = '1';
            return {
                el: path,
                xFactor: _this.getRandomInt(30, 70),
                yFactor: _this.getRandomInt(5, 120),
                direction: path.getBoundingClientRect().left <= (window.innerWidth / 2) ? -1 : 1,
            };
        });
        this.handleScroll();
        this.init();
    }
    AnimateShapes.prototype.init = function () {
        if (!this.shapesContainer) {
            return;
        }
        document.addEventListener('scroll', this.onScroll);
    };
    AnimateShapes.prototype.onScroll = function () {
        if (this.shapesContainer && util_1.isInViewport(this.shapesContainer)) {
            requestAnimationFrame(this.handleScroll);
        }
    };
    AnimateShapes.prototype.handleScroll = function () {
        for (var index = 0; index < this.shapesToAnimate.length; index++) {
            this.animateShape(this.shapesToAnimate[index]);
        }
    };
    AnimateShapes.prototype.animateShape = function (shape) {
        var shapeTop = shape.el.getBoundingClientRect().top;
        shape.el.style.transform =
            "translate3d(" + shapeTop / shape.yFactor + "px,\n        " + shape.direction * (shapeTop / shape.xFactor) + "px, 0)\n        rotate(" + shape.direction * (shapeTop / 90) + "deg)";
    };
    AnimateShapes.prototype.getRandomInt = function (min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    };
    __decorate([
        core_decorators_1.autobind
    ], AnimateShapes.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], AnimateShapes.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], AnimateShapes.prototype, "handleScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], AnimateShapes.prototype, "animateShape", null);
    return AnimateShapes;
}());
exports.default = AnimateShapes;


/***/ }),

/***/ "./static/js/components/AudioPlayer.ts":
/*!*********************************************!*\
  !*** ./static/js/components/AudioPlayer.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var AudioPlayer = (function () {
    function AudioPlayer(filename, onLoaded) {
        this.isLoaded = false;
        this.isConnected = false;
        this.volume = 1;
        if (!filename) {
            throw new Error('No file name was provided to audio player');
        }
        this.filename = filename;
        this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        this.onLoaded = onLoaded;
        this.data = null;
    }
    AudioPlayer.prototype.load = function () {
        var _this = this;
        var request = new Request(this.filename);
        return window.fetch(request, {
            credentials: 'same-origin',
        })
            .then(function (response) { return response.arrayBuffer(); })
            .then(function (buffer) {
            _this.audioCtx.decodeAudioData(buffer, function (data) {
                _this.data = data || null;
                _this.isLoaded = true;
                _this.createNodes();
                if (_this.onLoaded) {
                    _this.onLoaded();
                }
            }, function (error) {
                throw new Error("" + error);
            });
        });
    };
    AudioPlayer.prototype.createNodes = function () {
        if (!this.isLoaded || !this.audioCtx) {
            return;
        }
        this.source = this.audioCtx.createBufferSource();
        this.gainNode = this.audioCtx.createGain();
        this.source.connect(this.gainNode);
        this.source.buffer = this.data || null;
        this.gainNode.connect(this.audioCtx.destination);
    };
    AudioPlayer.prototype.setVolume = function (volume) {
        this.volume = volume;
        if (!this.gainNode) {
            return;
        }
        this.gainNode.gain.setTargetAtTime(this.volume, this.audioCtx.currentTime, 0.01);
    };
    AudioPlayer.prototype.start = function (startTime) {
        var _this = this;
        if (startTime === void 0) { startTime = 0; }
        if (this.isConnected || !this.isLoaded) {
            return;
        }
        this.audioCtx.resume().then(function () {
            _this.createNodes();
            _this.connect();
            if (_this.source) {
                _this.source.start(0, startTime);
            }
        });
    };
    AudioPlayer.prototype.stop = function () {
        this.disconnect();
    };
    AudioPlayer.prototype.connect = function () {
        if (this.isConnected || !this.gainNode || !this.isLoaded || !this.audioCtx) {
            return;
        }
        this.gainNode.connect(this.audioCtx.destination);
        this.isConnected = true;
    };
    AudioPlayer.prototype.disconnect = function () {
        if (!this.isConnected || !this.source || !this.isLoaded) {
            return;
        }
        this.source.disconnect();
        this.isConnected = false;
    };
    return AudioPlayer;
}());
exports.AudioPlayer = AudioPlayer;


/***/ }),

/***/ "./static/js/components/CKEdit.ts":
/*!****************************************!*\
  !*** ./static/js/components/CKEdit.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    TEXTAREA: '.js-rich-textarea',
    INLINE_TEXTAREA: '.js-inline-textarea',
    HELP_CONTAINER: '.js-help-container',
};
var REMOVE_BUTTONS_MOBILE = ['About', 'Anchor', 'Copy', 'Cut',
    'Format', 'Iframe', 'JustifyBlock', 'JustifyCenter', 'JustifyLeft',
    'JustifyRight', 'NumberedList', 'Paste', 'Scayt', 'Strike', 'Subscript',
    'Superscript', 'Table', 'Underline', 'Unlink'];
var TEXT_AREA_HEIGHT_TABLET = 400;
var TEXT_AREA_HEIGHT_MOBILE = 242;
var CKEdit = (function () {
    function CKEdit(core, onChangeCallback) {
        this.core = core;
        this.onChangeCallBack = onChangeCallback;
        this.textareas = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.TEXTAREA));
        this.inlineTextareas = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.INLINE_TEXTAREA));
        this.helpContainer = document.querySelector(SELECTORS.HELP_CONTAINER);
        this.isMobileScreenSize = window.innerWidth < 600;
        if (this.helpContainer) {
            this.height = this.helpContainer.getBoundingClientRect().height - 45;
        }
        else {
            this.height = 148;
        }
        this.init();
    }
    CKEdit.prototype.init = function () {
        var _this = this;
        if (this.isMobileScreenSize) {
            this.height = TEXT_AREA_HEIGHT_MOBILE;
        }
        else if (window.innerWidth < 1024) {
            this.height = TEXT_AREA_HEIGHT_TABLET;
        }
        setTimeout(function () { return _this.setTextareas(); }, 600);
        this.setInlineTextareas();
        CKEDITOR.on('instanceReady', function (ev) {
            _this.editor = ev.editor;
        });
    };
    CKEdit.prototype.setTextareas = function () {
        var _this = this;
        this.textareas.forEach(function (textarea) {
            var textareaEditor = CKEDITOR.replace(textarea, __assign({}, util_1.CKEDITOR_SETTINGS, { height: _this.height, wordcount: {
                    showParagraphs: false,
                    maxWordCount: textarea.dataset.wordcount || 250,
                    hardLimit: false,
                }, linkShowTargetTab: false, removeButtons: _this.isMobileScreenSize ?
                    REMOVE_BUTTONS_MOBILE.join(',') : util_1.CKEDITOR_SETTINGS.removeButtons }));
            textareaEditor.on('change', _this.handleTextareaChange);
        });
    };
    CKEdit.prototype.setInlineTextareas = function () {
        var _this = this;
        this.inlineTextareas.forEach(function (textarea) {
            var textareaEditor = CKEDITOR.inline(textarea, __assign({}, util_1.CKEDITOR_SETTINGS, { removePlugins: 'image,table,tabletoolstoolbar,tabletools,googledocs,'
                    + 'tableselection,picker,iframe,document,justify,list,format,link', wordcount: {
                    showParagraphs: false,
                    maxWordCount: textarea.dataset.wordcount || 100,
                    hardLimit: false,
                } }));
            textareaEditor.on('change', _this.handleTextareaChange);
        });
    };
    CKEdit.prototype.handleTextareaChange = function (e) {
        this.onChangeCallBack && this.onChangeCallBack(e);
    };
    __decorate([
        core_decorators_1.autobind
    ], CKEdit.prototype, "setTextareas", null);
    __decorate([
        core_decorators_1.autobind
    ], CKEdit.prototype, "setInlineTextareas", null);
    __decorate([
        core_decorators_1.autobind
    ], CKEdit.prototype, "handleTextareaChange", null);
    return CKEdit;
}());
exports.CKEdit = CKEdit;


/***/ }),

/***/ "./static/js/components/CardStack.ts":
/*!*******************************************!*\
  !*** ./static/js/components/CardStack.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var Hammer = __webpack_require__(/*! hammerjs */ "./node_modules/hammerjs/hammer.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    CARD_STACK: '.js-card-stack-carousel',
    CARD: '.js-card-stack-card',
    PREVIOUS: '.js-card-stack-pagination-previous',
    NEXT: '.js-card-stack-pagination-next',
    PAGINATION_CONTAINER: '.js-card-stack-pagination',
    CARDS_UL: '.js-card-stack-list',
};
var OFFSCREEN_AMOUNT = '-220%';
var CardStack = (function () {
    function CardStack(container) {
        this.currentIndex = 0;
        this.isActive = false;
        this.hammer = null;
        this.container = container || document.querySelector(SELECTORS.CARD_STACK);
        this.cards = util_1.nodeListToArray(this.container.querySelectorAll(SELECTORS.CARD));
        this.next = this.container.querySelector(SELECTORS.NEXT);
        this.prev = this.container.querySelector(SELECTORS.PREVIOUS);
        this.paginationContainer =
            this.container.querySelector(SELECTORS.PAGINATION_CONTAINER);
        this.paginationLi = [];
        this.medScreen = window.matchMedia(util_1.MEDIA_QUERIES.SMALL).matches;
        this.init();
    }
    CardStack.prototype.init = function () {
        if (!this.medScreen) {
            this.startup();
            this.next.addEventListener('click', this.goToNext);
            this.prev.addEventListener('click', this.goToPrevious);
        }
        window.addEventListener('resize', this.handleResize);
    };
    CardStack.prototype.handleResize = function () {
        window.requestAnimationFrame(this.setCardStackByScreenSize);
    };
    CardStack.prototype.startup = function () {
        this.isActive = true;
        this.container.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        this.next.addEventListener('click', this.goToNext);
        this.prev.addEventListener('click', this.goToPrevious);
        this.setUpCards();
        this.setVisibleCards();
        this.setVisibleArrows();
        this.setUpTabList();
        this.hammer = new Hammer.Manager(this.container.querySelector(SELECTORS.CARDS_UL));
        this.hammer.add(new Hammer.Swipe({
            direction: Hammer.DIRECTION_HORIZONTAL,
        }));
        this.hammer.on('swipe', this.handleSwipe);
    };
    CardStack.prototype.tearDown = function () {
        this.isActive = false;
        this.container.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        this.cards.forEach(function (card, i) {
            card.removeAttribute('style');
            card.removeAttribute('tab-index');
            card.removeAttribute('aria-hidden');
        });
        this.paginationLi = [];
        this.paginationContainer.innerHTML = '';
        this.next.removeEventListener('click', this.goToNext);
        this.prev.removeEventListener('click', this.goToPrevious);
        if (this.hammer) {
            this.hammer.destroy();
        }
    };
    CardStack.prototype.setCardStackByScreenSize = function () {
        this.medScreen = window.matchMedia(util_1.MEDIA_QUERIES.SMALL).matches;
        if (this.medScreen && this.isActive) {
            this.tearDown();
        }
        else if (!this.medScreen && !this.isActive) {
            this.startup();
        }
    };
    CardStack.prototype.generateRandomSkew = function () {
        var num = Math.floor(Math.random() * 4) + 1;
        return num *= Math.floor(Math.random() * 2) === 1 ? 1 : -1;
    };
    CardStack.prototype.setUpCards = function () {
        var _this = this;
        this.cards.forEach(function (card, i) {
            card.style.zIndex = "" + (_this.cards.length - i);
            if (i === 0) {
                card.style.transform = 'rotate(0)deg';
                card.setAttribute('tab-index', '-1');
            }
            else {
                card.style.transform =
                    "rotate(" + _this.generateRandomSkew() + "deg)\n            translate3d(" + _this.generateRandomSkew() + "px, " + _this.generateRandomSkew() + "px, 0)";
                card.setAttribute('aria-hidden', 'true');
            }
        });
    };
    CardStack.prototype.setUpTabList = function () {
        var _this = this;
        var ul = document.createElement('ul');
        ul.setAttribute('role', 'tablist');
        ul.classList.add('glue-pagination-page-list', 'glue-o-pagination__page-list');
        this.cards.forEach(function (_card, i) {
            var li = document.createElement('li');
            li.setAttribute('data-page', "" + i);
            li.classList.add('glue-o-pagination__button-container', 'glue-o-pagination__page-list-button-container');
            _this.paginationLi.push(li);
            var button = document.createElement('button');
            button.setAttribute('type', 'button');
            button.setAttribute('role', 'tab');
            button.setAttribute('aria-selected', 'false');
            button.setAttribute('data-page', "" + i);
            button.classList.add('glue-o-pagination__button', 'glue-o-pagination__page-list-button');
            button.addEventListener('click', _this.handleTabClick);
            if (i === 0) {
                li.classList.add('active');
                button.setAttribute('aria-selected', 'true');
            }
            li.appendChild(button);
            ul.appendChild(li);
        });
        this.paginationContainer.appendChild(ul);
    };
    CardStack.prototype.setVisibleCards = function () {
        var _this = this;
        this.cards.forEach(function (card, i) {
            card.style.opacity = '0';
            if (i >= _this.currentIndex - 1 && i <= _this.currentIndex + 2) {
                card.style.opacity = '1';
            }
        });
    };
    CardStack.prototype.setVisibleArrows = function () {
        if (this.currentIndex === 0) {
            this.prev.style.visibility = 'hidden';
            this.prev.setAttribute('aria-hidden', 'true');
        }
        else if (this.currentIndex === this.cards.length - 1) {
            this.next.style.visibility = 'hidden';
            this.next.setAttribute('aria-hidden', 'true');
        }
        else {
            this.prev.style.visibility = 'visible';
            this.next.style.visibility = 'visible';
            this.prev.setAttribute('aria-hidden', 'false');
            this.next.setAttribute('aria-hidden', 'false');
        }
    };
    CardStack.prototype.animateOut = function () {
        var _this = this;
        var indexes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            indexes[_i] = arguments[_i];
        }
        indexes.forEach(function (index) {
            _this.cards[index].style.transform = "rotate(" + _this.generateRandomSkew() + "deg)\n          translateX(" + OFFSCREEN_AMOUNT + ") rotate(" + _this.generateRandomSkew() + "deg)";
        });
    };
    CardStack.prototype.animateIn = function () {
        var _this = this;
        var indexes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            indexes[_i] = arguments[_i];
        }
        indexes.forEach(function (index) {
            _this.cards[index].style.transform = "rotate(" + _this.generateRandomSkew() + "deg)\n          translateX(0) rotate(" + _this.generateRandomSkew() + "deg)";
        });
    };
    CardStack.prototype.handleTabClick = function (e) {
        e.preventDefault();
        var target = e.target;
        var index = parseInt(target.dataset.page || '0', 10);
        this.updatePagination(index);
        this.goToCard(index);
        this.currentIndex = index;
        this.setVisibleCards();
        this.setVisibleArrows();
    };
    CardStack.prototype.updatePagination = function (index) {
        this.paginationLi.forEach(function (li) {
            if (parseInt(li.dataset.page || '0', 10) === index) {
                li.classList.add('active');
                li.querySelector('button').setAttribute('aria-selected', 'true');
            }
            else {
                li.classList.remove('active');
                li.querySelector('button').setAttribute('aria-selected', 'false');
            }
        });
    };
    CardStack.prototype.goToCard = function (index) {
        this.cards.forEach(function (card, i) {
            card.setAttribute('aria-hidden', 'true');
            card.removeAttribute('tab-index');
        });
        if (index > this.currentIndex) {
            this.animateOut.apply(this, Array.from(Array(index).slice().keys()));
        }
        else {
            var difference = this.currentIndex - index;
            if (difference === 1) {
                var amount = this.cards.length - index < 3 ? this.cards.length - index : 3;
                this.animateIn.apply(this, Array.from(new Array(amount), function (x, i) { return i + index; }));
            }
            else {
                this.animateIn.apply(this, Array.from(new Array(difference), function (x, i) { return i + index; }));
            }
        }
        this.cards[index].setAttribute('aria-hidden', 'false');
        this.cards[index].setAttribute('tab-index', '-1');
        this.cards[index].style.transform = 'rotate(0)';
    };
    CardStack.prototype.goToNext = function () {
        if (this.currentIndex + 1 >= this.cards.length) {
            return;
        }
        this.goToCard(this.currentIndex + 1);
        this.updatePagination(this.currentIndex + 1);
        this.currentIndex += 1;
        this.setVisibleCards();
        this.setVisibleArrows();
    };
    CardStack.prototype.goToPrevious = function () {
        if (this.currentIndex <= 0) {
            return;
        }
        this.goToCard(this.currentIndex - 1);
        this.updatePagination(this.currentIndex - 1);
        this.currentIndex -= 1;
        this.setVisibleCards();
        this.setVisibleArrows();
    };
    CardStack.prototype.handleSwipe = function (e) {
        var direction = e.offsetDirection;
        if (direction === 4) {
            this.goToPrevious();
        }
        if (direction === 2) {
            this.goToNext();
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "handleResize", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "startup", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "tearDown", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "setCardStackByScreenSize", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "setUpCards", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "setUpTabList", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "setVisibleCards", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "setVisibleArrows", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "animateOut", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "animateIn", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "handleTabClick", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "updatePagination", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "goToCard", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "goToNext", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "goToPrevious", null);
    __decorate([
        core_decorators_1.autobind
    ], CardStack.prototype, "handleSwipe", null);
    return CardStack;
}());
exports.default = CardStack;


/***/ }),

/***/ "./static/js/components/CategoryFilter.ts":
/*!************************************************!*\
  !*** ./static/js/components/CategoryFilter.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var PARENT_SELECTOR = '.js-category-filter';
var ITEM_SELECTOR = '.js-filter-item';
var BUTTON_SELECTOR = '.js-filter-button';
var CategoryFilter = (function () {
    function CategoryFilter(callback) {
        this.parent = document.querySelector(PARENT_SELECTOR);
        this.allowMultipleCategories =
            this.parent.dataset.allowMultipleCategories !== undefined ? true : false;
        var itemElements = util_1.nodeListToArray(this.parent.querySelectorAll(ITEM_SELECTOR));
        this.items = itemElements.map(function (element) {
            var categoryKey = element.dataset.categories || '';
            return {
                categories: categoryKey.split(','),
                element: element,
            };
        });
        var buttonElements = util_1.nodeListToArray(this.parent.querySelectorAll(BUTTON_SELECTOR));
        this.buttons = buttonElements.map(function (element) {
            var category = element.dataset.category || '';
            return {
                category: category,
                element: element,
                isSelected: false,
            };
        });
        this.activeCategories = new Set();
        if (callback) {
            this.optionalCallback = callback;
        }
        if (this.items.length > 0 && this.buttons.length > 0) {
            this.init();
        }
    }
    CategoryFilter.prototype.init = function () {
        var _this = this;
        this.buttons.forEach(function (button) {
            button.element.addEventListener('click', _this.handleButtonClick.bind(_this, button));
        });
    };
    CategoryFilter.prototype.handleButtonClick = function (button) {
        if (!this.allowMultipleCategories) {
            this.activeCategories.clear();
            this.buttons.forEach(function (currentButton) {
                if (currentButton !== button) {
                    currentButton.isSelected = false;
                    currentButton.element.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
                }
            });
        }
        if (!button.isSelected) {
            button.element.classList.add(util_1.ACTION_CLASSES.ACTIVE);
            button.isSelected = true;
            this.activeCategories.add(button.category);
        }
        else {
            button.element.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
            button.isSelected = false;
            this.activeCategories.delete(button.category);
        }
        this.updateVisibleItems();
    };
    CategoryFilter.prototype.updateVisibleItems = function () {
        var _this = this;
        var showAll = this.activeCategories.size === 0;
        if (!showAll) {
            this.parent.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        }
        else {
            this.parent.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        }
        this.items.forEach(function (item) {
            if (showAll) {
                _this.enableItem(item);
                _this.deactivateItem(item);
            }
            else if (!showAll) {
                var shouldShow_1 = false;
                item.categories.forEach(function (cat) {
                    if (_this.activeCategories.has(cat)) {
                        shouldShow_1 = true;
                    }
                    if (!shouldShow_1) {
                        _this.disableItem(item);
                    }
                    else if (shouldShow_1) {
                        _this.enableItem(item);
                        _this.activateItem(item);
                    }
                });
            }
        });
        if (this.optionalCallback) {
            this.optionalCallback();
        }
    };
    CategoryFilter.prototype.disableItem = function (item) {
        item.element.classList.add(util_1.ACTION_CLASSES.INACTIVE);
        item.element.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        item.element.setAttribute('aria-hidden', 'true');
        item.element.setAttribute('tabindex', '-1');
    };
    CategoryFilter.prototype.enableItem = function (item) {
        item.element.classList.remove(util_1.ACTION_CLASSES.INACTIVE);
        item.element.setAttribute('aria-hidden', 'false');
        item.element.removeAttribute('tabindex');
    };
    CategoryFilter.prototype.activateItem = function (item) {
        item.element.classList.add(util_1.ACTION_CLASSES.ACTIVE);
    };
    CategoryFilter.prototype.deactivateItem = function (item) {
        item.element.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
    };
    __decorate([
        core_decorators_1.autobind
    ], CategoryFilter.prototype, "handleButtonClick", null);
    return CategoryFilter;
}());
exports.CategoryFilter = CategoryFilter;


/***/ }),

/***/ "./static/js/components/Footer.ts":
/*!****************************************!*\
  !*** ./static/js/components/Footer.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    LANGUAGE_SELECT: '.js-language-select',
    BACK_TO_TOP: '.js-back-to-top',
    COOKIE_CONTAINER: '.js-cookie-bar',
    COOKIE_DISMISS: '.js-cookie-bar-dismiss',
};
var Footer = (function () {
    function Footer(core) {
        this.core = core;
        this.languageSelect = document.querySelector(SELECTORS.LANGUAGE_SELECT);
        this.backToTop = document.querySelector(SELECTORS.BACK_TO_TOP);
        this.cookieContainer = document.querySelector(SELECTORS.COOKIE_CONTAINER);
        this.cookieButton = document.querySelector(SELECTORS.COOKIE_DISMISS);
        this.cookieValue = util_1.readCookie('alert-dismissed') !== null ?
            new Set(util_1.readCookie('alert-dismissed').replace(/"/g, '').split(',')) : new Set();
        this.init();
    }
    Footer.prototype.init = function () {
        this.attachEvents();
        this.setCookieVisibility();
    };
    Footer.prototype.attachEvents = function () {
        this.languageSelect && this.languageSelect.addEventListener('change', this.updateLanguage);
        this.backToTop && this.backToTop.addEventListener('click', this.handleBackToTop);
        this.cookieButton && this.cookieButton.addEventListener('click', this.handleCookieButton);
    };
    Footer.prototype.updateLanguage = function (event) {
        event.preventDefault();
        var target = event.target;
        var option = target.options[target.selectedIndex];
        util_1.writeCookie('locale', target.value);
        if (option.dataset.location) {
            window.location.href = option.dataset.location;
        }
    };
    Footer.prototype.handleBackToTop = function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        TweenMax.to(window, 1, {
            scrollTo: {
                y: 0,
                autoKill: false,
            },
        });
        document.querySelector('.js-has-subnav').focus();
    };
    Footer.prototype.handleCookieButton = function (event) {
        event.preventDefault();
        this.cookieValue = this.cookieValue.add('cookie');
        util_1.writeCookie('alert-dismissed', Array.from(this.cookieValue).toString());
        this.setCookieVisibility();
    };
    Footer.prototype.setCookieVisibility = function () {
        if (this.cookieValue.has('cookie') && this.cookieContainer) {
            this.cookieContainer.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], Footer.prototype, "handleCookieButton", null);
    __decorate([
        core_decorators_1.autobind
    ], Footer.prototype, "setCookieVisibility", null);
    return Footer;
}());
exports.default = Footer;


/***/ }),

/***/ "./static/js/components/Header.ts":
/*!****************************************!*\
  !*** ./static/js/components/Header.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var menu_1 = __webpack_require__(/*! @material/menu */ "./node_modules/@material/menu/index.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    HEADER: '.js-header',
    SUB_NAV_TRIGGERS: '.js-has-subnav',
    PROFILE_WIDGET: '.js-profile-widget',
    PROFILE_TRIGGER: '.js-profile-trigger',
    PROFILE_WIDGET_MOBILE: '.js-profile-widget-mobile',
    PROFILE_TRIGGER_MOBILE: '.js-profile-trigger-mobile',
    SUB_NAV: '.js-subnav',
};
var SCROLL_DISTANCE_TILL_SHADOW = 160;
var Header = (function () {
    function Header(core) {
        this.core = core;
        this.header = document.querySelector(SELECTORS.HEADER);
        this.subNavTriggers = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.SUB_NAV_TRIGGERS));
        this.profileTrigger = document.querySelector(SELECTORS.PROFILE_TRIGGER);
        this.profileWidget = document.querySelector(SELECTORS.PROFILE_WIDGET);
        if (this.profileWidget) {
            this.profileMenu = new menu_1.MDCMenu(this.profileWidget);
        }
        this.subNav = document.querySelector(SELECTORS.SUB_NAV);
        if (this.subNav) {
            this.subNavMenu = new menu_1.MDCMenu(this.subNav);
        }
        this.hasShadow = window.scrollY < SCROLL_DISTANCE_TILL_SHADOW;
        this.init();
    }
    Header.prototype.init = function () {
        var _this = this;
        if (!this.header) {
            return;
        }
        window.addEventListener('scroll', this.onScroll);
        this.onScroll();
        this.subNavTriggers.forEach(function (link) { return link.addEventListener('click', _this.handleSubNavTrigger.bind(_this, link)); });
        if (this.profileTrigger === null) {
            return;
        }
        this.profileTrigger.addEventListener('click', this.handleProfileClick);
    };
    Header.prototype.handleSubNavTrigger = function (_link, e) {
        if (window.innerWidth >= 900) {
            e.preventDefault();
            this.subNavMenu.open = !this.subNavMenu.open;
        }
    };
    Header.prototype.handleProfileClick = function (e) {
        e.preventDefault();
        this.profileMenu.open = !this.profileMenu.open;
    };
    Header.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    Header.prototype.handleScroll = function () {
        if (this.hasShadow && window.scrollY < SCROLL_DISTANCE_TILL_SHADOW) {
            this.header.classList.remove(util_1.ACTION_CLASSES.HAS_SHADOW);
            this.hasShadow = false;
        }
        else if (!this.hasShadow && window.scrollY >= SCROLL_DISTANCE_TILL_SHADOW) {
            this.header.classList.add(util_1.ACTION_CLASSES.HAS_SHADOW);
            this.hasShadow = true;
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], Header.prototype, "handleProfileClick", null);
    __decorate([
        core_decorators_1.autobind
    ], Header.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], Header.prototype, "handleScroll", null);
    return Header;
}());
exports.default = Header;


/***/ }),

/***/ "./static/js/components/HomeConclusionShapes.ts":
/*!******************************************************!*\
  !*** ./static/js/components/HomeConclusionShapes.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    CONCLUSION_CONTAINER: '.js-conclusion',
    CONCLUSION_SHAPE_1: '#conclusion-shape-1',
    CONCLUSION_SHAPE_2: '#conclusion-shape-2',
    CONCLUSION_SHAPE_3: '#conclusion-shape-3',
    CONCLUSION_SHAPE_4: '#conclusion-shape-4',
};
var HomeConclusionShapes = (function () {
    function HomeConclusionShapes() {
        this.conclusionContainer = document
            .querySelector(SELECTORS.CONCLUSION_CONTAINER);
        this.conclusionShape1 = this.conclusionContainer
            .querySelector(SELECTORS.CONCLUSION_SHAPE_1);
        this.conclusionShape2 = this.conclusionContainer
            .querySelector(SELECTORS.CONCLUSION_SHAPE_2);
        this.conclusionShape3 = this.conclusionContainer
            .querySelector(SELECTORS.CONCLUSION_SHAPE_3);
        this.conclusionShape4 = this.conclusionContainer
            .querySelector(SELECTORS.CONCLUSION_SHAPE_4);
        this.init();
    }
    HomeConclusionShapes.prototype.init = function () {
        window.addEventListener('scroll', this.onScroll);
        this.onScroll();
    };
    HomeConclusionShapes.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    HomeConclusionShapes.prototype.handleScroll = function () {
        if (this.conclusionContainer &&
            this.conclusionContainer.getBoundingClientRect().top <
                window.innerHeight * 1.1) {
            this.animateConclusionShapes();
        }
    };
    HomeConclusionShapes.prototype.animateConclusionShapes = function () {
        if (this.conclusionContainer) {
            var shape1Top = this.conclusionShape1.getBoundingClientRect().top;
            this.conclusionShape1.style.transform =
                "translate3d(" + shape1Top / 10 + "px, -" + shape1Top / 40 + "px, 0) rotate(" + shape1Top / 100 + "deg)";
            var shape2Top = this.conclusionShape2.getBoundingClientRect().top;
            this.conclusionShape2.style.transform =
                "translate3d(" + shape2Top / 30 + "px, -" + shape2Top / 20 + "px, 0)";
            var shape3Top = this.conclusionShape3.getBoundingClientRect().top;
            this.conclusionShape3.style.transform =
                "translate3d(-" + shape3Top / 10 + "px, -" + shape3Top / 60 + "px, 0)\n          rotate(-" + shape3Top / 150 + "deg)";
            var shape4Top = this.conclusionShape4.getBoundingClientRect().top;
            this.conclusionShape4.style.transform =
                "translate3d(" + (20 - (shape4Top / 15)) + "px, " + ((shape4Top / 100) + 60) + "px, 0)";
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], HomeConclusionShapes.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeConclusionShapes.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeConclusionShapes.prototype, "handleScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeConclusionShapes.prototype, "animateConclusionShapes", null);
    return HomeConclusionShapes;
}());
exports.default = HomeConclusionShapes;


/***/ }),

/***/ "./static/js/components/HomeNumberAnimation.ts":
/*!*****************************************************!*\
  !*** ./static/js/components/HomeNumberAnimation.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    NUMBER_ONE_CONTAINER: '.js-animate-n1',
    NUMBER_TWO_CONTAINER: '.js-animate-n2',
    NUMBER_THREE_CONTAINER: '.js-animate-n4',
    NUMBER_FOUR_CONTAINER: '.js-animate-n3',
};
var HomeNumberAnimation = (function () {
    function HomeNumberAnimation(core) {
        this.num1HasPlayed = false;
        this.num2HasPlayed = false;
        this.num3HasPlayed = false;
        this.num4HasPlayed = false;
        this.core = core;
        this.num1AnimationContainer = document.querySelector(SELECTORS.NUMBER_ONE_CONTAINER);
        this.num2AnimationContainer = document.querySelector(SELECTORS.NUMBER_TWO_CONTAINER);
        this.num3AnimationContainer = document.querySelector(SELECTORS.NUMBER_THREE_CONTAINER);
        this.num4AnimationContainer = document.querySelector(SELECTORS.NUMBER_FOUR_CONTAINER);
        this.num1AnimationData = {
            container: this.num1AnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: '/static/data/number_01.json',
        };
        this.num2AnimationData = {
            container: this.num2AnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: '/static/data/number_02.json',
        };
        this.num3AnimationData = {
            container: this.num3AnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: '/static/data/number_03.json',
        };
        this.num4AnimationData = {
            container: this.num4AnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: '/static/data/number_04.json',
        };
        this.init();
    }
    HomeNumberAnimation.prototype.init = function () {
        var _this = this;
        this.num1AnimationObject = bodymovin.loadAnimation(this.num1AnimationData);
        this.num2AnimationObject = bodymovin.loadAnimation(this.num2AnimationData);
        this.num3AnimationObject = bodymovin.loadAnimation(this.num3AnimationData);
        this.num4AnimationObject = bodymovin.loadAnimation(this.num4AnimationData);
        if (this.core && this.core.prefersReducedMotion) {
            this.num4AnimationObject.addEventListener('DOMLoaded', function () {
                _this.num1AnimationObject.goToAndStop(_this.num1AnimationObject.totalFrames, true);
                _this.num2AnimationObject.goToAndStop(_this.num2AnimationObject.totalFrames, true);
                _this.num3AnimationObject.goToAndStop(_this.num3AnimationObject.totalFrames, true);
                _this.num4AnimationObject.goToAndStop(_this.num4AnimationObject.totalFrames, true);
            });
            return;
        }
        window.addEventListener('scroll', this.onScroll);
        this.onScroll();
    };
    HomeNumberAnimation.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    HomeNumberAnimation.prototype.handleScroll = function () {
        if (this.num1AnimationContainer && !this.num1HasPlayed) {
            var numTop = this.num1AnimationContainer.getBoundingClientRect().top;
            if (numTop < window.innerHeight) {
                this.num1AnimationObject.play();
                this.num1HasPlayed = true;
            }
        }
        if (this.num2AnimationContainer && !this.num2HasPlayed) {
            var numTop = this.num2AnimationContainer.getBoundingClientRect().top;
            if (numTop < window.innerHeight) {
                this.num2AnimationObject.play();
                this.num2HasPlayed = true;
            }
        }
        if (this.num3AnimationContainer && !this.num3HasPlayed) {
            var numTop = this.num3AnimationContainer.getBoundingClientRect().top;
            if (numTop < window.innerHeight) {
                this.num3AnimationObject.play();
                this.num3HasPlayed = true;
            }
        }
        if (this.num4AnimationContainer && !this.num4HasPlayed) {
            var numTop = this.num4AnimationContainer.getBoundingClientRect().top;
            if (numTop < window.innerHeight) {
                this.num4AnimationObject.play();
                this.num4HasPlayed = true;
            }
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], HomeNumberAnimation.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeNumberAnimation.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeNumberAnimation.prototype, "handleScroll", null);
    return HomeNumberAnimation;
}());
exports.default = HomeNumberAnimation;


/***/ }),

/***/ "./static/js/components/HomeThoughtStarter.ts":
/*!****************************************************!*\
  !*** ./static/js/components/HomeThoughtStarter.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var _1 = __webpack_require__(/*! . */ "./static/js/components/index.ts");
var HomeThoughtStarter = (function () {
    function HomeThoughtStarter(core) {
        this.thoughtStarter = new _1.ThoughtStarter(core);
        this.init();
    }
    HomeThoughtStarter.prototype.init = function () {
        window.addEventListener('scroll', this.onScroll);
        this.onScroll();
    };
    HomeThoughtStarter.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    HomeThoughtStarter.prototype.handleScroll = function () {
        if (this.thoughtStarter && !this.thoughtStarter.hasActivated) {
            if (this.thoughtStarter.getIsInView()) {
                this.thoughtStarter.activate();
            }
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], HomeThoughtStarter.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeThoughtStarter.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeThoughtStarter.prototype, "handleScroll", null);
    return HomeThoughtStarter;
}());
exports.default = HomeThoughtStarter;


/***/ }),

/***/ "./static/js/components/HomeVideoPlayer.ts":
/*!*************************************************!*\
  !*** ./static/js/components/HomeVideoPlayer.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var _1 = __webpack_require__(/*! . */ "./static/js/components/index.ts");
var SELECTORS = {
    HOME_VIDEO_BUTTON_SELECTOR: '.js-home-video-button',
    FEATURE_VIDEO: '#feature-video',
};
var HomeVideoPlayer = (function () {
    function HomeVideoPlayer() {
        this.featureVideo = document.querySelector(SELECTORS.FEATURE_VIDEO);
        this.videoPlayer = new _1.VideoPlayer(true);
        this.homeVideoButton =
            document.querySelector(SELECTORS.HOME_VIDEO_BUTTON_SELECTOR);
        this.init();
    }
    HomeVideoPlayer.prototype.init = function () {
        var _this = this;
        this.setVideoHeight();
        this.videoPlayer.loadAPI().then(function () {
            _this.videoPlayer.initializeVideo();
            _this.videoPlayer.player.addEventListener('onReady', function () {
                _this.onScroll();
            });
            _this.featureVideo = document.querySelector(SELECTORS.FEATURE_VIDEO);
        });
        if (this.homeVideoButton) {
            this.homeVideoButton.addEventListener('click', this.handleVideoButtonClick);
        }
        window.addEventListener('scroll', this.onScroll);
        this.onScroll();
        window.addEventListener('resize', this.onResize);
        this.onResize();
    };
    HomeVideoPlayer.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    HomeVideoPlayer.prototype.handleScroll = function () {
        if (this.videoPlayer && this.videoPlayer.player &&
            !this.videoPlayer.hasBeenPlayed && this.videoPlayer.isReady) {
            var videoTop = this.videoPlayer.videoDiv.getBoundingClientRect().top;
            if (videoTop < window.innerHeight * 1.25) {
                this.videoPlayer.player.playVideo();
                this.videoPlayer.player.mute();
            }
        }
    };
    HomeVideoPlayer.prototype.onResize = function () {
        requestAnimationFrame(this.handleResize);
    };
    HomeVideoPlayer.prototype.handleResize = function () {
        this.setVideoHeight();
    };
    HomeVideoPlayer.prototype.setVideoHeight = function () {
        if (this.featureVideo) {
            this.featureVideo.style.height = document.body.clientWidth * .5625 + "px";
        }
    };
    HomeVideoPlayer.prototype.handleVideoButtonClick = function () {
        var _this = this;
        if (!this.videoPlayer.isReady) {
            return;
        }
        this.videoPlayer.player.unMute();
        this.videoPlayer.shouldLoop = false;
        this.videoPlayer.hasBeenPlayed = true;
        this.videoPlayer.player.seekTo(0);
        this.videoPlayer.player.stopVideo();
        this.videoPlayer.player.playVideo();
        TweenMax.to(this.homeVideoButton, 0.25, {
            autoAlpha: 0,
            onComplete: function () {
                _this.homeVideoButton.style.display = 'none';
            },
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], HomeVideoPlayer.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeVideoPlayer.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeVideoPlayer.prototype, "handleScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeVideoPlayer.prototype, "onResize", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeVideoPlayer.prototype, "handleResize", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeVideoPlayer.prototype, "setVideoHeight", null);
    __decorate([
        core_decorators_1.autobind
    ], HomeVideoPlayer.prototype, "handleVideoButtonClick", null);
    return HomeVideoPlayer;
}());
exports.default = HomeVideoPlayer;


/***/ }),

/***/ "./static/js/components/InteractiveLogo.ts":
/*!*************************************************!*\
  !*** ./static/js/components/InteractiveLogo.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    TRIGGER: '.js-logo-trigger',
};
var InteractiveLogo = (function () {
    function InteractiveLogo(container, animationObject) {
        this.keyboardIsInUse = false;
        this.container = container;
        this.animation = animationObject;
        this.isPlaying = false;
        this.isHovering = false;
        this.audioHasLoaded = false;
        this.touchWasUsed = false;
    }
    InteractiveLogo.prototype.init = function () {
        this.createLetters();
        this.container.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        this.slingshot = new components_1.Slingshot(this.container);
        this.slingshot.init();
        this.initAllAudio();
        this.bindEvents();
    };
    InteractiveLogo.prototype.createLetters = function () {
        var triggerElements = util_1.nodeListToArray(this.container.querySelectorAll(SELECTORS.TRIGGER));
        this.triggers = triggerElements.map(function (element) {
            var startFrame = 0;
            var stopFrame = 0;
            var hoverStartFrame = 0;
            var hoverStopFrame = 0;
            var audioFile;
            switch (element.dataset.animation) {
                case 'satellite':
                    startFrame = 0;
                    stopFrame = 299;
                    audioFile = '/static/audio/gsf-bloops-SR.mp3';
                    break;
                case 'f':
                    startFrame = 1071;
                    stopFrame = 1090;
                    break;
                case 'planets':
                    startFrame = 300;
                    stopFrame = 600;
                    audioFile = '/static/audio/gsf-bloops-CC.mp3';
                    break;
                case 'balloon1':
                    startFrame = 1031;
                    stopFrame = 1050;
                    break;
                case 'balloon2':
                    startFrame = 601;
                    stopFrame = 841;
                    audioFile = '/static/audio/gsf-bloops-I.mp3';
                    break;
                case 'volcano':
                    startFrame = 841;
                    stopFrame = 990;
                    audioFile = '/static/audio/gsf-bloops-A.mp3';
                    break;
            }
            switch (element.dataset.letter) {
                case 's':
                    hoverStartFrame = 992;
                    hoverStopFrame = 1010;
                    break;
                case 'c1':
                    hoverStartFrame = 1011;
                    hoverStopFrame = 1030;
                    break;
                case 'i1':
                    hoverStartFrame = 1031;
                    hoverStopFrame = 1050;
                    break;
                case 'c2':
                    hoverStartFrame = 1051;
                    hoverStopFrame = 1070;
                    break;
                case 'f':
                    hoverStartFrame = 1071;
                    hoverStopFrame = 1090;
                    break;
                case 'a':
                    hoverStartFrame = 1091;
                    hoverStopFrame = 1110;
                    break;
                case 'i2':
                    hoverStartFrame = 1111;
                    hoverStopFrame = 1130;
                    break;
                case 'r':
                    hoverStartFrame = 1131;
                    hoverStopFrame = 1151;
                    break;
            }
            return {
                button: element,
                startFrame: startFrame,
                stopFrame: stopFrame,
                hoverStartFrame: hoverStartFrame,
                hoverStopFrame: hoverStopFrame,
                audioPlayer: audioFile ? new components_1.AudioPlayer(audioFile) : null,
            };
        });
    };
    InteractiveLogo.prototype.bindEvents = function () {
        var _this = this;
        if (!this.triggers) {
            return;
        }
        window.addEventListener('touchstart', this.setTouchWasUsed);
        window.addEventListener('keydown', this.checkIfNeedsFocus);
        this.triggers.forEach(function (trigger) {
            trigger.button.addEventListener('click', function (e) {
                e.preventDefault();
                if (!_this.touchWasUsed) {
                    _this.playAnimation(trigger);
                }
            });
            trigger.button.addEventListener('touchend', _this.playAnimation.bind(_this, trigger));
            trigger.button.addEventListener('mouseenter', _this.playHoverAnimation.bind(_this, trigger));
            trigger.button.addEventListener('mouseleave', _this.stopHoverAnimation.bind(_this, trigger));
        });
        this.animation.addEventListener('complete', this.stopAnimation);
    };
    InteractiveLogo.prototype.tearDown = function () {
        if (!this.triggers) {
            return;
        }
        window.removeEventListener('touchstart', this.setTouchWasUsed);
        window.removeEventListener('keydown', this.checkIfNeedsFocus);
        this.triggers.forEach(function (trigger) {
            if (trigger.button && trigger.button.parentElement) {
                var newButton = trigger.button.cloneNode();
                trigger.button.parentElement.replaceChild(newButton, trigger.button);
                trigger.button = newButton;
            }
            if (trigger.audioPlayer) {
                trigger.audioPlayer.stop();
            }
        });
        this.animation.removeEventListener('complete', this.stopAnimation);
        if (this.slingshot) {
            this.slingshot.tearDown();
        }
    };
    InteractiveLogo.prototype.setTouchWasUsed = function () {
        this.touchWasUsed = true;
        window.removeEventListener('touchstart', this.setTouchWasUsed);
    };
    InteractiveLogo.prototype.initAllAudio = function () {
        if (!this.triggers) {
            return;
        }
        this.triggers.forEach(function (trigger) {
            if (trigger.audioPlayer) {
                trigger.audioPlayer.load();
            }
        });
    };
    InteractiveLogo.prototype.checkIfNeedsFocus = function (e) {
        if (e.key === 'Tab') {
            this.container.classList.add(util_1.ACTION_CLASSES.NEEDS_FOCUS_RING);
            window.removeEventListener('keydown', this.checkIfNeedsFocus);
        }
    };
    InteractiveLogo.prototype.playAnimation = function (trigger) {
        this.isPlaying = true;
        if (this.currentPlayingTrigger && this.currentPlayingTrigger.audioPlayer) {
            this.currentPlayingTrigger.audioPlayer.stop();
        }
        this.currentPlayingTrigger = trigger;
        this.animation.playSegments([trigger.startFrame, trigger.stopFrame], true);
        var level = util_1.DEFAULT_AUDIO_LEVEL;
        if (trigger.audioPlayer) {
            trigger.audioPlayer.start();
            switch (trigger.button.dataset.animation) {
                case 'satellite':
                    level = 0.4;
                    break;
                case 'volcano':
                    level = 0.2;
                    break;
            }
            trigger.audioPlayer.setVolume(level);
        }
    };
    InteractiveLogo.prototype.stopAnimation = function () {
        this.isPlaying = false;
        if (this.currentPlayingTrigger) {
            if (this.currentPlayingTrigger.audioPlayer) {
                this.currentPlayingTrigger.audioPlayer.stop();
            }
            this.currentPlayingTrigger = null;
        }
    };
    InteractiveLogo.prototype.playHoverAnimation = function (trigger) {
        if (this.isHovering || this.isPlaying) {
            return;
        }
        this.isHovering = true;
        this.animation.playSegments([trigger.hoverStartFrame, trigger.hoverStopFrame], true);
    };
    InteractiveLogo.prototype.stopHoverAnimation = function () {
        if (!this.isHovering) {
            return;
        }
        this.isHovering = false;
    };
    __decorate([
        core_decorators_1.autobind
    ], InteractiveLogo.prototype, "setTouchWasUsed", null);
    __decorate([
        core_decorators_1.autobind
    ], InteractiveLogo.prototype, "checkIfNeedsFocus", null);
    __decorate([
        core_decorators_1.autobind
    ], InteractiveLogo.prototype, "stopAnimation", null);
    return InteractiveLogo;
}());
exports.InteractiveLogo = InteractiveLogo;


/***/ }),

/***/ "./static/js/components/ListAccordion.ts":
/*!***********************************************!*\
  !*** ./static/js/components/ListAccordion.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var INITIAL_SHOW_COUNT = 10;
var DEFAULT_ANIMATION_TIMING = 0.5;
var ListAccordion = (function () {
    function ListAccordion(parentSelector, buttonSelector) {
        this.parent = document.querySelector(parentSelector);
        this.items = util_1.nodeListToArray(this.parent.querySelectorAll('li'));
        this.button = document.querySelector(buttonSelector);
        this.isExpanded = false;
        this.hasBeenExpanded = false;
        if (this.parent && this.items && this.button) {
            this.init();
        }
    }
    ListAccordion.prototype.init = function () {
        this.button.addEventListener('click', this.handleButtonClick);
        window.addEventListener('resize', this.onResize);
        this.parent.addEventListener('scroll', this.onScroll);
        this.collapseList();
    };
    ListAccordion.prototype.handleButtonClick = function () {
        if (this.isExpanded) {
            this.collapseList();
        }
        else {
            this.expandList();
            this.hasBeenExpanded = true;
        }
    };
    ListAccordion.prototype.onResize = function () {
        if (this.isExpanded) {
            this.parent.style.removeProperty('height');
            return;
        }
        requestAnimationFrame(this.handleResize);
    };
    ListAccordion.prototype.handleResize = function () {
        this.collapseList();
    };
    ListAccordion.prototype.onScroll = function () {
        if (this.hasBeenExpanded) {
            return;
        }
        if (!this.isExpanded) {
            this.expandList();
            this.hasBeenExpanded = true;
        }
    };
    ListAccordion.prototype.findTargetItem = function () {
        var count = 0;
        var targetItem;
        var lastVisibleItem;
        this.items.forEach(function (item) {
            if (item.getBoundingClientRect().height > 0) {
                lastVisibleItem = item;
                count++;
                if (count === INITIAL_SHOW_COUNT) {
                    targetItem = item;
                }
            }
        });
        if (count < INITIAL_SHOW_COUNT) {
            targetItem = lastVisibleItem;
        }
        return targetItem || this.items[INITIAL_SHOW_COUNT - 1];
    };
    ListAccordion.prototype.collapseList = function () {
        this.isExpanded = false;
        var targetItem = this.findTargetItem();
        var targetHeight = targetItem.offsetTop - this.parent.offsetTop - 1;
        TweenMax.to(this.parent, DEFAULT_ANIMATION_TIMING, {
            height: targetHeight,
            ease: Quad.easeOut,
        });
    };
    ListAccordion.prototype.expandList = function () {
        var _this = this;
        if (this.hasBeenExpanded) {
            return;
        }
        this.isExpanded = true;
        this.button.classList.add(util_1.ACTION_CLASSES.INACTIVE);
        var targetHeight;
        TweenMax.set(this.parent, {
            autoAlpha: 0,
            onComplete: function () {
                _this.parent.style.position = 'absolute';
                _this.parent.style.removeProperty('height');
                _this.parent.style.removeProperty('position');
                targetHeight = _this.parent.offsetHeight;
                TweenMax.to(_this.parent, DEFAULT_ANIMATION_TIMING, {
                    height: targetHeight,
                    autoAlpha: 1,
                    ease: Quad.easeOut,
                    onComplete: function () {
                        _this.parent.style.removeProperty('height');
                    },
                });
            },
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], ListAccordion.prototype, "handleButtonClick", null);
    __decorate([
        core_decorators_1.autobind
    ], ListAccordion.prototype, "onResize", null);
    __decorate([
        core_decorators_1.autobind
    ], ListAccordion.prototype, "handleResize", null);
    __decorate([
        core_decorators_1.autobind
    ], ListAccordion.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], ListAccordion.prototype, "expandList", null);
    return ListAccordion;
}());
exports.ListAccordion = ListAccordion;


/***/ }),

/***/ "./static/js/components/NavInPage.ts":
/*!*******************************************!*\
  !*** ./static/js/components/NavInPage.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    HERCULES_HEADER: '.hercules-header',
    NAV_LINKS: '.js-nav-link',
    NAV_BACKDROP: '#h-js-header__drawer-backdrop',
};
var CLASS_NAMES = {
    ACTIVE: '-active',
    HERCULES_ACTIVE_CLASS: 'h-is-active',
};
var NavInPage = (function () {
    function NavInPage(core) {
        this.core = core;
        this.windowHeight = window.innerHeight;
        this.navLinks = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.NAV_LINKS));
        this.navBackdrop = document.querySelector(SELECTORS.NAV_BACKDROP);
        this.sectionEls = this.navLinks.map(function (link) {
            var linkEl = document.getElementById(link.dataset.link || '');
            return linkEl.querySelector('.h-c-headline');
        });
        this.currentSectionIndex = 0;
        this.sectionTops = this.sectionEls.map(function (el) { return el ? el.offsetTop : 0; });
        this.herculesHeader = document.querySelector(SELECTORS.HERCULES_HEADER);
        this.init();
    }
    NavInPage.prototype.init = function () {
        this.attachEvents();
        this.checkAndSetCurrentSections(this.getDocumentScroll());
    };
    NavInPage.prototype.attachEvents = function () {
        var _this = this;
        window.addEventListener('scroll', this.onScroll);
        this.navLinks.forEach(function (link, index) {
            link.addEventListener('click', _this.scrollToSection.bind(_this, index));
        });
    };
    NavInPage.prototype.getDocumentScroll = function () {
        return window.scrollY || document.documentElement.scrollTop;
    };
    NavInPage.prototype.onScroll = function () {
        requestAnimationFrame(this.handledScroll);
    };
    NavInPage.prototype.handledScroll = function () {
        var currentScroll = this.getDocumentScroll();
        this.checkAndSetCurrentSections(currentScroll);
    };
    NavInPage.prototype.checkAndSetCurrentSections = function (currentScroll) {
        var closest = 0;
        if (currentScroll < this.sectionTops[1] - this.windowHeight) {
            closest = 0;
        }
        else if ((currentScroll > this.sectionTops[1] - this.windowHeight) &&
            (currentScroll < this.sectionTops[2] - this.windowHeight - this.herculesHeader.offsetHeight)) {
            closest = 1;
        }
        else {
            closest = 2;
        }
        if (this.currentSectionIndex !== closest) {
            this.currentSectionIndex = closest;
        }
        else {
            return;
        }
        this.activateSection();
    };
    NavInPage.prototype.activateSection = function () {
        this.deactivateSections();
        this.navLinks[this.currentSectionIndex].classList.add(CLASS_NAMES.HERCULES_ACTIVE_CLASS);
    };
    NavInPage.prototype.deactivateSections = function () {
        var _this = this;
        this.navLinks.forEach(function (link, index) {
            if (_this.currentSectionIndex !== index) {
                link.classList.remove(CLASS_NAMES.HERCULES_ACTIVE_CLASS);
                link.blur();
            }
        });
    };
    NavInPage.prototype.scrollToSection = function (sectionIndex, e) {
        e.preventDefault();
        this.navBackdrop.click();
        if (!this.sectionEls) {
            return;
        }
        var target = this.sectionEls[sectionIndex].offsetTop;
        var destination = this.getDocumentScroll() > target
            ? target - this.herculesHeader.offsetHeight
            : target;
        TweenMax.to(window, 1, {
            scrollTo: {
                y: destination - 60,
                autoKill: false,
            },
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], NavInPage.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], NavInPage.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], NavInPage.prototype, "handledScroll", null);
    return NavInPage;
}());
exports.default = NavInPage;


/***/ }),

/***/ "./static/js/components/ResourceNav.ts":
/*!*********************************************!*\
  !*** ./static/js/components/ResourceNav.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    NAV_CONTAINER: '.js-resource-nav',
};
var ResourceNav = (function () {
    function ResourceNav() {
        this.navContainer = document.querySelector(SELECTORS.NAV_CONTAINER);
        if (this.navContainer) {
            this.navListItems = util_1.nodeListToArray(this.navContainer.querySelectorAll('li a'));
            this.activeListItem = this.navListItems.find(function (item) {
                return item.classList.contains(util_1.ACTION_CLASSES.ACTIVE);
            });
            this.init();
        }
    }
    ResourceNav.prototype.init = function () {
        var destination = this.activeListItem
            && this.activeListItem.getBoundingClientRect().left || 0;
        TweenMax.to(this.navContainer, 1, {
            scrollTo: {
                x: destination - 16,
                autoKill: false,
            },
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], ResourceNav.prototype, "init", null);
    return ResourceNav;
}());
exports.default = ResourceNav;


/***/ }),

/***/ "./static/js/components/ScrollTo.ts":
/*!******************************************!*\
  !*** ./static/js/components/ScrollTo.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var LINK_SELECTOR = '.js-scrollto-link';
var TRACKER_SELECTOR = '.js-scrollto-tracker';
var SELECT_MENU_SELECTOR = '.js-scrollto-select';
var SCROLL_TIMING = 0.75;
var WINDOW_OFFSET = window.innerHeight * 0.5;
var ScrollTo = (function () {
    function ScrollTo() {
        var allLinks = util_1.nodeListToArray(document.querySelectorAll(LINK_SELECTOR));
        this.allSections = allLinks.map(function (link) {
            var linkhref = link.getAttribute('href') || 'body';
            var target = document.querySelector(linkhref);
            return {
                link: link,
                element: target,
                hash: linkhref,
                shouldTrack: link.dataset.navTrack === 'true',
            };
        });
        this.selectMenu = document.querySelector(SELECT_MENU_SELECTOR);
        var options = this.selectMenu &&
            util_1.nodeListToArray(this.selectMenu.querySelectorAll('option'));
        this.allOptions = options && options.map(function (option) {
            var isUrl = option.dataset.url === 'true';
            var linkhref = option.getAttribute('value') || 'body';
            var target = !isUrl ? document.querySelector(linkhref) : null;
            return {
                element: target,
                hash: linkhref,
                shouldTrack: false,
                isUrl: isUrl,
            };
        });
        this.tracker = document.querySelector(TRACKER_SELECTOR);
        this.lastScroll = this.getScroll();
        this.isTweening = false;
        this.isSmallScreen = !window.matchMedia(util_1.MEDIA_QUERIES.SMALL).matches;
        this.activeSection = this.allSections[0];
        if (!this.allSections) {
            return;
        }
        this.activateSection(this.allSections[0]);
        this.bindEvents();
        this.onScroll();
    }
    ScrollTo.prototype.bindEvents = function () {
        var _this = this;
        this.allSections.forEach(function (section) {
            if (section.link) {
                section.link.addEventListener('click', function (e) {
                    e.preventDefault();
                    _this.handleNavClick(section);
                });
            }
        });
        if (this.selectMenu) {
            this.selectMenu.addEventListener('change', this.handleSelectChange);
        }
        window.addEventListener('scroll', this.onScroll);
        window.addEventListener('resize', this.onResize);
    };
    ScrollTo.prototype.handleNavClick = function (section) {
        if (!section.element) {
            return;
        }
        this.scrollToSection(section.element);
        this.activateSection(section);
        this.moveTracker(section);
    };
    ScrollTo.prototype.handleSelectChange = function (e) {
        var _this = this;
        var menu = e.target;
        var isUrl = menu.selectedOptions[0].dataset.url === 'true';
        var hash = menu.selectedOptions[0].value;
        if (isUrl) {
            window.location.href = hash;
        }
        else {
            this.allOptions.forEach(function (section) {
                if (hash === section.hash && section.element) {
                    _this.scrollToSection(section.element);
                    _this.activateSection(section);
                }
            });
        }
    };
    ScrollTo.prototype.scrollToSection = function (target) {
        var _this = this;
        TweenMax.to(window, SCROLL_TIMING, {
            scrollTo: {
                y: target.offsetTop - (window.innerHeight * 0.1),
                autoKill: false,
            },
            onStart: function () {
                _this.isTweening = true;
            },
            onComplete: function () {
                setTimeout(function () {
                    _this.isTweening = false;
                }, 100);
            },
            ease: Expo.easeOut,
        });
    };
    ScrollTo.prototype.getScroll = function () {
        return window.scrollY || document.documentElement.scrollTop;
    };
    ScrollTo.prototype.onScroll = function () {
        if (this.isSmallScreen) {
            return;
        }
        requestAnimationFrame(this.handleScroll);
    };
    ScrollTo.prototype.handleScroll = function () {
        if (this.isTweening) {
            return;
        }
        var currentScroll = this.getScroll();
        var direction = currentScroll > this.lastScroll ? 1 : -1;
        var section;
        var isActiveSectionInView = this.checkIfSectionIsInView(this.activeSection, direction);
        if (isActiveSectionInView) {
            return;
        }
        for (var i = 0; i < this.allSections.length; i++) {
            section = this.allSections[i];
            if (this.checkIfSectionIsInView(section, direction)) {
                this.activateSection(section);
                return;
            }
        }
        this.lastScroll = currentScroll;
    };
    ScrollTo.prototype.onResize = function () {
        requestAnimationFrame(this.handleResize);
    };
    ScrollTo.prototype.handleResize = function () {
        this.isSmallScreen = !window.matchMedia(util_1.MEDIA_QUERIES.SMALL).matches;
    };
    ScrollTo.prototype.checkIfSectionIsInView = function (section, direction) {
        if (direction === void 0) { direction = 1; }
        if (!section || !section.element) {
            return false;
        }
        var bounds = section.element.getBoundingClientRect();
        var isInView = false;
        if (direction > 0) {
            isInView = bounds.top <= WINDOW_OFFSET && bounds.bottom > WINDOW_OFFSET * 0.5;
        }
        else if (direction < 0) {
            isInView = bounds.bottom > WINDOW_OFFSET * 0.5 && bounds.top <= WINDOW_OFFSET;
        }
        return isInView;
    };
    ScrollTo.prototype.moveTracker = function (section) {
        var _this = this;
        if (!this.tracker || !section.link) {
            return;
        }
        if (section.shouldTrack) {
            if (this.trackerTween) {
                this.trackerTween.kill();
            }
            this.trackerTween = TweenMax.to(this.tracker, SCROLL_TIMING, {
                y: section.link.offsetTop,
                height: section.link.offsetHeight,
                onStart: function () {
                    _this.tracker.classList.add(util_1.ACTION_CLASSES.ACTIVE);
                },
                ease: Expo.easeOut,
            });
        }
        else {
            this.tracker.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        }
    };
    ScrollTo.prototype.activateSection = function (section) {
        if (!section || !section.element) {
            return;
        }
        if (this.activeSection) {
            this.deactivateSection(this.activeSection);
        }
        this.activeSection = section;
        section.element.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        if (section.link) {
            section.link.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        }
        this.moveTracker(section);
    };
    ScrollTo.prototype.deactivateSection = function (section) {
        if (!section || !section.element) {
            return;
        }
        section.element.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        if (section.link) {
            section.link.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], ScrollTo.prototype, "handleNavClick", null);
    __decorate([
        core_decorators_1.autobind
    ], ScrollTo.prototype, "handleSelectChange", null);
    __decorate([
        core_decorators_1.autobind
    ], ScrollTo.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], ScrollTo.prototype, "handleScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], ScrollTo.prototype, "onResize", null);
    __decorate([
        core_decorators_1.autobind
    ], ScrollTo.prototype, "handleResize", null);
    return ScrollTo;
}());
exports.ScrollTo = ScrollTo;


/***/ }),

/***/ "./static/js/components/Slingshot.ts":
/*!*******************************************!*\
  !*** ./static/js/components/Slingshot.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var ITEM_SELECTOR = '.js-slingshot-item';
var CANVAS_SELECTOR = '.js-slingshot-canvas';
var PIXEL_DENSITY = window.devicePixelRatio > 1 ? window.devicePixelRatio : 1;
var ANIMATION_TIME = 1;
var RETURN_TO_ORIGIN_TIMEOUT = 1500;
var THROTTLE_TIMEOUT = 250;
var DIAGRAM_LINE_COLOR = '#dadce0';
var DIAGRAM_LINE_WIDTH = 1 * PIXEL_DENSITY;
var DIAGRAM_DASH_PATTERN = [6 * PIXEL_DENSITY, 6 * PIXEL_DENSITY];
var DIAGRAM_CIRCLE_RADIUS = 34;
var DIAGRAM_TEXT_COLOR = '#bdc1c6';
var DIAGRAM_FONT = 12 * PIXEL_DENSITY + "px Google Sans";
var INITIAL_MASS = 100;
var MASS_MULTIPLIER = 10000;
var GRAVITY_CONSTANT = 10;
var TIMESTEP = 1;
var VELOCITY_DEGRADATION_RATE = 0.99;
var VELOCITY_INTERACTION_MODIFIER = 10;
var AUTOTHROW_MULTIPLIER = 2;
var Slingshot = (function () {
    function Slingshot(container) {
        var _this = this;
        this.mouseIsDown = false;
        this.lastMouseX = 0;
        this.lastMouseY = 0;
        this.mouseX = 0;
        this.mouseY = 0;
        this.mouseOffsetX = 0;
        this.mouseOffsetY = 0;
        this.canvasIsVisible = false;
        if (!container) {
            throw new Error('A container element must be provided');
        }
        this.container = container;
        this.containerIsInView = this.getIsContainerInView();
        this.canvas = this.container.querySelector(CANVAS_SELECTOR);
        if (!this.canvas) {
            throw new Error('No canvas element found');
        }
        this.updateCanvasDimensions();
        this.ctx = this.canvas.getContext('2d');
        var buttons = util_1.nodeListToArray(this.container.querySelectorAll(ITEM_SELECTOR));
        this.allShapes = buttons.map(function (item) {
            var body = _this.createPhysicsBody({
                x: item.getBoundingClientRect().left,
                y: item.getBoundingClientRect().top,
                mass: INITIAL_MASS,
                radius: item.offsetWidth / 2,
            });
            var anchor = _this.createPhysicsBody({
                x: item.getBoundingClientRect().left,
                y: item.getBoundingClientRect().top,
                mass: INITIAL_MASS * MASS_MULTIPLIER,
            });
            var audioFile;
            switch (item.dataset.audio) {
                case 'e':
                    audioFile = '/static/audio/gsf-bloops-EE.mp3';
                    break;
                case 'n':
                    audioFile = '/static/audio/gsf-bloops-N.mp3';
                    break;
            }
            return {
                button: item,
                origin: {
                    x: item.getBoundingClientRect().left,
                    y: item.getBoundingClientRect().top,
                },
                body: body,
                anchor: anchor,
                isTweening: false,
                isLocked: true,
                needsDiagram: item.dataset.diagram === 'true',
                audioPlayer: audioFile ? new components_1.AudioPlayer(audioFile) : null,
            };
        });
    }
    Slingshot.prototype.init = function () {
        var _this = this;
        if (!this.container) {
            return;
        }
        this.bindEvents();
        this.render();
        this.allShapes.forEach(function (shape) {
            if (shape.button.dataset.attract === 'true') {
                _this.autoDragAndThrowItem(shape);
            }
            if (shape.audioPlayer) {
                shape.audioPlayer.load();
            }
        });
    };
    Slingshot.prototype.bindEvents = function () {
        var _this = this;
        this.allShapes.forEach(function (shape) {
            shape.button.addEventListener('mousedown', function (e) {
                e.preventDefault();
                _this.handleMouseDown(e, shape);
            });
            shape.button.addEventListener('touchstart', function (e) {
                e.preventDefault();
                _this.handleTouchStart(e, shape);
            });
            shape.button.addEventListener('keydown', function (e) {
                var keyEvent = e;
                if (keyEvent.code === 'Enter' || keyEvent.code === 'Space') {
                    if (shape.audioPlayer) {
                        shape.audioPlayer.start();
                        shape.audioPlayer.setVolume(util_1.DEFAULT_AUDIO_LEVEL);
                    }
                    _this.autoDragAndThrowItem(shape);
                }
            });
        });
        window.addEventListener('mousemove', this.handleMouseMove);
        window.addEventListener('mouseup', this.handleMouseUp);
        window.addEventListener('touchmove', this.handleTouchMove);
        window.addEventListener('touchend', this.handleTouchEnd);
        window.addEventListener('resize', this.onResize);
        window.addEventListener('scroll', this.onScroll);
    };
    Slingshot.prototype.tearDown = function () {
        this.allShapes.forEach(function (shape) {
            if (shape.button && shape.button.parentElement) {
                var newElement = shape.button.cloneNode();
                shape.button.parentElement.replaceChild(newElement, shape.button);
                shape.button = newElement;
            }
            if (shape.audioPlayer) {
                shape.audioPlayer.stop();
            }
        });
        window.removeEventListener('mousemove', this.handleMouseMove);
        window.removeEventListener('mouseup', this.handleMouseUp);
        window.removeEventListener('touchmove', this.handleTouchMove);
        window.removeEventListener('touchend', this.handleTouchEnd);
        window.removeEventListener('resize', this.onResize);
        window.removeEventListener('scroll', this.onScroll);
        this.containerIsInView = false;
    };
    Slingshot.prototype.handleMouseDown = function (e, shape) {
        if (e.button !== 0) {
            return;
        }
        this.handlePointerDown(e.clientX, e.clientY, shape);
    };
    Slingshot.prototype.handleTouchStart = function (e, shape) {
        this.handlePointerDown(e.touches[0].clientX, e.touches[0].clientY, shape);
    };
    Slingshot.prototype.handlePointerDown = function (pointX, pointY, shape) {
        if (shape.isTweening) {
            return;
        }
        this.cachePointerCoords(pointX, pointY);
        this.mouseIsDown = true;
        this.mouseOffsetX = pointX - shape.body.pointX;
        this.mouseOffsetY = pointY - shape.body.pointY;
        shape.isLocked = true;
        this.activeShape = shape;
        this.activeShape.button.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        this.updatePointerCoords(pointX, pointY);
        if (this.shapeTweenTimeout) {
            clearTimeout(this.shapeTweenTimeout);
        }
    };
    Slingshot.prototype.handleMouseUp = function (e) {
        this.handlePointerUp(e.clientX, e.clientY);
    };
    Slingshot.prototype.handleTouchEnd = function (e) {
        var touchEvent = e;
        this.handlePointerUp(touchEvent.changedTouches[0].clientX, touchEvent.changedTouches[0].clientY);
    };
    Slingshot.prototype.handlePointerUp = function (pointerX, pointerY) {
        if (!this.mouseIsDown) {
            return;
        }
        var pointDist = this.getDistanceAsTwoPoints(this.lastMouseX, this.lastMouseY, pointerX, pointerY);
        if (this.activeShape) {
            if (this.activeShape.audioPlayer) {
                this.activeShape.audioPlayer.start();
                this.activeShape.audioPlayer.setVolume(util_1.DEFAULT_AUDIO_LEVEL);
            }
            this.activeShape.body.velocityX = pointDist.x / VELOCITY_INTERACTION_MODIFIER;
            this.activeShape.body.velocityY = pointDist.y / VELOCITY_INTERACTION_MODIFIER;
            this.activeShape.isLocked = this.activeShape.isTweening === true;
            this.activeShape.button.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
            this.activeShape = null;
        }
        this.shapeTweenTimeout = setTimeout(this.returnAllBodiesToOrigin, RETURN_TO_ORIGIN_TIMEOUT);
        this.hideCanvas();
        this.mouseIsDown = false;
    };
    Slingshot.prototype.onResize = function () {
        requestAnimationFrame(this.handleResize);
    };
    Slingshot.prototype.handleResize = function () {
        var _this = this;
        if (this.throttleTimeout) {
            clearTimeout(this.throttleTimeout);
        }
        this.throttleTimeout = setTimeout(function () {
            _this.updateShapeCoords();
            _this.updateCanvasDimensions();
        }, THROTTLE_TIMEOUT);
    };
    Slingshot.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    Slingshot.prototype.handleScroll = function () {
        var _this = this;
        if (this.throttleTimeout) {
            clearTimeout(this.throttleTimeout);
        }
        this.throttleTimeout = setTimeout(function () {
            _this.updateShapeCoords();
            var wasInView = _this.containerIsInView;
            _this.containerIsInView = _this.getIsContainerInView();
            if (!wasInView && _this.containerIsInView) {
                _this.render();
            }
        }, THROTTLE_TIMEOUT);
    };
    Slingshot.prototype.getIsContainerInView = function () {
        return this.container.getBoundingClientRect().top < window.innerHeight &&
            this.container.getBoundingClientRect().bottom > 0;
    };
    Slingshot.prototype.cachePointerCoords = function (pointX, pointY) {
        this.lastMouseX = pointX;
        this.lastMouseY = pointY;
    };
    Slingshot.prototype.handleMouseMove = function (e) {
        this.updatePointerCoords(e.clientX, e.clientY);
    };
    Slingshot.prototype.handleTouchMove = function (e) {
        var touchEvent = e;
        this.updatePointerCoords(touchEvent.touches[0].clientX, touchEvent.touches[0].clientY);
    };
    Slingshot.prototype.updatePointerCoords = function (pointX, pointY) {
        if (!this.mouseIsDown) {
            return;
        }
        this.mouseX = pointX;
        this.mouseY = pointY;
    };
    Slingshot.prototype.updateShapeCoords = function () {
        this.allShapes.forEach(function (shape) {
            var x = shape.button.getBoundingClientRect().left;
            var y = shape.button.getBoundingClientRect().top;
            shape.body.pointX = x;
            shape.body.pointY = y;
            shape.anchor.pointX = x;
            shape.anchor.pointY = y;
            shape.origin.x = x;
            shape.origin.y = y;
        });
    };
    Slingshot.prototype.updateCanvasDimensions = function () {
        this.canvas.width = this.container.offsetWidth * PIXEL_DENSITY;
        this.canvas.height = this.container.offsetHeight * PIXEL_DENSITY;
    };
    Slingshot.prototype.returnAllBodiesToOrigin = function () {
        var _this = this;
        this.allShapes.forEach(function (shape) {
            _this.returnBodyToOrigin(shape);
        });
    };
    Slingshot.prototype.returnBodyToOrigin = function (shape) {
        if (shape.isTweening || shape.isLocked) {
            return;
        }
        shape.isLocked = true;
        TweenMax.to(shape.body, ANIMATION_TIME, {
            pointX: shape.anchor.pointX,
            pointY: shape.anchor.pointY,
            onStart: function () {
                shape.isTweening = true;
                shape.button.setAttribute('disabled', 'true');
            },
            onComplete: function () {
                shape.isTweening = false;
                shape.body.pointX = shape.anchor.pointX;
                shape.body.pointY = shape.anchor.pointY;
                shape.button.removeAttribute('disabled');
                if (shape.audioPlayer) {
                    shape.audioPlayer.stop();
                }
            },
            ease: Expo.easeOut,
        });
    };
    Slingshot.prototype.autoDragAndThrowItem = function (shape) {
        var _this = this;
        if (shape.isTweening) {
            return;
        }
        shape.isLocked = true;
        var targetX = shape.anchor.pointX - shape.button.offsetWidth * AUTOTHROW_MULTIPLIER;
        var targetY = shape.anchor.pointY + shape.button.offsetHeight;
        TweenMax.to(shape.body, ANIMATION_TIME, {
            pointX: targetX,
            pointY: targetY,
            onStart: function () {
                _this.mouseOffsetX = 0;
                _this.mouseOffsetY = 0;
                _this.lastMouseX = shape.body.pointX;
                _this.lastMouseY = shape.body.pointY;
                _this.activeShape = shape;
                _this.activeShape.button.classList.add(util_1.ACTION_CLASSES.ACTIVE);
                shape.isTweening = true;
                _this.mouseIsDown = true;
            },
            onUpdate: function () {
                _this.mouseX = shape.body.pointX;
                _this.mouseY = shape.body.pointY;
            },
            onComplete: function () {
                _this.shapeTweenTimeout = setTimeout(_this.returnAllBodiesToOrigin, RETURN_TO_ORIGIN_TIMEOUT);
                if (_this.activeShape) {
                    _this.activeShape.button.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
                    _this.activeShape = null;
                }
                var pointDist = _this.getDistanceAsTwoPoints(shape.anchor.pointX, shape.anchor.pointY, targetX, targetY);
                shape.isTweening = false;
                shape.isLocked = false;
                _this.mouseIsDown = false;
                shape.body.pointX = targetX;
                shape.body.pointY = targetY;
                shape.body.velocityX = pointDist.x / VELOCITY_INTERACTION_MODIFIER;
                shape.body.velocityY = pointDist.y / VELOCITY_INTERACTION_MODIFIER;
            },
            ease: Expo.easeOut,
        });
    };
    Slingshot.prototype.createPhysicsBody = function (options) {
        return {
            forceX: 0,
            forceY: 0,
            pointX: options.x,
            pointY: options.y,
            velocityX: 1,
            velocityY: 1,
            mass: options.mass,
            radius: options.radius || 1,
        };
    };
    Slingshot.prototype.getDistanceAsTwoPoints = function (x1, y1, x2, y2) {
        return {
            x: x1 - x2,
            y: y1 - y2,
        };
    };
    Slingshot.prototype.getPointDistance = function (x1, y1, x2, y2) {
        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    };
    Slingshot.prototype.getAngle = function (x1, y1, x2, y2) {
        return Math.atan2(x2 - x1, y2 - y1);
    };
    Slingshot.prototype.pairwisePhysics = function (a, b) {
        var pointDist = this.getDistanceAsTwoPoints(a.pointX, a.pointY, b.pointX, b.pointY);
        var distX = pointDist.x;
        var distY = pointDist.y;
        var dotProduct = distX * distX + distY * distY;
        if (dotProduct === 0) {
            return;
        }
        var r = Math.sqrt(dotProduct);
        distX /= r;
        distY /= r;
        var forceMagnitude = Math.min(GRAVITY_CONSTANT * a.mass * b.mass / dotProduct, 100);
        var forceX = distX * forceMagnitude;
        var forceY = distY * forceMagnitude;
        a.forceX -= forceX;
        a.forceY -= forceY;
        b.forceX += forceX;
        b.forceY += forceY;
    };
    Slingshot.prototype.resetForce = function (body) {
        body.forceX = 0;
        body.forceY = 0;
    };
    Slingshot.prototype.moveBody = function (body) {
        body.velocityX += body.forceX * TIMESTEP / body.mass;
        body.velocityY += body.forceY * TIMESTEP / body.mass;
        body.pointX += body.velocityX * TIMESTEP;
        body.pointY += body.velocityY * TIMESTEP;
    };
    Slingshot.prototype.degradeVelocity = function (body) {
        body.velocityX *= VELOCITY_DEGRADATION_RATE;
        body.velocityY *= VELOCITY_DEGRADATION_RATE;
    };
    Slingshot.prototype.lockActiveShapeToMouse = function () {
        if (!this.activeShape) {
            return;
        }
        if (!this.activeShape.isTweening) {
            var containerLeft = this.container.getBoundingClientRect().left;
            var containerTop = this.container.getBoundingClientRect().top;
            var inBoundsX = this.mouseX > containerLeft &&
                this.mouseX < this.container.offsetWidth + containerLeft;
            var inBoundsY = this.mouseY > containerTop &&
                this.mouseY < this.container.offsetHeight + containerTop;
            var offsetX = this.mouseX - this.mouseOffsetX;
            var offsetY = this.mouseY - this.mouseOffsetY;
            if (inBoundsX) {
                this.activeShape.body.pointX = offsetX;
            }
            else if (this.mouseX + this.mouseOffsetX < containerLeft) {
                this.activeShape.body.pointX = containerLeft - this.mouseOffsetX;
            }
            else if (this.mouseX - this.mouseOffsetX > this.container.offsetWidth + containerLeft) {
                this.activeShape.body.pointX =
                    this.container.offsetWidth + containerLeft - this.mouseOffsetX;
            }
            if (inBoundsY) {
                this.activeShape.body.pointY = offsetY;
            }
            else if (this.mouseY + this.mouseOffsetY < containerTop) {
                this.mouseY = containerTop - this.mouseOffsetY;
            }
            else if (this.mouseY + this.mouseOffsetY > this.container.offsetHeight + containerTop) {
                this.mouseY = this.container.offsetHeight + containerTop + this.mouseOffsetY;
            }
        }
        if (!this.activeShape.needsDiagram) {
            return;
        }
        var pointDist = this.getPointDistance(this.activeShape.body.pointX, this.activeShape.body.pointY, this.activeShape.anchor.pointX, this.activeShape.anchor.pointY);
        var isAbove = Math.abs(pointDist) > this.activeShape.body.radius / 2 &&
            this.activeShape.body.pointY < this.activeShape.anchor.pointY;
        var isBelow = Math.abs(pointDist) > this.activeShape.body.radius * 2 &&
            this.activeShape.body.pointY > this.activeShape.anchor.pointY;
        var isFar = Math.abs(pointDist) > this.activeShape.body.radius * 4;
        if (isAbove || isBelow || isFar) {
            this.drawDiagram();
            this.showCanvas();
        }
        else {
            this.hideCanvas();
        }
    };
    Slingshot.prototype.showCanvas = function () {
        if (this.canvasIsVisible) {
            return;
        }
        this.canvasIsVisible = true;
        this.canvas.classList.add(util_1.ACTION_CLASSES.ACTIVE);
    };
    Slingshot.prototype.hideCanvas = function () {
        if (!this.canvasIsVisible) {
            return;
        }
        this.canvasIsVisible = false;
        this.canvas.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
    };
    Slingshot.prototype.drawDiagram = function () {
        if (!this.ctx || !this.activeShape) {
            return;
        }
        var containerLeft = this.container.getBoundingClientRect().left;
        var containerTop = this.container.getBoundingClientRect().top;
        this.ctx.fillStyle = DIAGRAM_TEXT_COLOR;
        this.ctx.strokeStyle = DIAGRAM_LINE_COLOR;
        this.ctx.setLineDash(DIAGRAM_DASH_PATTERN);
        this.ctx.lineWidth = DIAGRAM_LINE_WIDTH;
        this.ctx.beginPath();
        this.ctx.moveTo(this.activeShape.button.offsetLeft * PIXEL_DENSITY, (this.activeShape.button.offsetTop + this.activeShape.button.offsetHeight) * PIXEL_DENSITY);
        this.ctx.lineTo((this.activeShape.body.pointX - containerLeft + (this.activeShape.button.offsetWidth / 2)) *
            PIXEL_DENSITY, (this.activeShape.body.pointY - containerTop + (this.activeShape.button.offsetHeight / 2)) *
            PIXEL_DENSITY);
        this.ctx.stroke();
        this.ctx.closePath();
        this.ctx.beginPath();
        this.ctx.moveTo(this.activeShape.button.offsetLeft * PIXEL_DENSITY, (this.activeShape.button.offsetTop + this.activeShape.button.offsetHeight) * PIXEL_DENSITY);
        this.ctx.lineTo((this.activeShape.button.offsetLeft + this.activeShape.button.offsetWidth) * PIXEL_DENSITY, (this.activeShape.button.offsetTop + this.activeShape.button.offsetHeight) * PIXEL_DENSITY);
        this.ctx.stroke();
        this.ctx.closePath();
        var angle = this.getAngle(this.activeShape.anchor.pointX - (this.activeShape.button.offsetWidth / 2), this.activeShape.anchor.pointY + (this.activeShape.button.offsetHeight / 2), this.activeShape.body.pointX, this.activeShape.body.pointY);
        var angleInDeg = Math.round(-angle * (180 / Math.PI)) + 90;
        if (angleInDeg < 0) {
            angleInDeg = 360 + angleInDeg;
        }
        this.ctx.setLineDash([0]);
        this.ctx.beginPath();
        this.ctx.arc(this.activeShape.button.offsetLeft * PIXEL_DENSITY, (this.activeShape.button.offsetTop + this.activeShape.button.offsetHeight) * PIXEL_DENSITY, DIAGRAM_CIRCLE_RADIUS * PIXEL_DENSITY, angleInDeg < 340 ? -10 * (Math.PI / 180) : 0, angleInDeg < 340 ? -angle + (100 * (Math.PI / 180)) : -angle + (90 * (Math.PI / 180)));
        this.ctx.stroke();
        this.ctx.closePath();
        var angleText = angleInDeg + "\u00B0";
        this.ctx.textAlign = 'right';
        this.ctx.font = DIAGRAM_FONT;
        this.ctx.fillText(angleText, (this.activeShape.button.offsetLeft + 22) * PIXEL_DENSITY, (this.activeShape.button.offsetTop + this.activeShape.button.offsetHeight + 18) *
            PIXEL_DENSITY);
        var pointDist = this.getDistanceAsTwoPoints(this.lastMouseX - this.mouseOffsetX - containerLeft, this.lastMouseY - this.mouseOffsetY - containerTop, this.activeShape.body.pointX - containerLeft, this.activeShape.body.pointY - containerTop);
        var velocity = Math.abs(pointDist.x / VELOCITY_INTERACTION_MODIFIER) +
            Math.abs(pointDist.y / VELOCITY_INTERACTION_MODIFIER);
        var lengthText = Math.round(velocity) + "v";
        this.ctx.fillText(lengthText, (this.activeShape.button.offsetLeft + 25) * PIXEL_DENSITY, (this.activeShape.button.offsetTop + this.activeShape.button.offsetHeight - 10) *
            PIXEL_DENSITY);
    };
    Slingshot.prototype.render = function () {
        if (!this.containerIsInView) {
            return;
        }
        if (this.ctx) {
            this.ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);
        }
        for (var i = 0; i < this.allShapes.length; i++) {
            var shape = this.allShapes[i];
            this.resetForce(shape.body);
            this.resetForce(shape.anchor);
            var pointDist = this.getPointDistance(shape.body.pointX, shape.body.pointY, shape.anchor.pointX, shape.anchor.pointY);
            var bodiesAreClose = Math.abs(pointDist) < shape.anchor.radius;
            if (!bodiesAreClose && !shape.isTweening) {
                for (var ii = i + 1; ii < this.allShapes.length; ii++) {
                    var shape2 = this.allShapes[ii];
                    if (shape2 && !shape2.isLocked) {
                        this.pairwisePhysics(shape.body, shape2.body);
                    }
                }
                this.pairwisePhysics(shape.body, shape.anchor);
            }
        }
        for (var i = 0; i < this.allShapes.length; i++) {
            var shape = this.allShapes[i];
            var pointDist = this.getPointDistance(shape.body.pointX, shape.body.pointY, shape.anchor.pointX, shape.anchor.pointY);
            var bodiesAreClose = Math.abs(pointDist) < shape.anchor.radius;
            if (!bodiesAreClose && !shape.isTweening && shape !== this.activeShape) {
                this.moveBody(shape.body);
                this.degradeVelocity(shape.body);
            }
            else if (bodiesAreClose && !shape.isTweening) {
                this.returnBodyToOrigin(shape);
            }
            if (this.mouseIsDown) {
                this.lockActiveShapeToMouse();
            }
            var shapeLeft = shape.body.pointX - shape.origin.x + "px";
            var shapeTop = shape.body.pointY - shape.origin.y + "px";
            shape.button.style.transform = "translate3d(" + shapeLeft + ", " + shapeTop + ", 0)";
        }
        requestAnimationFrame(this.render);
    };
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleMouseDown", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleTouchStart", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handlePointerDown", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleMouseUp", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleTouchEnd", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handlePointerUp", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "onResize", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleResize", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "cachePointerCoords", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleMouseMove", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "handleTouchMove", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "updatePointerCoords", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "updateShapeCoords", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "returnAllBodiesToOrigin", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "returnBodyToOrigin", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "autoDragAndThrowItem", null);
    __decorate([
        core_decorators_1.autobind
    ], Slingshot.prototype, "render", null);
    return Slingshot;
}());
exports.Slingshot = Slingshot;


/***/ }),

/***/ "./static/js/components/SnackBar.ts":
/*!******************************************!*\
  !*** ./static/js/components/SnackBar.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var snackbar_1 = __webpack_require__(/*! @material/snackbar */ "./node_modules/@material/snackbar/index.js");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    SNACKBAR_EL: '.mdc-snackbar',
};
var SnackBar = (function () {
    function SnackBar(core, snackBarEl) {
        this.core = core;
        this.snackBarEl = snackBarEl || document.querySelector(SELECTORS.SNACKBAR_EL);
        this.snackBar = new snackbar_1.MDCSnackbar(this.snackBarEl);
        this.message = this.snackBarEl.querySelector('.mdc-snackbar__text').innerHTML;
        this.actionText = this.snackBarEl
            .querySelector('.mdc-snackbar__action-button').innerHTML;
    }
    SnackBar.prototype.defaultHandler = function () {
        return false;
    };
    SnackBar.prototype.snackBarTrigger = function (message, actionText, callback, timeout) {
        this.snackBar.show({
            message: message || this.message,
            actionText: actionText || this.actionText,
            actionHandler: callback || this.defaultHandler,
            timeout: timeout,
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], SnackBar.prototype, "defaultHandler", null);
    __decorate([
        core_decorators_1.autobind
    ], SnackBar.prototype, "snackBarTrigger", null);
    return SnackBar;
}());
exports.default = SnackBar;


/***/ }),

/***/ "./static/js/components/StepNav.ts":
/*!*****************************************!*\
  !*** ./static/js/components/StepNav.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var menu_1 = __webpack_require__(/*! @material/menu */ "./node_modules/@material/menu/index.js");
var SELECTORS = {
    MDC_NAV: '.js-mdc-select-nav',
    MDC_NAV_TOGGLE: '.js-mdc-nav-toggle',
};
var StepNav = (function () {
    function StepNav(core, snackBarEl) {
        this.core = core;
        this.mdcSelect = document.querySelector(SELECTORS.MDC_NAV);
        if (this.mdcSelect) {
            this.menu = new menu_1.MDCMenu(this.mdcSelect);
            this.menuToggle = document.querySelector(SELECTORS.MDC_NAV_TOGGLE);
        }
        this.init();
    }
    StepNav.prototype.init = function () {
        if (!this.menu || !this.menuToggle) {
            return;
        }
        this.menuToggle.addEventListener('click', this.handleMenuToggle);
    };
    StepNav.prototype.handleMenuToggle = function (e) {
        e.preventDefault();
        this.menu.open = !this.menu.open;
    };
    __decorate([
        core_decorators_1.autobind
    ], StepNav.prototype, "handleMenuToggle", null);
    return StepNav;
}());
exports.default = StepNav;


/***/ }),

/***/ "./static/js/components/StickyBar.ts":
/*!*******************************************!*\
  !*** ./static/js/components/StickyBar.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var STICKY_BAR_SELECTOR = '.js-sticky-bar';
var STICKY_BAR_CHILD_SELECTOR = '.js-sticky-bar-child';
var StickyBar = (function () {
    function StickyBar(stickToBottom, selector) {
        if (stickToBottom === void 0) { stickToBottom = false; }
        if (selector === void 0) { selector = STICKY_BAR_SELECTOR; }
        this.stickToBottom = false;
        var elements = util_1.nodeListToArray(document.querySelectorAll(selector));
        this.stickies = elements.map(function (element) {
            var child = element.querySelector(STICKY_BAR_CHILD_SELECTOR);
            element.style.position = 'relative';
            element.style.height = child.offsetHeight + "px";
            return {
                element: element,
                child: child,
                isStuck: false,
            };
        });
        this.stickToBottom = stickToBottom;
        if (this.stickies.length > 0) {
            this.init();
        }
    }
    StickyBar.prototype.init = function () {
        window.addEventListener('scroll', this.onScroll);
        this.onScroll();
    };
    StickyBar.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    StickyBar.prototype.handleScroll = function () {
        for (var i = 0; i < this.stickies.length; i++) {
            var target = this.stickies[i];
            if (!target.child) {
                return;
            }
            var bounds = target.element.getBoundingClientRect();
            var isInView = this.stickToBottom ? bounds.bottom < window.innerHeight : bounds.top > 0;
            if (!target.isStuck && !isInView) {
                target.child.classList.add(util_1.ACTION_CLASSES.ACTIVE);
                target.isStuck = true;
            }
            else if (target.isStuck && isInView) {
                target.child.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
                target.isStuck = false;
            }
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], StickyBar.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], StickyBar.prototype, "handleScroll", null);
    return StickyBar;
}());
exports.StickyBar = StickyBar;


/***/ }),

/***/ "./static/js/components/ThoughtStarter.ts":
/*!************************************************!*\
  !*** ./static/js/components/ThoughtStarter.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var THOUGHT_STARTER_SELECTOR = '.js-thought-starter';
var THOUGHT_STARTER_ITEM_SELECTOR = '.js-thought-starter-item';
var THOUGHT_STARTER_TOOLTIP_SELECTOR = '.js-thought-starter-tooltip';
var THOUGHT_STARTER_ICON_DELAY = 500;
var THOUGHT_STARTER_ICON_OFFSET_DELAY = 20;
var ACTIVATION_DELAY = 360;
var ThoughtStarter = (function () {
    function ThoughtStarter(core) {
        this.hasActivated = false;
        this.readyForTouchInteraction = true;
        this.core = core;
        this.activationDelay = this.core && this.core.prefersReducedMotion ? 0 : ACTIVATION_DELAY;
        this.parent =
            document.querySelector(THOUGHT_STARTER_SELECTOR);
        var thoughtStarterItemElements = util_1.nodeListToArray(this.parent.querySelectorAll(THOUGHT_STARTER_ITEM_SELECTOR));
        this.items = thoughtStarterItemElements.map(function (item) {
            return {
                element: item,
                tooltip: item.querySelector(THOUGHT_STARTER_TOOLTIP_SELECTOR),
                isActive: false,
                hoverTimeout: null,
                activateTimeout: null,
            };
        });
    }
    ThoughtStarter.prototype.getIsInView = function () {
        var bounds = this.parent.getBoundingClientRect();
        return bounds.top < (window.innerHeight * 0.25);
    };
    ThoughtStarter.prototype.activate = function () {
        if (this.hasActivated) {
            return;
        }
        this.hasActivated = true;
        this.bindEvents();
        if (this.core && this.core.prefersReducedMotion) {
            return;
        }
        var _loop_1 = function (i) {
            var item = this_1.items[i];
            setTimeout(function () {
                item.element.classList.add(util_1.ACTION_CLASSES.ACTIVE);
            }, (i * THOUGHT_STARTER_ICON_OFFSET_DELAY));
            setTimeout(function () {
                item.element.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
            }, THOUGHT_STARTER_ICON_DELAY + (i * THOUGHT_STARTER_ICON_OFFSET_DELAY));
        };
        var this_1 = this;
        for (var i = 0; i < this.items.length; i++) {
            _loop_1(i);
        }
    };
    ThoughtStarter.prototype.bindEvents = function () {
        var _this = this;
        window.addEventListener('touchmove', this.onTouchMove);
        this.items.forEach(function (item) {
            item.element.addEventListener('mouseover', function (e) {
                e.preventDefault();
                _this.activateItem(item);
            });
            item.element.addEventListener('mouseleave', function () {
                _this.deactivateItem(item);
            });
            item.element.addEventListener('touchend', function (e) {
                _this.handleItemTouch(e, item);
            });
        });
    };
    ThoughtStarter.prototype.onTouchMove = function () {
        if (this.touchmoveTimeout) {
            clearTimeout(this.touchmoveTimeout);
        }
        this.readyForTouchInteraction = false;
        this.touchmoveTimeout = setTimeout(this.setReadyForTouchInteraction, this.activationDelay);
    };
    ThoughtStarter.prototype.setReadyForTouchInteraction = function () {
        this.readyForTouchInteraction = true;
        this.deactivateAllItems();
    };
    ThoughtStarter.prototype.handleItemTouch = function (e, item) {
        if (!this.readyForTouchInteraction || !item.isActive) {
            e.preventDefault();
        }
        if (!item.isActive && this.readyForTouchInteraction) {
            this.deactivateAllItems();
            this.activateItem(item);
        }
        else if (item.isActive) {
            this.deactivateItem(item);
        }
    };
    ThoughtStarter.prototype.activateItem = function (item) {
        if (item.isActive) {
            return;
        }
        item.isActive = true;
        if (item.hoverTimeout) {
            clearTimeout(item.hoverTimeout);
            item.hoverTimeout = null;
        }
        this.addHoveredState(item);
        item.activateTimeout = setTimeout(this.addActivatedState.bind(this, item), this.activationDelay);
    };
    ThoughtStarter.prototype.deactivateItem = function (item) {
        if (!item.isActive) {
            return;
        }
        item.isActive = false;
        if (item.activateTimeout) {
            clearTimeout(item.activateTimeout);
            item.activateTimeout = null;
        }
        this.removeActivatedState(item);
        item.element.blur();
        item.hoverTimeout =
            setTimeout(this.removeHoveredState.bind(this, item), this.activationDelay * 0.75);
    };
    ThoughtStarter.prototype.deactivateAllItems = function () {
        var _this = this;
        this.items.forEach(function (item) { return _this.deactivateItem(item); });
    };
    ThoughtStarter.prototype.addHoveredState = function (item) {
        item.element.classList.add(util_1.ACTION_CLASSES.HOVERED);
        item.element.style.zIndex = '99';
        item.hoverTimeout = null;
    };
    ThoughtStarter.prototype.removeHoveredState = function (item) {
        item.element.classList.remove(util_1.ACTION_CLASSES.HOVERED);
        item.element.style.removeProperty('z-index');
        item.hoverTimeout = null;
    };
    ThoughtStarter.prototype.addActivatedState = function (item) {
        item.element.classList.add(util_1.ACTION_CLASSES.ENABLED);
        item.activateTimeout = null;
    };
    ThoughtStarter.prototype.removeActivatedState = function (item) {
        item.element.classList.remove(util_1.ACTION_CLASSES.ENABLED);
        item.activateTimeout = null;
    };
    __decorate([
        core_decorators_1.autobind
    ], ThoughtStarter.prototype, "onTouchMove", null);
    __decorate([
        core_decorators_1.autobind
    ], ThoughtStarter.prototype, "setReadyForTouchInteraction", null);
    return ThoughtStarter;
}());
exports.ThoughtStarter = ThoughtStarter;


/***/ }),

/***/ "./static/js/components/ToolTip.ts":
/*!*****************************************!*\
  !*** ./static/js/components/ToolTip.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var TOOL_TIP_SELECTOR = '.js-tool-tip';
var TOOL_TIP_OFF_CLASS = 'tool-tip-off';
var GUTTER_WIDTH = 48;
var CoreToolTip = (function () {
    function CoreToolTip(core, rootElem) {
        this.coords = { x: 0, y: 0 };
        this.isOpen = false;
        this.core = core;
        this.text = '';
        this.containerElem = rootElem.querySelector(TOOL_TIP_SELECTOR);
    }
    CoreToolTip.prototype.setPosition = function (x, y) {
        this.coords.x = x;
        this.coords.y = y;
        this.containerElem.style.left = this.coords.x + 'px';
        this.containerElem.style.top = this.coords.y + 'px';
    };
    CoreToolTip.prototype.show = function () {
        if (this.isOpen) {
            return;
        }
        this.containerElem.classList.remove(TOOL_TIP_OFF_CLASS);
        this.isOpen = true;
    };
    CoreToolTip.prototype.hide = function () {
        if (!this.isOpen) {
            return;
        }
        this.containerElem.classList.add(TOOL_TIP_OFF_CLASS);
        this.isOpen = false;
    };
    __decorate([
        core_decorators_1.autobind
    ], CoreToolTip.prototype, "show", null);
    __decorate([
        core_decorators_1.autobind
    ], CoreToolTip.prototype, "hide", null);
    return CoreToolTip;
}());
exports.CoreToolTip = CoreToolTip;
var ToolTip = (function (_super) {
    __extends(ToolTip, _super);
    function ToolTip(core, rootElem) {
        var _this = _super.call(this, core, rootElem) || this;
        _this.rootElem = rootElem;
        return _this;
    }
    ToolTip.prototype.domShow = function () {
        if (this.isOpen) {
            return;
        }
        var coords = this.getPosition(this.rootElem);
        this.setPosition(coords.x, coords.y);
        this.containerElem.classList.remove(TOOL_TIP_OFF_CLASS);
        this.containerElem.style.visibility = 'visible';
        this.containerElem.setAttribute('aria-hidden', 'false');
        this.rootElem.setAttribute('aria-pressed', 'true');
        this.isOpen = true;
    };
    ToolTip.prototype.domHide = function () {
        if (!this.isOpen) {
            return;
        }
        this.containerElem.classList.add(TOOL_TIP_OFF_CLASS);
        this.containerElem.style.visibility = 'hidden';
        this.containerElem.setAttribute('aria-hidden', 'true');
        this.rootElem.setAttribute('aria-pressed', 'false');
        this.isOpen = false;
    };
    ToolTip.prototype.getPosition = function (button) {
        var windowW = window.innerWidth;
        var windowH = window.innerHeight;
        var toolTipButtonRect = button.getBoundingClientRect();
        var containerRect = this.containerElem.getBoundingClientRect();
        var smallScreen = window.innerWidth < containerRect.width * 2;
        var top = (toolTipButtonRect.top < windowH / 2) ?
            toolTipButtonRect.top + 40 : toolTipButtonRect.top - 40;
        var left = toolTipButtonRect.left + toolTipButtonRect.width / 2;
        var containerOffsetHeight = containerRect.height;
        if (toolTipButtonRect.top < containerOffsetHeight) {
            top = toolTipButtonRect.bottom;
            left = toolTipButtonRect.left + toolTipButtonRect.width / 2 - containerRect.width / 2;
        }
        else if (toolTipButtonRect.left < windowW / 2) {
            top = toolTipButtonRect.top - containerOffsetHeight;
            left = toolTipButtonRect.left;
        }
        else if (toolTipButtonRect.left > windowW / 2) {
            top = toolTipButtonRect.top - containerOffsetHeight;
            left = toolTipButtonRect.left;
        }
        if ((left) < GUTTER_WIDTH) {
            left = toolTipButtonRect.left;
        }
        if ((left + containerRect.width) > (windowW - GUTTER_WIDTH)) {
            left = windowW - containerRect.width - GUTTER_WIDTH;
        }
        if (smallScreen) {
            left = (windowW - containerRect.width) / 2;
        }
        return new util_1.Point(left, top);
    };
    __decorate([
        core_decorators_1.autobind
    ], ToolTip.prototype, "domShow", null);
    __decorate([
        core_decorators_1.autobind
    ], ToolTip.prototype, "domHide", null);
    __decorate([
        core_decorators_1.autobind
    ], ToolTip.prototype, "getPosition", null);
    return ToolTip;
}(CoreToolTip));
exports.ToolTip = ToolTip;


/***/ }),

/***/ "./static/js/components/VideoPlayer.ts":
/*!*********************************************!*\
  !*** ./static/js/components/VideoPlayer.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var VIDEO_SELECTOR = '.js-video-player';
var VideoPlayer = (function () {
    function VideoPlayer(shouldLoop) {
        this.isReady = false;
        this.player = null;
        this.hasBeenPlayed = false;
        this.shouldLoop = shouldLoop || true;
        this.videoDiv = document.querySelector(VIDEO_SELECTOR);
    }
    VideoPlayer.prototype.loadAPI = function () {
        return new Promise(function (resolve) {
            window.onYouTubeIframeAPIReady = resolve;
            var tag = document.createElement('script');
            tag.src = 'https://www.youtube.com/iframe_api';
            var firstScriptTag = document.getElementsByTagName('script')[0];
            if (firstScriptTag && firstScriptTag.parentNode) {
                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
            }
        });
    };
    VideoPlayer.prototype.initializeVideo = function () {
        if (this.isReady || !this.videoDiv) {
            return;
        }
        this.player = new window.YT.Player(this.videoDiv, {
            height: '100%',
            width: '100%',
            videoId: this.videoDiv.dataset.src,
            playerVars: {
                rel: 0,
                showinfo: 0,
                modestbranding: 1,
                playsinline: 1,
                end: 7,
                cc_lang_pref: document.documentElement.lang,
            },
        });
        this.bindEvents();
    };
    VideoPlayer.prototype.bindEvents = function () {
        this.player.addEventListener('onReady', this.onPlayerReady);
        this.player.addEventListener('onStateChange', this.onPlayerStateChange);
    };
    VideoPlayer.prototype.onPlayerReady = function () {
        this.isReady = true;
    };
    VideoPlayer.prototype.onPlayerStateChange = function (e) {
        if (e.data === 0 && this.shouldLoop) {
            this.player.playVideo();
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], VideoPlayer.prototype, "initializeVideo", null);
    __decorate([
        core_decorators_1.autobind
    ], VideoPlayer.prototype, "onPlayerReady", null);
    __decorate([
        core_decorators_1.autobind
    ], VideoPlayer.prototype, "onPlayerStateChange", null);
    return VideoPlayer;
}());
exports.VideoPlayer = VideoPlayer;


/***/ }),

/***/ "./static/js/components/index.ts":
/*!***************************************!*\
  !*** ./static/js/components/index.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Accordion_1 = __webpack_require__(/*! ./Accordion */ "./static/js/components/Accordion.ts");
exports.Accordion = Accordion_1.Accordion;
var AudioPlayer_1 = __webpack_require__(/*! ./AudioPlayer */ "./static/js/components/AudioPlayer.ts");
exports.AudioPlayer = AudioPlayer_1.AudioPlayer;
var CardStack_1 = __webpack_require__(/*! ./CardStack */ "./static/js/components/CardStack.ts");
exports.CardStack = CardStack_1.default;
var CategoryFilter_1 = __webpack_require__(/*! ./CategoryFilter */ "./static/js/components/CategoryFilter.ts");
exports.CategoryFilter = CategoryFilter_1.CategoryFilter;
var Footer_1 = __webpack_require__(/*! ./Footer */ "./static/js/components/Footer.ts");
exports.Footer = Footer_1.default;
var Header_1 = __webpack_require__(/*! ./Header */ "./static/js/components/Header.ts");
exports.Header = Header_1.default;
var InteractiveLogo_1 = __webpack_require__(/*! ./InteractiveLogo */ "./static/js/components/InteractiveLogo.ts");
exports.InteractiveLogo = InteractiveLogo_1.InteractiveLogo;
var NavInPage_1 = __webpack_require__(/*! ./NavInPage */ "./static/js/components/NavInPage.ts");
exports.NavInPage = NavInPage_1.default;
var ScrollTo_1 = __webpack_require__(/*! ./ScrollTo */ "./static/js/components/ScrollTo.ts");
exports.ScrollTo = ScrollTo_1.ScrollTo;
var Slingshot_1 = __webpack_require__(/*! ./Slingshot */ "./static/js/components/Slingshot.ts");
exports.Slingshot = Slingshot_1.Slingshot;
var SnackBar_1 = __webpack_require__(/*! ./SnackBar */ "./static/js/components/SnackBar.ts");
exports.SnackBar = SnackBar_1.default;
var AjaxModal_1 = __webpack_require__(/*! ./AjaxModal */ "./static/js/components/AjaxModal.ts");
exports.AjaxModal = AjaxModal_1.default;
var ListAccordion_1 = __webpack_require__(/*! ./ListAccordion */ "./static/js/components/ListAccordion.ts");
exports.ListAccordion = ListAccordion_1.ListAccordion;
var Alert_1 = __webpack_require__(/*! ./Alert */ "./static/js/components/Alert.ts");
exports.Alert = Alert_1.default;
var VideoPlayer_1 = __webpack_require__(/*! ./VideoPlayer */ "./static/js/components/VideoPlayer.ts");
exports.VideoPlayer = VideoPlayer_1.VideoPlayer;
var CKEdit_1 = __webpack_require__(/*! ./CKEdit */ "./static/js/components/CKEdit.ts");
exports.CKEdit = CKEdit_1.CKEdit;
var ThoughtStarter_1 = __webpack_require__(/*! ./ThoughtStarter */ "./static/js/components/ThoughtStarter.ts");
exports.ThoughtStarter = ThoughtStarter_1.ThoughtStarter;
var ToolTip_1 = __webpack_require__(/*! ./ToolTip */ "./static/js/components/ToolTip.ts");
exports.ToolTip = ToolTip_1.ToolTip;
var StepNav_1 = __webpack_require__(/*! ./StepNav */ "./static/js/components/StepNav.ts");
exports.StepNav = StepNav_1.default;
var StickyBar_1 = __webpack_require__(/*! ./StickyBar */ "./static/js/components/StickyBar.ts");
exports.StickyBar = StickyBar_1.StickyBar;
var ResourceNav_1 = __webpack_require__(/*! ./ResourceNav */ "./static/js/components/ResourceNav.ts");
exports.ResourceNav = ResourceNav_1.default;
var AnimateShapes_1 = __webpack_require__(/*! ./AnimateShapes */ "./static/js/components/AnimateShapes.ts");
exports.AnimateShapes = AnimateShapes_1.default;
var HomeConclusionShapes_1 = __webpack_require__(/*! ./HomeConclusionShapes */ "./static/js/components/HomeConclusionShapes.ts");
exports.HomeConclusionShapes = HomeConclusionShapes_1.default;
var HomeNumberAnimation_1 = __webpack_require__(/*! ./HomeNumberAnimation */ "./static/js/components/HomeNumberAnimation.ts");
exports.HomeNumberAnimation = HomeNumberAnimation_1.default;
var HomeThoughtStarter_1 = __webpack_require__(/*! ./HomeThoughtStarter */ "./static/js/components/HomeThoughtStarter.ts");
exports.HomeThoughtStarter = HomeThoughtStarter_1.default;
var HomeVideoPlayer_1 = __webpack_require__(/*! ./HomeVideoPlayer */ "./static/js/components/HomeVideoPlayer.ts");
exports.HomeVideoPlayer = HomeVideoPlayer_1.default;


/***/ }),

/***/ "./static/js/forms/CheckList.ts":
/*!**************************************!*\
  !*** ./static/js/forms/CheckList.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    FORM: '.js-form',
    SUBMIT: '.js-submit',
};
var SUBMIT_URL = '/api/projects/submit';
var COMPLETE_URL = '/your-project/submit/complete';
var CheckList = (function () {
    function CheckList(core) {
        this.core = core;
        this.form = document.querySelector(SELECTORS.FORM);
        if (this.form) {
            this.submit = document.querySelector(SELECTORS.SUBMIT);
            this.inputs = util_1.nodeListToArray(this.form.querySelectorAll('input'));
        }
        this.init();
    }
    CheckList.prototype.init = function () {
        var _this = this;
        if (!this.submit || !this.inputs) {
            return;
        }
        this.submit.disabled = true;
        this.submit.addEventListener('click', this.handleSubmit);
        this.inputs.forEach(function (input) {
            input.addEventListener('change', _this.handleInput);
        });
    };
    CheckList.prototype.handleInput = function () {
        if (!this.submit || !this.inputs) {
            return;
        }
        if (this.inputs.find(function (input) { return (!input.checked); })) {
            this.submit.disabled = true;
            this.submit.classList.add(util_1.ACTION_CLASSES.DISABLED);
        }
        else {
            this.submit.disabled = false;
            this.submit.classList.remove(util_1.ACTION_CLASSES.DISABLED);
        }
    };
    CheckList.prototype.handleSubmit = function (e) {
        var _this = this;
        e.preventDefault();
        util_1.axiosInstance.post(SUBMIT_URL)
            .then(function (response) {
            if (response.data.errors) {
                _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                window.location.href = COMPLETE_URL;
            }
        })
            .catch(function (_error) {
            _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], CheckList.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], CheckList.prototype, "handleInput", null);
    __decorate([
        core_decorators_1.autobind
    ], CheckList.prototype, "handleSubmit", null);
    return CheckList;
}());
exports.CheckList = CheckList;


/***/ }),

/***/ "./static/js/forms/ConsentForm.ts":
/*!****************************************!*\
  !*** ./static/js/forms/ConsentForm.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    FORM: '.js-form',
    PROJECT_ID_INPUT: '.js-project-id',
    INPUT: '.js-input',
    SUBMIT: '.js-submit--parental-consent-form',
    EMAIL_CONTAINER: '.js-email-container',
};
var FORM_URL = '/api/members/save_consent';
var ConsentForm = (function () {
    function ConsentForm(core) {
        this.core = core;
        this.form = document.querySelector(SELECTORS.FORM);
        if (this.form) {
            this.submit = this.form.querySelector(SELECTORS.SUBMIT);
            this.emailContainer = this.form.querySelector(SELECTORS.EMAIL_CONTAINER);
            this.input = this.form.querySelector(SELECTORS.INPUT);
        }
        this.snackBar = new components_1.SnackBar(this.core);
        this.init();
    }
    ConsentForm.prototype.init = function () {
        document.addEventListener('keydown', this.handleKeyDown);
        if (!this.submit || !this.input) {
            return;
        }
        this.submit.addEventListener('click', this.handleSubmit);
        this.input.addEventListener('input', this.handleInput);
        if (this.input.value === '') {
            this.submit.disabled = true;
        }
    };
    ConsentForm.prototype.handleKeyDown = function (e) {
        var keyName = e.key;
        if (keyName === 'Enter' && this.submit && !this.submit.disabled) {
            this.handleSubmit();
        }
    };
    ConsentForm.prototype.handleInput = function () {
        if (!this.submit || !this.input) {
            return;
        }
        if (this.input.checkValidity()) {
            this.submit.disabled = false;
        }
        else {
            this.submit.disabled = true;
        }
    };
    ConsentForm.prototype.handleSubmit = function () {
        var _this = this;
        if (!this.form || !this.submit) {
            return;
        }
        this.submit.classList.add(util_1.ACTION_CLASSES.SAVING);
        this.form.reportValidity();
        var params = {
            consent_email: this.input && this.input.value,
        };
        util_1.axiosInstance.post(FORM_URL, JSON.stringify(params))
            .then(function (response) {
            if (!_this.form || !_this.emailContainer) {
                return;
            }
            if (response.data.errors) {
                _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
                _this.emailContainer.classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.snackBar.snackBarTrigger();
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                _this.form.classList.remove(util_1.ACTION_CLASSES.ERROR);
                _this.emailContainer.classList.remove(util_1.ACTION_CLASSES.ERROR);
            }
            _this.submit && _this.submit.classList.remove(util_1.ACTION_CLASSES.SAVING);
        })
            .catch(function (_error) {
            if (_error.response && _error.response.data &&
                _error.response.data.errors === 'Consent has already been granted') {
                window.location.reload();
                return;
            }
            if (!_this.form || !_this.emailContainer) {
                return;
            }
            _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
            _this.emailContainer.classList.add(util_1.ACTION_CLASSES.ERROR);
            _this.submit && _this.submit.classList.remove(util_1.ACTION_CLASSES.SAVING);
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], ConsentForm.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], ConsentForm.prototype, "handleKeyDown", null);
    __decorate([
        core_decorators_1.autobind
    ], ConsentForm.prototype, "handleInput", null);
    __decorate([
        core_decorators_1.autobind
    ], ConsentForm.prototype, "handleSubmit", null);
    return ConsentForm;
}());
exports.ConsentForm = ConsentForm;


/***/ }),

/***/ "./static/js/forms/Forms.ts":
/*!**********************************!*\
  !*** ./static/js/forms/Forms.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    INPUT_SELECTOR: '.form--text-input-wrap',
    RADIO_GROUP: '.js-radio-group',
};
var Forms = (function () {
    function Forms(core) {
        this.core = core;
        var inputs = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.INPUT_SELECTOR));
        this.textInputs = inputs.map(function (item) {
            return {
                wrapper: item,
                input: item.querySelector('input'),
            };
        });
        var radioGroupWrapper = document.querySelector(SELECTORS.RADIO_GROUP);
        if (radioGroupWrapper) {
            var radioGroupLabels = util_1.nodeListToArray(radioGroupWrapper
                .querySelectorAll('label'));
            this.radioGroup = {
                wrapper: radioGroupWrapper,
                inputs: radioGroupLabels.map(function (label) {
                    return {
                        input: document.getElementById(label.htmlFor),
                        label: label,
                    };
                }),
            };
        }
        this.init();
    }
    Forms.prototype.init = function () {
        var _this = this;
        this.textInputs.forEach(function (input) {
            if (!input.input) {
                return;
            }
            input.input.addEventListener('focus', _this.onFocus);
            input.input.addEventListener('blur', _this.onBlur);
            if (input.input.value !== '') {
                input.wrapper.classList.add(util_1.ACTION_CLASSES.FOCUSED);
            }
        });
        if (this.radioGroup) {
            this.radioGroup.inputs.forEach(function (group) {
                group.input.addEventListener('change', _this.handleRadioChange
                    .bind(group.input, group.label, _this));
                group.input.addEventListener('focus', _this.handleRadioFocus
                    .bind(group.input, group.label, _this));
                group.input.addEventListener('blur', _this.handleRadioBlur
                    .bind(group.input, group.label, _this));
                group.input.blur();
            });
        }
    };
    Forms.prototype.onBlur = function (e) {
        this.inputBlur(e.target);
    };
    Forms.prototype.inputBlur = function (el) {
        this.textInputs.forEach(function (input) {
            if (input.input === el && el.value === '') {
                input.wrapper.classList.remove(util_1.ACTION_CLASSES.FOCUSED);
            }
        });
    };
    Forms.prototype.onFocus = function (e) {
        this.textInputs.forEach(function (input) {
            if (input.input === e.target) {
                input.wrapper.classList.add(util_1.ACTION_CLASSES.FOCUSED);
            }
        });
    };
    Forms.prototype.handleRadioChange = function (label, input, e) {
        if (!this.radioGroup) {
            return;
        }
        this.radioGroup.inputs.forEach(function (group) {
            group.label.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
        });
        if (e.target.checked) {
            label.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        }
    };
    Forms.prototype.handleRadioFocus = function (label, input, e) {
        label.classList.add(util_1.ACTION_CLASSES.FOCUSED);
    };
    Forms.prototype.handleRadioBlur = function (label, input, e) {
        if (!this.radioGroup) {
            return;
        }
        this.radioGroup.inputs.forEach(function (group) {
            group.label.classList.remove(util_1.ACTION_CLASSES.FOCUSED);
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], Forms.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], Forms.prototype, "onBlur", null);
    __decorate([
        core_decorators_1.autobind
    ], Forms.prototype, "inputBlur", null);
    __decorate([
        core_decorators_1.autobind
    ], Forms.prototype, "onFocus", null);
    __decorate([
        core_decorators_1.autobind
    ], Forms.prototype, "handleRadioChange", null);
    __decorate([
        core_decorators_1.autobind
    ], Forms.prototype, "handleRadioFocus", null);
    __decorate([
        core_decorators_1.autobind
    ], Forms.prototype, "handleRadioBlur", null);
    return Forms;
}());
exports.Forms = Forms;


/***/ }),

/***/ "./static/js/forms/InspiringEducator.ts":
/*!**********************************************!*\
  !*** ./static/js/forms/InspiringEducator.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var SELECTORS = {
    FORM: '.js-form',
    PROJECT_ID_INPUT: '.js-project-id',
    PROJECT_SITE_ID_INPUT: '.js-project-site-id',
    MAIN_TEXTAREA: '.js-main-textarea',
    SAVE_BUTTONS: '.js-submit',
    SAVE_BUTTON: '.js-save-button',
    UPDATE_BUTTON: '.js-update-button',
};
var FORM_URL = '/api/members/update';
var InspiringEducator = (function () {
    function InspiringEducator(core) {
        this.name = '';
        this.mainTextArea = '';
        this.hasEdited = false;
        this.core = core;
        this.ckEdit = new components_1.CKEdit(core, this.handleCKEditChange);
        this.form = document.querySelector(SELECTORS.FORM);
        this.saveButtons = util_1.nodeListToArray(this.form.querySelectorAll(SELECTORS.SAVE_BUTTONS));
        this.snackBar = new components_1.SnackBar(this.core);
        this.init();
    }
    InspiringEducator.prototype.init = function () {
        var _this = this;
        this.mainTextArea = CKEDITOR.instances[this.name] && CKEDITOR.instances[this.name].getData();
        this.saveButtons.forEach(function (button) {
            button.addEventListener('click', _this.handleSubmit);
        });
    };
    InspiringEducator.prototype.handleCKEditChange = function (e) {
        this.name = e.editor.name;
        this.mainTextArea = e.editor.getData();
        if (!this.hasEdited) {
            this.saveButtons.forEach(function (button) {
                button.disabled = false;
            });
        }
        this.hasEdited = true;
    };
    InspiringEducator.prototype.handleSubmit = function (e) {
        var _this = this;
        this.form.reportValidity();
        var submitButton = e.currentTarget;
        submitButton.classList.add(util_1.ACTION_CLASSES.SAVING);
        var params = {
            inspiring_educator: this.mainTextArea,
        };
        util_1.axiosInstance.post(FORM_URL, JSON.stringify(params))
            .then(function (response) {
            if (response.data.errors) {
                _this.form.classList.add('-error');
            }
            else {
                _this.snackBar.snackBarTrigger();
            }
            submitButton.classList.remove(util_1.ACTION_CLASSES.SAVING);
            document.querySelector(SELECTORS.SAVE_BUTTON)
                .classList.add(util_1.ACTION_CLASSES.HIDDEN);
            document.querySelector(SELECTORS.UPDATE_BUTTON)
                .classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        })
            .catch(function (error) {
            _this.form.classList.add('-error');
            submitButton.classList.remove(util_1.ACTION_CLASSES.SAVING);
            document.querySelector(SELECTORS.SAVE_BUTTON)
                .classList.add(util_1.ACTION_CLASSES.HIDDEN);
            document.querySelector(SELECTORS.UPDATE_BUTTON)
                .classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        });
        return;
    };
    __decorate([
        core_decorators_1.autobind
    ], InspiringEducator.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], InspiringEducator.prototype, "handleCKEditChange", null);
    __decorate([
        core_decorators_1.autobind
    ], InspiringEducator.prototype, "handleSubmit", null);
    return InspiringEducator;
}());
exports.InspiringEducator = InspiringEducator;


/***/ }),

/***/ "./static/js/forms/ParentalConsent.ts":
/*!********************************************!*\
  !*** ./static/js/forms/ParentalConsent.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    FORM: '.js-form',
    SUBMIT: '.js-submit--parental-consent-form',
    CODE_INPUT: '.js-code-input',
    STUDENT_INPUT: '.js-student-input',
};
var CONSENT_URL = '/gsfapi/members/grant_consent';
var ParentalConsent = (function () {
    function ParentalConsent(core) {
        this.core = core;
        this.form = document.querySelector(SELECTORS.FORM);
        if (this.form) {
            this.submit = this.form.querySelector(SELECTORS.SUBMIT);
            this.code = this.form.querySelector(SELECTORS.CODE_INPUT);
            this.student = this.form.querySelector(SELECTORS.STUDENT_INPUT);
        }
        this.init();
    }
    ParentalConsent.prototype.init = function () {
        if (!this.submit) {
            return;
        }
        this.submit.addEventListener('click', this.handleSubmit);
    };
    ParentalConsent.prototype.handleSubmit = function (e) {
        var _this = this;
        if (!this.form) {
            return;
        }
        e.preventDefault();
        var params = {
            code: this.code && this.code.value,
            student: this.student && this.student.value,
        };
        util_1.axiosInstance.post(CONSENT_URL, JSON.stringify(params))
            .then(function (response) {
            if (!_this.form) {
                return;
            }
            if (response.data.errors) {
                _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                window.location.href = '/parental-consent/approve';
            }
        })
            .catch(function (_error) {
            if (!_this.form) {
                return;
            }
            _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], ParentalConsent.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], ParentalConsent.prototype, "handleSubmit", null);
    return ParentalConsent;
}());
exports.ParentalConsent = ParentalConsent;


/***/ }),

/***/ "./static/js/forms/Profile.ts":
/*!************************************!*\
  !*** ./static/js/forms/Profile.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var AgeRangeRestriction_1 = __webpack_require__(/*! ../components/AgeRangeRestriction */ "./static/js/components/AgeRangeRestriction.ts");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var SELECTORS = {
    FORM: '.js-profile-form',
    FORM_SUBMIT: '.js-form-submit',
    FORM_TEXT_INPUT: '.form--text-input',
    FORM_RADIO: '.js-radio-group',
    FORM_LEGAL: '.js-terms-container',
    FORM_FIRST_NAME: '.js-first-name-container',
    FORM_LAST_NAME: '.js-last-name-container',
    FORM_AGE_RANGE: '#age-range',
    FORM_AGE_CONTAINER: '.js-age-range-container',
    FORM_SUCCESS: '.js-form-success',
    FORM_COUNTRY: '.js-country-input',
    FORM_STATE: '.js-state-input',
    FORM_LANGUAGE: '.js-language-input',
    FORM_TEAM_CODE: '.js-team-input',
    FORM_PHONE_NUMBER: '.js-phone-number',
    FORM_SCHOOL: '.js-school-container',
    FORM_HOME_SCHOOLED: '.js-home-schooled',
    FORM_SCHOOL_CONTAINER: '.js-school-info',
    FORM_SCHOOL_NAME: '.js-school-name',
    FORM_SCHOOL_ADDRESS: '.js-school-address',
    FORM_SCHOOL_ZIP: '.js-school-zip',
    FORM_SCHOOL_CITY: '.js-school-city',
    FORM_SCHOOL_STATE: '.js-school-state',
    FORM_SCHOOL_COUNTRY: '.js-school-country',
    DELETE_BUTTON: '.js-delete-account',
    PROFILE_WIDGETS: '.js-profile-widget',
    STATUS_COMPLETE_INDICATOR: '.js-account-status-complete-indicator',
    STATUS_INCOMPLETE_INDICATOR: '.js-account-status-incomplete-indicator',
};
var PROFILE_FORM_URL = '/api/members/update';
var DELETE_ACTION_URL = '/api/members/delete_me';
var LOGOUT_URL = '';
var Profile = (function () {
    function Profile(core) {
        this.errorsCleared = true;
        this.core = core;
        this.form = document.querySelector(SELECTORS.FORM);
        this.formSubmit = document
            .querySelector(SELECTORS.FORM_SUBMIT);
        this.formSuccess = document.querySelector(SELECTORS.FORM_SUCCESS);
        this.country = this.form.querySelector(SELECTORS.FORM_COUNTRY + " select");
        this.stateContainer = this.form.querySelector(SELECTORS.FORM_STATE);
        this.state = this.stateContainer
            .querySelector(SELECTORS.FORM_STATE + " select");
        this.firstName = this.form
            .querySelector(SELECTORS.FORM_FIRST_NAME + " input");
        this.surname = this.form.querySelector(SELECTORS.FORM_LAST_NAME + " input");
        this.phoneNumber = this.form
            .querySelector(SELECTORS.FORM_PHONE_NUMBER + " input");
        this.schoolForm = document.querySelector(SELECTORS.FORM_SCHOOL);
        this.homeSchooled = this.form
            .querySelector(SELECTORS.FORM_HOME_SCHOOLED + " input");
        this.schoolVisible = !this.homeSchooled.checked;
        this.schoolInfoContainer = this.form
            .querySelector(SELECTORS.FORM_SCHOOL_CONTAINER);
        this.schoolInfoInputs = util_1.nodeListToArray(this.schoolInfoContainer.querySelectorAll('input'));
        this.schoolName = this.form
            .querySelector(SELECTORS.FORM_SCHOOL_NAME + " input");
        this.schoolAddr1 = this.form
            .querySelector(SELECTORS.FORM_SCHOOL_ADDRESS + " input");
        this.schoolPostalCode = this.form
            .querySelector(SELECTORS.FORM_SCHOOL_ZIP + " input");
        this.schoolCity = this.form
            .querySelector(SELECTORS.FORM_SCHOOL_CITY + " input");
        this.schoolState = this.form
            .querySelector(SELECTORS.FORM_SCHOOL_STATE + " select");
        this.schoolCountry = this.form
            .querySelector(SELECTORS.FORM_SCHOOL_COUNTRY + " select");
        this.deleteTrigger = document.querySelector(SELECTORS.DELETE_BUTTON);
        this.profileWidgets = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.PROFILE_WIDGETS));
        this.ageRangeContainer = this.form.querySelector(SELECTORS.FORM_RADIO);
        this.ageRangeRestrictions = new AgeRangeRestriction_1.default(this.country, this.ageRangeContainer);
        this.snackBar = new components_1.SnackBar(this.core);
        this.init();
    }
    Profile.prototype.init = function () {
        var _this = this;
        this.formSubmit.addEventListener('click', this.handleSubmit);
        LOGOUT_URL = this.deleteTrigger.dataset.logoutUrl;
        this.deleteTrigger.addEventListener('click', this.handleDelete);
        this.handleHomeSchoolChange();
        this.homeSchooled.addEventListener('change', this.handleHomeSchoolChange);
        this.country.addEventListener('change', this.handleCountryChange);
        document.querySelectorAll('input').forEach(function (input) {
            return input.addEventListener('input', _this.handleOnInput);
        });
        this.handleCountryChange();
    };
    Profile.prototype.handleOnInput = function () {
        if (!this.errorsCleared) {
            document.querySelectorAll('.-error')
                .forEach(function (errorEl) { return errorEl.classList.remove(util_1.ACTION_CLASSES.ERROR); });
            this.errorsCleared = true;
        }
    };
    Profile.prototype.handleCountryChange = function () {
        if (this.country.value === 'US') {
            this.schoolVisible = true;
            this.stateContainer.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        }
        else {
            this.schoolVisible = false;
            this.stateContainer.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        }
        this.setSchoolVisibility();
    };
    Profile.prototype.setSchoolVisibility = function () {
        if (this.schoolVisible) {
            this.schoolForm.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            this.handleHomeSchoolChange();
        }
        else {
            this.schoolForm.classList.add(util_1.ACTION_CLASSES.HIDDEN);
            this.handleHomeSchoolChange();
        }
    };
    Profile.prototype.handleHomeSchoolChange = function () {
        if (this.homeSchooled.checked) {
            this.schoolInfoContainer.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        }
        else {
            this.schoolInfoContainer.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        }
    };
    Profile.prototype.handleSubmit = function (e) {
        var _this = this;
        e && e.preventDefault();
        this.form.reportValidity();
        this.formSubmit.classList.add(util_1.ACTION_CLASSES.SAVING);
        if (this.form.checkValidity()) {
            var sendSchool = !this.homeSchooled.checked && this.schoolVisible;
            var profileParams = {
                firstname: this.firstName.value,
                surname: this.surname.value,
                locale: document.documentElement.lang,
                age_range: this.ageRangeRestrictions.ageRange !== '' ?
                    this.ageRangeRestrictions.ageRange : null,
                country: this.country.value,
                home_state: this.country.value === 'US' ? this.state.value : null,
                phone_number: this.phoneNumber.value,
                home_schooled: this.schoolVisible ? this.homeSchooled.checked : null,
                school_name: sendSchool ? this.schoolName.value : null,
                school_addr1: sendSchool ? this.schoolAddr1.value : null,
                school_postal_code: sendSchool ? this.schoolPostalCode.value : null,
                school_city: sendSchool ? this.schoolCity.value : null,
                school_state: sendSchool ? this.schoolState.value : null,
                school_country: sendSchool ? this.schoolCountry.value : null,
            };
            util_1.axiosInstance.post(PROFILE_FORM_URL, JSON.stringify(profileParams))
                .then(function (response) {
                _this.formSubmit.classList.remove(util_1.ACTION_CLASSES.SAVING);
                if (response.data.errors) {
                    _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
                }
                else {
                    if (response.data.is_profile_complete === true) {
                        _this.setProfileComplete();
                    }
                    else {
                        _this.setProfileIncomplete();
                    }
                    _this.snackBar.snackBarTrigger();
                }
            })
                .catch(function (error) {
                _this.errorsCleared = false;
                if (error.response.data.errors === 'Invalid age range for EU') {
                    document.querySelector(SELECTORS.FORM_AGE_CONTAINER)
                        .classList.add(util_1.ACTION_CLASSES.ERROR);
                }
                _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
                _this.formSubmit.classList.remove(util_1.ACTION_CLASSES.SAVING);
            });
            return;
        }
    };
    Profile.prototype.setProfileComplete = function () {
        this.profileWidgets.forEach(function (widget) {
            widget.querySelector(SELECTORS.STATUS_INCOMPLETE_INDICATOR)
                .classList.add(util_1.ACTION_CLASSES.HIDDEN);
            widget.querySelector(SELECTORS.STATUS_COMPLETE_INDICATOR)
                .classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        });
    };
    Profile.prototype.setProfileIncomplete = function () {
        this.profileWidgets.forEach(function (widget) {
            widget.querySelector(SELECTORS.STATUS_INCOMPLETE_INDICATOR)
                .classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            widget.querySelector(SELECTORS.STATUS_COMPLETE_INDICATOR)
                .classList.add(util_1.ACTION_CLASSES.HIDDEN);
        });
    };
    Profile.prototype.handleDelete = function (e) {
        e.preventDefault();
        util_1.axiosInstance.post(DELETE_ACTION_URL)
            .then(function (response) {
            if (response.data.errors) {
            }
            else {
                window.location.href = LOGOUT_URL;
            }
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], Profile.prototype, "handleOnInput", null);
    __decorate([
        core_decorators_1.autobind
    ], Profile.prototype, "handleCountryChange", null);
    __decorate([
        core_decorators_1.autobind
    ], Profile.prototype, "setSchoolVisibility", null);
    __decorate([
        core_decorators_1.autobind
    ], Profile.prototype, "handleHomeSchoolChange", null);
    __decorate([
        core_decorators_1.autobind
    ], Profile.prototype, "handleSubmit", null);
    __decorate([
        core_decorators_1.autobind
    ], Profile.prototype, "setProfileComplete", null);
    __decorate([
        core_decorators_1.autobind
    ], Profile.prototype, "setProfileIncomplete", null);
    return Profile;
}());
exports.Profile = Profile;


/***/ }),

/***/ "./static/js/forms/StepForm.ts":
/*!*************************************!*\
  !*** ./static/js/forms/StepForm.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var SELECTORS = {
    FORM: '.js-form',
    PROJECT_ID_INPUT: '.js-project-id',
    PROJECT_SITE_ID_INPUT: '.js-project-site-id',
    MAIN_TEXTAREA: '.js-rich-textarea',
    SAVED: '.js-status-bar-saved',
    SAVING: '.js-status-bar-saving',
    EMPTY: '.js-status-bar-empty',
    EDITED_HASH: '.js-last-edited',
    BAD_HASH: '.js-bad-hash',
    RELOAD_CTA: '.js-reload-cta',
};
var FORM_URL = '/api/sites/update';
var AUTOSAVE_TIMEOUT = 2000;
var SNACKBAR_TIMEOUT = 8000;
var StepForm = (function () {
    function StepForm(core) {
        this.name = '';
        this.mainTextArea = '';
        this.core = core;
        this.name = document.querySelector(SELECTORS.MAIN_TEXTAREA).id;
        this.ckEdit = new components_1.CKEdit(core, this.handleCKEditChange);
        this.form = document.querySelector(SELECTORS.FORM);
        this.inputs = util_1.nodeListToArray(this.form.querySelectorAll('input, textarea, select'));
        this.projectSiteId = document
            .querySelector(SELECTORS.PROJECT_SITE_ID_INPUT).value;
        this.stepNav = new components_1.StepNav(this.core);
        this.savedStatus = document.querySelector(SELECTORS.SAVED);
        this.savingStatus = document.querySelector(SELECTORS.SAVING);
        this.emptyStatus = document.querySelector(SELECTORS.EMPTY);
        var editHashInput = document.querySelector(SELECTORS.EDITED_HASH);
        this.badHashWarningEl = document.querySelector(SELECTORS.BAD_HASH);
        this.reloadCTA = document.querySelector(SELECTORS.RELOAD_CTA);
        if (editHashInput && editHashInput.value === '') {
            this.currentEditHash = null;
        }
        else if (editHashInput) {
            this.currentEditHash = editHashInput.value;
        }
        this.isFormSaved = true;
        this.snackBar = new components_1.SnackBar(this.core);
        this.stickyBar = new components_1.StickyBar(true);
        this.init();
    }
    StepForm.prototype.init = function () {
        var _this = this;
        this.mainTextArea = CKEDITOR.instances[this.name] && CKEDITOR.instances[this.name].getData();
        this.reloadCTA.addEventListener('click', this.handleReloadCTA);
        CKEDITOR.on('instanceReady', function (ev) {
            ev.editor.on('focus', _this.checkLastEdited);
        });
        window.addEventListener('beforeunload', this.handleBeforeUnload);
    };
    StepForm.prototype.checkLastEdited = function () {
        var _this = this;
        var projectUrl = "/api/sites/get?hashonly=" + this.name;
        util_1.axiosInstance.get(projectUrl).then(function (response) {
            var sanitizedData = response.data.replace(/^\)]}',/, '');
            var jsonResponse = JSON.parse(sanitizedData);
            var hash = jsonResponse[_this.name + "_hash"];
            if (hash === null) {
                return;
            }
            if (hash !== _this.currentEditHash) {
                _this.ckEdit.editor && _this.ckEdit.editor.setReadOnly();
                _this.badHashWarningEl.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
                TweenMax.to(window, 1, {
                    scrollTo: {
                        y: window.scrollY + _this.badHashWarningEl.getBoundingClientRect().top - 85,
                        autoKill: false,
                    },
                });
            }
        });
    };
    StepForm.prototype.handleCKEditChange = function (e) {
        this.name = e.editor.name;
        this.mainTextArea = e.editor.getData();
        this.checkAutoSave();
        this.emptyStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.savedStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.savingStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
    };
    StepForm.prototype.handleBeforeUnload = function (e) {
        if (!this.isFormSaved) {
            e.preventDefault();
            e.returnValue = 'GSF2018';
            return '';
        }
    };
    StepForm.prototype.handleReloadCTA = function (e) {
        e.preventDefault();
        document.location.reload();
    };
    StepForm.prototype.checkAutoSave = function () {
        var _this = this;
        if (this.timeout) {
            this.isFormSaved = false;
            clearTimeout(this.timeout);
        }
        this.timeout = setTimeout(function () {
            _this.handleSubmit();
        }, AUTOSAVE_TIMEOUT);
    };
    StepForm.prototype.handleSubmit = function () {
        var _this = this;
        var _a;
        this.form.reportValidity();
        var params = (_a = {
                id: this.projectSiteId
            },
            _a[this.name] = this.mainTextArea,
            _a[this.name + "_hash"] = this.currentEditHash,
            _a);
        util_1.axiosInstance.post(FORM_URL, JSON.stringify(params))
            .then(function (response) {
            if (response.data.errors) {
                _this.checkLastEdited();
                _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                _this.savingStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
                if (_this.mainTextArea === '') {
                    _this.emptyStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
                }
                else {
                    _this.savedStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
                }
                _this.isFormSaved = true;
                _this.currentEditHash = response.data[_this.name + "_hash"];
            }
        })
            .catch(function (error) {
            _this.checkLastEdited();
            if (!error.response.data.errors.startsWith('Edit collision')) {
                _this.snackBar.snackBarTrigger(undefined, undefined, undefined, SNACKBAR_TIMEOUT);
            }
            _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], StepForm.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], StepForm.prototype, "checkLastEdited", null);
    __decorate([
        core_decorators_1.autobind
    ], StepForm.prototype, "handleCKEditChange", null);
    __decorate([
        core_decorators_1.autobind
    ], StepForm.prototype, "handleBeforeUnload", null);
    __decorate([
        core_decorators_1.autobind
    ], StepForm.prototype, "handleReloadCTA", null);
    __decorate([
        core_decorators_1.autobind
    ], StepForm.prototype, "checkAutoSave", null);
    __decorate([
        core_decorators_1.autobind
    ], StepForm.prototype, "handleSubmit", null);
    return StepForm;
}());
exports.StepForm = StepForm;


/***/ }),

/***/ "./static/js/forms/StepSummaryForm.ts":
/*!********************************************!*\
  !*** ./static/js/forms/StepSummaryForm.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var SELECTORS = {
    FORM: '.js-form',
    PROJECT_ID_INPUT: '.js-project-id',
    PROJECT_SITE_ID_INPUT: '.js-project-site-id',
    MAIN_TEXTAREA: '.js-main-textarea',
    PROJECT_NAME: '.js-project-name',
    PROJECT_CATEGORY: '.js-main-category',
    FORM_SUB_CATEGORY: '.js-secondary-category',
    PROJECT_SUB_CATEGORIES: '.js-sub-categories',
    PROJECT_DESCRIPTION: '.js-description',
    SAVED: '.js-status-bar-saved',
    SAVING: '.js-status-bar-saving',
    EMPTY: '.js-status-bar-empty',
    INCOMPLETE: '.js-status-bar-incomplete',
    EDITED_HASH: '.js-last-edited',
    BAD_HASH: '.js-bad-hash',
    RELOAD_CTA: '.js-reload-cta',
};
var SITES_FORM_URL = '/api/sites/update';
var PROJECT_FORM_URL = '/api/projects/update';
var AUTOSAVE_TIMEOUT = 2000;
var StepSummaryForm = (function () {
    function StepSummaryForm(core) {
        this.summary = '';
        this.name = '';
        this.description = '';
        this.core = core;
        this.ckEdit = new components_1.CKEdit(core, this.handleCKEditChange);
        this.form = document.querySelector(SELECTORS.FORM);
        this.projectSiteId = document
            .querySelector(SELECTORS.PROJECT_SITE_ID_INPUT).value;
        this.projectId = document
            .querySelector(SELECTORS.PROJECT_ID_INPUT).value;
        this.category = this.form.querySelector(SELECTORS.PROJECT_CATEGORY);
        this.subCategories = util_1.nodeListToArray(this.form.querySelectorAll(SELECTORS.PROJECT_SUB_CATEGORIES));
        this.subCategoryForm = document.querySelector(SELECTORS.FORM_SUB_CATEGORY);
        this.stepNav = new components_1.StepNav(this.core);
        this.savedStatus = document.querySelector(SELECTORS.SAVED);
        this.savingStatus = document.querySelector(SELECTORS.SAVING);
        this.emptyStatus = document.querySelector(SELECTORS.EMPTY);
        this.incompleteStatus = document.querySelector(SELECTORS.INCOMPLETE);
        var editHashInput = document.querySelector(SELECTORS.EDITED_HASH);
        this.badHashWarningEl = document.querySelector(SELECTORS.BAD_HASH);
        this.reloadCTA = document.querySelector(SELECTORS.RELOAD_CTA);
        if (editHashInput && editHashInput.value === '') {
            this.currentEditHash = null;
        }
        else if (editHashInput) {
            this.currentEditHash = editHashInput.value;
        }
        this.subCategoriesChecked = 0;
        this.isSitesPostSuccess = true;
        this.isProjectPostSuccess = true;
        this.isFormSaved = this.isSitesPostSuccess && this.isProjectPostSuccess;
        this.snackBar = new components_1.SnackBar(this.core);
        this.stickyBar = new components_1.StickyBar(true);
        this.init();
    }
    StepSummaryForm.prototype.init = function () {
        var _this = this;
        this.description = CKEDITOR.instances.description && CKEDITOR.instances.description.getData();
        this.name = CKEDITOR.instances.project_name && CKEDITOR.instances.project_name.getData();
        this.summary = CKEDITOR.instances.summary && CKEDITOR.instances.summary.getData();
        if (this.category.value) {
            this.subCategoryForm.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        }
        this.category.addEventListener('change', this.handleCategoryChange);
        for (var _i = 0, _a = this.subCategories; _i < _a.length; _i++) {
            var subCategory = _a[_i];
            subCategory.addEventListener('change', this.handleSecondaryCategoryChange);
        }
        this.subCategoriesChecked = this.subCategories.filter(function (c) { return c.checked; }).length;
        this.removeSubCategoryFromList();
        this.disableSubCategories();
        this.reloadCTA.addEventListener('click', this.handleReloadCTA);
        CKEDITOR.on('instanceReady', function (ev) {
            ev.editor.on('focus', _this.checkLastEdited);
        });
        window.addEventListener('beforeunload', this.handleBeforeUnload);
    };
    StepSummaryForm.prototype.checkLastEdited = function () {
        var _this = this;
        var projectUrl = "/api/sites/get?hashonly=summary";
        util_1.axiosInstance.get(projectUrl).then(function (response) {
            var sanitizedData = response.data.replace(/^\)]}',/, '');
            var jsonResponse = JSON.parse(sanitizedData);
            var hash = jsonResponse[_this.name + "_hash"];
            if (hash === null) {
                return;
            }
            if (hash !== _this.currentEditHash) {
                _this.ckEdit.editor && _this.ckEdit.editor.setReadOnly();
                _this.badHashWarningEl.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
                TweenMax.to(window, 1, {
                    scrollTo: {
                        y: window.scrollY + _this.badHashWarningEl.getBoundingClientRect().top - 85,
                        autoKill: false,
                    },
                });
            }
        });
    };
    StepSummaryForm.prototype.handleCKEditChange = function (e) {
        var data = e.editor.getData();
        var name = e.editor.name;
        this.checkAutoSave();
        this.emptyStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.savedStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.savingStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        this.incompleteStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        switch (name) {
            case 'project_name':
                this.name = data;
                break;
            case 'description':
                this.description = data;
                break;
            case 'summary':
                this.summary = data;
                break;
        }
    };
    StepSummaryForm.prototype.handleReloadCTA = function (e) {
        e.preventDefault();
        document.location.reload();
    };
    StepSummaryForm.prototype.handleBeforeUnload = function (e) {
        if (!this.isFormSaved) {
            e.preventDefault();
            e.returnValue = 'GSF2018';
            return '';
        }
    };
    StepSummaryForm.prototype.handleCategoryChange = function (event) {
        this.subCategoryForm.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        this.removeSubCategoryFromList();
        this.checkAutoSave();
    };
    StepSummaryForm.prototype.handleSecondaryCategoryChange = function (event) {
        this.subCategoriesChecked = this.subCategories.filter(function (c) { return c.checked; }).length;
        var category = event.target;
        category.checked ? this.disableSubCategories() : this.enableSubCategories();
        this.checkAutoSave();
    };
    StepSummaryForm.prototype.disableSubCategories = function () {
        if (this.subCategoriesChecked === 2) {
            for (var _i = 0, _a = this.subCategories; _i < _a.length; _i++) {
                var subCategory = _a[_i];
                if (!subCategory.checked) {
                    subCategory.disabled = true;
                }
            }
        }
    };
    StepSummaryForm.prototype.enableSubCategories = function () {
        for (var _i = 0, _a = this.subCategories; _i < _a.length; _i++) {
            var subCategory = _a[_i];
            subCategory.disabled = false;
        }
        this.disableSubCategories();
    };
    StepSummaryForm.prototype.removeSubCategoryFromList = function () {
        for (var _i = 0, _a = this.subCategories; _i < _a.length; _i++) {
            var subCategory = _a[_i];
            var parentDiv = subCategory.parentNode;
            if (subCategory.value === this.category.value) {
                parentDiv.classList.add(util_1.ACTION_CLASSES.HIDDEN);
                if (subCategory.checked) {
                    subCategory.checked = false;
                }
            }
            else {
                parentDiv.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            }
        }
        this.subCategoriesChecked = this.subCategories.filter(function (c) { return c.checked; }).length;
        this.enableSubCategories();
    };
    StepSummaryForm.prototype.checkAutoSave = function () {
        var _this = this;
        if (this.timeout) {
            this.isFormSaved = false;
            clearTimeout(this.timeout);
        }
        this.timeout = setTimeout(function () {
            _this.handleSubmit();
        }, AUTOSAVE_TIMEOUT);
    };
    StepSummaryForm.prototype.checkStatus = function (projectParams, sitesParams) {
        if (this.isFormSaved) {
            this.savingStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
            if (projectParams.project_name && projectParams.description &&
                projectParams.main_category && sitesParams.summary) {
                this.savedStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            }
            else if (!projectParams.project_name || !projectParams.description ||
                !projectParams.main_category || !sitesParams.summary) {
                this.incompleteStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            }
            else {
                this.emptyStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            }
        }
    };
    StepSummaryForm.prototype.sendProjectData = function (projectParams) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, util_1.axiosInstance.post(PROJECT_FORM_URL, JSON.stringify(projectParams))
                        .then(function (projectResponse) {
                        if (projectResponse.data.errors) {
                            _this.checkLastEdited();
                            _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
                            _this.isProjectPostSuccess = false;
                        }
                        else {
                            _this.form.classList.remove(util_1.ACTION_CLASSES.ERROR);
                            _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                            _this.isProjectPostSuccess = true;
                        }
                    })
                        .catch(function (error) {
                        _this.checkLastEdited();
                        if (!error.response.data.errors.startsWith('Edit collision')) {
                            _this.snackBar.snackBarTrigger();
                        }
                        _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
                        _this.isProjectPostSuccess = false;
                    })];
            });
        });
    };
    StepSummaryForm.prototype.sendSiteData = function (sitesParams) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, util_1.axiosInstance.post(SITES_FORM_URL, JSON.stringify(sitesParams))
                        .then(function (response) {
                        if (response.data.errors) {
                            _this.checkLastEdited();
                            _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
                            _this.isSitesPostSuccess = false;
                        }
                        else {
                            _this.form.classList.remove(util_1.ACTION_CLASSES.ERROR);
                            _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                            _this.isSitesPostSuccess = true;
                        }
                    })
                        .catch(function (error) {
                        _this.checkLastEdited();
                        if (!error.response.data.errors.startsWith('Edit collision')) {
                            _this.snackBar.snackBarTrigger();
                        }
                        _this.form.classList.add(util_1.ACTION_CLASSES.ERROR);
                        _this.isSitesPostSuccess = false;
                    })];
            });
        });
    };
    StepSummaryForm.prototype.handleSubmit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var sitesParams, subCatValues, projectParams;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.emptyStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
                        this.savedStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
                        this.incompleteStatus.classList.add(util_1.ACTION_CLASSES.HIDDEN);
                        this.savingStatus.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
                        sitesParams = {
                            id: this.projectSiteId,
                            summary: this.summary,
                            summary_hash: this.currentEditHash,
                        };
                        subCatValues = this.subCategories.reduce(function (acc, cur) {
                            if (cur.checked) {
                                return acc.concat([cur.value]);
                            }
                            return acc;
                        }, []);
                        projectParams = {
                            id: this.projectId,
                            project_name: this.name.trim(),
                            description: this.description.trim(),
                            main_category: this.category.value,
                            secondary_categories: subCatValues,
                        };
                        return [4, this.sendProjectData(projectParams)];
                    case 1:
                        _a.sent();
                        return [4, this.sendSiteData(sitesParams)];
                    case 2:
                        _a.sent();
                        this.isFormSaved = this.isProjectPostSuccess && this.isSitesPostSuccess;
                        this.checkStatus(projectParams, sitesParams);
                        return [2];
                }
            });
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "checkLastEdited", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "handleCKEditChange", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "handleReloadCTA", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "handleBeforeUnload", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "handleCategoryChange", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "handleSecondaryCategoryChange", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "disableSubCategories", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "enableSubCategories", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "removeSubCategoryFromList", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "checkAutoSave", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "checkStatus", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "sendProjectData", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "sendSiteData", null);
    __decorate([
        core_decorators_1.autobind
    ], StepSummaryForm.prototype, "handleSubmit", null);
    return StepSummaryForm;
}());
exports.StepSummaryForm = StepSummaryForm;


/***/ }),

/***/ "./static/js/forms/TeamForm.ts":
/*!*************************************!*\
  !*** ./static/js/forms/TeamForm.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var ClipboardJS = __webpack_require__(/*! clipboard */ "./node_modules/clipboard/dist/clipboard.js");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var SELECTORS = {
    CANCEL_INVITE: '.js-cancel-invite',
    CANCEL_SNACKBAR: '.js-cancel-snackbar',
    COPY_SNACKBAR: '.js-copy-snackbar',
    SAVED_SNACKBAR: '.js-saved-snackbar',
    COPY_TEAM_CODE: '.js-copy-team-code',
    TEAM_CODE_CONTAINERS: '.js-team-invite-container',
    CREATE_TEAM_CONTAINER: '.js-create-team-container',
    CREATE_TEAM: '.js-create-team',
    FORM: '.js-form',
    INVITE_CONTAINER: '.js-invite-container',
    INVITE_SENT_CONTAINER: '.js-invite-sent-container',
    TEAM_CODE_DISPLAY: '.js-team-code-display',
    JOIN_TEAM_CONTAINER: '.js-team-code-container',
    JOIN_TEAM: '.js-join-team',
    LEAVE_TEAM: '.js-leave-modal-container',
    PROJECT_ID_INPUT: '.js-project-id',
    RE_SEND_INVITE: '.js-re-send-invite',
    REMOVE_CONTAINERS: '.js-remove-modal-container',
    UPDATE_TEAM_CONTAINTER: '.js-update-team-code-container',
    UPDATE_TEAM_NAME: '.js-submit--team-form',
};
var SNACKBAR_DELAY = 5000;
var JOIN_URL = '/api/members/join_team';
var CREATE_URL = '/api/projects/update';
var INVITE_URL = '/api/projects/invite';
var CANCEL_URL = '/api/projects/remove';
var PROJECT_URL = '/api/projects/get';
var TeamForm = (function () {
    function TeamForm(core) {
        this.core = core;
        this.form = document.querySelector(SELECTORS.FORM);
        this.projectId = document.querySelector(SELECTORS.PROJECT_ID_INPUT).value;
        this.inputs = util_1.nodeListToArray(this.form.querySelectorAll('input, textarea, select'));
        this.joinTeamInput = this.form
            .querySelector(SELECTORS.JOIN_TEAM_CONTAINER + " input");
        this.joinTeamButton = this.form
            .querySelector(SELECTORS.JOIN_TEAM);
        this.createTeamInput = this.form
            .querySelector(SELECTORS.CREATE_TEAM_CONTAINER + " input");
        this.createTeamButton = this.form
            .querySelector(SELECTORS.CREATE_TEAM);
        this.updateTeamInput = this.form
            .querySelector(SELECTORS.UPDATE_TEAM_CONTAINTER + " input");
        this.updateTeamButton = this.form
            .querySelector(SELECTORS.UPDATE_TEAM_NAME);
        this.teamCodeContainers = util_1.nodeListToArray(document
            .querySelectorAll(SELECTORS.TEAM_CODE_CONTAINERS));
        this.originalTeamName = this.updateTeamInput && this.updateTeamInput.value;
        this.leaveTeam = document.querySelector(SELECTORS.LEAVE_TEAM);
        this.removeMembers = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.REMOVE_CONTAINERS));
        this.inviteContainer = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.INVITE_CONTAINER));
        this.inviteSentContainer = util_1.nodeListToArray(document
            .querySelectorAll(SELECTORS.INVITE_SENT_CONTAINER));
        this.cancelSnackBar = new components_1.SnackBar(this.core, document.querySelector(SELECTORS.CANCEL_SNACKBAR));
        this.snackBar = new components_1.SnackBar(this.core, document.querySelector(SELECTORS.COPY_SNACKBAR));
        this.savedSnackBar = new components_1.SnackBar(this.core, document.querySelector(SELECTORS.SAVED_SNACKBAR));
        if (document.querySelector(SELECTORS.COPY_TEAM_CODE)) {
            this.clipBoard = new ClipboardJS(SELECTORS.COPY_TEAM_CODE);
            this.clipBoard.on('success', this.snackBar.snackBarTrigger.
                bind(undefined, undefined, undefined));
        }
        this.init();
    }
    TeamForm.prototype.init = function () {
        var _this = this;
        if (this.joinTeamButton && this.joinTeamInput) {
            this.joinTeamInput.addEventListener('keydown', this.handleKeyDown);
            this.joinTeamButton.addEventListener('click', this.handleJoinTeamButton);
            if (this.joinTeamInput.value === '') {
                this.joinTeamButton.disabled = true;
            }
            this.joinTeamInput.addEventListener('input', this.handleJoinInput);
        }
        if (this.updateTeamButton && this.updateTeamInput) {
            this.updateTeamInput.addEventListener('input', this.handleUpdateTeamInput);
            this.updateTeamInput.addEventListener('keydown', this.handleKeyDown);
            this.updateTeamButton.disabled = true;
            this.updateTeamButton.addEventListener('click', this.handleUpdateTeam);
        }
        if (this.createTeamButton && this.createTeamInput) {
            this.createTeamInput.addEventListener('keydown', this.handleKeyDown);
            this.createTeamButton.addEventListener('click', this.handleCreateTeamButton);
            this.createTeamInput.addEventListener('input', this.handleCreateInput);
            if (this.createTeamInput.value === '') {
                this.createTeamButton.disabled = true;
            }
        }
        if (this.inviteContainer) {
            this.inviteContainer.forEach(function (invite) {
                var input = invite.querySelector('input');
                var button = invite.querySelector('button');
                if (input.value === '') {
                    button.disabled = true;
                }
                input.addEventListener('input', _this.handleInviteInput.bind(_this, button));
                input.addEventListener('keydown', _this.handleKeyDown);
                button.addEventListener('click', function (e) {
                    button.classList.add(util_1.ACTION_CLASSES.SAVING);
                    _this.handleInviteButton(input, invite, e);
                });
            });
        }
        if (this.inviteSentContainer) {
            this.inviteSentContainer.forEach(function (invite) {
                var input = invite.querySelector('input');
                var sendButton = invite.querySelector(SELECTORS.RE_SEND_INVITE);
                var cancelButton = invite.querySelector(SELECTORS.CANCEL_INVITE);
                sendButton.addEventListener('click', function () {
                    sendButton.classList.add(util_1.ACTION_CLASSES.SAVING);
                    _this.sendInvite(input, invite);
                });
                cancelButton.addEventListener('click', function () {
                    _this.cancelSnackBar
                        .snackBarTrigger(undefined, undefined, _this.cancelInvite.bind(_this, input, invite), SNACKBAR_DELAY);
                });
            });
        }
        if (this.removeMembers) {
            this.removeMembers.forEach(function (container) {
                var input = container.querySelector('input');
                var removeButton = container.querySelector('button');
                removeButton.addEventListener('click', _this.removeMember
                    .bind(_this, input, container));
            });
        }
        if (this.leaveTeam) {
            var input = this.leaveTeam.querySelector('input');
            var removeButton = this.leaveTeam.querySelector('button');
            removeButton.addEventListener('click', this.removeMember
                .bind(this, input, this.leaveTeam));
        }
        if (this.teamCodeContainers) {
            this.teamCodeContainers.forEach(function (container) {
                var button = container.querySelector(SELECTORS.COPY_TEAM_CODE);
                var span = container.querySelector(SELECTORS.TEAM_CODE_DISPLAY);
                if (button.dataset.clipboardText === 'None' || span.innerText === 'None') {
                    _this.pollCode(button, span);
                }
            });
        }
    };
    TeamForm.prototype.pollCode = function (button, span) {
        var _this = this;
        clearTimeout();
        util_1.axiosInstance.get(PROJECT_URL)
            .then(function (response) {
            if (!response.data.errors) {
                var sanitizedData = response.data.replace(/^\)]}',/, '');
                var jsonResponse = JSON.parse(sanitizedData);
                var text = jsonResponse[button.dataset.slotname];
                if (text === null) {
                    setTimeout(_this.pollCode.bind(_this, button, span), 2000);
                    return;
                }
                span.innerText = text;
                button.dataset.clipboardText = text;
                button.disabled = false;
                if (_this.clipBoard) {
                    _this.clipBoard.destroy();
                }
                _this.clipBoard = new ClipboardJS(SELECTORS.COPY_TEAM_CODE);
                _this.clipBoard.on('success', _this.snackBar.snackBarTrigger
                    .bind(undefined, undefined, undefined));
            }
        })
            .catch(function (_error) {
            console.log('error');
        });
    };
    TeamForm.prototype.handleKeyDown = function (e) {
        var keyName = e.key;
        if (keyName === 'Enter') {
            var target = e.currentTarget;
            switch (target.id) {
                case 'team-code':
                    this.joinTeam();
                    break;
                case 'team-name':
                    this.handleUpdateTeam();
                    break;
                case 'create-name':
                    this.handleCreateTeamButton();
                    break;
                case 'team-member2':
                case 'team-member3':
                    this.handleInviteButton(target, target.closest('.js-invite-container'), e);
                    break;
            }
        }
    };
    TeamForm.prototype.handleInviteInput = function (button, e) {
        if (e.currentTarget.checkValidity()) {
            button.disabled = false;
        }
        else {
            button.disabled = true;
        }
    };
    TeamForm.prototype.handleInviteButton = function (input, container, e) {
        e.preventDefault();
        this.sendInvite(input, container);
    };
    TeamForm.prototype.handleJoinInput = function () {
        if (!this.joinTeamButton || !this.joinTeamInput) {
            return;
        }
        if (this.joinTeamInput.value !== '') {
            this.joinTeamButton.disabled = false;
        }
        else {
            this.joinTeamButton.disabled = true;
        }
    };
    TeamForm.prototype.handleCreateInput = function () {
        if (!this.createTeamButton || !this.createTeamInput) {
            return;
        }
        if (this.createTeamInput.value !== '') {
            this.createTeamButton.disabled = false;
        }
        else {
            this.createTeamButton.disabled = true;
        }
    };
    TeamForm.prototype.handleUpdateTeamInput = function () {
        if (!this.updateTeamInput || !this.updateTeamButton) {
            return;
        }
        if (this.updateTeamInput.value === this.originalTeamName || this.updateTeamInput.value === '') {
            this.updateTeamButton.disabled = true;
        }
        else {
            this.updateTeamButton.disabled = false;
        }
    };
    TeamForm.prototype.handleUpdateTeam = function () {
        if (this.updateTeamInput && this.updateTeamButton) {
            this.updateTeamButton.classList.add(util_1.ACTION_CLASSES.SAVING);
            this.createTeam(this.updateTeamInput.value, true);
        }
    };
    TeamForm.prototype.handleJoinTeamButton = function (e) {
        e.preventDefault();
        this.joinTeam();
    };
    TeamForm.prototype.handleCreateTeamButton = function (e) {
        e && e.preventDefault();
        if (this.createTeamInput) {
            this.createTeam(this.createTeamInput.value);
        }
    };
    TeamForm.prototype.joinTeam = function () {
        var _this = this;
        this.joinTeamButton && this.joinTeamButton.classList.add(util_1.ACTION_CLASSES.SAVING);
        var params = {
            invite_code: this.joinTeamInput && this.joinTeamInput.value,
        };
        util_1.axiosInstance.post(JOIN_URL, JSON.stringify(params))
            .then(function (response) {
            if (response.data.errors) {
                _this.form.querySelector(SELECTORS.JOIN_TEAM_CONTAINER)
                    .classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                window.location.reload();
            }
        })
            .catch(function (_error) {
            _this.form.querySelector(SELECTORS.JOIN_TEAM_CONTAINER)
                .classList.add(util_1.ACTION_CLASSES.ERROR);
            _this.resetActiveButtons();
        });
    };
    TeamForm.prototype.createTeam = function (teamName, isExistingTeam) {
        var _this = this;
        this.createTeamButton && this.createTeamButton.classList.add(util_1.ACTION_CLASSES.SAVING);
        var params = {
            id: parseInt(this.projectId, 10),
            team_name: teamName,
        };
        util_1.axiosInstance.post(CREATE_URL, JSON.stringify(params))
            .then(function (response) {
            if (response.data.errors) {
                _this.form.querySelector(SELECTORS.CREATE_TEAM_CONTAINER)
                    .classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                if (isExistingTeam) {
                    _this.savedSnackBar.snackBarTrigger();
                    _this.resetActiveButtons();
                    return;
                }
                window.location.reload();
            }
            _this.resetActiveButtons();
        })
            .catch(function (_error) {
            _this.form.querySelector(SELECTORS.CREATE_TEAM_CONTAINER)
                .classList.add(util_1.ACTION_CLASSES.ERROR);
            _this.resetActiveButtons();
        });
    };
    TeamForm.prototype.sendInvite = function (input, container) {
        var _this = this;
        var _a;
        var params = (_a = {
                locale: document.documentElement.lang
            },
            _a[input.name] = input.value,
            _a);
        util_1.axiosInstance.post(INVITE_URL, JSON.stringify(params))
            .then(function (response) {
            if (response.data.errors) {
                container.classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                window.location.reload();
            }
            _this.resetActiveButtons();
        })
            .catch(function (_error) {
            container.classList.add(util_1.ACTION_CLASSES.ERROR);
            _this.resetActiveButtons();
        });
    };
    TeamForm.prototype.cancelInvite = function (input, container) {
        var _this = this;
        var _a;
        var params = (_a = {},
            _a[input.name] = input.value,
            _a);
        util_1.axiosInstance.post(CANCEL_URL, JSON.stringify(params))
            .then(function (response) {
            if (response.data.errors) {
                container.classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                window.location.reload();
            }
            _this.resetActiveButtons();
        })
            .catch(function (_error) {
            container.classList.add(util_1.ACTION_CLASSES.ERROR);
            _this.resetActiveButtons();
        });
    };
    TeamForm.prototype.removeMember = function (input, container) {
        var _this = this;
        var _a;
        var params = (_a = {},
            _a[input.name] = input.value,
            _a);
        util_1.axiosInstance.post(CANCEL_URL, JSON.stringify(params))
            .then(function (response) {
            if (response.data.errors) {
                container.classList.add(util_1.ACTION_CLASSES.ERROR);
            }
            else {
                _this.form.classList.add(util_1.ACTION_CLASSES.SUBMITTED);
                window.location.reload();
            }
            _this.resetActiveButtons();
        })
            .catch(function (_error) {
            container.classList.add(util_1.ACTION_CLASSES.ERROR);
            _this.resetActiveButtons();
        });
    };
    TeamForm.prototype.resetActiveButtons = function () {
        util_1.nodeListToArray(document.querySelectorAll('button')).forEach(function (button) {
            button.classList.remove(util_1.ACTION_CLASSES.SAVING);
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "pollCode", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleKeyDown", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleInviteInput", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleInviteButton", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleJoinInput", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleCreateInput", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleUpdateTeamInput", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleUpdateTeam", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleJoinTeamButton", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "handleCreateTeamButton", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "joinTeam", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "createTeam", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "sendInvite", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "cancelInvite", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "removeMember", null);
    __decorate([
        core_decorators_1.autobind
    ], TeamForm.prototype, "resetActiveButtons", null);
    return TeamForm;
}());
exports.TeamForm = TeamForm;


/***/ }),

/***/ "./static/js/forms/TeaserForm.ts":
/*!***************************************!*\
  !*** ./static/js/forms/TeaserForm.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var axios_1 = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    TEASER_FORM: '.js-teaser-form',
    TEASER_FORM_SUBMIT: '.js-teaser-form-submit',
    TEASER_FORM_TEXT_INPUT: '.form--text-input',
    TEASER_FORM_EMAIL: '.js-email-container',
    TEASER_FORM_RADIO: '.js-radio-container',
    TEASER_FORM_LEGAL: '.js-terms-container',
    TEASER_FORM_SUCCESS: '.js-teaser-form-success',
    TEASER_FORM_CONTAINER: '.js-teaser-form-container',
    TEASER_FORM_COUNTRY: '.js-country-input',
    TEASER_FORM_LANGUAGE: '.js-language-input',
};
var TEASER_FORM_URL = 'https://services.google.com/fb/submissions/googlesciencefair-teaser/';
var TeaserForm = (function () {
    function TeaserForm(core) {
        this.core = core;
        this.teaserFormContainer = document
            .querySelector(SELECTORS.TEASER_FORM_CONTAINER);
        this.teaserForm = this.teaserFormContainer
            .querySelector(SELECTORS.TEASER_FORM);
        this.teaserFormSubmit = this.teaserFormContainer
            .querySelector(SELECTORS.TEASER_FORM_SUBMIT);
        this.teaserFormSuccess = document
            .querySelector(SELECTORS.TEASER_FORM_SUCCESS);
        this.init();
    }
    TeaserForm.prototype.init = function () {
        var _this = this;
        this.teaserForm.addEventListener('change', this.handleFormChange);
        this.teaserFormSubmit.addEventListener('click', this.handleSubmit);
        this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL + " input")
            .addEventListener('blur', this.handleEmailBlur);
        this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL + " input")
            .addEventListener('change', this.handleLegalBlur);
        util_1.nodeListToArray(this.teaserForm
            .querySelectorAll('.js-modal-link'))
            .forEach(function (link) { return link.addEventListener('click', _this.resetModal); });
    };
    TeaserForm.prototype.resetModal = function (e) {
        this.teaserForm.querySelector('.glue-app-ready .glue-c-modal__overlay')
            .style.display = 'block';
    };
    TeaserForm.prototype.handleSubmit = function (e) {
        var _this = this;
        e.preventDefault();
        if (this.isFormValid()) {
            var params_1 = {
                'gsf-country': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_COUNTRY).value,
                'gsf-email': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_TEXT_INPUT).value,
                'gsf-i-am-a': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_RADIO + " input:checked").value,
                'gsf-is-legal-checked': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL + " input").value,
                'gsf-language': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LANGUAGE).value,
            };
            axios_1.default.defaults.headers.post['Content-Type'] =
                'application/x-www-form-urlencoded';
            axios_1.default.post(TEASER_FORM_URL, Object.keys(params_1)
                .map(function (key) { return key + "=" + encodeURIComponent((params_1[key])); }).join('&'))
                .then(function (response) {
                if (response.data.errors) {
                    if (response.data.errors['gsf-email']) {
                        _this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                            .classList.add('-error');
                    }
                    if (response.data.errors['gsf-i-am-a']) {
                        _this.teaserForm.querySelector(SELECTORS.TEASER_FORM_RADIO)
                            .classList.add('-error');
                    }
                    if (response.data.errors['gsf-is-legal-checked']) {
                        _this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                            .classList.add('-error');
                    }
                }
                else {
                    _this.teaserFormContainer.classList.add('-submitted');
                    _this.teaserFormSuccess.style.display = 'flex';
                    setTimeout(function () {
                        TweenMax.to(window, .15, {
                            scrollTo: {
                                y: 0,
                                autoKill: false,
                            },
                        });
                        _this.teaserFormSuccess.classList.add('-active');
                        _this.teaserFormContainer.style.overflow = 'hidden';
                        _this.teaserFormContainer.style.display = 'none';
                    }, 500);
                }
            })
                .catch(function (error) {
                _this.teaserForm.classList.add('-error');
            });
            return;
        }
        this.setFormStates();
    };
    TeaserForm.prototype.isEmailValid = function () {
        var emailField = this.teaserForm
            .querySelector(SELECTORS.TEASER_FORM_TEXT_INPUT);
        return emailField.validity.valid;
    };
    TeaserForm.prototype.isCategoryValid = function () {
        var categoryFields = util_1.nodeListToArray(this.teaserForm
            .querySelectorAll('.form--radio-group input'));
        return categoryFields.find(function (field) { return field.checked === true; }) !== undefined;
    };
    TeaserForm.prototype.isLegalChecked = function () {
        var legalCheck = this.teaserForm.querySelector('#isLegalChecked');
        return legalCheck.checked === true;
    };
    TeaserForm.prototype.isFormValid = function () {
        return this.isEmailValid() && this.isCategoryValid() && this.isLegalChecked();
    };
    TeaserForm.prototype.setFormStates = function () {
        if (!this.isEmailValid()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                .classList.add('-error');
        }
        if (!this.isCategoryValid()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_RADIO)
                .classList.add('-error');
        }
        if (!this.isLegalChecked()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                .classList.add('-error');
        }
    };
    TeaserForm.prototype.handleFormChange = function () {
        this.teaserFormSubmit.disabled = !this.isFormValid();
    };
    TeaserForm.prototype.handleEmailBlur = function () {
        if (!this.isEmailValid()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                .classList.add('-error');
        }
        else {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                .classList.remove('-error');
        }
    };
    TeaserForm.prototype.handleLegalBlur = function () {
        if (!this.isLegalChecked()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                .classList.add('-error');
        }
        else {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                .classList.remove('-error');
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "resetModal", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "handleSubmit", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "isEmailValid", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "isCategoryValid", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "isLegalChecked", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "isFormValid", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "setFormStates", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "handleFormChange", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "handleEmailBlur", null);
    __decorate([
        core_decorators_1.autobind
    ], TeaserForm.prototype, "handleLegalBlur", null);
    return TeaserForm;
}());
exports.default = TeaserForm;


/***/ }),

/***/ "./static/js/forms/index.ts":
/*!**********************************!*\
  !*** ./static/js/forms/index.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Forms_1 = __webpack_require__(/*! ./Forms */ "./static/js/forms/Forms.ts");
exports.Forms = Forms_1.Forms;
var StepForm_1 = __webpack_require__(/*! ./StepForm */ "./static/js/forms/StepForm.ts");
exports.StepForm = StepForm_1.StepForm;
var StepSummaryForm_1 = __webpack_require__(/*! ./StepSummaryForm */ "./static/js/forms/StepSummaryForm.ts");
exports.StepSummaryForm = StepSummaryForm_1.StepSummaryForm;
var TeamForm_1 = __webpack_require__(/*! ./TeamForm */ "./static/js/forms/TeamForm.ts");
exports.TeamForm = TeamForm_1.TeamForm;
var ConsentForm_1 = __webpack_require__(/*! ./ConsentForm */ "./static/js/forms/ConsentForm.ts");
exports.ConsentForm = ConsentForm_1.ConsentForm;
var CheckList_1 = __webpack_require__(/*! ./CheckList */ "./static/js/forms/CheckList.ts");
exports.CheckList = CheckList_1.CheckList;
var ParentalConsent_1 = __webpack_require__(/*! ./ParentalConsent */ "./static/js/forms/ParentalConsent.ts");
exports.ParentalConsent = ParentalConsent_1.ParentalConsent;
var Profile_1 = __webpack_require__(/*! ./Profile */ "./static/js/forms/Profile.ts");
exports.Profile = Profile_1.Profile;
var InspiringEducator_1 = __webpack_require__(/*! ./InspiringEducator */ "./static/js/forms/InspiringEducator.ts");
exports.InspiringEducator = InspiringEducator_1.InspiringEducator;
var TeaserForm_1 = __webpack_require__(/*! ./TeaserForm */ "./static/js/forms/TeaserForm.ts");
exports.TeaserForm = TeaserForm_1.default;


/***/ }),

/***/ "./static/js/pages/Dashboard.ts":
/*!**************************************!*\
  !*** ./static/js/pages/Dashboard.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SELECTORS = {
    MODAL_LINK: '.js-modal-link',
};
var Dashboard = (function () {
    function Dashboard(core) {
        this.core = core;
        this.modalLink = document.querySelector(SELECTORS.MODAL_LINK);
        this.init();
    }
    Dashboard.prototype.init = function () {
        if (window.location.hash === '#top-tips') {
            this.modalLink && this.modalLink.click();
        }
    };
    return Dashboard;
}());
exports.default = Dashboard;


/***/ }),

/***/ "./static/js/pages/Home.ts":
/*!*********************************!*\
  !*** ./static/js/pages/Home.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    PARENT_LOGO_CONTAINER: '.js-parent-logo-container',
    LOGO_CONTAINER: '.js-logo-container',
    INTERACTIVE_LOGO_CONTAINER: '.js-interactive-logo-container',
    COMPASS_CONTAINER: '.js-animate-compass',
    LOGO_WHEN_SCROLLED: '.js-logo-when-scrolled',
    MODAL_LINK: '.js-error-modal-link',
    UPDATES_MODAL_LINK: 'a[data-glue-modal-trigger="updates-modal"]',
};
var HEADER_HEIGHT = 80;
var SCROLL_HEADER_INTERACTION_CLASS = '-will-transition-on-scroll';
var SCROLL_HEADER_VISIBLE_CLASS = '-should-show';
var SCROLL_HEADER_INVISIBLE_CLASS = '-should-hide';
var Home = (function () {
    function Home(core) {
        this.headerIsScrolled = false;
        this.compassHasPlayed = false;
        this.core = core;
        this.medScreen = window.matchMedia('(min-width: 600px)').matches;
        this.logoAnimationContainer = document.querySelector(SELECTORS.LOGO_CONTAINER);
        if (this.logoAnimationContainer) {
            this.logoAnimationContainer.classList.add(util_1.ACTION_CLASSES.ACTIVE);
        }
        this.interactiveLogoAnimationContainer =
            document.querySelector(SELECTORS.INTERACTIVE_LOGO_CONTAINER);
        this.logoAnimationData = {
            container: this.logoAnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: true,
            path: this.medScreen ?
                '/static/data/GSF_logo7.json' : '/static/data/GSF_logo_mobile.json',
        };
        this.interactiveLogoAnimationData = {
            container: this.interactiveLogoAnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: '/static/data/GSF_interactive_logo.json',
        };
        this.parentLogoContainer =
            document.querySelector(SELECTORS.PARENT_LOGO_CONTAINER);
        this.headerLogo = document.querySelector(SELECTORS.LOGO_WHEN_SCROLLED);
        this.compassAnimationContainer =
            document.querySelector(SELECTORS.COMPASS_CONTAINER);
        this.compassAnimationData = {
            container: this.compassAnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: '/static/data/compass.json',
        };
        this.errorModalLink = document.querySelector(SELECTORS.MODAL_LINK);
        this.updatesModalLink =
            document.querySelector(SELECTORS.UPDATES_MODAL_LINK);
        this.init();
    }
    Home.prototype.init = function () {
        this.interactiveLogoAnimationObject =
            bodymovin.loadAnimation(this.interactiveLogoAnimationData);
        this.interactiveLogo = new components_1.InteractiveLogo(this.interactiveLogoAnimationContainer, this.interactiveLogoAnimationObject);
        if (this.core.prefersReducedMotion) {
            this.logoAnimationContainer.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
            if (this.interactiveLogo) {
                this.interactiveLogo.init();
            }
        }
        else {
            this.logoAnimationObject = bodymovin.loadAnimation(this.logoAnimationData);
            this.animateLogo();
        }
        if (this.headerLogo && this.parentLogoContainer) {
            this.parentLogoContainer.classList.add(SCROLL_HEADER_INTERACTION_CLASS);
            this.headerLogo.classList.add(SCROLL_HEADER_INTERACTION_CLASS);
            window.addEventListener('scroll', this.onScroll);
            this.onScroll();
            window.addEventListener('resize', this.onResize);
            this.onResize();
        }
        if (this.compassAnimationContainer) {
            this.compassAnimationObject = bodymovin.loadAnimation(this.compassAnimationData);
        }
        if (window.location.hash === '#sign-in') {
            this.errorModalLink && this.errorModalLink.click();
            window.location.hash = '';
        }
        if (window.location.hash === '#get-notifications') {
            this.updatesModalLink && this.updatesModalLink.click();
            window.location.hash = '';
        }
    };
    Home.prototype.animateLogo = function () {
        var _this = this;
        this.logoAnimationObject.play();
        this.logoAnimationObject.addEventListener('complete', function () {
            _this.logoAnimationContainer.classList.remove(util_1.ACTION_CLASSES.ACTIVE);
            if (_this.interactiveLogo) {
                _this.interactiveLogo.init();
            }
        });
    };
    Home.prototype.onScroll = function () {
        requestAnimationFrame(this.handleScroll);
    };
    Home.prototype.handleScroll = function () {
        if (this.core.prefersReducedMotion && !this.compassHasPlayed) {
            this.compassAnimationObject.goToAndStop(this.compassAnimationObject.totalFrames, true);
            this.compassHasPlayed = true;
        }
        else {
            if (this.compassAnimationContainer && !this.compassHasPlayed) {
                var compassTop = this.compassAnimationContainer.getBoundingClientRect().top;
                if (compassTop < window.innerHeight) {
                    this.compassAnimationObject.play();
                    this.compassHasPlayed = true;
                }
            }
        }
        if (!this.medScreen) {
            return;
        }
        var top = this.interactiveLogoAnimationContainer
            .getBoundingClientRect().top + window.innerHeight;
        if (top < HEADER_HEIGHT && !this.headerIsScrolled) {
            this.headerLogo.classList.add(SCROLL_HEADER_VISIBLE_CLASS);
            this.headerIsScrolled = true;
        }
        else if (top >= HEADER_HEIGHT && this.headerIsScrolled) {
            this.parentLogoContainer.classList.remove(SCROLL_HEADER_INVISIBLE_CLASS);
            this.headerLogo.classList.remove(SCROLL_HEADER_VISIBLE_CLASS);
            this.headerIsScrolled = false;
        }
    };
    Home.prototype.onResize = function () {
        requestAnimationFrame(this.handleResize);
    };
    Home.prototype.handleResize = function () {
        this.medScreen = window.matchMedia('(min-width: 600px)').matches;
    };
    __decorate([
        core_decorators_1.autobind
    ], Home.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], Home.prototype, "animateLogo", null);
    __decorate([
        core_decorators_1.autobind
    ], Home.prototype, "onScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], Home.prototype, "handleScroll", null);
    __decorate([
        core_decorators_1.autobind
    ], Home.prototype, "onResize", null);
    __decorate([
        core_decorators_1.autobind
    ], Home.prototype, "handleResize", null);
    return Home;
}());
exports.default = Home;


/***/ }),

/***/ "./static/js/pages/ProjectPreview.ts":
/*!*******************************************!*\
  !*** ./static/js/pages/ProjectPreview.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ClipboardJS = __webpack_require__(/*! clipboard */ "./node_modules/clipboard/dist/clipboard.js");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var SELECTORS = {
    COPY_SNACKBAR: '.js-copy-snackbar',
    COPY_URL: '.js-copy-url',
};
var ProjectPreview = (function () {
    function ProjectPreview(core) {
        this.core = core;
        var snackBarContainer = document.querySelector(SELECTORS.COPY_SNACKBAR);
        if (!snackBarContainer) {
            return;
        }
        this.snackBar = new components_1.SnackBar(this.core, snackBarContainer);
        this.clipBoard = new ClipboardJS(SELECTORS.COPY_URL);
        this.clipBoard.on('success', this.snackBar.snackBarTrigger
            .bind(undefined, undefined, undefined));
    }
    return ProjectPreview;
}());
exports.default = ProjectPreview;


/***/ }),

/***/ "./static/js/pages/Register.ts":
/*!*************************************!*\
  !*** ./static/js/pages/Register.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var AgeRangeRestriction_1 = __webpack_require__(/*! ../components/AgeRangeRestriction */ "./static/js/components/AgeRangeRestriction.ts");
var SELECTORS = {
    FORM: '.js-register-form',
    FORM_SUBMIT: '.js-form-submit',
    FORM_TEXT_INPUT: '.form--text-input',
    FORM_RADIO: '.js-radio-group',
    FORM_LEGAL: '.js-terms-container',
    FORM_FIRST_NAME: '.js-first-name-container',
    FORM_LAST_NAME: '.js-last-name-container',
    FORM_SUCCESS: '.js-form-success',
    FORM_CONTAINER: '.js-form-container',
    FORM_COUNTRY: '.js-country-input',
    FORM_STATE: '.js-state-input',
    FORM_LANGUAGE: '.js-language-input',
    FORM_TEAM_CODE: '.js-team-input',
    FORM_PICTURE_URL: '#pictureUrl',
    DATA_TIP_SELECTOR: '.js-tooltip-trigger',
    REGISTER_TERMS: '.js-register-terms',
    RECEIVED_TEAM_CODE: '.js-received-team-code',
    STEP_1: '.js-step-1',
    STEP_2: '.js-step-2',
    CONTINUE_BUTTON: '.js-continue',
};
var FORM_URL = '/api/members/create';
var Register = (function () {
    function Register(core) {
        this.core = core;
        this.form = document.querySelector(SELECTORS.FORM);
        this.formSubmit = this.form
            .querySelector(SELECTORS.FORM_SUBMIT);
        this.formSuccess = document.querySelector(SELECTORS.FORM_SUCCESS);
        this.formContainer = document
            .querySelector(SELECTORS.FORM_CONTAINER);
        this.country = this.form.querySelector(SELECTORS.FORM_COUNTRY + " select");
        this.stateContainer = this.form.querySelector(SELECTORS.FORM_STATE);
        this.state = this.stateContainer
            .querySelector(SELECTORS.FORM_STATE + " select");
        this.firstName = this.form
            .querySelector(SELECTORS.FORM_FIRST_NAME + " input");
        this.surname = this.form.querySelector(SELECTORS.FORM_LAST_NAME + " input");
        this.teamCodeContainer = this.form.querySelector(SELECTORS.FORM_TEAM_CODE);
        this.teamCode = this.teamCodeContainer
            .querySelector('input');
        this.acceptPrivacy = this.form
            .querySelector(SELECTORS.FORM_LEGAL + " input");
        this.pictureUrl = this.form
            .querySelector("input" + SELECTORS.FORM_PICTURE_URL);
        this.registerTerms = this.form.querySelector(SELECTORS.REGISTER_TERMS);
        this.receivedTeamCode = this.form
            .querySelector(SELECTORS.RECEIVED_TEAM_CODE + " input");
        this.stepOneContainer = this.form.querySelector(SELECTORS.STEP_1);
        this.stepTwoContainer = this.form.querySelector(SELECTORS.STEP_2);
        this.continueButton = this.form.querySelector(SELECTORS.CONTINUE_BUTTON);
        this.ageRangeContainer = this.form.querySelector(SELECTORS.FORM_RADIO);
        this.ageRangeRestrictions = new AgeRangeRestriction_1.default(this.country, this.ageRangeContainer, this.registerTerms);
        this.init();
    }
    Register.prototype.init = function () {
        var _this = this;
        document.addEventListener('keydown', this.handleKeyDown);
        this.formSubmit.disabled = true;
        this.continueButton.disabled = true;
        this.stepTwoContainer.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.formSubmit.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.form.addEventListener('change', this.handleFormChange);
        this.formSubmit.addEventListener('click', this.handleSubmit);
        this.continueButton.addEventListener('click', this.handleContinue);
        var toolTipElements = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.DATA_TIP_SELECTOR));
        toolTipElements.forEach(function (el) {
            var tooltip = new components_1.ToolTip(_this.core, el);
            el.addEventListener('mouseover', tooltip.domShow);
            el.addEventListener('mouseleave', tooltip.domHide);
            el.addEventListener('click', tooltip.domShow);
            el.addEventListener('keydown', function (e) {
                if (e.code === 'Enter' || e.code === 'Space') {
                    if (tooltip.isOpen) {
                        tooltip.domHide();
                    }
                    else {
                        tooltip.domShow();
                    }
                }
                if (e.code === 'Escape') {
                    tooltip.domHide();
                }
            });
        });
        this.country.addEventListener('change', this.handleCountryChange);
        this.state.addEventListener('change', this.handleFormChange);
        this.receivedTeamCode.addEventListener('change', this.setTeamCodeVisibility);
        this.firstName.addEventListener('input', this.handleFormChange);
        this.surname.addEventListener('input', this.handleFormChange);
        this.teamCode.addEventListener('input', this.handleFormChange);
        this.setStateVisibility();
        this.setTeamCodeVisibility();
    };
    Register.prototype.handleKeyDown = function (e) {
        var keyName = e.key;
        if (keyName === 'Enter') {
            if (this.isStepOneValid() && !this.isStepTwoValid()) {
                this.handleContinue();
            }
            else if (this.isStepOneValid() && this.isStepTwoValid()) {
                this.handleSubmit();
            }
        }
    };
    Register.prototype.setStateVisibility = function () {
        if (this.country.value === 'US') {
            this.stateContainer.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            this.state.required = true;
        }
        else {
            this.stateContainer.classList.add(util_1.ACTION_CLASSES.HIDDEN);
            this.state.required = false;
        }
    };
    Register.prototype.setTeamCodeVisibility = function () {
        if (this.receivedTeamCode.checked) {
            this.teamCodeContainer.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
            this.teamCode.required = true;
        }
        else {
            this.teamCodeContainer.classList.add(util_1.ACTION_CLASSES.HIDDEN);
            this.teamCode.required = false;
        }
        this.handleFormChange();
    };
    Register.prototype.handleCountryChange = function () {
        this.setStateVisibility();
        this.handleFormChange();
    };
    Register.prototype.handleFormChange = function () {
        this.continueButton.disabled = !this.isStepOneValid();
        this.formSubmit.disabled = !this.isStepTwoValid();
    };
    Register.prototype.handleContinue = function () {
        this.stepOneContainer.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.stepTwoContainer.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        this.continueButton.classList.add(util_1.ACTION_CLASSES.HIDDEN);
        this.formSubmit.classList.remove(util_1.ACTION_CLASSES.HIDDEN);
        this.firstName.focus();
    };
    Register.prototype.isStepOneValid = function () {
        var countryIsValid = this.country.checkValidity();
        var stateIsValid = this.state.required ? this.state.checkValidity() : true;
        var ageIsValid = this.ageRangeRestrictions.ageRange !== '';
        return countryIsValid && stateIsValid && ageIsValid;
    };
    Register.prototype.isStepTwoValid = function () {
        var firstNameIsValid = this.firstName.checkValidity();
        var surNameIsValid = this.surname.checkValidity();
        var isTeamCodeValid = this.receivedTeamCode.checked ? this.teamCode.checkValidity() : true;
        var isTermsValid = this.acceptPrivacy.checked;
        return firstNameIsValid && surNameIsValid && isTeamCodeValid && isTermsValid;
    };
    Register.prototype.isFormValid = function () {
        return this.isStepOneValid() && this.isStepTwoValid();
    };
    Register.prototype.handleSubmit = function () {
        var _this = this;
        this.form.reportValidity();
        if (this.form.checkValidity()) {
            var params = {
                country: this.country.value,
                home_state: this.state.value,
                firstname: this.firstName.value,
                surname: this.surname.value,
                invite_code: this.receivedTeamCode.checked ? this.teamCode.value : null,
                locale: document.documentElement.lang,
                accept_privacy: this.acceptPrivacy.checked,
                age_range: this.ageRangeRestrictions.ageRange,
                picture_url: this.pictureUrl.value,
            };
            util_1.axiosInstance.post(FORM_URL, JSON.stringify(params))
                .then(function (response) {
                if (response.data.errors) {
                    _this.form.classList.add('-error');
                }
                else {
                    _this.formContainer.classList.add('-submitted');
                    window.location.href = '/your-project#top-tips';
                }
            })
                .catch(function (error) {
                _this.form.classList.add('-error');
                if (error.response.data.errors === 'Code not found') {
                    _this.teamCodeContainer.querySelector('.form--input-container')
                        .classList.add(util_1.ACTION_CLASSES.ERROR);
                }
            });
            return;
        }
    };
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "handleKeyDown", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "setStateVisibility", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "setTeamCodeVisibility", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "handleCountryChange", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "handleFormChange", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "handleContinue", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "isStepOneValid", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "isStepTwoValid", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "isFormValid", null);
    __decorate([
        core_decorators_1.autobind
    ], Register.prototype, "handleSubmit", null);
    return Register;
}());
exports.default = Register;


/***/ }),

/***/ "./static/js/pages/Styleguide.ts":
/*!***************************************!*\
  !*** ./static/js/pages/Styleguide.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var SELECTORS = {
    SNACKBAR: '.js-launch-snackbar',
};
var Styleguide = (function () {
    function Styleguide(core) {
        this.core = core;
        this.textareas = util_1.nodeListToArray(document.querySelectorAll(util_1.GLOBAL_SELECTORS.RICH_TEXTAREA));
        this.snackBarTrigger = document.querySelector(SELECTORS.SNACKBAR);
        this.snackBar = new components_1.SnackBar(this.core);
        this.init();
    }
    Styleguide.prototype.init = function () {
        this.snackBarTrigger.addEventListener('click', this.handleSnackBarTrigger);
    };
    Styleguide.prototype.handleSnackBarTrigger = function () {
        this.snackBar.snackBarTrigger();
    };
    __decorate([
        core_decorators_1.autobind
    ], Styleguide.prototype, "handleSnackBarTrigger", null);
    return Styleguide;
}());
exports.default = Styleguide;


/***/ }),

/***/ "./static/js/pages/Teaser.ts":
/*!***********************************!*\
  !*** ./static/js/pages/Teaser.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_decorators_1 = __webpack_require__(/*! core-decorators */ "./node_modules/core-decorators/es/core-decorators.js");
var axios_1 = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
var components_1 = __webpack_require__(/*! ../components */ "./static/js/components/index.ts");
var util_1 = __webpack_require__(/*! ../util */ "./static/js/util/index.ts");
var SELECTORS = {
    ILLUSTRATION: '.js-scroll-illustration',
    SCROLL_CONTAINER: '.js-scroll-container',
    SCROLL_END: '.js-scroll-end',
    SCROLL_START: '.js-first-scroll',
    LOGO_CONTAINER: '.js-logo-container',
    SUBMISSIONS_OPEN: '.js-submissions-open',
    RESOURCE_CARD_CONTAINER: '.js-resource-card-container',
    RESOURCE_CARD: '.js-resource-card-alt',
    TEASER_FORM: '.js-teaser-form',
    TEASER_FORM_SUBMIT: '.js-teaser-form-submit',
    TEASER_FORM_TEXT_INPUT: '.form--text-input',
    TEASER_FORM_EMAIL: '.js-email-container',
    TEASER_FORM_RADIO: '.js-radio-container',
    TEASER_FORM_LEGAL: '.js-terms-container',
    TEASER_FORM_SUCCESS: '.js-teaser-form-success',
    TEASER_FORM_CONTAINER: '.js-teaser-form-container',
    TEASER_FORM_COUNTRY: '.js-country-input',
    TEASER_FORM_LANGUAGE: '.js-language-input',
    HEADER: '.js-header',
    ELS_WITH_VH: '.js-vh',
};
var TEASER_FORM_URL = 'https://services.google.com/fb/submissions/googlesciencefair-teaser/';
var Teaser = (function () {
    function Teaser(core) {
        this.core = core;
        this.windowHeight = window.innerHeight;
        this.medScreen = window.matchMedia('(min-width: 600px)').matches;
        this.largeScreen = window.matchMedia('(min-width: 1024px)').matches;
        this.smallScreen = !this.medScreen;
        this.windowWidth = window.innerWidth;
        this.headerHasShadow = false;
        this.isIOS = false;
        this.illustrationContainer = document.querySelector(SELECTORS.ILLUSTRATION);
        this.logoAnimationContainer = document.querySelector(SELECTORS.LOGO_CONTAINER);
        this.scrollContainer = document.querySelector(SELECTORS.SCROLL_CONTAINER);
        this.teaserForm = document.querySelector(SELECTORS.TEASER_FORM);
        this.teaserFormSubmit = this.teaserForm
            .querySelector(SELECTORS.TEASER_FORM_SUBMIT);
        this.submissionsOpenElement = document.querySelector(SELECTORS.SUBMISSIONS_OPEN);
        this.teaserFormSuccess = document.querySelector(SELECTORS.TEASER_FORM_SUCCESS);
        this.teaserFormContainer = document
            .querySelector(SELECTORS.TEASER_FORM_CONTAINER);
        this.elsWithVh = util_1.nodeListToArray(document.querySelectorAll(SELECTORS.ELS_WITH_VH));
        this.resourceCard = document.querySelector(SELECTORS.RESOURCE_CARD);
        this.resourceCardContainer = document
            .querySelector(SELECTORS.RESOURCE_CARD_CONTAINER);
        this.navInPage = new components_1.NavInPage(core);
        this.scrollContainerTop = this.scrollContainer.getBoundingClientRect().top;
        this.scrollEnd = document.querySelector(SELECTORS.SCROLL_END + " > p");
        this.scrollContainerHeight = document.querySelector(SELECTORS.SCROLL_END)
            .getBoundingClientRect().top;
        this.header = document.querySelector(SELECTORS.HEADER);
        this.headerHeight = document.querySelector('.teaserpage--header')
            .getBoundingClientRect().height;
        this.animationDuration = this.scrollContainerHeight + (this.headerHeight / 4);
        this.animationData = {
            container: this.illustrationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: '/static/images/GSF_test13.json',
        };
        this.animationObject = bodymovin.loadAnimation(this.animationData);
        this.logoAnimationData = {
            container: this.logoAnimationContainer,
            renderer: 'svg',
            loop: false,
            autoplay: true,
            path: this.medScreen ?
                '/static/images/GSF_logo6.json' : '/static/images/GSF_logo_mobile.json',
        };
        this.logoAnimationObject = bodymovin.loadAnimation(this.logoAnimationData);
        this.isLockedTop = false;
        this.isLockedBottom = false;
        this.isResourceCardSet = false;
        this.svgHeight = 0;
        this.init();
    }
    Teaser.prototype.init = function () {
        var _this = this;
        this.isIOS = /(iPad|iPhone|iPod)/.test(navigator.userAgent);
        this.animateLogo();
        this.illustrationContainer.style.width = "" + window.innerWidth;
        this.illustrationContainer.style.height = "" + window.innerHeight;
        window.addEventListener('scroll', this.animate);
        window.onbeforeunload = function () {
            _this.illustrationContainer.style.display = 'none';
            window.scrollTo(0, 0);
        };
        this.teaserForm.addEventListener('change', this.handleFormChange);
        this.teaserFormSubmit.addEventListener('click', this.handleSubmit);
        this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL + " input")
            .addEventListener('blur', this.handleEmailBlur);
        this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL + " input")
            .addEventListener('change', this.handleLegalBlur);
        this.animationObject.addEventListener('DOMLoaded', this.setIllustrationReady);
        util_1.nodeListToArray(document.querySelectorAll('.js-modal-link'))
            .forEach(function (link) { return link.addEventListener('click', _this.resetModal); });
        window.addEventListener('orientationchange', this.handleOrientationChange);
        window.addEventListener('resize', this.handleResize);
        if (this.medScreen) {
            this.setResourceCard();
        }
        this.setHeightsForVh();
        if (/(educator-resources)/.test(window.location.hash)) {
            TweenMax.to(window, 1, {
                scrollTo: {
                    y: document.querySelector('#educator-resources')
                        .getBoundingClientRect().top,
                    autoKill: false,
                },
            });
        }
    };
    Teaser.prototype.setResourceCard = function () {
        if (this.isResourceCardSet) {
            return;
        }
        var innerHtml = this.resourceCard.innerHTML;
        var newLi = document.createElement('li');
        newLi.classList.add('h-c-carousel__item', 'resource-card', 'resource-card-alt');
        newLi.innerHTML = innerHtml;
        this.resourceCardContainer.appendChild(newLi);
        this.resourceCard.remove();
        this.isResourceCardSet = true;
    };
    Teaser.prototype.handleResize = function () {
        this.windowHeight = window.innerHeight;
        this.medScreen = window.matchMedia('(min-width: 600px)').matches;
        this.largeScreen = window.matchMedia('(min-width: 1024px)').matches;
        if (this.smallScreen) {
            if (this.medScreen) {
                this.smallScreen = false;
                this.logoAnimationObject.destroy();
                this.logoAnimationData.path = '/static/images/GSF_logo6.json';
                this.logoAnimationObject = bodymovin.loadAnimation(this.logoAnimationData);
                this.logoAnimationObject.play();
                this.setResourceCard();
            }
        }
        else {
            if (!this.medScreen) {
                this.smallScreen = true;
                this.logoAnimationObject.destroy();
                this.logoAnimationData.path = '/static/images/GSF_logo_mobile.json';
                this.logoAnimationObject = bodymovin.loadAnimation(this.logoAnimationData);
                this.logoAnimationObject.play();
            }
        }
        if (this.windowWidth !== window.innerWidth) {
            this.windowWidth = window.innerWidth;
            window.requestAnimationFrame(this.onResize);
        }
    };
    Teaser.prototype.resetModal = function (e) {
        document.querySelector('.glue-app-ready .glue-c-modal__overlay')
            .style.display = 'block';
    };
    Teaser.prototype.handleOrientationChange = function () {
        window.requestAnimationFrame(this.onResize);
    };
    Teaser.prototype.setIllustrationReady = function () {
        var svg = this.illustrationContainer.querySelector('svg');
        this.svgHeight = this.windowHeight;
        svg.style.height = "" + this.windowHeight;
    };
    Teaser.prototype.onResize = function () {
        this.medScreen = window.matchMedia('(min-width: 600px)').matches;
        this.largeScreen = window.matchMedia('(min-width: 1024px)').matches;
        this.windowHeight = window.innerHeight;
        this.setIllustrationReady();
        this.setHeightsForVh();
        this.scrollContainerTop = this.scrollContainer.getBoundingClientRect().top + window.pageYOffset;
        this.headerHeight = document.querySelector('.teaserpage--header')
            .getBoundingClientRect().height;
        this.scrollContainerHeight = document.querySelector(SELECTORS.SCROLL_END)
            .getBoundingClientRect().top + window.pageYOffset;
        this.animate();
    };
    Teaser.prototype.animate = function () {
        if (window.scrollY > 200 && !this.headerHasShadow) {
            this.header.classList.add(util_1.ACTION_CLASSES.HAS_SHADOW);
            this.headerHasShadow = true;
        }
        else if (window.scrollY < 200 && this.headerHasShadow) {
            this.header.classList.remove(util_1.ACTION_CLASSES.HAS_SHADOW);
            this.headerHasShadow = false;
        }
        var scrollPosition = window.scrollY - (this.headerHeight / 2);
        var scrolledInContainer = this.scrollContainerHeight - (this.headerHeight / 2)
            - (this.windowHeight / 4);
        var maxFrames = this.animationObject.totalFrames;
        var frame = (maxFrames / 100) *
            (scrollPosition / (scrolledInContainer / 100));
        this.animationObject.goToAndStop(frame, true);
        var navHeight = this.medScreen ? 80 : 64;
        var illustrationTop = this.scrollContainer.getBoundingClientRect().top
            - (window.innerHeight * .5) - navHeight;
        if (this.scrollEnd.getBoundingClientRect().top <
            (this.windowHeight * (this.largeScreen ? .8 : .7)) + navHeight) {
            if (this.isLockedBottom) {
                return;
            }
            this.illustrationContainer.classList.add('-locked');
            this.illustrationContainer.classList.remove('-fixed');
            var bottom = document.querySelector(SELECTORS.SCROLL_END)
                .getBoundingClientRect().height - (this.windowHeight / 2);
            this.illustrationContainer.style.top = 'auto';
            this.illustrationContainer.style.bottom = bottom + navHeight + "px";
            this.isLockedBottom = true;
        }
        else {
            if (!this.isLockedBottom) {
                if (illustrationTop < 1) {
                    if (this.isLockedTop) {
                        return;
                    }
                    this.illustrationContainer.classList.add('-fixed');
                    this.illustrationContainer.style.bottom = '0';
                    this.isLockedTop = true;
                }
                else {
                    if (!this.isLockedTop) {
                        return;
                    }
                    this.illustrationContainer.classList.remove('-fixed');
                    this.illustrationContainer.style.removeProperty('bottom');
                    this.isLockedTop = false;
                }
                return;
            }
            this.illustrationContainer.classList.remove('-locked');
            this.illustrationContainer.classList.add('-fixed');
            this.illustrationContainer.style.removeProperty('top');
            this.illustrationContainer.style.bottom = '0';
            this.isLockedBottom = false;
        }
    };
    Teaser.prototype.animateLogo = function () {
        this.logoAnimationObject.play();
        this.logoAnimationObject.addEventListener('complete', this.onLogoAnimationComplete);
    };
    Teaser.prototype.onLogoAnimationComplete = function () {
        this.submissionsOpenElement.classList.add('-active');
    };
    Teaser.prototype.handleSubmit = function (e) {
        var _this = this;
        e.preventDefault();
        if (this.isFormValid()) {
            var params_1 = {
                'gsf-country': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_COUNTRY).value,
                'gsf-email': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_TEXT_INPUT).value,
                'gsf-i-am-a': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_RADIO + " input:checked").value,
                'gsf-is-legal-checked': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL + " input").value,
                'gsf-language': this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LANGUAGE).value,
            };
            axios_1.default.defaults.headers.post['Content-Type'] =
                'application/x-www-form-urlencoded';
            axios_1.default.post(TEASER_FORM_URL, Object.keys(params_1)
                .map(function (key) { return key + "=" + encodeURIComponent((params_1[key])); }).join('&'))
                .then(function (response) {
                if (response.data.errors) {
                    if (response.data.errors['gsf-email']) {
                        _this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                            .classList.add('-error');
                    }
                    if (response.data.errors['gsf-i-am-a']) {
                        _this.teaserForm.querySelector(SELECTORS.TEASER_FORM_RADIO)
                            .classList.add('-error');
                    }
                    if (response.data.errors['gsf-is-legal-checked']) {
                        _this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                            .classList.add('-error');
                    }
                }
                else {
                    _this.teaserFormContainer.classList.add('-submitted');
                    _this.teaserFormSuccess.style.display = 'flex';
                    setTimeout(function () {
                        TweenMax.to(window, .15, {
                            scrollTo: {
                                y: 0,
                                autoKill: false,
                            },
                        });
                        _this.teaserFormSuccess.classList.add('-active');
                        _this.teaserFormContainer.style.overflow = 'hidden';
                        _this.teaserFormContainer.style.display = 'none';
                    }, 500);
                }
            })
                .catch(function (error) {
                _this.teaserForm.classList.add('-error');
            });
            return;
        }
        this.setFormStates();
    };
    Teaser.prototype.isEmailValid = function () {
        var emailField = this.teaserForm
            .querySelector(SELECTORS.TEASER_FORM_TEXT_INPUT);
        return emailField.validity.valid;
    };
    Teaser.prototype.isCategoryValid = function () {
        var categoryFields = util_1.nodeListToArray(this.teaserForm
            .querySelectorAll('.form--radio-group input'));
        return categoryFields.find(function (field) { return field.checked === true; }) !== undefined;
    };
    Teaser.prototype.isLegalChecked = function () {
        var legalCheck = this.teaserForm.querySelector('#isLegalChecked');
        return legalCheck.checked === true;
    };
    Teaser.prototype.isFormValid = function () {
        return this.isEmailValid() && this.isCategoryValid() && this.isLegalChecked();
    };
    Teaser.prototype.setFormStates = function () {
        if (!this.isEmailValid()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                .classList.add('-error');
        }
        if (!this.isCategoryValid()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_RADIO)
                .classList.add('-error');
        }
        if (!this.isLegalChecked()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                .classList.add('-error');
        }
    };
    Teaser.prototype.handleFormChange = function () {
        this.teaserFormSubmit.disabled = !this.isFormValid();
    };
    Teaser.prototype.handleEmailBlur = function () {
        if (!this.isEmailValid()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                .classList.add('-error');
        }
        else {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_EMAIL)
                .classList.remove('-error');
        }
    };
    Teaser.prototype.handleLegalBlur = function () {
        if (!this.isLegalChecked()) {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                .classList.add('-error');
        }
        else {
            this.teaserForm.querySelector(SELECTORS.TEASER_FORM_LEGAL)
                .classList.remove('-error');
        }
    };
    Teaser.prototype.setHeightsForVh = function () {
        var _this = this;
        this.elsWithVh.forEach(function (el) {
            el.style.removeProperty('height');
            if (_this.largeScreen) {
                return;
            }
            if (el.classList.contains('teaserpage--scroll--content')) {
                el.style.padding = _this.windowHeight * (_this.largeScreen ? .3 : .2) + "px 0";
            }
            if (el.classList.contains('js-scroll-illustration')) {
                el.style.height = _this.windowHeight + "px";
            }
            if (el.classList.contains('js-first-scroll')) {
                el.style.paddingTop = _this.windowHeight * (_this.largeScreen ? .5 : .3) + "px";
            }
            el.style.height = window.getComputedStyle(el).height;
        });
    };
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "init", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "setResourceCard", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "handleResize", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "resetModal", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "handleOrientationChange", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "setIllustrationReady", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "onResize", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "animate", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "animateLogo", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "onLogoAnimationComplete", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "handleSubmit", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "isEmailValid", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "isCategoryValid", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "isLegalChecked", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "isFormValid", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "setFormStates", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "handleFormChange", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "handleEmailBlur", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "handleLegalBlur", null);
    __decorate([
        core_decorators_1.autobind
    ], Teaser.prototype, "setHeightsForVh", null);
    return Teaser;
}());
exports.default = Teaser;


/***/ }),

/***/ "./static/js/pages/index.ts":
/*!**********************************!*\
  !*** ./static/js/pages/index.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Home_1 = __webpack_require__(/*! ./Home */ "./static/js/pages/Home.ts");
exports.Home = Home_1.default;
var ProjectPreview_1 = __webpack_require__(/*! ./ProjectPreview */ "./static/js/pages/ProjectPreview.ts");
exports.ProjectPreview = ProjectPreview_1.default;
var Register_1 = __webpack_require__(/*! ./Register */ "./static/js/pages/Register.ts");
exports.Register = Register_1.default;
var Styleguide_1 = __webpack_require__(/*! ./Styleguide */ "./static/js/pages/Styleguide.ts");
exports.Styleguide = Styleguide_1.default;
var Teaser_1 = __webpack_require__(/*! ./Teaser */ "./static/js/pages/Teaser.ts");
exports.Teaser = Teaser_1.default;
var Dashboard_1 = __webpack_require__(/*! ./Dashboard */ "./static/js/pages/Dashboard.ts");
exports.Dashboard = Dashboard_1.default;


/***/ }),

/***/ "./static/js/util/AxiosInstance.ts":
/*!*****************************************!*\
  !*** ./static/js/util/AxiosInstance.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
var axiosInstance = axios_1.default.create({
    headers: {
        'Content-Type': 'application/json;charset=UTF-8',
    },
});
exports.default = axiosInstance;


/***/ }),

/***/ "./static/js/util/Point.ts":
/*!*********************************!*\
  !*** ./static/js/util/Point.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sqrt = Math.sqrt;
var Point = (function () {
    function Point(x, y) {
        this.x = x;
        this.y = y;
    }
    Point.prototype.distance = function (p) {
        return Point.distance(this.x, this.y, p.x, p.y);
    };
    Point.prototype.distanceToCoords = function (x, y) {
        return Point.distance(this.x, this.y, x, y);
    };
    Point.prototype.normalize = function (length) {
        if (length === void 0) { length = 1.0; }
        var x = this.x;
        var y = this.y;
        var d = sqrt(x * x + y * y);
        this.x = length * x / d;
        this.y = length * y / d;
    };
    Point.prototype.scale = function (scale) {
        this.x *= scale;
        this.y *= scale;
    };
    Point.prototype.clone = function () {
        return new Point(this.x, this.y);
    };
    Point.distance = function (x1, y1, x2, y2) {
        var dx = x1 - x2;
        var dy = y1 - y2;
        return sqrt(dx * dx + dy * dy);
    };
    Point.lerp = function (pt1, pt2, coef) {
        var ip = 1 - coef;
        return new Point(pt1.x * ip + pt2.x * coef, pt1.y * ip + pt2.y * coef);
    };
    return Point;
}());
exports.default = Point;


/***/ }),

/***/ "./static/js/util/constants.ts":
/*!*************************************!*\
  !*** ./static/js/util/constants.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CKEDITOR_SETTINGS = {
    language: document.documentElement.lang,
    uploadUrl: '/api/upload',
    removeButtons: 'Cut,Copy,Paste,Strike,About,Anchor',
};
exports.CKEDITOR_SETTINGS = CKEDITOR_SETTINGS;
var GLOBAL_SELECTORS = {
    RICH_TEXTAREA: '.js-rich-textarea',
};
exports.GLOBAL_SELECTORS = GLOBAL_SELECTORS;
var MEDIA_QUERIES = {
    SMALL: '(min-width: 600px)',
    MEDIUM: '(min-width: 900px)',
    LARGE: '(min-width: 1024px)',
    XL: '(min-width: 1440px)',
};
exports.MEDIA_QUERIES = MEDIA_QUERIES;
var ACTION_CLASSES = {
    ACTIVE: '-active',
    ENABLED: '-enabled',
    DISABLED: '-disabled',
    ERROR: '-error',
    FOCUSED: '-focused',
    NEEDS_FOCUS_RING: '-needs-focus',
    SUBMITTED: '-submitted',
    INACTIVE: '-inactive',
    HIDDEN: '-hidden',
    HAS_SHADOW: '-has-shadow',
    SAVING: '-saving',
    HOVERED: '-hovered',
    REDUCE_MOTION: '-reduced-motion',
};
exports.ACTION_CLASSES = ACTION_CLASSES;
exports.DEFAULT_AUDIO_LEVEL = 0.5;


/***/ }),

/***/ "./static/js/util/cookies.ts":
/*!***********************************!*\
  !*** ./static/js/util/cookies.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function readCookie(name) {
    var result = new RegExp("(?:^|; )" + encodeURIComponent(name) + "=([^;]*)").exec(document.cookie);
    return result ? result[1] : null;
}
exports.readCookie = readCookie;
function writeCookie(name, value, days) {
    if (days === void 0) { days = 365; }
    var date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    document.cookie = name + "=\"" + value + "\"; expires=" + date.toUTCString() + "; path=/";
}
exports.writeCookie = writeCookie;


/***/ }),

/***/ "./static/js/util/index.ts":
/*!*********************************!*\
  !*** ./static/js/util/index.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ripple_1 = __webpack_require__(/*! @material/ripple */ "./node_modules/@material/ripple/index.js");
var nodeListToArray_1 = __webpack_require__(/*! ./nodeListToArray */ "./static/js/util/nodeListToArray.ts");
exports.nodeListToArray = nodeListToArray_1.default;
var cookies_1 = __webpack_require__(/*! ./cookies */ "./static/js/util/cookies.ts");
exports.readCookie = cookies_1.readCookie;
exports.writeCookie = cookies_1.writeCookie;
var constants_1 = __webpack_require__(/*! ./constants */ "./static/js/util/constants.ts");
exports.CKEDITOR_SETTINGS = constants_1.CKEDITOR_SETTINGS;
exports.GLOBAL_SELECTORS = constants_1.GLOBAL_SELECTORS;
exports.ACTION_CLASSES = constants_1.ACTION_CLASSES;
exports.MEDIA_QUERIES = constants_1.MEDIA_QUERIES;
exports.DEFAULT_AUDIO_LEVEL = constants_1.DEFAULT_AUDIO_LEVEL;
var AxiosInstance_1 = __webpack_require__(/*! ./AxiosInstance */ "./static/js/util/AxiosInstance.ts");
exports.axiosInstance = AxiosInstance_1.default;
var Point_1 = __webpack_require__(/*! ./Point */ "./static/js/util/Point.ts");
exports.Point = Point_1.default;
var isInViewport_1 = __webpack_require__(/*! ./isInViewport */ "./static/js/util/isInViewport.ts");
exports.isInViewport = isInViewport_1.isInViewport;
var isIOS = navigator.userAgent.match(/iPhone|iPod|iPad/);
var shouldLoadMDC = true;
if (isIOS) {
    var version = (navigator.userAgent.match(/\b[0-9]+_[0-9]+(?:_[0-9]+)?\b/) || [''])[0].replace(/_/g, '.');
    shouldLoadMDC = parseInt(version, 10) > 10;
}
var Ripple = shouldLoadMDC ? ripple_1.MDCRipple : null;
exports.Ripple = Ripple;


/***/ }),

/***/ "./static/js/util/isInViewport.ts":
/*!****************************************!*\
  !*** ./static/js/util/isInViewport.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function isInViewport(element) {
    var bounding = element.getBoundingClientRect();
    return (bounding.top <= (window.innerHeight || document.documentElement.clientHeight) &&
        bounding.left >= 0 &&
        bounding.bottom >= 0 &&
        bounding.right <= (window.innerWidth || document.documentElement.clientWidth));
}
exports.isInViewport = isInViewport;


/***/ }),

/***/ "./static/js/util/nodeListToArray.ts":
/*!*******************************************!*\
  !*** ./static/js/util/nodeListToArray.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function nodeListToArray(nodeList) {
    var arrayFromNodeList = [];
    for (var i = 0; i < nodeList.length; i++) {
        arrayFromNodeList.push(nodeList[i]);
    }
    return arrayFromNodeList;
}
exports.default = nodeListToArray;


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9hbmltYXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2Jhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tZW51L2FkYXB0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tZW51L2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21lbnUvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21lbnUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tZW51L3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9yaXBwbGUvYWRhcHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3JpcHBsZS9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9yaXBwbGUvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3JpcHBsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3JpcHBsZS91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvc25hY2tiYXIvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvc25hY2tiYXIvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3NuYWNrYmFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnRvYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NsaXBib2FyZC9kaXN0L2NsaXBib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1kZWNvcmF0b3JzL2VzL2FwcGx5RGVjb3JhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1kZWNvcmF0b3JzL2VzL2F1dG9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWRlY29yYXRvcnMvZXMvY29yZS1kZWNvcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWRlY29yYXRvcnMvZXMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtZGVjb3JhdG9ycy9lcy9kZWNvcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1kZWNvcmF0b3JzL2VzL2RlcHJlY2F0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1kZWNvcmF0b3JzL2VzL2VudW1lcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtZGVjb3JhdG9ycy9lcy9leHRlbmREZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWRlY29yYXRvcnMvZXMvbGF6eS1pbml0aWFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWRlY29yYXRvcnMvZXMvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1kZWNvcmF0b3JzL2VzL21peGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWRlY29yYXRvcnMvZXMvbm9uY29uZmlndXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWRlY29yYXRvcnMvZXMvbm9uZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1kZWNvcmF0b3JzL2VzL292ZXJyaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWRlY29yYXRvcnMvZXMvcHJpdmF0ZS91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1kZWNvcmF0b3JzL2VzL3Byb2ZpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtZGVjb3JhdG9ycy9lcy9yZWFkb25seS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1kZWNvcmF0b3JzL2VzL3N1cHByZXNzLXdhcm5pbmdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWRlY29yYXRvcnMvZXMvdGhyb3R0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtZGVjb3JhdG9ycy9lcy90aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYW1tZXJqcy9oYW1tZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9Db3JlLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9hcHAudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2NvbXBvbmVudHMvQWNjb3JkaW9uLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9jb21wb25lbnRzL0FnZVJhbmdlUmVzdHJpY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2NvbXBvbmVudHMvQWpheE1vZGFsLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9jb21wb25lbnRzL0FsZXJ0LnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9jb21wb25lbnRzL0FuaW1hdGVTaGFwZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2NvbXBvbmVudHMvQXVkaW9QbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2NvbXBvbmVudHMvQ0tFZGl0LnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9jb21wb25lbnRzL0NhcmRTdGFjay50cyIsIndlYnBhY2s6Ly8vLi9zdGF0aWMvanMvY29tcG9uZW50cy9DYXRlZ29yeUZpbHRlci50cyIsIndlYnBhY2s6Ly8vLi9zdGF0aWMvanMvY29tcG9uZW50cy9Gb290ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2NvbXBvbmVudHMvSGVhZGVyLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9jb21wb25lbnRzL0hvbWVDb25jbHVzaW9uU2hhcGVzLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9jb21wb25lbnRzL0hvbWVOdW1iZXJBbmltYXRpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2NvbXBvbmVudHMvSG9tZVRob3VnaHRTdGFydGVyLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9jb21wb25lbnRzL0hvbWVWaWRlb1BsYXllci50cyIsIndlYnBhY2s6Ly8vLi9zdGF0aWMvanMvY29tcG9uZW50cy9JbnRlcmFjdGl2ZUxvZ28udHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2NvbXBvbmVudHMvTGlzdEFjY29yZGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zdGF0aWMvanMvY29tcG9uZW50cy9OYXZJblBhZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2NvbXBvbmVudHMvUmVzb3VyY2VOYXYudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2NvbXBvbmVudHMvU2Nyb2xsVG8udHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2NvbXBvbmVudHMvU2xpbmdzaG90LnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9jb21wb25lbnRzL1NuYWNrQmFyLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9jb21wb25lbnRzL1N0ZXBOYXYudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2NvbXBvbmVudHMvU3RpY2t5QmFyLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9jb21wb25lbnRzL1Rob3VnaHRTdGFydGVyLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9jb21wb25lbnRzL1Rvb2xUaXAudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2NvbXBvbmVudHMvVmlkZW9QbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2NvbXBvbmVudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2Zvcm1zL0NoZWNrTGlzdC50cyIsIndlYnBhY2s6Ly8vLi9zdGF0aWMvanMvZm9ybXMvQ29uc2VudEZvcm0udHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL2Zvcm1zL0Zvcm1zLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9mb3Jtcy9JbnNwaXJpbmdFZHVjYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zdGF0aWMvanMvZm9ybXMvUGFyZW50YWxDb25zZW50LnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9mb3Jtcy9Qcm9maWxlLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9mb3Jtcy9TdGVwRm9ybS50cyIsIndlYnBhY2s6Ly8vLi9zdGF0aWMvanMvZm9ybXMvU3RlcFN1bW1hcnlGb3JtLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9mb3Jtcy9UZWFtRm9ybS50cyIsIndlYnBhY2s6Ly8vLi9zdGF0aWMvanMvZm9ybXMvVGVhc2VyRm9ybS50cyIsIndlYnBhY2s6Ly8vLi9zdGF0aWMvanMvZm9ybXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL3BhZ2VzL0Rhc2hib2FyZC50cyIsIndlYnBhY2s6Ly8vLi9zdGF0aWMvanMvcGFnZXMvSG9tZS50cyIsIndlYnBhY2s6Ly8vLi9zdGF0aWMvanMvcGFnZXMvUHJvamVjdFByZXZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL3BhZ2VzL1JlZ2lzdGVyLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9wYWdlcy9TdHlsZWd1aWRlLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy9wYWdlcy9UZWFzZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL3BhZ2VzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy91dGlsL0F4aW9zSW5zdGFuY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL3V0aWwvUG9pbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL3V0aWwvY29uc3RhbnRzLnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy91dGlsL2Nvb2tpZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL3V0aWwvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljL2pzL3V0aWwvaXNJblZpZXdwb3J0LnRzIiwid2VicGFjazovLy8uL3N0YXRpYy9qcy91dGlsL25vZGVMaXN0VG9BcnJheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBMEMsZ0NBQWdDO0FBQzFFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0VBQXdELGtCQUFrQjtBQUMxRTtBQUNBLHlEQUFpRCxjQUFjO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBeUMsaUNBQWlDO0FBQzFFLHdIQUFnSCxtQkFBbUIsRUFBRTtBQUNySTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOzs7QUFHQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FDbEZBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZLHVDQUF1QztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztB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QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTCxXQUFXLG9DQUFvQzs7QUFFL0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLG9DQUFvQzs7QUFFakQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDclBBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVxQjtBQUNyQjtBQUM0Qjs7QUFFcEI7O0FBRVI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxzQ0FBc0M7QUFDdEUsaUNBQWlDLDhCQUE4QjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUM3RUEsNkY7Ozs7Ozs7Ozs7OztBQ0FBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNENBQTRDO0FBQzVDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7Ozs7Ozs7Ozs7Ozs7QUNuTEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDbkRBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7Ozs7Ozs7Ozs7OztBQ2xCQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7Ozs7QUN4REE7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDSkE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FB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LENBQUM7QUFDRDs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQkFBMkIsa0JBQWtCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLDJDQUEyQztBQUM5RCxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7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Ozs7Ozs7O0FDN0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELFVBQVU7O0FBRS9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFVBQVU7QUFDckIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCLDBCQUEwQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxPQUFPO0FB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QUFDVDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsbUdBQW1HLEdBQUc7QUFDdEc7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUFBO0FBQ0wsQ0FBQyxRQUlEOztBQUVBLENBQUM7Ozs7Ozs7Ozs7OztBQ2xsRkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNwQkE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFD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Q0FBQztRQUNGLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUlyQixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUN6QixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQzFFLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsRUFDM0UsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQzdCLENBQUM7UUFHRixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUUzRCxJQUFJLFVBQVUsR0FBRyxDQUFDLEVBQUU7WUFDbEIsVUFBVSxHQUFHLEdBQUcsR0FBRyxVQUFVLENBQUM7U0FDL0I7UUFJRCxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FDVixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsYUFBYSxFQUNsRCxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxhQUFhLEVBQzFGLHFCQUFxQixHQUFH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Q0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQ2pELE9BQU8sQ0FDSCxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQztRQUM3RSxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDbEIsUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDO1FBQ3BCLFFBQVEsQ0FBQyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQ2hGLENBQUM7QUFDTixDQUFDO0FBUkQsb0NBUUM7Ozs7Ozs7Ozs7Ozs7OztBQ1JELFNBQXdCLGVBQWUsQ0FBQyxRQUFrQjtJQUN4RCxJQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztJQUM3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN4QyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBZ0IsQ0FBQyxDQUFDO0tBQ3BEO0lBQ0QsT0FBTyxpQkFBaUIsQ0FBQztBQUMzQixDQUFDO0FBTkQsa0NBTUMiLCJmaWxlIjoic2l0ZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3N0YXRpYy9qcy9hcHAudHNcIik7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICBub1ByZWZpeDogc3RyaW5nLFxuICogICB3ZWJraXRQcmVmaXg6IHN0cmluZyxcbiAqICAgc3R5bGVQcm9wZXJ0eTogc3RyaW5nXG4gKiB9fVxuICovXG5sZXQgVmVuZG9yUHJvcGVydHlNYXBUeXBlO1xuXG4vKiogQGNvbnN0IHtPYmplY3Q8c3RyaW5nLCAhVmVuZG9yUHJvcGVydHlNYXBUeXBlPn0gKi9cbmNvbnN0IGV2ZW50VHlwZU1hcCA9IHtcbiAgJ2FuaW1hdGlvbnN0YXJ0Jzoge1xuICAgIG5vUHJlZml4OiAnYW5pbWF0aW9uc3RhcnQnLFxuICAgIHdlYmtpdFByZWZpeDogJ3dlYmtpdEFuaW1hdGlvblN0YXJ0JyxcbiAgICBzdHlsZVByb3BlcnR5OiAnYW5pbWF0aW9uJyxcbiAgfSxcbiAgJ2FuaW1hdGlvbmVuZCc6IHtcbiAgICBub1ByZWZpeDogJ2FuaW1hdGlvbmVuZCcsXG4gICAgd2Via2l0UHJlZml4OiAnd2Via2l0QW5pbWF0aW9uRW5kJyxcbiAgICBzdHlsZVByb3BlcnR5OiAnYW5pbWF0aW9uJyxcbiAgfSxcbiAgJ2FuaW1hdGlvbml0ZXJhdGlvbic6IHtcbiAgICBub1ByZWZpeDogJ2FuaW1hdGlvbml0ZXJhdGlvbicsXG4gICAgd2Via2l0UHJlZml4OiAnd2Via2l0QW5pbWF0aW9uSXRlcmF0aW9uJyxcbiAgICBzdHlsZVByb3BlcnR5OiAnYW5pbWF0aW9uJyxcbiAgfSxcbiAgJ3RyYW5zaXRpb25lbmQnOiB7XG4gICAgbm9QcmVmaXg6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICB3ZWJraXRQcmVmaXg6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICBzdHlsZVByb3BlcnR5OiAndHJhbnNpdGlvbicsXG4gIH0sXG59O1xuXG4vKiogQGNvbnN0IHtPYmplY3Q8c3RyaW5nLCAhVmVuZG9yUHJvcGVydHlNYXBUeXBlPn0gKi9cbmNvbnN0IGNzc1Byb3BlcnR5TWFwID0ge1xuICAnYW5pbWF0aW9uJzoge1xuICAgIG5vUHJlZml4OiAnYW5pbWF0aW9uJyxcbiAgICB3ZWJraXRQcmVmaXg6ICctd2Via2l0LWFuaW1hdGlvbicsXG4gIH0sXG4gICd0cmFuc2Zvcm0nOiB7XG4gICAgbm9QcmVmaXg6ICd0cmFuc2Zvcm0nLFxuICAgIHdlYmtpdFByZWZpeDogJy13ZWJraXQtdHJhbnNmb3JtJyxcbiAgfSxcbiAgJ3RyYW5zaXRpb24nOiB7XG4gICAgbm9QcmVmaXg6ICd0cmFuc2l0aW9uJyxcbiAgICB3ZWJraXRQcmVmaXg6ICctd2Via2l0LXRyYW5zaXRpb24nLFxuICB9LFxufTtcblxuLyoqXG4gKiBAcGFyYW0geyFPYmplY3R9IHdpbmRvd09ialxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaGFzUHJvcGVyU2hhcGUod2luZG93T2JqKSB7XG4gIHJldHVybiAod2luZG93T2JqWydkb2N1bWVudCddICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvd09ialsnZG9jdW1lbnQnXVsnY3JlYXRlRWxlbWVudCddID09PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBldmVudEZvdW5kSW5NYXBzKGV2ZW50VHlwZSkge1xuICByZXR1cm4gKGV2ZW50VHlwZSBpbiBldmVudFR5cGVNYXAgfHwgZXZlbnRUeXBlIGluIGNzc1Byb3BlcnR5TWFwKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCAhVmVuZG9yUHJvcGVydHlNYXBUeXBlPn0gbWFwXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRKYXZhU2NyaXB0RXZlbnROYW1lKGV2ZW50VHlwZSwgbWFwLCBlbCkge1xuICByZXR1cm4gbWFwW2V2ZW50VHlwZV0uc3R5bGVQcm9wZXJ0eSBpbiBlbC5zdHlsZSA/IG1hcFtldmVudFR5cGVdLm5vUHJlZml4IDogbWFwW2V2ZW50VHlwZV0ud2Via2l0UHJlZml4O1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBkZXRlcm1pbmUgYnJvd3NlciBwcmVmaXggZm9yIENTUzMgYW5pbWF0aW9uIGV2ZW50c1xuICogYW5kIHByb3BlcnR5IG5hbWVzLlxuICogQHBhcmFtIHshT2JqZWN0fSB3aW5kb3dPYmpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0QW5pbWF0aW9uTmFtZSh3aW5kb3dPYmosIGV2ZW50VHlwZSkge1xuICBpZiAoIWhhc1Byb3BlclNoYXBlKHdpbmRvd09iaikgfHwgIWV2ZW50Rm91bmRJbk1hcHMoZXZlbnRUeXBlKSkge1xuICAgIHJldHVybiBldmVudFR5cGU7XG4gIH1cblxuICBjb25zdCBtYXAgPSAvKiogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCAhVmVuZG9yUHJvcGVydHlNYXBUeXBlPn0gKi8gKFxuICAgIGV2ZW50VHlwZSBpbiBldmVudFR5cGVNYXAgPyBldmVudFR5cGVNYXAgOiBjc3NQcm9wZXJ0eU1hcFxuICApO1xuICBjb25zdCBlbCA9IHdpbmRvd09ialsnZG9jdW1lbnQnXVsnY3JlYXRlRWxlbWVudCddKCdkaXYnKTtcbiAgbGV0IGV2ZW50TmFtZSA9ICcnO1xuXG4gIGlmIChtYXAgPT09IGV2ZW50VHlwZU1hcCkge1xuICAgIGV2ZW50TmFtZSA9IGdldEphdmFTY3JpcHRFdmVudE5hbWUoZXZlbnRUeXBlLCBtYXAsIGVsKTtcbiAgfSBlbHNlIHtcbiAgICBldmVudE5hbWUgPSBtYXBbZXZlbnRUeXBlXS5ub1ByZWZpeCBpbiBlbC5zdHlsZSA/IG1hcFtldmVudFR5cGVdLm5vUHJlZml4IDogbWFwW2V2ZW50VHlwZV0ud2Via2l0UHJlZml4O1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50TmFtZTtcbn1cblxuLy8gUHVibGljIGZ1bmN0aW9ucyB0byBhY2Nlc3MgZ2V0QW5pbWF0aW9uTmFtZSgpIGZvciBKYXZhU2NyaXB0IGV2ZW50cyBvciBDU1Ncbi8vIHByb3BlcnR5IG5hbWVzLlxuXG5jb25zdCB0cmFuc2Zvcm1TdHlsZVByb3BlcnRpZXMgPSBbJ3RyYW5zZm9ybScsICdXZWJraXRUcmFuc2Zvcm0nLCAnTW96VHJhbnNmb3JtJywgJ09UcmFuc2Zvcm0nLCAnTVNUcmFuc2Zvcm0nXTtcblxuLyoqXG4gKiBAcGFyYW0geyFPYmplY3R9IHdpbmRvd09ialxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRDb3JyZWN0RXZlbnROYW1lKHdpbmRvd09iaiwgZXZlbnRUeXBlKSB7XG4gIHJldHVybiBnZXRBbmltYXRpb25OYW1lKHdpbmRvd09iaiwgZXZlbnRUeXBlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFPYmplY3R9IHdpbmRvd09ialxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRDb3JyZWN0UHJvcGVydHlOYW1lKHdpbmRvd09iaiwgZXZlbnRUeXBlKSB7XG4gIHJldHVybiBnZXRBbmltYXRpb25OYW1lKHdpbmRvd09iaiwgZXZlbnRUeXBlKTtcbn1cblxuZXhwb3J0IHt0cmFuc2Zvcm1TdHlsZVByb3BlcnRpZXMsIGdldENvcnJlY3RFdmVudE5hbWUsIGdldENvcnJlY3RQcm9wZXJ0eU5hbWV9O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBNRENGb3VuZGF0aW9uIGZyb20gJy4vZm91bmRhdGlvbic7XG5cbi8qKlxuICogQHRlbXBsYXRlIEZcbiAqL1xuY2xhc3MgTURDQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IHJvb3RcbiAgICogQHJldHVybiB7IU1EQ0NvbXBvbmVudH1cbiAgICovXG4gIHN0YXRpYyBhdHRhY2hUbyhyb290KSB7XG4gICAgLy8gU3ViY2xhc3NlcyB3aGljaCBleHRlbmQgTURDQmFzZSBzaG91bGQgcHJvdmlkZSBhbiBhdHRhY2hUbygpIG1ldGhvZCB0aGF0IHRha2VzIGEgcm9vdCBlbGVtZW50IGFuZFxuICAgIC8vIHJldHVybnMgYW4gaW5zdGFudGlhdGVkIGNvbXBvbmVudCB3aXRoIGl0cyByb290IHNldCB0byB0aGF0IGVsZW1lbnQuIEFsc28gbm90ZSB0aGF0IGluIHRoZSBjYXNlcyBvZlxuICAgIC8vIHN1YmNsYXNzZXMsIGFuIGV4cGxpY2l0IGZvdW5kYXRpb24gY2xhc3Mgd2lsbCBub3QgaGF2ZSB0byBiZSBwYXNzZWQgaW47IGl0IHdpbGwgc2ltcGx5IGJlIGluaXRpYWxpemVkXG4gICAgLy8gZnJvbSBnZXREZWZhdWx0Rm91bmRhdGlvbigpLlxuICAgIHJldHVybiBuZXcgTURDQ29tcG9uZW50KHJvb3QsIG5ldyBNRENGb3VuZGF0aW9uKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IHJvb3RcbiAgICogQHBhcmFtIHtGPX0gZm91bmRhdGlvblxuICAgKiBAcGFyYW0gey4uLj99IGFyZ3NcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJvb3QsIGZvdW5kYXRpb24gPSB1bmRlZmluZWQsIC4uLmFyZ3MpIHtcbiAgICAvKiogQHByb3RlY3RlZCB7IUVsZW1lbnR9ICovXG4gICAgdGhpcy5yb290XyA9IHJvb3Q7XG4gICAgdGhpcy5pbml0aWFsaXplKC4uLmFyZ3MpO1xuICAgIC8vIE5vdGUgdGhhdCB3ZSBpbml0aWFsaXplIGZvdW5kYXRpb24gaGVyZSBhbmQgbm90IHdpdGhpbiB0aGUgY29uc3RydWN0b3IncyBkZWZhdWx0IHBhcmFtIHNvIHRoYXRcbiAgICAvLyB0aGlzLnJvb3RfIGlzIGRlZmluZWQgYW5kIGNhbiBiZSB1c2VkIHdpdGhpbiB0aGUgZm91bmRhdGlvbiBjbGFzcy5cbiAgICAvKiogQHByb3RlY3RlZCB7IUZ9ICovXG4gICAgdGhpcy5mb3VuZGF0aW9uXyA9IGZvdW5kYXRpb24gPT09IHVuZGVmaW5lZCA/IHRoaXMuZ2V0RGVmYXVsdEZvdW5kYXRpb24oKSA6IGZvdW5kYXRpb247XG4gICAgdGhpcy5mb3VuZGF0aW9uXy5pbml0KCk7XG4gICAgdGhpcy5pbml0aWFsU3luY1dpdGhET00oKTtcbiAgfVxuXG4gIGluaXRpYWxpemUoLyogLi4uYXJncyAqLykge1xuICAgIC8vIFN1YmNsYXNzZXMgY2FuIG92ZXJyaWRlIHRoaXMgdG8gZG8gYW55IGFkZGl0aW9uYWwgc2V0dXAgd29yayB0aGF0IHdvdWxkIGJlIGNvbnNpZGVyZWQgcGFydCBvZiBhXG4gICAgLy8gXCJjb25zdHJ1Y3RvclwiLiBFc3NlbnRpYWxseSwgaXQgaXMgYSBob29rIGludG8gdGhlIHBhcmVudCBjb25zdHJ1Y3RvciBiZWZvcmUgdGhlIGZvdW5kYXRpb24gaXNcbiAgICAvLyBpbml0aWFsaXplZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGJlc2lkZXMgcm9vdCBhbmQgZm91bmRhdGlvbiB3aWxsIGJlIHBhc3NlZCBpbiBoZXJlLlxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFGfSBmb3VuZGF0aW9uXG4gICAqL1xuICBnZXREZWZhdWx0Rm91bmRhdGlvbigpIHtcbiAgICAvLyBTdWJjbGFzc2VzIG11c3Qgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcmV0dXJuIGEgcHJvcGVybHkgY29uZmlndXJlZCBmb3VuZGF0aW9uIGNsYXNzIGZvciB0aGVcbiAgICAvLyBjb21wb25lbnQuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdTdWJjbGFzc2VzIG11c3Qgb3ZlcnJpZGUgZ2V0RGVmYXVsdEZvdW5kYXRpb24gdG8gcmV0dXJuIGEgcHJvcGVybHkgY29uZmlndXJlZCAnICtcbiAgICAgICdmb3VuZGF0aW9uIGNsYXNzJyk7XG4gIH1cblxuICBpbml0aWFsU3luY1dpdGhET00oKSB7XG4gICAgLy8gU3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGUgdGhpcyBtZXRob2QgaWYgdGhleSBuZWVkIHRvIHBlcmZvcm0gd29yayB0byBzeW5jaHJvbml6ZSB3aXRoIGEgaG9zdCBET01cbiAgICAvLyBvYmplY3QuIEFuIGV4YW1wbGUgb2YgdGhpcyB3b3VsZCBiZSBhIGZvcm0gY29udHJvbCB3cmFwcGVyIHRoYXQgbmVlZHMgdG8gc3luY2hyb25pemUgaXRzIGludGVybmFsIHN0YXRlXG4gICAgLy8gdG8gc29tZSBwcm9wZXJ0eSBvciBhdHRyaWJ1dGUgb2YgdGhlIGhvc3QgRE9NLiBQbGVhc2Ugbm90ZTogdGhpcyBpcyAqbm90KiB0aGUgcGxhY2UgdG8gcGVyZm9ybSBET01cbiAgICAvLyByZWFkcy93cml0ZXMgdGhhdCB3b3VsZCBjYXVzZSBsYXlvdXQgLyBwYWludCwgYXMgdGhpcyBpcyBjYWxsZWQgc3luY2hyb25vdXNseSBmcm9tIHdpdGhpbiB0aGUgY29uc3RydWN0b3IuXG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIC8vIFN1YmNsYXNzZXMgbWF5IGltcGxlbWVudCB0aGlzIG1ldGhvZCB0byByZWxlYXNlIGFueSByZXNvdXJjZXMgLyBkZXJlZ2lzdGVyIGFueSBsaXN0ZW5lcnMgdGhleSBoYXZlXG4gICAgLy8gYXR0YWNoZWQuIEFuIGV4YW1wbGUgb2YgdGhpcyBtaWdodCBiZSBkZXJlZ2lzdGVyaW5nIGEgcmVzaXplIGV2ZW50IGZyb20gdGhlIHdpbmRvdyBvYmplY3QuXG4gICAgdGhpcy5mb3VuZGF0aW9uXy5kZXN0cm95KCk7XG4gIH1cblxuICAvKipcbiAgICogV3JhcHBlciBtZXRob2QgdG8gYWRkIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBjb21wb25lbnQncyByb290IGVsZW1lbnQuIFRoaXMgaXMgbW9zdCB1c2VmdWwgd2hlblxuICAgKiBsaXN0ZW5pbmcgZm9yIGN1c3RvbSBldmVudHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldnRUeXBlXG4gICAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBoYW5kbGVyXG4gICAqL1xuICBsaXN0ZW4oZXZ0VHlwZSwgaGFuZGxlcikge1xuICAgIHRoaXMucm9vdF8uYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcmFwcGVyIG1ldGhvZCB0byByZW1vdmUgYW4gZXZlbnQgbGlzdGVuZXIgdG8gdGhlIGNvbXBvbmVudCdzIHJvb3QgZWxlbWVudC4gVGhpcyBpcyBtb3N0IHVzZWZ1bCB3aGVuXG4gICAqIHVubGlzdGVuaW5nIGZvciBjdXN0b20gZXZlbnRzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZ0VHlwZVxuICAgKiBAcGFyYW0geyFGdW5jdGlvbn0gaGFuZGxlclxuICAgKi9cbiAgdW5saXN0ZW4oZXZ0VHlwZSwgaGFuZGxlcikge1xuICAgIHRoaXMucm9vdF8ucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyBhIGNyb3NzLWJyb3dzZXItY29tcGF0aWJsZSBjdXN0b20gZXZlbnQgZnJvbSB0aGUgY29tcG9uZW50IHJvb3Qgb2YgdGhlIGdpdmVuIHR5cGUsXG4gICAqIHdpdGggdGhlIGdpdmVuIGRhdGEuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldnRUeXBlXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gZXZ0RGF0YVxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBzaG91bGRCdWJibGVcbiAgICovXG4gIGVtaXQoZXZ0VHlwZSwgZXZ0RGF0YSwgc2hvdWxkQnViYmxlID0gZmFsc2UpIHtcbiAgICBsZXQgZXZ0O1xuICAgIGlmICh0eXBlb2YgQ3VzdG9tRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGV2dCA9IG5ldyBDdXN0b21FdmVudChldnRUeXBlLCB7XG4gICAgICAgIGRldGFpbDogZXZ0RGF0YSxcbiAgICAgICAgYnViYmxlczogc2hvdWxkQnViYmxlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldnRUeXBlLCBzaG91bGRCdWJibGUsIGZhbHNlLCBldnREYXRhKTtcbiAgICB9XG5cbiAgICB0aGlzLnJvb3RfLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNRENDb21wb25lbnQ7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBAdGVtcGxhdGUgQVxuICovXG5jbGFzcyBNRENGb3VuZGF0aW9uIHtcbiAgLyoqIEByZXR1cm4gZW51bXtjc3NDbGFzc2VzfSAqL1xuICBzdGF0aWMgZ2V0IGNzc0NsYXNzZXMoKSB7XG4gICAgLy8gQ2xhc3NlcyBleHRlbmRpbmcgTURDRm91bmRhdGlvbiBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kIHRvIHJldHVybiBhbiBvYmplY3Qgd2hpY2ggZXhwb3J0cyBldmVyeVxuICAgIC8vIENTUyBjbGFzcyB0aGUgZm91bmRhdGlvbiBjbGFzcyBuZWVkcyBhcyBhIHByb3BlcnR5LiBlLmcuIHtBQ1RJVkU6ICdtZGMtY29tcG9uZW50LS1hY3RpdmUnfVxuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJuIGVudW17c3RyaW5nc30gKi9cbiAgc3RhdGljIGdldCBzdHJpbmdzKCkge1xuICAgIC8vIENsYXNzZXMgZXh0ZW5kaW5nIE1EQ0ZvdW5kYXRpb24gc2hvdWxkIGltcGxlbWVudCB0aGlzIG1ldGhvZCB0byByZXR1cm4gYW4gb2JqZWN0IHdoaWNoIGV4cG9ydHMgYWxsXG4gICAgLy8gc2VtYW50aWMgc3RyaW5ncyBhcyBjb25zdGFudHMuIGUuZy4ge0FSSUFfUk9MRTogJ3RhYmxpc3QnfVxuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJuIGVudW17bnVtYmVyc30gKi9cbiAgc3RhdGljIGdldCBudW1iZXJzKCkge1xuICAgIC8vIENsYXNzZXMgZXh0ZW5kaW5nIE1EQ0ZvdW5kYXRpb24gc2hvdWxkIGltcGxlbWVudCB0aGlzIG1ldGhvZCB0byByZXR1cm4gYW4gb2JqZWN0IHdoaWNoIGV4cG9ydHMgYWxsXG4gICAgLy8gb2YgaXRzIHNlbWFudGljIG51bWJlcnMgYXMgY29uc3RhbnRzLiBlLmcuIHtBTklNQVRJT05fREVMQVlfTVM6IDM1MH1cbiAgICByZXR1cm4ge307XG4gIH1cblxuICAvKiogQHJldHVybiB7IU9iamVjdH0gKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0QWRhcHRlcigpIHtcbiAgICAvLyBDbGFzc2VzIGV4dGVuZGluZyBNRENGb3VuZGF0aW9uIG1heSBjaG9vc2UgdG8gaW1wbGVtZW50IHRoaXMgZ2V0dGVyIGluIG9yZGVyIHRvIHByb3ZpZGUgYSBjb252ZW5pZW50XG4gICAgLy8gd2F5IG9mIHZpZXdpbmcgdGhlIG5lY2Vzc2FyeSBtZXRob2RzIG9mIGFuIGFkYXB0ZXIuIEluIHRoZSBmdXR1cmUsIHRoaXMgY291bGQgYWxzbyBiZSB1c2VkIGZvciBhZGFwdGVyXG4gICAgLy8gdmFsaWRhdGlvbi5cbiAgICByZXR1cm4ge307XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBPX0gYWRhcHRlclxuICAgKi9cbiAgY29uc3RydWN0b3IoYWRhcHRlciA9IHt9KSB7XG4gICAgLyoqIEBwcm90ZWN0ZWQgeyFBfSAqL1xuICAgIHRoaXMuYWRhcHRlcl8gPSBhZGFwdGVyO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICAvLyBTdWJjbGFzc2VzIHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwZXJmb3JtIGluaXRpYWxpemF0aW9uIHJvdXRpbmVzIChyZWdpc3RlcmluZyBldmVudHMsIGV0Yy4pXG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIC8vIFN1YmNsYXNzZXMgc2hvdWxkIG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIHBlcmZvcm0gZGUtaW5pdGlhbGl6YXRpb24gcm91dGluZXMgKGRlLXJlZ2lzdGVyaW5nIGV2ZW50cywgZXRjLilcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNRENGb3VuZGF0aW9uO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBNRENGb3VuZGF0aW9uIGZyb20gJy4vZm91bmRhdGlvbic7XG5pbXBvcnQgTURDQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcblxuZXhwb3J0IHtNRENGb3VuZGF0aW9uLCBNRENDb21wb25lbnR9O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogWzIsIHtcImFyZ3NcIjogXCJub25lXCJ9XSAqL1xuXG4vKipcbiAqIEFkYXB0ZXIgZm9yIE1EQyBNZW51LiBQcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIG1hbmFnaW5nXG4gKiAtIGNsYXNzZXNcbiAqIC0gZG9tXG4gKiAtIGZvY3VzXG4gKiAtIHBvc2l0aW9uXG4gKiAtIGRpbWVuc2lvbnNcbiAqIC0gZXZlbnQgaGFuZGxlcnNcbiAqXG4gKiBBZGRpdGlvbmFsbHksIHByb3ZpZGVzIHR5cGUgaW5mb3JtYXRpb24gZm9yIHRoZSBhZGFwdGVyIHRvIHRoZSBDbG9zdXJlXG4gKiBjb21waWxlci5cbiAqXG4gKiBJbXBsZW1lbnQgdGhpcyBhZGFwdGVyIGZvciB5b3VyIGZyYW1ld29yayBvZiBjaG9pY2UgdG8gZGVsZWdhdGUgdXBkYXRlcyB0b1xuICogdGhlIGNvbXBvbmVudCBpbiB5b3VyIGZyYW1ld29yayBvZiBjaG9pY2UuIFNlZSBhcmNoaXRlY3R1cmUgZG9jdW1lbnRhdGlvblxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvbWFzdGVyL2RvY3MvY29kZS9hcmNoaXRlY3R1cmUubWRcbiAqXG4gKiBAcmVjb3JkXG4gKi9cbmNsYXNzIE1EQ01lbnVBZGFwdGVyIHtcbiAgLyoqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgKi9cbiAgYWRkQ2xhc3MoY2xhc3NOYW1lKSB7fVxuXG4gIC8qKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lICovXG4gIHJlbW92ZUNsYXNzKGNsYXNzTmFtZSkge31cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaGFzQ2xhc3MoY2xhc3NOYW1lKSB7fVxuXG4gIC8qKiBAcmV0dXJuIHtib29sZWFufSAqL1xuICBoYXNOZWNlc3NhcnlEb20oKSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSB0YXJnZXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZU5hbWVcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0QXR0cmlidXRlRm9yRXZlbnRUYXJnZXQodGFyZ2V0LCBhdHRyaWJ1dGVOYW1lKSB7fVxuXG4gIC8qKiBAcmV0dXJuIHt7IHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyIH19ICovXG4gIGdldElubmVyRGltZW5zaW9ucygpIHt9XG5cbiAgLyoqIEByZXR1cm4ge2Jvb2xlYW59ICovXG4gIGhhc0FuY2hvcigpIHt9XG5cbiAgLyoqIEByZXR1cm4ge3t3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgdG9wOiBudW1iZXIsIHJpZ2h0OiBudW1iZXIsIGJvdHRvbTogbnVtYmVyLCBsZWZ0OiBudW1iZXJ9fSAqL1xuICBnZXRBbmNob3JEaW1lbnNpb25zKCkge31cblxuICAvKiogQHJldHVybiB7eyB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9fSAqL1xuICBnZXRXaW5kb3dEaW1lbnNpb25zKCkge31cblxuICAvKiogQHJldHVybiB7bnVtYmVyfSAqL1xuICBnZXROdW1iZXJPZkl0ZW1zKCkge31cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogQHBhcmFtIHtmdW5jdGlvbighRXZlbnQpfSBoYW5kbGVyXG4gICAqL1xuICByZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcih0eXBlLCBoYW5kbGVyKSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFFdmVudCl9IGhhbmRsZXJcbiAgICovXG4gIGRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIodHlwZSwgaGFuZGxlcikge31cblxuICAvKiogQHBhcmFtIHtmdW5jdGlvbighRXZlbnQpfSBoYW5kbGVyICovXG4gIHJlZ2lzdGVyQm9keUNsaWNrSGFuZGxlcihoYW5kbGVyKSB7fVxuXG4gIC8qKiBAcGFyYW0ge2Z1bmN0aW9uKCFFdmVudCl9IGhhbmRsZXIgKi9cbiAgZGVyZWdpc3RlckJvZHlDbGlja0hhbmRsZXIoaGFuZGxlcikge31cblxuICAvKipcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldEluZGV4Rm9yRXZlbnRUYXJnZXQodGFyZ2V0KSB7fVxuXG4gIC8qKiBAcGFyYW0ge3tpbmRleDogbnVtYmVyfX0gZXZ0RGF0YSAqL1xuICBub3RpZnlTZWxlY3RlZChldnREYXRhKSB7fVxuXG4gIG5vdGlmeUNhbmNlbCgpIHt9XG5cbiAgc2F2ZUZvY3VzKCkge31cblxuICByZXN0b3JlRm9jdXMoKSB7fVxuXG4gIC8qKiBAcmV0dXJuIHtib29sZWFufSAqL1xuICBpc0ZvY3VzZWQoKSB7fVxuXG4gIGZvY3VzKCkge31cblxuICAvKiogQHJldHVybiB7bnVtYmVyfSAqL1xuICBnZXRGb2N1c2VkSXRlbUluZGV4KCkgLyogbnVtYmVyICovIHt9XG5cbiAgLyoqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAqL1xuICBmb2N1c0l0ZW1BdEluZGV4KGluZGV4KSB7fVxuXG4gIC8qKiBAcmV0dXJuIHtib29sZWFufSAqL1xuICBpc1J0bCgpIHt9XG5cbiAgLyoqIEBwYXJhbSB7c3RyaW5nfSBvcmlnaW4gKi9cbiAgc2V0VHJhbnNmb3JtT3JpZ2luKG9yaWdpbikge31cblxuICAvKiogQHBhcmFtIHt7XG4gICogICB0b3A6IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAgKiAgIHJpZ2h0OiAoc3RyaW5nfHVuZGVmaW5lZCksXG4gICogICBib3R0b206IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAgKiAgIGxlZnQ6IChzdHJpbmd8dW5kZWZpbmVkKVxuICAqIH19IHBvc2l0aW9uICovXG4gIHNldFBvc2l0aW9uKHBvc2l0aW9uKSB7fVxuXG4gIC8qKiBAcGFyYW0ge3N0cmluZ30gaGVpZ2h0ICovXG4gIHNldE1heEhlaWdodChoZWlnaHQpIHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0clxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICovXG4gIHNldEF0dHJGb3JPcHRpb25BdEluZGV4KGluZGV4LCBhdHRyLCB2YWx1ZSkge31cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyXG4gICAqL1xuICBybUF0dHJGb3JPcHRpb25BdEluZGV4KGluZGV4LCBhdHRyKSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZVxuICAgKi9cbiAgYWRkQ2xhc3NGb3JPcHRpb25BdEluZGV4KGluZGV4LCBjbGFzc05hbWUpIHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lXG4gICAqL1xuICBybUNsYXNzRm9yT3B0aW9uQXRJbmRleChpbmRleCwgY2xhc3NOYW1lKSB7fVxufVxuXG5leHBvcnQge01EQ01lbnVBZGFwdGVyfTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiogQGVudW0ge3N0cmluZ30gKi9cbmNvbnN0IGNzc0NsYXNzZXMgPSB7XG4gIFJPT1Q6ICdtZGMtbWVudScsXG4gIE9QRU46ICdtZGMtbWVudS0tb3BlbicsXG4gIEFOSU1BVElOR19PUEVOOiAnbWRjLW1lbnUtLWFuaW1hdGluZy1vcGVuJyxcbiAgQU5JTUFUSU5HX0NMT1NFRDogJ21kYy1tZW51LS1hbmltYXRpbmctY2xvc2VkJyxcbiAgU0VMRUNURURfTElTVF9JVEVNOiAnbWRjLWxpc3QtaXRlbS0tc2VsZWN0ZWQnLFxufTtcblxuLyoqIEBlbnVtIHtzdHJpbmd9ICovXG5jb25zdCBzdHJpbmdzID0ge1xuICBJVEVNU19TRUxFQ1RPUjogJy5tZGMtbWVudV9faXRlbXMnLFxuICBTRUxFQ1RFRF9FVkVOVDogJ01EQ01lbnU6c2VsZWN0ZWQnLFxuICBDQU5DRUxfRVZFTlQ6ICdNRENNZW51OmNhbmNlbCcsXG4gIEFSSUFfRElTQUJMRURfQVRUUjogJ2FyaWEtZGlzYWJsZWQnLFxufTtcblxuLyoqIEBlbnVtIHtudW1iZXJ9ICovXG5jb25zdCBudW1iZXJzID0ge1xuICAvLyBBbW91bnQgb2YgdGltZSB0byB3YWl0IGJlZm9yZSB0cmlnZ2VyaW5nIGEgc2VsZWN0ZWQgZXZlbnQgb24gdGhlIG1lbnUuIE5vdGUgdGhhdCB0aGlzIHRpbWVcbiAgLy8gd2lsbCBtb3N0IGxpa2VseSBiZSBidW1wZWQgdXAgb25jZSBpbnRlcmFjdGl2ZSBsaXN0cyBhcmUgc3VwcG9ydGVkIHRvIGFsbG93IGZvciB0aGUgcmlwcGxlIHRvXG4gIC8vIGFuaW1hdGUgYmVmb3JlIGNsb3NpbmcgdGhlIG1lbnVcbiAgU0VMRUNURURfVFJJR0dFUl9ERUxBWTogNTAsXG4gIC8vIFRvdGFsIGR1cmF0aW9uIG9mIG1lbnUgb3BlbiBhbmltYXRpb24uXG4gIFRSQU5TSVRJT05fT1BFTl9EVVJBVElPTjogMTIwLFxuICAvLyBUb3RhbCBkdXJhdGlvbiBvZiBtZW51IGNsb3NlIGFuaW1hdGlvbi5cbiAgVFJBTlNJVElPTl9DTE9TRV9EVVJBVElPTjogNzUsXG4gIC8vIE1hcmdpbiBsZWZ0IHRvIHRoZSBlZGdlIG9mIHRoZSB2aWV3cG9ydCB3aGVuIG1lbnUgaXMgYXQgbWF4aW11bSBwb3NzaWJsZSBoZWlnaHQuXG4gIE1BUkdJTl9UT19FREdFOiAzMixcbiAgLy8gUmF0aW8gb2YgYW5jaG9yIHdpZHRoIHRvIG1lbnUgd2lkdGggZm9yIHN3aXRjaGluZyBmcm9tIGNvcm5lciBwb3NpdGlvbmluZyB0byBjZW50ZXIgcG9zaXRpb25pbmcuXG4gIEFOQ0hPUl9UT19NRU5VX1dJRFRIX1JBVElPOiAwLjY3LFxuICAvLyBSYXRpbyBvZiB2ZXJ0aWNhbCBvZmZzZXQgdG8gbWVudSBoZWlnaHQgZm9yIHN3aXRjaGluZyBmcm9tIGNvcm5lciB0byBtaWQtd2F5IG9yaWdpbiBwb3NpdGlvbmluZy5cbiAgT0ZGU0VUX1RPX01FTlVfSEVJR0hUX1JBVElPOiAwLjEsXG59O1xuXG4vKipcbiAqIEVudW0gZm9yIGJpdHMgaW4gdGhlIHtAc2VlIENvcm5lcikgYml0bWFwLlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuY29uc3QgQ29ybmVyQml0ID0ge1xuICBCT1RUT006IDEsXG4gIENFTlRFUjogMixcbiAgUklHSFQ6IDQsXG4gIEZMSVBfUlRMOiA4LFxufTtcblxuLyoqXG4gKiBFbnVtIGZvciByZXByZXNlbnRpbmcgYW4gZWxlbWVudCBjb3JuZXIgZm9yIHBvc2l0aW9uaW5nIHRoZSBtZW51LlxuICpcbiAqIFRoZSBTVEFSVCBjb25zdGFudHMgbWFwIHRvIExFRlQgaWYgZWxlbWVudCBkaXJlY3Rpb25hbGl0eSBpcyBsZWZ0XG4gKiB0byByaWdodCBhbmQgUklHSFQgaWYgdGhlIGRpcmVjdGlvbmFsaXR5IGlzIHJpZ2h0IHRvIGxlZnQuXG4gKiBMaWtld2lzZSBFTkQgbWFwcyB0byBSSUdIVCBvciBMRUZUIGRlcGVuZGluZyBvbiB0aGUgZGlyZWN0aW9uYWxpdHkuXG4gKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuY29uc3QgQ29ybmVyID0ge1xuICBUT1BfTEVGVDogMCxcbiAgVE9QX1JJR0hUOiBDb3JuZXJCaXQuUklHSFQsXG4gIEJPVFRPTV9MRUZUOiBDb3JuZXJCaXQuQk9UVE9NLFxuICBCT1RUT01fUklHSFQ6IENvcm5lckJpdC5CT1RUT00gfCBDb3JuZXJCaXQuUklHSFQsXG4gIFRPUF9TVEFSVDogQ29ybmVyQml0LkZMSVBfUlRMLFxuICBUT1BfRU5EOiBDb3JuZXJCaXQuRkxJUF9SVEwgfCBDb3JuZXJCaXQuUklHSFQsXG4gIEJPVFRPTV9TVEFSVDogQ29ybmVyQml0LkJPVFRPTSB8IENvcm5lckJpdC5GTElQX1JUTCxcbiAgQk9UVE9NX0VORDogQ29ybmVyQml0LkJPVFRPTSB8IENvcm5lckJpdC5SSUdIVCB8IENvcm5lckJpdC5GTElQX1JUTCxcbn07XG5cblxuZXhwb3J0IHtjc3NDbGFzc2VzLCBzdHJpbmdzLCBudW1iZXJzLCBDb3JuZXJCaXQsIENvcm5lcn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICB0b3A6IG51bWJlcixcbiAqICAgcmlnaHQ6IG51bWJlcixcbiAqICAgYm90dG9tOiBudW1iZXIsXG4gKiAgIGxlZnQ6IG51bWJlclxuICogfX1cbiAqL1xubGV0IEFuY2hvck1hcmdpbjtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgdmlld3BvcnQ6IHsgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfSxcbiAqICAgdmlld3BvcnREaXN0YW5jZToge3RvcDogbnVtYmVyLCByaWdodDogbnVtYmVyLCBib3R0b206IG51bWJlciwgbGVmdDogbnVtYmVyfSxcbiAqICAgYW5jaG9ySGVpZ2h0OiBudW1iZXIsXG4gKiAgIGFuY2hvcldpZHRoOiBudW1iZXIsXG4gKiAgIG1lbnVIZWlnaHQ6IG51bWJlcixcbiAqICAgbWVudVdpZHRoOiBudW1iZXIsXG4gKiB9fVxuICovXG5sZXQgQXV0b0xheW91dE1lYXN1cmVtZW50cztcbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuaW1wb3J0IE1EQ0ZvdW5kYXRpb24gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbic7XG5pbXBvcnQge01EQ01lbnVBZGFwdGVyfSBmcm9tICcuL2FkYXB0ZXInO1xuaW1wb3J0IHtjc3NDbGFzc2VzLCBzdHJpbmdzLCBudW1iZXJzLCBDb3JuZXIsIENvcm5lckJpdH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG4vKipcbiAqIEBleHRlbmRzIHtNRENGb3VuZGF0aW9uPCFNRENNZW51QWRhcHRlcj59XG4gKi9cbmNsYXNzIE1EQ01lbnVGb3VuZGF0aW9uIGV4dGVuZHMgTURDRm91bmRhdGlvbiB7XG4gIC8qKiBAcmV0dXJuIGVudW17Y3NzQ2xhc3Nlc30gKi9cbiAgc3RhdGljIGdldCBjc3NDbGFzc2VzKCkge1xuICAgIHJldHVybiBjc3NDbGFzc2VzO1xuICB9XG5cbiAgLyoqIEByZXR1cm4gZW51bXtzdHJpbmdzfSAqL1xuICBzdGF0aWMgZ2V0IHN0cmluZ3MoKSB7XG4gICAgcmV0dXJuIHN0cmluZ3M7XG4gIH1cblxuICAvKiogQHJldHVybiBlbnVte251bWJlcnN9ICovXG4gIHN0YXRpYyBnZXQgbnVtYmVycygpIHtcbiAgICByZXR1cm4gbnVtYmVycztcbiAgfVxuXG4gIC8qKiBAcmV0dXJuIGVudW17bnVtYmVyfSAqL1xuICBzdGF0aWMgZ2V0IENvcm5lcigpIHtcbiAgICByZXR1cm4gQ29ybmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIHtAc2VlIE1EQ01lbnVBZGFwdGVyfSBmb3IgdHlwaW5nIGluZm9ybWF0aW9uIG9uIHBhcmFtZXRlcnMgYW5kIHJldHVyblxuICAgKiB0eXBlcy5cbiAgICogQHJldHVybiB7IU1EQ01lbnVBZGFwdGVyfVxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0QWRhcHRlcigpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshTURDTWVudUFkYXB0ZXJ9ICovICh7XG4gICAgICBhZGRDbGFzczogKCkgPT4ge30sXG4gICAgICByZW1vdmVDbGFzczogKCkgPT4ge30sXG4gICAgICBoYXNDbGFzczogKCkgPT4gZmFsc2UsXG4gICAgICBoYXNOZWNlc3NhcnlEb206ICgpID0+IGZhbHNlLFxuICAgICAgZ2V0QXR0cmlidXRlRm9yRXZlbnRUYXJnZXQ6ICgpID0+IHt9LFxuICAgICAgZ2V0SW5uZXJEaW1lbnNpb25zOiAoKSA9PiAoe30pLFxuICAgICAgaGFzQW5jaG9yOiAoKSA9PiBmYWxzZSxcbiAgICAgIGdldEFuY2hvckRpbWVuc2lvbnM6ICgpID0+ICh7fSksXG4gICAgICBnZXRXaW5kb3dEaW1lbnNpb25zOiAoKSA9PiAoe30pLFxuICAgICAgZ2V0TnVtYmVyT2ZJdGVtczogKCkgPT4gMCxcbiAgICAgIHJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyOiAoKSA9PiB7fSxcbiAgICAgIGRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6ICgpID0+IHt9LFxuICAgICAgcmVnaXN0ZXJCb2R5Q2xpY2tIYW5kbGVyOiAoKSA9PiB7fSxcbiAgICAgIGRlcmVnaXN0ZXJCb2R5Q2xpY2tIYW5kbGVyOiAoKSA9PiB7fSxcbiAgICAgIGdldEluZGV4Rm9yRXZlbnRUYXJnZXQ6ICgpID0+IDAsXG4gICAgICBub3RpZnlTZWxlY3RlZDogKCkgPT4ge30sXG4gICAgICBub3RpZnlDYW5jZWw6ICgpID0+IHt9LFxuICAgICAgc2F2ZUZvY3VzOiAoKSA9PiB7fSxcbiAgICAgIHJlc3RvcmVGb2N1czogKCkgPT4ge30sXG4gICAgICBpc0ZvY3VzZWQ6ICgpID0+IGZhbHNlLFxuICAgICAgZm9jdXM6ICgpID0+IHt9LFxuICAgICAgZ2V0Rm9jdXNlZEl0ZW1JbmRleDogKCkgPT4gLTEsXG4gICAgICBmb2N1c0l0ZW1BdEluZGV4OiAoKSA9PiB7fSxcbiAgICAgIGlzUnRsOiAoKSA9PiBmYWxzZSxcbiAgICAgIHNldFRyYW5zZm9ybU9yaWdpbjogKCkgPT4ge30sXG4gICAgICBzZXRQb3NpdGlvbjogKCkgPT4ge30sXG4gICAgICBzZXRNYXhIZWlnaHQ6ICgpID0+IHt9LFxuICAgICAgc2V0QXR0ckZvck9wdGlvbkF0SW5kZXg6ICgpID0+IHt9LFxuICAgICAgcm1BdHRyRm9yT3B0aW9uQXRJbmRleDogKCkgPT4ge30sXG4gICAgICBhZGRDbGFzc0Zvck9wdGlvbkF0SW5kZXg6ICgpID0+IHt9LFxuICAgICAgcm1DbGFzc0Zvck9wdGlvbkF0SW5kZXg6ICgpID0+IHt9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBwYXJhbSB7IU1EQ01lbnVBZGFwdGVyfSBhZGFwdGVyICovXG4gIGNvbnN0cnVjdG9yKGFkYXB0ZXIpIHtcbiAgICBzdXBlcihPYmplY3QuYXNzaWduKE1EQ01lbnVGb3VuZGF0aW9uLmRlZmF1bHRBZGFwdGVyLCBhZGFwdGVyKSk7XG5cbiAgICAvKiogQHByaXZhdGUge2Z1bmN0aW9uKCFFdmVudCl9ICovXG4gICAgdGhpcy5jbGlja0hhbmRsZXJfID0gKGV2dCkgPT4gdGhpcy5oYW5kbGVQb3NzaWJsZVNlbGVjdGVkXyhldnQpO1xuICAgIC8qKiBAcHJpdmF0ZSB7ZnVuY3Rpb24oIUV2ZW50KX0gKi9cbiAgICB0aGlzLmtleWRvd25IYW5kbGVyXyA9IChldnQpID0+IHRoaXMuaGFuZGxlS2V5Ym9hcmREb3duXyhldnQpO1xuICAgIC8qKiBAcHJpdmF0ZSB7ZnVuY3Rpb24oIUV2ZW50KX0gKi9cbiAgICB0aGlzLmtleXVwSGFuZGxlcl8gPSAoZXZ0KSA9PiB0aGlzLmhhbmRsZUtleWJvYXJkVXBfKGV2dCk7XG4gICAgLyoqIEBwcml2YXRlIHtmdW5jdGlvbighRXZlbnQpfSAqL1xuICAgIHRoaXMuZG9jdW1lbnRDbGlja0hhbmRsZXJfID0gKGV2dCkgPT4gdGhpcy5oYW5kbGVEb2N1bWVudENsaWNrXyhldnQpO1xuICAgIC8qKiBAcHJpdmF0ZSB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLmlzT3Blbl8gPSBmYWxzZTtcbiAgICAvKiogQHByaXZhdGUge251bWJlcn0gKi9cbiAgICB0aGlzLm9wZW5BbmltYXRpb25FbmRUaW1lcklkXyA9IDA7XG4gICAgLyoqIEBwcml2YXRlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5jbG9zZUFuaW1hdGlvbkVuZFRpbWVySWRfID0gMDtcbiAgICAvKiogQHByaXZhdGUge251bWJlcn0gKi9cbiAgICB0aGlzLnNlbGVjdGVkVHJpZ2dlclRpbWVySWRfID0gMDtcbiAgICAvKiogQHByaXZhdGUge251bWJlcn0gKi9cbiAgICB0aGlzLmFuaW1hdGlvblJlcXVlc3RJZF8gPSAwO1xuICAgIC8qKiBAcHJpdmF0ZSB7IXsgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfX0gKi9cbiAgICB0aGlzLmRpbWVuc2lvbnNfO1xuICAgIC8qKiBAcHJpdmF0ZSB7bnVtYmVyfSAqL1xuICAgIHRoaXMuaXRlbUhlaWdodF87XG4gICAgLyoqIEBwcml2YXRlIHtDb3JuZXJ9ICovXG4gICAgdGhpcy5hbmNob3JDb3JuZXJfID0gQ29ybmVyLlRPUF9TVEFSVDtcbiAgICAvKiogQHByaXZhdGUge0FuY2hvck1hcmdpbn0gKi9cbiAgICB0aGlzLmFuY2hvck1hcmdpbl8gPSB7dG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwfTtcbiAgICAvKiogQHByaXZhdGUgez9BdXRvTGF5b3V0TWVhc3VyZW1lbnRzfSAqL1xuICAgIHRoaXMubWVhc3VyZXNfID0gbnVsbDtcbiAgICAvKiogQHByaXZhdGUge251bWJlcn0gKi9cbiAgICB0aGlzLnNlbGVjdGVkSW5kZXhfID0gLTE7XG4gICAgLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xuICAgIHRoaXMucmVtZW1iZXJTZWxlY3Rpb25fID0gZmFsc2U7XG4gICAgLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xuICAgIHRoaXMucXVpY2tPcGVuXyA9IGZhbHNlO1xuXG4gICAgLy8gQSBrZXl1cCBldmVudCBvbiB0aGUgbWVudSBuZWVkcyB0byBoYXZlIGEgY29ycmVzcG9uZGluZyBrZXlkb3duXG4gICAgLy8gZXZlbnQgb24gdGhlIG1lbnUuIElmIHRoZSB1c2VyIG9wZW5zIHRoZSBtZW51IHdpdGggYSBrZXlkb3duIGV2ZW50IG9uIGFcbiAgICAvLyBidXR0b24sIHRoZSBtZW51IHdpbGwgb25seSBnZXQgdGhlIGtleSB1cCBldmVudCBjYXVzaW5nIGJ1Z2d5IGJlaGF2aW9yIHdpdGggc2VsZWN0ZWQgZWxlbWVudHMuXG4gICAgLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xuICAgIHRoaXMua2V5RG93bldpdGhpbk1lbnVfID0gZmFsc2U7XG4gIH1cblxuICBpbml0KCkge1xuICAgIGNvbnN0IHtST09ULCBPUEVOfSA9IE1EQ01lbnVGb3VuZGF0aW9uLmNzc0NsYXNzZXM7XG5cbiAgICBpZiAoIXRoaXMuYWRhcHRlcl8uaGFzQ2xhc3MoUk9PVCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtST09UfSBjbGFzcyByZXF1aXJlZCBpbiByb290IGVsZW1lbnQuYCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmFkYXB0ZXJfLmhhc05lY2Vzc2FyeURvbSgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlcXVpcmVkIERPTSBub2RlcyBtaXNzaW5nIGluICR7Uk9PVH0gY29tcG9uZW50LmApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFkYXB0ZXJfLmhhc0NsYXNzKE9QRU4pKSB7XG4gICAgICB0aGlzLmlzT3Blbl8gPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuYWRhcHRlcl8ucmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoJ2NsaWNrJywgdGhpcy5jbGlja0hhbmRsZXJfKTtcbiAgICB0aGlzLmFkYXB0ZXJfLnJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdrZXl1cCcsIHRoaXMua2V5dXBIYW5kbGVyXyk7XG4gICAgdGhpcy5hZGFwdGVyXy5yZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcigna2V5ZG93bicsIHRoaXMua2V5ZG93bkhhbmRsZXJfKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuc2VsZWN0ZWRUcmlnZ2VyVGltZXJJZF8pO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLm9wZW5BbmltYXRpb25FbmRUaW1lcklkXyk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xvc2VBbmltYXRpb25FbmRUaW1lcklkXyk7XG4gICAgLy8gQ2FuY2VsIGFueSBjdXJyZW50bHkgcnVubmluZyBhbmltYXRpb25zLlxuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uUmVxdWVzdElkXyk7XG4gICAgdGhpcy5hZGFwdGVyXy5kZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdjbGljaycsIHRoaXMuY2xpY2tIYW5kbGVyXyk7XG4gICAgdGhpcy5hZGFwdGVyXy5kZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdrZXl1cCcsIHRoaXMua2V5dXBIYW5kbGVyXyk7XG4gICAgdGhpcy5hZGFwdGVyXy5kZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdrZXlkb3duJywgdGhpcy5rZXlkb3duSGFuZGxlcl8pO1xuICAgIHRoaXMuYWRhcHRlcl8uZGVyZWdpc3RlckJvZHlDbGlja0hhbmRsZXIodGhpcy5kb2N1bWVudENsaWNrSGFuZGxlcl8pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUNvcm5lcn0gY29ybmVyIERlZmF1bHQgYW5jaG9yIGNvcm5lciBhbGlnbm1lbnQgb2YgdG9wLWxlZnQgbWVudSBjb3JuZXIuXG4gICAqL1xuICBzZXRBbmNob3JDb3JuZXIoY29ybmVyKSB7XG4gICAgdGhpcy5hbmNob3JDb3JuZXJfID0gY29ybmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUFuY2hvck1hcmdpbn0gbWFyZ2luIDQtcGxldCBvZiBtYXJnaW5zIGZyb20gYW5jaG9yLlxuICAgKi9cbiAgc2V0QW5jaG9yTWFyZ2luKG1hcmdpbikge1xuICAgIHRoaXMuYW5jaG9yTWFyZ2luXy50b3AgPSB0eXBlb2YgbWFyZ2luLnRvcCA9PT0gJ251bWJlcicgPyBtYXJnaW4udG9wIDogMDtcbiAgICB0aGlzLmFuY2hvck1hcmdpbl8ucmlnaHQgPSB0eXBlb2YgbWFyZ2luLnJpZ2h0ID09PSAnbnVtYmVyJyA/IG1hcmdpbi5yaWdodCA6IDA7XG4gICAgdGhpcy5hbmNob3JNYXJnaW5fLmJvdHRvbSA9IHR5cGVvZiBtYXJnaW4uYm90dG9tID09PSAnbnVtYmVyJyA/IG1hcmdpbi5ib3R0b20gOiAwO1xuICAgIHRoaXMuYW5jaG9yTWFyZ2luXy5sZWZ0ID0gdHlwZW9mIG1hcmdpbi5sZWZ0ID09PSAnbnVtYmVyJyA/IG1hcmdpbi5sZWZ0IDogMDtcbiAgfVxuXG4gIC8qKiBAcGFyYW0ge2Jvb2xlYW59IHJlbWVtYmVyU2VsZWN0aW9uICovXG4gIHNldFJlbWVtYmVyU2VsZWN0aW9uKHJlbWVtYmVyU2VsZWN0aW9uKSB7XG4gICAgdGhpcy5yZW1lbWJlclNlbGVjdGlvbl8gPSByZW1lbWJlclNlbGVjdGlvbjtcbiAgICB0aGlzLnNldFNlbGVjdGVkSW5kZXgoLTEpO1xuICB9XG5cbiAgLyoqIEBwYXJhbSB7Ym9vbGVhbn0gcXVpY2tPcGVuICovXG4gIHNldFF1aWNrT3BlbihxdWlja09wZW4pIHtcbiAgICB0aGlzLnF1aWNrT3Blbl8gPSBxdWlja09wZW47XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/bnVtYmVyfSBmb2N1c0luZGV4XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmb2N1c09uT3Blbl8oZm9jdXNJbmRleCkge1xuICAgIGlmIChmb2N1c0luZGV4ID09PSBudWxsKSB7XG4gICAgICAvLyBJZiB0aGlzIGluc3RhbmNlIG9mIE1EQ01lbnUgcmVtZW1iZXJzIHNlbGVjdGlvbnMsIGFuZCB0aGUgdXNlciBoYXNcbiAgICAgIC8vIG1hZGUgYSBzZWxlY3Rpb24sIHRoZW4gZm9jdXMgdGhlIGxhc3Qgc2VsZWN0ZWQgaXRlbVxuICAgICAgaWYgKHRoaXMucmVtZW1iZXJTZWxlY3Rpb25fICYmIHRoaXMuc2VsZWN0ZWRJbmRleF8gPj0gMCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXJfLmZvY3VzSXRlbUF0SW5kZXgodGhpcy5zZWxlY3RlZEluZGV4Xyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hZGFwdGVyXy5mb2N1cygpO1xuICAgICAgLy8gSWYgdGhhdCBkb2Vzbid0IHdvcmssIGZvY3VzIGZpcnN0IGl0ZW0gaW5zdGVhZC5cbiAgICAgIGlmICghdGhpcy5hZGFwdGVyXy5pc0ZvY3VzZWQoKSkge1xuICAgICAgICB0aGlzLmFkYXB0ZXJfLmZvY3VzSXRlbUF0SW5kZXgoMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRhcHRlcl8uZm9jdXNJdGVtQXRJbmRleChmb2N1c0luZGV4KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGNsaWNrcyBhbmQgY2FuY2VsIHRoZSBtZW51IGlmIG5vdCBhIGNoaWxkIGxpc3QtaXRlbVxuICAgKiBAcGFyYW0geyFFdmVudH0gZXZ0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYW5kbGVEb2N1bWVudENsaWNrXyhldnQpIHtcbiAgICBsZXQgZWwgPSBldnQudGFyZ2V0O1xuXG4gICAgd2hpbGUgKGVsICYmIGVsICE9PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIGlmICh0aGlzLmFkYXB0ZXJfLmdldEluZGV4Rm9yRXZlbnRUYXJnZXQoZWwpICE9PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgdGhpcy5hZGFwdGVyXy5ub3RpZnlDYW5jZWwoKTtcbiAgICB0aGlzLmNsb3NlKGV2dCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBrZXlzIHRoYXQgd2Ugd2FudCB0byByZXBlYXQgb24gaG9sZCAodGFiIGFuZCBhcnJvd3MpLlxuICAgKiBAcGFyYW0geyFFdmVudH0gZXZ0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYW5kbGVLZXlib2FyZERvd25fKGV2dCkge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgQWx0LCBDdHJsIG9yIE1ldGEgYXJlIHByZXNzZWQuXG4gICAgaWYgKGV2dC5hbHRLZXkgfHwgZXZ0LmN0cmxLZXkgfHwgZXZ0Lm1ldGFLZXkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHtrZXlDb2RlLCBrZXksIHNoaWZ0S2V5fSA9IGV2dDtcbiAgICBjb25zdCBpc1RhYiA9IGtleSA9PT0gJ1RhYicgfHwga2V5Q29kZSA9PT0gOTtcbiAgICBjb25zdCBpc0Fycm93VXAgPSBrZXkgPT09ICdBcnJvd1VwJyB8fCBrZXlDb2RlID09PSAzODtcbiAgICBjb25zdCBpc0Fycm93RG93biA9IGtleSA9PT0gJ0Fycm93RG93bicgfHwga2V5Q29kZSA9PT0gNDA7XG4gICAgY29uc3QgaXNTcGFjZSA9IGtleSA9PT0gJ1NwYWNlJyB8fCBrZXlDb2RlID09PSAzMjtcbiAgICBjb25zdCBpc0VudGVyID0ga2V5ID09PSAnRW50ZXInIHx8IGtleUNvZGUgPT09IDEzO1xuICAgIC8vIFRoZSBtZW51IG5lZWRzIHRvIGtub3cgaWYgdGhlIGtleWRvd24gZXZlbnQgd2FzIHRyaWdnZXJlZCBvbiB0aGUgbWVudVxuICAgIHRoaXMua2V5RG93bldpdGhpbk1lbnVfID0gaXNFbnRlciB8fCBpc1NwYWNlO1xuXG4gICAgY29uc3QgZm9jdXNlZEl0ZW1JbmRleCA9IHRoaXMuYWRhcHRlcl8uZ2V0Rm9jdXNlZEl0ZW1JbmRleCgpO1xuICAgIGNvbnN0IGxhc3RJdGVtSW5kZXggPSB0aGlzLmFkYXB0ZXJfLmdldE51bWJlck9mSXRlbXMoKSAtIDE7XG5cbiAgICBpZiAoc2hpZnRLZXkgJiYgaXNUYWIgJiYgZm9jdXNlZEl0ZW1JbmRleCA9PT0gMCkge1xuICAgICAgdGhpcy5hZGFwdGVyXy5mb2N1c0l0ZW1BdEluZGV4KGxhc3RJdGVtSW5kZXgpO1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFzaGlmdEtleSAmJiBpc1RhYiAmJiBmb2N1c2VkSXRlbUluZGV4ID09PSBsYXN0SXRlbUluZGV4KSB7XG4gICAgICB0aGlzLmFkYXB0ZXJfLmZvY3VzSXRlbUF0SW5kZXgoMCk7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgQXJyb3d7VXAsRG93bn0gYW5kIHNwYWNlIGRvIG5vdCBjYXVzZSBpbmFkdmVydGVudCBzY3JvbGxpbmdcbiAgICBpZiAoaXNBcnJvd1VwIHx8IGlzQXJyb3dEb3duIHx8IGlzU3BhY2UpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChpc0Fycm93VXApIHtcbiAgICAgIGlmIChmb2N1c2VkSXRlbUluZGV4ID09PSAwIHx8IHRoaXMuYWRhcHRlcl8uaXNGb2N1c2VkKCkpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5mb2N1c0l0ZW1BdEluZGV4KGxhc3RJdGVtSW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5mb2N1c0l0ZW1BdEluZGV4KGZvY3VzZWRJdGVtSW5kZXggLSAxKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQXJyb3dEb3duKSB7XG4gICAgICBpZiAoZm9jdXNlZEl0ZW1JbmRleCA9PT0gbGFzdEl0ZW1JbmRleCB8fCB0aGlzLmFkYXB0ZXJfLmlzRm9jdXNlZCgpKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlcl8uZm9jdXNJdGVtQXRJbmRleCgwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYWRhcHRlcl8uZm9jdXNJdGVtQXRJbmRleChmb2N1c2VkSXRlbUluZGV4ICsgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGtleXMgdGhhdCB3ZSBkb24ndCB3YW50IHRvIHJlcGVhdCBvbiBob2xkIChFbnRlciwgU3BhY2UsIEVzY2FwZSkuXG4gICAqIEBwYXJhbSB7IUV2ZW50fSBldnRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhbmRsZUtleWJvYXJkVXBfKGV2dCkge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgQWx0LCBDdHJsIG9yIE1ldGEgYXJlIHByZXNzZWQuXG4gICAgaWYgKGV2dC5hbHRLZXkgfHwgZXZ0LmN0cmxLZXkgfHwgZXZ0Lm1ldGFLZXkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHtrZXlDb2RlLCBrZXl9ID0gZXZ0O1xuICAgIGNvbnN0IGlzRW50ZXIgPSBrZXkgPT09ICdFbnRlcicgfHwga2V5Q29kZSA9PT0gMTM7XG4gICAgY29uc3QgaXNTcGFjZSA9IGtleSA9PT0gJ1NwYWNlJyB8fCBrZXlDb2RlID09PSAzMjtcbiAgICBjb25zdCBpc0VzY2FwZSA9IGtleSA9PT0gJ0VzY2FwZScgfHwga2V5Q29kZSA9PT0gMjc7XG5cbiAgICBpZiAoaXNFbnRlciB8fCBpc1NwYWNlKSB7XG4gICAgICAvLyBJZiB0aGUga2V5ZG93biBldmVudCBkaWRuJ3Qgb2NjdXIgb24gdGhlIG1lbnUsIHRoZW4gaXQgc2hvdWxkXG4gICAgICAvLyBkaXNyZWdhcmQgdGhlIHBvc3NpYmxlIHNlbGVjdGVkIGV2ZW50LlxuICAgICAgaWYgKHRoaXMua2V5RG93bldpdGhpbk1lbnVfKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlUG9zc2libGVTZWxlY3RlZF8oZXZ0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMua2V5RG93bldpdGhpbk1lbnVfID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGlzRXNjYXBlKSB7XG4gICAgICB0aGlzLmFkYXB0ZXJfLm5vdGlmeUNhbmNlbCgpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUV2ZW50fSBldnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhbmRsZVBvc3NpYmxlU2VsZWN0ZWRfKGV2dCkge1xuICAgIGlmICh0aGlzLmFkYXB0ZXJfLmdldEF0dHJpYnV0ZUZvckV2ZW50VGFyZ2V0KGV2dC50YXJnZXQsIHN0cmluZ3MuQVJJQV9ESVNBQkxFRF9BVFRSKSA9PT0gJ3RydWUnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldEluZGV4ID0gdGhpcy5hZGFwdGVyXy5nZXRJbmRleEZvckV2ZW50VGFyZ2V0KGV2dC50YXJnZXQpO1xuICAgIGlmICh0YXJnZXRJbmRleCA8IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gRGVib3VuY2UgbXVsdGlwbGUgc2VsZWN0aW9uc1xuICAgIGlmICh0aGlzLnNlbGVjdGVkVHJpZ2dlclRpbWVySWRfKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2VsZWN0ZWRUcmlnZ2VyVGltZXJJZF8gPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRUcmlnZ2VyVGltZXJJZF8gPSAwO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgaWYgKHRoaXMucmVtZW1iZXJTZWxlY3Rpb25fKSB7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRJbmRleCh0YXJnZXRJbmRleCk7XG4gICAgICB9XG4gICAgICB0aGlzLmFkYXB0ZXJfLm5vdGlmeVNlbGVjdGVkKHtpbmRleDogdGFyZ2V0SW5kZXh9KTtcbiAgICB9LCBudW1iZXJzLlNFTEVDVEVEX1RSSUdHRVJfREVMQVkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0F1dG9MYXlvdXRNZWFzdXJlbWVudHN9IE1lYXN1cmVtZW50cyB1c2VkIHRvIHBvc2l0aW9uIG1lbnUgcG9wdXAuXG4gICAqL1xuICBnZXRBdXRvTGF5b3V0TWVhc3VyZW1lbnRzXygpIHtcbiAgICBjb25zdCBhbmNob3JSZWN0ID0gdGhpcy5hZGFwdGVyXy5nZXRBbmNob3JEaW1lbnNpb25zKCk7XG4gICAgY29uc3Qgdmlld3BvcnQgPSB0aGlzLmFkYXB0ZXJfLmdldFdpbmRvd0RpbWVuc2lvbnMoKTtcblxuICAgIHJldHVybiB7XG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgICB2aWV3cG9ydERpc3RhbmNlOiB7XG4gICAgICAgIHRvcDogYW5jaG9yUmVjdC50b3AsXG4gICAgICAgIHJpZ2h0OiB2aWV3cG9ydC53aWR0aCAtIGFuY2hvclJlY3QucmlnaHQsXG4gICAgICAgIGxlZnQ6IGFuY2hvclJlY3QubGVmdCxcbiAgICAgICAgYm90dG9tOiB2aWV3cG9ydC5oZWlnaHQgLSBhbmNob3JSZWN0LmJvdHRvbSxcbiAgICAgIH0sXG4gICAgICBhbmNob3JIZWlnaHQ6IGFuY2hvclJlY3QuaGVpZ2h0LFxuICAgICAgYW5jaG9yV2lkdGg6IGFuY2hvclJlY3Qud2lkdGgsXG4gICAgICBtZW51SGVpZ2h0OiB0aGlzLmRpbWVuc2lvbnNfLmhlaWdodCxcbiAgICAgIG1lbnVXaWR0aDogdGhpcy5kaW1lbnNpb25zXy53aWR0aCxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBjb3JuZXIgb2YgdGhlIGFuY2hvciBmcm9tIHdoaWNoIHRvIGFuaW1hdGUgYW5kIHBvc2l0aW9uIHRoZSBtZW51LlxuICAgKiBAcmV0dXJuIHtDb3JuZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRPcmlnaW5Db3JuZXJfKCkge1xuICAgIC8vIERlZmF1bHRzOiBvcGVuIGZyb20gdGhlIHRvcCBsZWZ0LlxuICAgIGxldCBjb3JuZXIgPSBDb3JuZXIuVE9QX0xFRlQ7XG5cbiAgICBjb25zdCB7dmlld3BvcnREaXN0YW5jZSwgYW5jaG9ySGVpZ2h0LCBhbmNob3JXaWR0aCwgbWVudUhlaWdodCwgbWVudVdpZHRofSA9IHRoaXMubWVhc3VyZXNfO1xuICAgIGNvbnN0IGlzQm90dG9tQWxpZ25lZCA9IEJvb2xlYW4odGhpcy5hbmNob3JDb3JuZXJfICYgQ29ybmVyQml0LkJPVFRPTSk7XG4gICAgY29uc3QgYXZhaWxhYmxlVG9wID0gaXNCb3R0b21BbGlnbmVkID8gdmlld3BvcnREaXN0YW5jZS50b3AgKyBhbmNob3JIZWlnaHQgKyB0aGlzLmFuY2hvck1hcmdpbl8uYm90dG9tXG4gICAgICA6IHZpZXdwb3J0RGlzdGFuY2UudG9wICsgdGhpcy5hbmNob3JNYXJnaW5fLnRvcDtcbiAgICBjb25zdCBhdmFpbGFibGVCb3R0b20gPSBpc0JvdHRvbUFsaWduZWQgPyB2aWV3cG9ydERpc3RhbmNlLmJvdHRvbSAtIHRoaXMuYW5jaG9yTWFyZ2luXy5ib3R0b21cbiAgICAgIDogdmlld3BvcnREaXN0YW5jZS5ib3R0b20gKyBhbmNob3JIZWlnaHQgLSB0aGlzLmFuY2hvck1hcmdpbl8udG9wO1xuXG4gICAgY29uc3QgdG9wT3ZlcmZsb3cgPSBtZW51SGVpZ2h0IC0gYXZhaWxhYmxlVG9wO1xuICAgIGNvbnN0IGJvdHRvbU92ZXJmbG93ID0gbWVudUhlaWdodCAtIGF2YWlsYWJsZUJvdHRvbTtcbiAgICBpZiAoYm90dG9tT3ZlcmZsb3cgPiAwICYmIHRvcE92ZXJmbG93IDwgYm90dG9tT3ZlcmZsb3cpIHtcbiAgICAgIGNvcm5lciB8PSBDb3JuZXJCaXQuQk9UVE9NO1xuICAgIH1cblxuICAgIGNvbnN0IGlzUnRsID0gdGhpcy5hZGFwdGVyXy5pc1J0bCgpO1xuICAgIGNvbnN0IGlzRmxpcFJ0bCA9IEJvb2xlYW4odGhpcy5hbmNob3JDb3JuZXJfICYgQ29ybmVyQml0LkZMSVBfUlRMKTtcbiAgICBjb25zdCBhdm9pZEhvcml6b250YWxPdmVybGFwID0gQm9vbGVhbih0aGlzLmFuY2hvckNvcm5lcl8gJiBDb3JuZXJCaXQuUklHSFQpO1xuICAgIGNvbnN0IGlzQWxpZ25lZFJpZ2h0ID0gKGF2b2lkSG9yaXpvbnRhbE92ZXJsYXAgJiYgIWlzUnRsKSB8fFxuICAgICAgKCFhdm9pZEhvcml6b250YWxPdmVybGFwICYmIGlzRmxpcFJ0bCAmJiBpc1J0bCk7XG4gICAgY29uc3QgYXZhaWxhYmxlTGVmdCA9IGlzQWxpZ25lZFJpZ2h0ID8gdmlld3BvcnREaXN0YW5jZS5sZWZ0ICsgYW5jaG9yV2lkdGggKyB0aGlzLmFuY2hvck1hcmdpbl8ucmlnaHQgOlxuICAgICAgdmlld3BvcnREaXN0YW5jZS5sZWZ0ICsgdGhpcy5hbmNob3JNYXJnaW5fLmxlZnQ7XG4gICAgY29uc3QgYXZhaWxhYmxlUmlnaHQgPSBpc0FsaWduZWRSaWdodCA/IHZpZXdwb3J0RGlzdGFuY2UucmlnaHQgLSB0aGlzLmFuY2hvck1hcmdpbl8ucmlnaHQgOlxuICAgICAgdmlld3BvcnREaXN0YW5jZS5yaWdodCArIGFuY2hvcldpZHRoIC0gdGhpcy5hbmNob3JNYXJnaW5fLmxlZnQ7XG5cbiAgICBjb25zdCBsZWZ0T3ZlcmZsb3cgPSBtZW51V2lkdGggLSBhdmFpbGFibGVMZWZ0O1xuICAgIGNvbnN0IHJpZ2h0T3ZlcmZsb3cgPSBtZW51V2lkdGggLSBhdmFpbGFibGVSaWdodDtcblxuICAgIGlmICgobGVmdE92ZXJmbG93IDwgMCAmJiBpc0FsaWduZWRSaWdodCAmJiBpc1J0bCkgfHxcbiAgICAgICAgKGF2b2lkSG9yaXpvbnRhbE92ZXJsYXAgJiYgIWlzQWxpZ25lZFJpZ2h0ICYmIGxlZnRPdmVyZmxvdyA8IDApIHx8XG4gICAgICAgIChyaWdodE92ZXJmbG93ID4gMCAmJiBsZWZ0T3ZlcmZsb3cgPCByaWdodE92ZXJmbG93KSkge1xuICAgICAgY29ybmVyIHw9IENvcm5lckJpdC5SSUdIVDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29ybmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29ybmVyfSBjb3JuZXIgT3JpZ2luIGNvcm5lciBvZiB0aGUgbWVudS5cbiAgICogQHJldHVybiB7bnVtYmVyfSBIb3Jpem9udGFsIG9mZnNldCBvZiBtZW51IG9yaWdpbiBjb3JuZXIgZnJvbSBjb3JyZXNwb25kaW5nIGFuY2hvciBjb3JuZXIuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRIb3Jpem9udGFsT3JpZ2luT2Zmc2V0Xyhjb3JuZXIpIHtcbiAgICBjb25zdCB7YW5jaG9yV2lkdGh9ID0gdGhpcy5tZWFzdXJlc187XG4gICAgY29uc3QgaXNSaWdodEFsaWduZWQgPSBCb29sZWFuKGNvcm5lciAmIENvcm5lckJpdC5SSUdIVCk7XG4gICAgY29uc3QgYXZvaWRIb3Jpem9udGFsT3ZlcmxhcCA9IEJvb2xlYW4odGhpcy5hbmNob3JDb3JuZXJfICYgQ29ybmVyQml0LlJJR0hUKTtcbiAgICBsZXQgeCA9IDA7XG4gICAgaWYgKGlzUmlnaHRBbGlnbmVkKSB7XG4gICAgICBjb25zdCByaWdodE9mZnNldCA9IGF2b2lkSG9yaXpvbnRhbE92ZXJsYXAgPyBhbmNob3JXaWR0aCAtIHRoaXMuYW5jaG9yTWFyZ2luXy5sZWZ0IDogdGhpcy5hbmNob3JNYXJnaW5fLnJpZ2h0O1xuICAgICAgeCA9IHJpZ2h0T2Zmc2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsZWZ0T2Zmc2V0ID0gYXZvaWRIb3Jpem9udGFsT3ZlcmxhcCA/IGFuY2hvcldpZHRoIC0gdGhpcy5hbmNob3JNYXJnaW5fLnJpZ2h0IDogdGhpcy5hbmNob3JNYXJnaW5fLmxlZnQ7XG4gICAgICB4ID0gbGVmdE9mZnNldDtcbiAgICB9XG4gICAgcmV0dXJuIHg7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb3JuZXJ9IGNvcm5lciBPcmlnaW4gY29ybmVyIG9mIHRoZSBtZW51LlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IFZlcnRpY2FsIG9mZnNldCBvZiBtZW51IG9yaWdpbiBjb3JuZXIgZnJvbSBjb3JyZXNwb25kaW5nIGFuY2hvciBjb3JuZXIuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRWZXJ0aWNhbE9yaWdpbk9mZnNldF8oY29ybmVyKSB7XG4gICAgY29uc3Qge3ZpZXdwb3J0LCB2aWV3cG9ydERpc3RhbmNlLCBhbmNob3JIZWlnaHQsIG1lbnVIZWlnaHR9ID0gdGhpcy5tZWFzdXJlc187XG4gICAgY29uc3QgaXNCb3R0b21BbGlnbmVkID0gQm9vbGVhbihjb3JuZXIgJiBDb3JuZXJCaXQuQk9UVE9NKTtcbiAgICBjb25zdCB7TUFSR0lOX1RPX0VER0V9ID0gTURDTWVudUZvdW5kYXRpb24ubnVtYmVycztcbiAgICBjb25zdCBhdm9pZFZlcnRpY2FsT3ZlcmxhcCA9IEJvb2xlYW4odGhpcy5hbmNob3JDb3JuZXJfICYgQ29ybmVyQml0LkJPVFRPTSk7XG4gICAgY29uc3QgY2FuT3ZlcmxhcFZlcnRpY2FsbHkgPSAhYXZvaWRWZXJ0aWNhbE92ZXJsYXA7XG4gICAgbGV0IHkgPSAwO1xuXG4gICAgaWYgKGlzQm90dG9tQWxpZ25lZCkge1xuICAgICAgeSA9IGF2b2lkVmVydGljYWxPdmVybGFwID8gYW5jaG9ySGVpZ2h0IC0gdGhpcy5hbmNob3JNYXJnaW5fLnRvcCA6IC10aGlzLmFuY2hvck1hcmdpbl8uYm90dG9tO1xuICAgICAgLy8gYWRqdXN0IGZvciB3aGVuIG1lbnUgY2FuIG92ZXJsYXAgYW5jaG9yLCBidXQgdG9vIHRhbGwgdG8gYmUgYWxpZ25lZCB0byBib3R0b21cbiAgICAgIC8vIGFuY2hvciBjb3JuZXIuIEJvdHRvbSBtYXJnaW4gaXMgaWdub3JlZCBpbiBzdWNoIGNhc2VzLlxuICAgICAgaWYgKGNhbk92ZXJsYXBWZXJ0aWNhbGx5ICYmIG1lbnVIZWlnaHQgPiB2aWV3cG9ydERpc3RhbmNlLnRvcCArIGFuY2hvckhlaWdodCkge1xuICAgICAgICB5ID0gLShNYXRoLm1pbihtZW51SGVpZ2h0LCB2aWV3cG9ydC5oZWlnaHQgLSBNQVJHSU5fVE9fRURHRSkgLSAodmlld3BvcnREaXN0YW5jZS50b3AgKyBhbmNob3JIZWlnaHQpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgeSA9IGF2b2lkVmVydGljYWxPdmVybGFwID8gKGFuY2hvckhlaWdodCArIHRoaXMuYW5jaG9yTWFyZ2luXy5ib3R0b20pIDogdGhpcy5hbmNob3JNYXJnaW5fLnRvcDtcbiAgICAgIC8vIGFkanVzdCBmb3Igd2hlbiBtZW51IGNhbiBvdmVybGFwIGFuY2hvciwgYnV0IHRvbyB0YWxsIHRvIGJlIGFsaWduZWQgdG8gdG9wXG4gICAgICAvLyBhbmNob3IgY29ybmVycy4gVG9wIG1hcmdpbiBpcyBpZ25vcmVkIGluIHRoYXQgY2FzZS5cbiAgICAgIGlmIChjYW5PdmVybGFwVmVydGljYWxseSAmJiBtZW51SGVpZ2h0ID4gdmlld3BvcnREaXN0YW5jZS5ib3R0b20gKyBhbmNob3JIZWlnaHQpIHtcbiAgICAgICAgeSA9IC0oTWF0aC5taW4obWVudUhlaWdodCwgdmlld3BvcnQuaGVpZ2h0IC0gTUFSR0lOX1RPX0VER0UpIC0gKHZpZXdwb3J0RGlzdGFuY2UuYm90dG9tICsgYW5jaG9ySGVpZ2h0KSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB5O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29ybmVyfSBjb3JuZXIgT3JpZ2luIGNvcm5lciBvZiB0aGUgbWVudS5cbiAgICogQHJldHVybiB7bnVtYmVyfSBNYXhpbXVtIGhlaWdodCBvZiB0aGUgbWVudSwgYmFzZWQgb24gYXZhaWxhYmxlIHNwYWNlLiAwIGluZGljYXRlcyBzaG91bGQgbm90IGJlIHNldC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldE1lbnVNYXhIZWlnaHRfKGNvcm5lcikge1xuICAgIGxldCBtYXhIZWlnaHQgPSAwO1xuICAgIGNvbnN0IHt2aWV3cG9ydERpc3RhbmNlfSA9IHRoaXMubWVhc3VyZXNfO1xuICAgIGNvbnN0IGlzQm90dG9tQWxpZ25lZCA9IEJvb2xlYW4oY29ybmVyICYgQ29ybmVyQml0LkJPVFRPTSk7XG5cbiAgICAvLyBXaGVuIG1heGltdW0gaGVpZ2h0IGlzIG5vdCBzcGVjaWZpZWQsIGl0IGlzIGhhbmRsZWQgZnJvbSBjc3MuXG4gICAgaWYgKHRoaXMuYW5jaG9yQ29ybmVyXyAmIENvcm5lckJpdC5CT1RUT00pIHtcbiAgICAgIGlmIChpc0JvdHRvbUFsaWduZWQpIHtcbiAgICAgICAgbWF4SGVpZ2h0ID0gdmlld3BvcnREaXN0YW5jZS50b3AgKyB0aGlzLmFuY2hvck1hcmdpbl8udG9wO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF4SGVpZ2h0ID0gdmlld3BvcnREaXN0YW5jZS5ib3R0b20gLSB0aGlzLmFuY2hvck1hcmdpbl8uYm90dG9tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXhIZWlnaHQ7XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgYXV0b1Bvc2l0aW9uXygpIHtcbiAgICBpZiAoIXRoaXMuYWRhcHRlcl8uaGFzQW5jaG9yKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDb21wdXRlIG1lYXN1cmVtZW50cyBmb3IgYXV0b3Bvc2l0aW9uIG1ldGhvZHMgcmV1c2UuXG4gICAgdGhpcy5tZWFzdXJlc18gPSB0aGlzLmdldEF1dG9MYXlvdXRNZWFzdXJlbWVudHNfKCk7XG5cbiAgICBjb25zdCBjb3JuZXIgPSB0aGlzLmdldE9yaWdpbkNvcm5lcl8oKTtcbiAgICBjb25zdCBtYXhNZW51SGVpZ2h0ID0gdGhpcy5nZXRNZW51TWF4SGVpZ2h0Xyhjb3JuZXIpO1xuICAgIGxldCB2ZXJ0aWNhbEFsaWdubWVudCA9IChjb3JuZXIgJiBDb3JuZXJCaXQuQk9UVE9NKSA/ICdib3R0b20nIDogJ3RvcCc7XG4gICAgbGV0IGhvcml6b250YWxBbGlnbm1lbnQgPSAoY29ybmVyICYgQ29ybmVyQml0LlJJR0hUKSA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgY29uc3QgaG9yaXpvbnRhbE9mZnNldCA9IHRoaXMuZ2V0SG9yaXpvbnRhbE9yaWdpbk9mZnNldF8oY29ybmVyKTtcbiAgICBjb25zdCB2ZXJ0aWNhbE9mZnNldCA9IHRoaXMuZ2V0VmVydGljYWxPcmlnaW5PZmZzZXRfKGNvcm5lcik7XG4gICAgY29uc3QgcG9zaXRpb24gPSB7XG4gICAgICBbaG9yaXpvbnRhbEFsaWdubWVudF06IGhvcml6b250YWxPZmZzZXQgPyBob3Jpem9udGFsT2Zmc2V0ICsgJ3B4JyA6ICcwJyxcbiAgICAgIFt2ZXJ0aWNhbEFsaWdubWVudF06IHZlcnRpY2FsT2Zmc2V0ID8gdmVydGljYWxPZmZzZXQgKyAncHgnIDogJzAnLFxuICAgIH07XG4gICAgY29uc3Qge2FuY2hvcldpZHRoLCBtZW51SGVpZ2h0LCBtZW51V2lkdGh9ID0gdGhpcy5tZWFzdXJlc187XG4gICAgLy8gQ2VudGVyIGFsaWduIHdoZW4gYW5jaG9yIHdpZHRoIGlzIGNvbXBhcmFibGUgb3IgZ3JlYXRlciB0aGFuIG1lbnUsIG90aGVyd2lzZSBrZWVwIGNvcm5lci5cbiAgICBpZiAoYW5jaG9yV2lkdGggLyBtZW51V2lkdGggPiBudW1iZXJzLkFOQ0hPUl9UT19NRU5VX1dJRFRIX1JBVElPKSB7XG4gICAgICBob3Jpem9udGFsQWxpZ25tZW50ID0gJ2NlbnRlcic7XG4gICAgfVxuXG4gICAgLy8gQWRqdXN0IHZlcnRpY2FsIG9yaWdpbiB3aGVuIG1lbnUgaXMgcG9zaXRpb25lZCB3aXRoIHNpZ25pZmljYW50IG9mZnNldCBmcm9tIGFuY2hvci4gVGhpcyBpcyBkb25lIHNvIHRoYXRcbiAgICAvLyBzY2FsZSBhbmltYXRpb24gaXMgXCJhbmNob3JlZFwiIG9uIHRoZSBhbmNob3IuXG4gICAgaWYgKCEodGhpcy5hbmNob3JDb3JuZXJfICYgQ29ybmVyQml0LkJPVFRPTSkgJiZcbiAgICAgICAgTWF0aC5hYnModmVydGljYWxPZmZzZXQgLyBtZW51SGVpZ2h0KSA+IG51bWJlcnMuT0ZGU0VUX1RPX01FTlVfSEVJR0hUX1JBVElPKSB7XG4gICAgICBjb25zdCB2ZXJ0aWNhbE9mZnNldFBlcmNlbnQgPSBNYXRoLmFicyh2ZXJ0aWNhbE9mZnNldCAvIG1lbnVIZWlnaHQpICogMTAwO1xuICAgICAgY29uc3Qgb3JpZ2luUGVyY2VudCA9IChjb3JuZXIgJiBDb3JuZXJCaXQuQk9UVE9NKSA/IDEwMCAtIHZlcnRpY2FsT2Zmc2V0UGVyY2VudCA6IHZlcnRpY2FsT2Zmc2V0UGVyY2VudDtcbiAgICAgIHZlcnRpY2FsQWxpZ25tZW50ID0gTWF0aC5yb3VuZChvcmlnaW5QZXJjZW50ICogMTAwKSAvIDEwMCArICclJztcbiAgICB9XG5cbiAgICB0aGlzLmFkYXB0ZXJfLnNldFRyYW5zZm9ybU9yaWdpbihgJHtob3Jpem9udGFsQWxpZ25tZW50fSAke3ZlcnRpY2FsQWxpZ25tZW50fWApO1xuICAgIHRoaXMuYWRhcHRlcl8uc2V0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgIHRoaXMuYWRhcHRlcl8uc2V0TWF4SGVpZ2h0KG1heE1lbnVIZWlnaHQgPyBtYXhNZW51SGVpZ2h0ICsgJ3B4JyA6ICcnKTtcblxuICAgIC8vIENsZWFyIG1lYXN1cmVzIGFmdGVyIHBvc2l0aW9uaW5nIGlzIGNvbXBsZXRlLlxuICAgIHRoaXMubWVhc3VyZXNfID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVuIHRoZSBtZW51LlxuICAgKiBAcGFyYW0ge3tmb2N1c0luZGV4OiA/bnVtYmVyfT19IG9wdGlvbnNcbiAgICovXG4gIG9wZW4oe2ZvY3VzSW5kZXggPSBudWxsfSA9IHt9KSB7XG4gICAgdGhpcy5hZGFwdGVyXy5zYXZlRm9jdXMoKTtcblxuICAgIGlmICghdGhpcy5xdWlja09wZW5fKSB7XG4gICAgICB0aGlzLmFkYXB0ZXJfLmFkZENsYXNzKE1EQ01lbnVGb3VuZGF0aW9uLmNzc0NsYXNzZXMuQU5JTUFUSU5HX09QRU4pO1xuICAgIH1cblxuICAgIHRoaXMuYW5pbWF0aW9uUmVxdWVzdElkXyA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICB0aGlzLmRpbWVuc2lvbnNfID0gdGhpcy5hZGFwdGVyXy5nZXRJbm5lckRpbWVuc2lvbnMoKTtcbiAgICAgIHRoaXMuYXV0b1Bvc2l0aW9uXygpO1xuICAgICAgdGhpcy5hZGFwdGVyXy5hZGRDbGFzcyhNRENNZW51Rm91bmRhdGlvbi5jc3NDbGFzc2VzLk9QRU4pO1xuICAgICAgdGhpcy5mb2N1c09uT3Blbl8oZm9jdXNJbmRleCk7XG4gICAgICB0aGlzLmFkYXB0ZXJfLnJlZ2lzdGVyQm9keUNsaWNrSGFuZGxlcih0aGlzLmRvY3VtZW50Q2xpY2tIYW5kbGVyXyk7XG4gICAgICBpZiAoIXRoaXMucXVpY2tPcGVuXykge1xuICAgICAgICB0aGlzLm9wZW5BbmltYXRpb25FbmRUaW1lcklkXyA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMub3BlbkFuaW1hdGlvbkVuZFRpbWVySWRfID0gMDtcbiAgICAgICAgICB0aGlzLmFkYXB0ZXJfLnJlbW92ZUNsYXNzKE1EQ01lbnVGb3VuZGF0aW9uLmNzc0NsYXNzZXMuQU5JTUFUSU5HX09QRU4pO1xuICAgICAgICB9LCBudW1iZXJzLlRSQU5TSVRJT05fT1BFTl9EVVJBVElPTik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5pc09wZW5fID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIG1lbnUuXG4gICAqIEBwYXJhbSB7RXZlbnQ9fSBldnRcbiAgICovXG4gIGNsb3NlKGV2dCA9IG51bGwpIHtcbiAgICBjb25zdCB0YXJnZXRJc0Rpc2FibGVkID0gZXZ0ID9cbiAgICAgIHRoaXMuYWRhcHRlcl8uZ2V0QXR0cmlidXRlRm9yRXZlbnRUYXJnZXQoZXZ0LnRhcmdldCwgc3RyaW5ncy5BUklBX0RJU0FCTEVEX0FUVFIpID09PSAndHJ1ZScgOlxuICAgICAgZmFsc2U7XG5cbiAgICBpZiAodGFyZ2V0SXNEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuYWRhcHRlcl8uZGVyZWdpc3RlckJvZHlDbGlja0hhbmRsZXIodGhpcy5kb2N1bWVudENsaWNrSGFuZGxlcl8pO1xuXG4gICAgaWYgKCF0aGlzLnF1aWNrT3Blbl8pIHtcbiAgICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3MoTURDTWVudUZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5BTklNQVRJTkdfQ0xPU0VEKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgdGhpcy5hZGFwdGVyXy5yZW1vdmVDbGFzcyhNRENNZW51Rm91bmRhdGlvbi5jc3NDbGFzc2VzLk9QRU4pO1xuICAgICAgaWYgKCF0aGlzLnF1aWNrT3Blbl8pIHtcbiAgICAgICAgdGhpcy5jbG9zZUFuaW1hdGlvbkVuZFRpbWVySWRfID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5jbG9zZUFuaW1hdGlvbkVuZFRpbWVySWRfID0gMDtcbiAgICAgICAgICB0aGlzLmFkYXB0ZXJfLnJlbW92ZUNsYXNzKE1EQ01lbnVGb3VuZGF0aW9uLmNzc0NsYXNzZXMuQU5JTUFUSU5HX0NMT1NFRCk7XG4gICAgICAgIH0sIG51bWJlcnMuVFJBTlNJVElPTl9DTE9TRV9EVVJBVElPTik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5pc09wZW5fID0gZmFsc2U7XG4gICAgdGhpcy5hZGFwdGVyXy5yZXN0b3JlRm9jdXMoKTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJuIHtib29sZWFufSAqL1xuICBpc09wZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNPcGVuXztcbiAgfVxuXG4gIC8qKiBAcmV0dXJuIHtudW1iZXJ9ICovXG4gIGdldFNlbGVjdGVkSW5kZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRJbmRleF87XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IG9mIHRoZSBpdGVtIHRvIHNldCBhcyBzZWxlY3RlZC5cbiAgICovXG4gIHNldFNlbGVjdGVkSW5kZXgoaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IHRoaXMuc2VsZWN0ZWRJbmRleF8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwcmV2U2VsZWN0ZWRJbmRleCA9IHRoaXMuc2VsZWN0ZWRJbmRleF87XG4gICAgaWYgKHByZXZTZWxlY3RlZEluZGV4ID49IDApIHtcbiAgICAgIHRoaXMuYWRhcHRlcl8ucm1BdHRyRm9yT3B0aW9uQXRJbmRleChwcmV2U2VsZWN0ZWRJbmRleCwgJ2FyaWEtc2VsZWN0ZWQnKTtcbiAgICAgIHRoaXMuYWRhcHRlcl8ucm1DbGFzc0Zvck9wdGlvbkF0SW5kZXgocHJldlNlbGVjdGVkSW5kZXgsIGNzc0NsYXNzZXMuU0VMRUNURURfTElTVF9JVEVNKTtcbiAgICB9XG5cbiAgICB0aGlzLnNlbGVjdGVkSW5kZXhfID0gaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuYWRhcHRlcl8uZ2V0TnVtYmVyT2ZJdGVtcygpID8gaW5kZXggOiAtMTtcbiAgICBpZiAodGhpcy5zZWxlY3RlZEluZGV4XyA+PSAwKSB7XG4gICAgICB0aGlzLmFkYXB0ZXJfLnNldEF0dHJGb3JPcHRpb25BdEluZGV4KHRoaXMuc2VsZWN0ZWRJbmRleF8sICdhcmlhLXNlbGVjdGVkJywgJ3RydWUnKTtcbiAgICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3NGb3JPcHRpb25BdEluZGV4KHRoaXMuc2VsZWN0ZWRJbmRleF8sIGNzc0NsYXNzZXMuU0VMRUNURURfTElTVF9JVEVNKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHtNRENNZW51Rm91bmRhdGlvbiwgQW5jaG9yTWFyZ2lufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgTURDQ29tcG9uZW50IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQge2dldFRyYW5zZm9ybVByb3BlcnR5TmFtZX0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7TURDTWVudUZvdW5kYXRpb24sIEFuY2hvck1hcmdpbn0gZnJvbSAnLi9mb3VuZGF0aW9uJztcbmltcG9ydCB7Q29ybmVyLCBDb3JuZXJCaXR9IGZyb20gJy4vY29uc3RhbnRzJztcblxuLyoqXG4gKiBAZXh0ZW5kcyBNRENDb21wb25lbnQ8IU1EQ01lbnVGb3VuZGF0aW9uPlxuICovXG5jbGFzcyBNRENNZW51IGV4dGVuZHMgTURDQ29tcG9uZW50IHtcbiAgLyoqIEBwYXJhbSB7Li4uP30gYXJncyAqL1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG4gICAgLyoqIEBwcml2YXRlIHshRWxlbWVudH0gKi9cbiAgICB0aGlzLnByZXZpb3VzRm9jdXNfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IHJvb3RcbiAgICogQHJldHVybiB7IU1EQ01lbnV9XG4gICAqL1xuICBzdGF0aWMgYXR0YWNoVG8ocm9vdCkge1xuICAgIHJldHVybiBuZXcgTURDTWVudShyb290KTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJuIHtib29sZWFufSAqL1xuICBnZXQgb3BlbigpIHtcbiAgICByZXR1cm4gdGhpcy5mb3VuZGF0aW9uXy5pc09wZW4oKTtcbiAgfVxuXG4gIC8qKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlICovXG4gIHNldCBvcGVuKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLmZvdW5kYXRpb25fLm9wZW4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mb3VuZGF0aW9uXy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAcGFyYW0ge3tmb2N1c0luZGV4OiA/bnVtYmVyfT19IG9wdGlvbnMgKi9cbiAgc2hvdyh7Zm9jdXNJbmRleCA9IG51bGx9ID0ge30pIHtcbiAgICB0aGlzLmZvdW5kYXRpb25fLm9wZW4oe2ZvY3VzSW5kZXg6IGZvY3VzSW5kZXh9KTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgdGhpcy5mb3VuZGF0aW9uXy5jbG9zZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29ybmVyfSBjb3JuZXIgRGVmYXVsdCBhbmNob3IgY29ybmVyIGFsaWdubWVudCBvZiB0b3AtbGVmdFxuICAgKiAgICAgbWVudSBjb3JuZXIuXG4gICAqL1xuICBzZXRBbmNob3JDb3JuZXIoY29ybmVyKSB7XG4gICAgdGhpcy5mb3VuZGF0aW9uXy5zZXRBbmNob3JDb3JuZXIoY29ybmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FuY2hvck1hcmdpbn0gbWFyZ2luXG4gICAqL1xuICBzZXRBbmNob3JNYXJnaW4obWFyZ2luKSB7XG4gICAgdGhpcy5mb3VuZGF0aW9uXy5zZXRBbmNob3JNYXJnaW4obWFyZ2luKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGl0ZW0gY29udGFpbmVyIGVsZW1lbnQgaW5zaWRlIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm4gez9FbGVtZW50fVxuICAgKi9cbiAgZ2V0IGl0ZW1zQ29udGFpbmVyXygpIHtcbiAgICByZXR1cm4gdGhpcy5yb290Xy5xdWVyeVNlbGVjdG9yKE1EQ01lbnVGb3VuZGF0aW9uLnN0cmluZ3MuSVRFTVNfU0VMRUNUT1IpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgaXRlbXMgd2l0aGluIHRoZSBtZW51LiBOb3RlIHRoYXQgdGhpcyBvbmx5IGNvbnRhaW5zIHRoZSBzZXQgb2YgZWxlbWVudHMgd2l0aGluXG4gICAqIHRoZSBpdGVtcyBjb250YWluZXIgdGhhdCBhcmUgcHJvcGVyIGxpc3QgaXRlbXMsIGFuZCBub3Qgc3VwcGxlbWVudGFsIC8gcHJlc2VudGF0aW9uYWwgRE9NXG4gICAqIGVsZW1lbnRzLlxuICAgKiBAcmV0dXJuIHshQXJyYXk8IUVsZW1lbnQ+fVxuICAgKi9cbiAgZ2V0IGl0ZW1zKCkge1xuICAgIGNvbnN0IHtpdGVtc0NvbnRhaW5lcl86IGl0ZW1zQ29udGFpbmVyfSA9IHRoaXM7XG4gICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwoaXRlbXNDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLm1kYy1saXN0LWl0ZW1bcm9sZV0nKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBpdGVtIHdpdGhpbiB0aGUgbWVudSB0aGF0IGlzIHNlbGVjdGVkLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHJldHVybiB7P0VsZW1lbnR9XG4gICAqL1xuICBnZXRPcHRpb25CeUluZGV4KGluZGV4KSB7XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLml0ZW1zO1xuXG4gICAgaWYgKGluZGV4IDwgaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pdGVtc1tpbmRleF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAcGFyYW0ge251bWJlcn0gaW5kZXggKi9cbiAgc2V0IHNlbGVjdGVkSXRlbUluZGV4KGluZGV4KSB7XG4gICAgdGhpcy5mb3VuZGF0aW9uXy5zZXRTZWxlY3RlZEluZGV4KGluZGV4KTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJuIHtudW1iZXJ9ICovXG4gIGdldCBzZWxlY3RlZEl0ZW1JbmRleCgpIHtcbiAgICByZXR1cm4gdGhpcy5mb3VuZGF0aW9uXy5nZXRTZWxlY3RlZEluZGV4KCk7XG4gIH1cblxuICAvKiogQHBhcmFtIHshYm9vbGVhbn0gcmVtZW1iZXJTZWxlY3Rpb24gKi9cbiAgc2V0IHJlbWVtYmVyU2VsZWN0aW9uKHJlbWVtYmVyU2VsZWN0aW9uKSB7XG4gICAgdGhpcy5mb3VuZGF0aW9uXy5zZXRSZW1lbWJlclNlbGVjdGlvbihyZW1lbWJlclNlbGVjdGlvbik7XG4gIH1cblxuICAvKiogQHBhcmFtIHtib29sZWFufSBxdWlja09wZW4gKi9cbiAgc2V0IHF1aWNrT3BlbihxdWlja09wZW4pIHtcbiAgICB0aGlzLmZvdW5kYXRpb25fLnNldFF1aWNrT3BlbihxdWlja09wZW4pO1xuICB9XG5cbiAgLyoqIEByZXR1cm4geyFNRENNZW51Rm91bmRhdGlvbn0gKi9cbiAgZ2V0RGVmYXVsdEZvdW5kYXRpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBNRENNZW51Rm91bmRhdGlvbih7XG4gICAgICBhZGRDbGFzczogKGNsYXNzTmFtZSkgPT4gdGhpcy5yb290Xy5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSksXG4gICAgICByZW1vdmVDbGFzczogKGNsYXNzTmFtZSkgPT4gdGhpcy5yb290Xy5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSksXG4gICAgICBoYXNDbGFzczogKGNsYXNzTmFtZSkgPT4gdGhpcy5yb290Xy5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSxcbiAgICAgIGhhc05lY2Vzc2FyeURvbTogKCkgPT4gQm9vbGVhbih0aGlzLml0ZW1zQ29udGFpbmVyXyksXG4gICAgICBnZXRBdHRyaWJ1dGVGb3JFdmVudFRhcmdldDogKHRhcmdldCwgYXR0cmlidXRlTmFtZSkgPT4gdGFyZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSxcbiAgICAgIGdldElubmVyRGltZW5zaW9uczogKCkgPT4ge1xuICAgICAgICBjb25zdCB7aXRlbXNDb250YWluZXJfOiBpdGVtc0NvbnRhaW5lcn0gPSB0aGlzO1xuICAgICAgICByZXR1cm4ge3dpZHRoOiBpdGVtc0NvbnRhaW5lci5vZmZzZXRXaWR0aCwgaGVpZ2h0OiBpdGVtc0NvbnRhaW5lci5vZmZzZXRIZWlnaHR9O1xuICAgICAgfSxcbiAgICAgIGhhc0FuY2hvcjogKCkgPT4gdGhpcy5yb290Xy5wYXJlbnRFbGVtZW50ICYmIHRoaXMucm9vdF8ucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ21kYy1tZW51LWFuY2hvcicpLFxuICAgICAgZ2V0QW5jaG9yRGltZW5zaW9uczogKCkgPT4gdGhpcy5yb290Xy5wYXJlbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgZ2V0V2luZG93RGltZW5zaW9uczogKCkgPT4ge1xuICAgICAgICByZXR1cm4ge3dpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCwgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHR9O1xuICAgICAgfSxcbiAgICAgIGdldE51bWJlck9mSXRlbXM6ICgpID0+IHRoaXMuaXRlbXMubGVuZ3RoLFxuICAgICAgcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6ICh0eXBlLCBoYW5kbGVyKSA9PiB0aGlzLnJvb3RfLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciksXG4gICAgICBkZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyOiAodHlwZSwgaGFuZGxlcikgPT4gdGhpcy5yb290Xy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpLFxuICAgICAgcmVnaXN0ZXJCb2R5Q2xpY2tIYW5kbGVyOiAoaGFuZGxlcikgPT4gZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpLFxuICAgICAgZGVyZWdpc3RlckJvZHlDbGlja0hhbmRsZXI6IChoYW5kbGVyKSA9PiBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlciksXG4gICAgICBnZXRJbmRleEZvckV2ZW50VGFyZ2V0OiAodGFyZ2V0KSA9PiB0aGlzLml0ZW1zLmluZGV4T2YodGFyZ2V0KSxcbiAgICAgIG5vdGlmeVNlbGVjdGVkOiAoZXZ0RGF0YSkgPT4gdGhpcy5lbWl0KE1EQ01lbnVGb3VuZGF0aW9uLnN0cmluZ3MuU0VMRUNURURfRVZFTlQsIHtcbiAgICAgICAgaW5kZXg6IGV2dERhdGEuaW5kZXgsXG4gICAgICAgIGl0ZW06IHRoaXMuaXRlbXNbZXZ0RGF0YS5pbmRleF0sXG4gICAgICB9KSxcbiAgICAgIG5vdGlmeUNhbmNlbDogKCkgPT4gdGhpcy5lbWl0KE1EQ01lbnVGb3VuZGF0aW9uLnN0cmluZ3MuQ0FOQ0VMX0VWRU5ULCB7fSksXG4gICAgICBzYXZlRm9jdXM6ICgpID0+IHtcbiAgICAgICAgdGhpcy5wcmV2aW91c0ZvY3VzXyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICB9LFxuICAgICAgcmVzdG9yZUZvY3VzOiAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByZXZpb3VzRm9jdXNfICYmIHRoaXMucHJldmlvdXNGb2N1c18uZm9jdXMpIHtcbiAgICAgICAgICB0aGlzLnByZXZpb3VzRm9jdXNfLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpc0ZvY3VzZWQ6ICgpID0+IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHRoaXMucm9vdF8sXG4gICAgICBmb2N1czogKCkgPT4gdGhpcy5yb290Xy5mb2N1cygpLFxuICAgICAgZ2V0Rm9jdXNlZEl0ZW1JbmRleDogKCkgPT4gdGhpcy5pdGVtcy5pbmRleE9mKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLFxuICAgICAgZm9jdXNJdGVtQXRJbmRleDogKGluZGV4KSA9PiB0aGlzLml0ZW1zW2luZGV4XS5mb2N1cygpLFxuICAgICAgaXNSdGw6ICgpID0+IGdldENvbXB1dGVkU3R5bGUodGhpcy5yb290XykuZ2V0UHJvcGVydHlWYWx1ZSgnZGlyZWN0aW9uJykgPT09ICdydGwnLFxuICAgICAgc2V0VHJhbnNmb3JtT3JpZ2luOiAob3JpZ2luKSA9PiB7XG4gICAgICAgIHRoaXMucm9vdF8uc3R5bGVbYCR7Z2V0VHJhbnNmb3JtUHJvcGVydHlOYW1lKHdpbmRvdyl9LW9yaWdpbmBdID0gb3JpZ2luO1xuICAgICAgfSxcbiAgICAgIHNldFBvc2l0aW9uOiAocG9zaXRpb24pID0+IHtcbiAgICAgICAgdGhpcy5yb290Xy5zdHlsZS5sZWZ0ID0gJ2xlZnQnIGluIHBvc2l0aW9uID8gcG9zaXRpb24ubGVmdCA6IG51bGw7XG4gICAgICAgIHRoaXMucm9vdF8uc3R5bGUucmlnaHQgPSAncmlnaHQnIGluIHBvc2l0aW9uID8gcG9zaXRpb24ucmlnaHQgOiBudWxsO1xuICAgICAgICB0aGlzLnJvb3RfLnN0eWxlLnRvcCA9ICd0b3AnIGluIHBvc2l0aW9uID8gcG9zaXRpb24udG9wIDogbnVsbDtcbiAgICAgICAgdGhpcy5yb290Xy5zdHlsZS5ib3R0b20gPSAnYm90dG9tJyBpbiBwb3NpdGlvbiA/IHBvc2l0aW9uLmJvdHRvbSA6IG51bGw7XG4gICAgICB9LFxuICAgICAgc2V0TWF4SGVpZ2h0OiAoaGVpZ2h0KSA9PiB7XG4gICAgICAgIHRoaXMucm9vdF8uc3R5bGUubWF4SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgfSxcbiAgICAgIHNldEF0dHJGb3JPcHRpb25BdEluZGV4OiAoaW5kZXgsIGF0dHIsIHZhbHVlKSA9PiB0aGlzLml0ZW1zW2luZGV4XS5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpLFxuICAgICAgcm1BdHRyRm9yT3B0aW9uQXRJbmRleDogKGluZGV4LCBhdHRyKSA9PiB0aGlzLml0ZW1zW2luZGV4XS5yZW1vdmVBdHRyaWJ1dGUoYXR0ciksXG4gICAgICBhZGRDbGFzc0Zvck9wdGlvbkF0SW5kZXg6IChpbmRleCwgY2xhc3NOYW1lKSA9PiB0aGlzLml0ZW1zW2luZGV4XS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSksXG4gICAgICBybUNsYXNzRm9yT3B0aW9uQXRJbmRleDogKGluZGV4LCBjbGFzc05hbWUpID0+IHRoaXMuaXRlbXNbaW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQge01EQ01lbnVGb3VuZGF0aW9uLCBNRENNZW51LCBBbmNob3JNYXJnaW4sIENvcm5lciwgQ29ybmVyQml0fTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKiBAdHlwZSB7c3RyaW5nfHVuZGVmaW5lZH0gKi9cbmxldCBzdG9yZWRUcmFuc2Zvcm1Qcm9wZXJ0eU5hbWVfO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIGNvcnJlY3QgdHJhbnNmb3JtIHByb3BlcnR5IHRvIHVzZSBvbiB0aGUgY3VycmVudCBicm93c2VyLlxuICogQHBhcmFtIHshV2luZG93fSBnbG9iYWxPYmpcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGZvcmNlUmVmcmVzaFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1Qcm9wZXJ0eU5hbWUoZ2xvYmFsT2JqLCBmb3JjZVJlZnJlc2ggPSBmYWxzZSkge1xuICBpZiAoc3RvcmVkVHJhbnNmb3JtUHJvcGVydHlOYW1lXyA9PT0gdW5kZWZpbmVkIHx8IGZvcmNlUmVmcmVzaCkge1xuICAgIGNvbnN0IGVsID0gZ2xvYmFsT2JqLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnN0IHRyYW5zZm9ybVByb3BlcnR5TmFtZSA9ICgndHJhbnNmb3JtJyBpbiBlbC5zdHlsZSA/ICd0cmFuc2Zvcm0nIDogJ3dlYmtpdFRyYW5zZm9ybScpO1xuICAgIHN0b3JlZFRyYW5zZm9ybVByb3BlcnR5TmFtZV8gPSB0cmFuc2Zvcm1Qcm9wZXJ0eU5hbWU7XG4gIH1cblxuICByZXR1cm4gc3RvcmVkVHJhbnNmb3JtUHJvcGVydHlOYW1lXztcbn1cblxuLyoqXG4gKiBDbGFtcHMgYSB2YWx1ZSBiZXR3ZWVuIHRoZSBtaW5pbXVtIGFuZCB0aGUgbWF4aW11bSwgcmV0dXJuaW5nIHRoZSBjbGFtcGVkIHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gbWluXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBtaW4gPSAwLCBtYXggPSAxKSB7XG4gIHJldHVybiBNYXRoLm1pbihtYXgsIE1hdGgubWF4KG1pbiwgdmFsdWUpKTtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVhc2luZyB2YWx1ZSB0byBhcHBseSBhdCB0aW1lIHQsIGZvciBhIGdpdmVuIGN1YmljIGJlemllciBjdXJ2ZS5cbiAqIENvbnRyb2wgcG9pbnRzIFAwIGFuZCBQMyBhcmUgYXNzdW1lZCB0byBiZSAoMCwwKSBhbmQgKDEsMSksIHJlc3BlY3RpdmVseS5cbiAqIFBhcmFtZXRlcnMgYXJlIGFzIGZvbGxvd3M6XG4gKiAtIHRpbWU6IFRoZSBjdXJyZW50IHRpbWUgaW4gdGhlIGFuaW1hdGlvbiwgc2NhbGVkIGJldHdlZW4gMCBhbmQgMS5cbiAqIC0geDE6IFRoZSB4IHZhbHVlIG9mIGNvbnRyb2wgcG9pbnQgUDEuXG4gKiAtIHkxOiBUaGUgeSB2YWx1ZSBvZiBjb250cm9sIHBvaW50IFAxLlxuICogLSB4MjogVGhlIHggdmFsdWUgb2YgY29udHJvbCBwb2ludCBQMi5cbiAqIC0geTI6IFRoZSB5IHZhbHVlIG9mIGNvbnRyb2wgcG9pbnQgUDIuXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZVxuICogQHBhcmFtIHtudW1iZXJ9IHgxXG4gKiBAcGFyYW0ge251bWJlcn0geTFcbiAqIEBwYXJhbSB7bnVtYmVyfSB4MlxuICogQHBhcmFtIHtudW1iZXJ9IHkyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGJlemllclByb2dyZXNzKHRpbWUsIHgxLCB5MSwgeDIsIHkyKSB7XG4gIHJldHVybiBnZXRCZXppZXJDb29yZGluYXRlXyhzb2x2ZVBvc2l0aW9uRnJvbVhWYWx1ZV8odGltZSwgeDEsIHgyKSwgeTEsIHkyKTtcbn1cblxuLyoqXG4gKiBDb21wdXRlIGEgc2luZ2xlIGNvb3JkaW5hdGUgYXQgYSBwb3NpdGlvbiBwb2ludCBiZXR3ZWVuIDAgYW5kIDEuXG4gKiBjMSBhbmQgYzIgYXJlIHRoZSBtYXRjaGluZyBjb29yZGluYXRlIG9uIGNvbnRyb2wgcG9pbnRzIFAxIGFuZCBQMiwgcmVzcGVjdGl2ZWx5LlxuICogQ29udHJvbCBwb2ludHMgUDAgYW5kIFAzIGFyZSBhc3N1bWVkIHRvIGJlICgwLDApIGFuZCAoMSwxKSwgcmVzcGVjdGl2ZWx5LlxuICogQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvbWFzdGVyL2Nsb3N1cmUvZ29vZy9tYXRoL2Jlemllci5qcy5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcGFyYW0ge251bWJlcn0gYzFcbiAqIEBwYXJhbSB7bnVtYmVyfSBjMlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBnZXRCZXppZXJDb29yZGluYXRlXyh0LCBjMSwgYzIpIHtcbiAgLy8gU3BlY2lhbCBjYXNlIHN0YXJ0IGFuZCBlbmQuXG4gIGlmICh0ID09PSAwIHx8IHQgPT09IDEpIHtcbiAgICByZXR1cm4gdDtcbiAgfVxuXG4gIC8vIFN0ZXAgb25lIC0gZnJvbSA0IHBvaW50cyB0byAzXG4gIGxldCBpYzAgPSB0ICogYzE7XG4gIGxldCBpYzEgPSBjMSArIHQgKiAoYzIgLSBjMSk7XG4gIGNvbnN0IGljMiA9IGMyICsgdCAqICgxIC0gYzIpO1xuXG4gIC8vIFN0ZXAgdHdvIC0gZnJvbSAzIHBvaW50cyB0byAyXG4gIGljMCArPSB0ICogKGljMSAtIGljMCk7XG4gIGljMSArPSB0ICogKGljMiAtIGljMSk7XG5cbiAgLy8gRmluYWwgc3RlcCAtIGxhc3QgcG9pbnRcbiAgcmV0dXJuIGljMCArIHQgKiAoaWMxIC0gaWMwKTtcbn1cblxuLyoqXG4gKiBQcm9qZWN0IGEgcG9pbnQgb250byB0aGUgQmV6aWVyIGN1cnZlLCBmcm9tIGEgZ2l2ZW4gWC4gQ2FsY3VsYXRlcyB0aGUgcG9zaXRpb24gdCBhbG9uZyB0aGUgY3VydmUuXG4gKiBBZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWxpYnJhcnkvYmxvYi9tYXN0ZXIvY2xvc3VyZS9nb29nL21hdGgvYmV6aWVyLmpzLlxuICogQHBhcmFtIHtudW1iZXJ9IHhWYWxcbiAqIEBwYXJhbSB7bnVtYmVyfSB4MVxuICogQHBhcmFtIHtudW1iZXJ9IHgyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIHNvbHZlUG9zaXRpb25Gcm9tWFZhbHVlXyh4VmFsLCB4MSwgeDIpIHtcbiAgY29uc3QgRVBTSUxPTiA9IDFlLTY7XG4gIGNvbnN0IE1BWF9JVEVSQVRJT05TID0gODtcblxuICBpZiAoeFZhbCA8PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gZWxzZSBpZiAoeFZhbCA+PSAxKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICAvLyBJbml0aWFsIGVzdGltYXRlIG9mIHQgdXNpbmcgbGluZWFyIGludGVycG9sYXRpb24uXG4gIGxldCB0ID0geFZhbDtcblxuICAvLyBUcnkgZ3JhZGllbnQgZGVzY2VudCB0byBzb2x2ZSBmb3IgdC4gSWYgaXQgd29ya3MsIGl0IGlzIHZlcnkgZmFzdC5cbiAgbGV0IHRNaW4gPSAwO1xuICBsZXQgdE1heCA9IDE7XG4gIGxldCB2YWx1ZSA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgTUFYX0lURVJBVElPTlM7IGkrKykge1xuICAgIHZhbHVlID0gZ2V0QmV6aWVyQ29vcmRpbmF0ZV8odCwgeDEsIHgyKTtcbiAgICBjb25zdCBkZXJpdmF0aXZlID0gKGdldEJlemllckNvb3JkaW5hdGVfKHQgKyBFUFNJTE9OLCB4MSwgeDIpIC0gdmFsdWUpIC8gRVBTSUxPTjtcbiAgICBpZiAoTWF0aC5hYnModmFsdWUgLSB4VmFsKSA8IEVQU0lMT04pIHtcbiAgICAgIHJldHVybiB0O1xuICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGVyaXZhdGl2ZSkgPCBFUFNJTE9OKSB7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHZhbHVlIDwgeFZhbCkge1xuICAgICAgICB0TWluID0gdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRNYXggPSB0O1xuICAgICAgfVxuICAgICAgdCAtPSAodmFsdWUgLSB4VmFsKSAvIGRlcml2YXRpdmU7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgdGhlIGdyYWRpZW50IGRlc2NlbnQgZ290IHN0dWNrIGluIGEgbG9jYWwgbWluaW11bSwgZS5nLiBiZWNhdXNlXG4gIC8vIHRoZSBkZXJpdmF0aXZlIHdhcyBjbG9zZSB0byAwLCB1c2UgYSBEaWNob3RvbXkgcmVmaW5lbWVudCBpbnN0ZWFkLlxuICAvLyBXZSBsaW1pdCB0aGUgbnVtYmVyIG9mIGludGVyYXRpb25zIHRvIDguXG4gIGZvciAobGV0IGkgPSAwOyBNYXRoLmFicyh2YWx1ZSAtIHhWYWwpID4gRVBTSUxPTiAmJiBpIDwgTUFYX0lURVJBVElPTlM7IGkrKykge1xuICAgIGlmICh2YWx1ZSA8IHhWYWwpIHtcbiAgICAgIHRNaW4gPSB0O1xuICAgICAgdCA9ICh0ICsgdE1heCkgLyAyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0TWF4ID0gdDtcbiAgICAgIHQgPSAodCArIHRNaW4pIC8gMjtcbiAgICB9XG4gICAgdmFsdWUgPSBnZXRCZXppZXJDb29yZGluYXRlXyh0LCB4MSwgeDIpO1xuICB9XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQge2dldFRyYW5zZm9ybVByb3BlcnR5TmFtZSwgY2xhbXAsIGJlemllclByb2dyZXNzfTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFsyLCB7XCJhcmdzXCI6IFwibm9uZVwifV0gKi9cblxuLyoqXG4gKiBBZGFwdGVyIGZvciBNREMgUmlwcGxlLiBQcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIG1hbmFnaW5nXG4gKiAtIGNsYXNzZXNcbiAqIC0gZG9tXG4gKiAtIENTUyB2YXJpYWJsZXNcbiAqIC0gcG9zaXRpb25cbiAqIC0gZGltZW5zaW9uc1xuICogLSBzY3JvbGwgcG9zaXRpb25cbiAqIC0gZXZlbnQgaGFuZGxlcnNcbiAqIC0gdW5ib3VuZGVkLCBhY3RpdmUgYW5kIGRpc2FibGVkIHN0YXRlc1xuICpcbiAqIEFkZGl0aW9uYWxseSwgcHJvdmlkZXMgdHlwZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGFkYXB0ZXIgdG8gdGhlIENsb3N1cmVcbiAqIGNvbXBpbGVyLlxuICpcbiAqIEltcGxlbWVudCB0aGlzIGFkYXB0ZXIgZm9yIHlvdXIgZnJhbWV3b3JrIG9mIGNob2ljZSB0byBkZWxlZ2F0ZSB1cGRhdGVzIHRvXG4gKiB0aGUgY29tcG9uZW50IGluIHlvdXIgZnJhbWV3b3JrIG9mIGNob2ljZS4gU2VlIGFyY2hpdGVjdHVyZSBkb2N1bWVudGF0aW9uXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICogaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9tYXN0ZXIvZG9jcy9jb2RlL2FyY2hpdGVjdHVyZS5tZFxuICpcbiAqIEByZWNvcmRcbiAqL1xuY2xhc3MgTURDUmlwcGxlQWRhcHRlciB7XG4gIC8qKiBAcmV0dXJuIHtib29sZWFufSAqL1xuICBicm93c2VyU3VwcG9ydHNDc3NWYXJzKCkge31cblxuICAvKiogQHJldHVybiB7Ym9vbGVhbn0gKi9cbiAgaXNVbmJvdW5kZWQoKSB7fVxuXG4gIC8qKiBAcmV0dXJuIHtib29sZWFufSAqL1xuICBpc1N1cmZhY2VBY3RpdmUoKSB7fVxuXG4gIC8qKiBAcmV0dXJuIHtib29sZWFufSAqL1xuICBpc1N1cmZhY2VEaXNhYmxlZCgpIHt9XG5cbiAgLyoqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgKi9cbiAgYWRkQ2xhc3MoY2xhc3NOYW1lKSB7fVxuXG4gIC8qKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lICovXG4gIHJlbW92ZUNsYXNzKGNsYXNzTmFtZSkge31cblxuICAvKiogQHBhcmFtIHshRXZlbnRUYXJnZXR9IHRhcmdldCAqL1xuICBjb250YWluc0V2ZW50VGFyZ2V0KHRhcmdldCkge31cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2dFR5cGVcbiAgICogQHBhcmFtIHshRnVuY3Rpb259IGhhbmRsZXJcbiAgICovXG4gIHJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKGV2dFR5cGUsIGhhbmRsZXIpIHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldnRUeXBlXG4gICAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBoYW5kbGVyXG4gICAqL1xuICBkZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKGV2dFR5cGUsIGhhbmRsZXIpIHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldnRUeXBlXG4gICAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBoYW5kbGVyXG4gICAqL1xuICByZWdpc3RlckRvY3VtZW50SW50ZXJhY3Rpb25IYW5kbGVyKGV2dFR5cGUsIGhhbmRsZXIpIHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldnRUeXBlXG4gICAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBoYW5kbGVyXG4gICAqL1xuICBkZXJlZ2lzdGVyRG9jdW1lbnRJbnRlcmFjdGlvbkhhbmRsZXIoZXZ0VHlwZSwgaGFuZGxlcikge31cblxuICAvKipcbiAgICogQHBhcmFtIHshRnVuY3Rpb259IGhhbmRsZXJcbiAgICovXG4gIHJlZ2lzdGVyUmVzaXplSGFuZGxlcihoYW5kbGVyKSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFGdW5jdGlvbn0gaGFuZGxlclxuICAgKi9cbiAgZGVyZWdpc3RlclJlc2l6ZUhhbmRsZXIoaGFuZGxlcikge31cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhck5hbWVcbiAgICogQHBhcmFtIHs/bnVtYmVyfHN0cmluZ30gdmFsdWVcbiAgICovXG4gIHVwZGF0ZUNzc1ZhcmlhYmxlKHZhck5hbWUsIHZhbHVlKSB7fVxuXG4gIC8qKiBAcmV0dXJuIHshQ2xpZW50UmVjdH0gKi9cbiAgY29tcHV0ZUJvdW5kaW5nUmVjdCgpIHt9XG5cbiAgLyoqIEByZXR1cm4ge3t4OiBudW1iZXIsIHk6IG51bWJlcn19ICovXG4gIGdldFdpbmRvd1BhZ2VPZmZzZXQoKSB7fVxufVxuXG5leHBvcnQgZGVmYXVsdCBNRENSaXBwbGVBZGFwdGVyO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmNvbnN0IGNzc0NsYXNzZXMgPSB7XG4gIC8vIFJpcHBsZSBpcyBhIHNwZWNpYWwgY2FzZSB3aGVyZSB0aGUgXCJyb290XCIgY29tcG9uZW50IGlzIHJlYWxseSBhIFwibWl4aW5cIiBvZiBzb3J0cyxcbiAgLy8gZ2l2ZW4gdGhhdCBpdCdzIGFuICd1cGdyYWRlJyB0byBhbiBleGlzdGluZyBjb21wb25lbnQuIFRoYXQgYmVpbmcgc2FpZCBpdCBpcyB0aGUgcm9vdFxuICAvLyBDU1MgY2xhc3MgdGhhdCBhbGwgb3RoZXIgQ1NTIGNsYXNzZXMgZGVyaXZlIGZyb20uXG4gIFJPT1Q6ICdtZGMtcmlwcGxlLXVwZ3JhZGVkJyxcbiAgVU5CT1VOREVEOiAnbWRjLXJpcHBsZS11cGdyYWRlZC0tdW5ib3VuZGVkJyxcbiAgQkdfRk9DVVNFRDogJ21kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtZm9jdXNlZCcsXG4gIEZHX0FDVElWQVRJT046ICdtZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWFjdGl2YXRpb24nLFxuICBGR19ERUFDVElWQVRJT046ICdtZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWRlYWN0aXZhdGlvbicsXG59O1xuXG5jb25zdCBzdHJpbmdzID0ge1xuICBWQVJfTEVGVDogJy0tbWRjLXJpcHBsZS1sZWZ0JyxcbiAgVkFSX1RPUDogJy0tbWRjLXJpcHBsZS10b3AnLFxuICBWQVJfRkdfU0laRTogJy0tbWRjLXJpcHBsZS1mZy1zaXplJyxcbiAgVkFSX0ZHX1NDQUxFOiAnLS1tZGMtcmlwcGxlLWZnLXNjYWxlJyxcbiAgVkFSX0ZHX1RSQU5TTEFURV9TVEFSVDogJy0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtc3RhcnQnLFxuICBWQVJfRkdfVFJBTlNMQVRFX0VORDogJy0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtZW5kJyxcbn07XG5cbmNvbnN0IG51bWJlcnMgPSB7XG4gIFBBRERJTkc6IDEwLFxuICBJTklUSUFMX09SSUdJTl9TQ0FMRTogMC42LFxuICBERUFDVElWQVRJT05fVElNRU9VVF9NUzogMjI1LCAvLyBDb3JyZXNwb25kcyB0byAkbWRjLXJpcHBsZS10cmFuc2xhdGUtZHVyYXRpb24gKGkuZS4gYWN0aXZhdGlvbiBhbmltYXRpb24gZHVyYXRpb24pXG4gIEZHX0RFQUNUSVZBVElPTl9NUzogMTUwLCAvLyBDb3JyZXNwb25kcyB0byAkbWRjLXJpcHBsZS1mYWRlLW91dC1kdXJhdGlvbiAoaS5lLiBkZWFjdGl2YXRpb24gYW5pbWF0aW9uIGR1cmF0aW9uKVxuICBUQVBfREVMQVlfTVM6IDMwMCwgLy8gRGVsYXkgYmV0d2VlbiB0b3VjaCBhbmQgc2ltdWxhdGVkIG1vdXNlIGV2ZW50cyBvbiB0b3VjaCBkZXZpY2VzXG59O1xuXG5leHBvcnQge2Nzc0NsYXNzZXMsIHN0cmluZ3MsIG51bWJlcnN9O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBNRENGb3VuZGF0aW9uIGZyb20gJ0BtYXRlcmlhbC9iYXNlL2ZvdW5kYXRpb24nO1xuaW1wb3J0IE1EQ1JpcHBsZUFkYXB0ZXIgZnJvbSAnLi9hZGFwdGVyJztcbmltcG9ydCB7Y3NzQ2xhc3Nlcywgc3RyaW5ncywgbnVtYmVyc30gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHtnZXROb3JtYWxpemVkRXZlbnRDb29yZHN9IGZyb20gJy4vdXRpbCc7XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgaXNBY3RpdmF0ZWQ6IChib29sZWFufHVuZGVmaW5lZCksXG4gKiAgIGhhc0RlYWN0aXZhdGlvblVYUnVuOiAoYm9vbGVhbnx1bmRlZmluZWQpLFxuICogICB3YXNBY3RpdmF0ZWRCeVBvaW50ZXI6IChib29sZWFufHVuZGVmaW5lZCksXG4gKiAgIHdhc0VsZW1lbnRNYWRlQWN0aXZlOiAoYm9vbGVhbnx1bmRlZmluZWQpLFxuICogICBhY3RpdmF0aW9uRXZlbnQ6IEV2ZW50LFxuICogICBpc1Byb2dyYW1tYXRpYzogKGJvb2xlYW58dW5kZWZpbmVkKVxuICogfX1cbiAqL1xubGV0IEFjdGl2YXRpb25TdGF0ZVR5cGU7XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgYWN0aXZhdGU6IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAqICAgZGVhY3RpdmF0ZTogKHN0cmluZ3x1bmRlZmluZWQpLFxuICogICBmb2N1czogKHN0cmluZ3x1bmRlZmluZWQpLFxuICogICBibHVyOiAoc3RyaW5nfHVuZGVmaW5lZClcbiAqIH19XG4gKi9cbmxldCBMaXN0ZW5lckluZm9UeXBlO1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGFjdGl2YXRlOiBmdW5jdGlvbighRXZlbnQpLFxuICogICBkZWFjdGl2YXRlOiBmdW5jdGlvbighRXZlbnQpLFxuICogICBmb2N1czogZnVuY3Rpb24oKSxcbiAqICAgYmx1cjogZnVuY3Rpb24oKVxuICogfX1cbiAqL1xubGV0IExpc3RlbmVyc1R5cGU7XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgeDogbnVtYmVyLFxuICogICB5OiBudW1iZXJcbiAqIH19XG4gKi9cbmxldCBQb2ludFR5cGU7XG5cbi8vIEFjdGl2YXRpb24gZXZlbnRzIHJlZ2lzdGVyZWQgb24gdGhlIHJvb3QgZWxlbWVudCBvZiBlYWNoIGluc3RhbmNlIGZvciBhY3RpdmF0aW9uXG5jb25zdCBBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTID0gWyd0b3VjaHN0YXJ0JywgJ3BvaW50ZXJkb3duJywgJ21vdXNlZG93bicsICdrZXlkb3duJ107XG5cbi8vIERlYWN0aXZhdGlvbiBldmVudHMgcmVnaXN0ZXJlZCBvbiBkb2N1bWVudEVsZW1lbnQgd2hlbiBhIHBvaW50ZXItcmVsYXRlZCBkb3duIGV2ZW50IG9jY3Vyc1xuY29uc3QgUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVMgPSBbJ3RvdWNoZW5kJywgJ3BvaW50ZXJ1cCcsICdtb3VzZXVwJ107XG5cbi8vIFRyYWNrcyBhY3RpdmF0aW9ucyB0aGF0IGhhdmUgb2NjdXJyZWQgb24gdGhlIGN1cnJlbnQgZnJhbWUsIHRvIGF2b2lkIHNpbXVsdGFuZW91cyBuZXN0ZWQgYWN0aXZhdGlvbnNcbi8qKiBAdHlwZSB7IUFycmF5PCFFdmVudFRhcmdldD59ICovXG5sZXQgYWN0aXZhdGVkVGFyZ2V0cyA9IFtdO1xuXG4vKipcbiAqIEBleHRlbmRzIHtNRENGb3VuZGF0aW9uPCFNRENSaXBwbGVBZGFwdGVyPn1cbiAqL1xuY2xhc3MgTURDUmlwcGxlRm91bmRhdGlvbiBleHRlbmRzIE1EQ0ZvdW5kYXRpb24ge1xuICBzdGF0aWMgZ2V0IGNzc0NsYXNzZXMoKSB7XG4gICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHN0cmluZ3MoKSB7XG4gICAgcmV0dXJuIHN0cmluZ3M7XG4gIH1cblxuICBzdGF0aWMgZ2V0IG51bWJlcnMoKSB7XG4gICAgcmV0dXJuIG51bWJlcnM7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRBZGFwdGVyKCkge1xuICAgIHJldHVybiB7XG4gICAgICBicm93c2VyU3VwcG9ydHNDc3NWYXJzOiAoKSA9PiAvKiBib29sZWFuIC0gY2FjaGVkICovIHt9LFxuICAgICAgaXNVbmJvdW5kZWQ6ICgpID0+IC8qIGJvb2xlYW4gKi8ge30sXG4gICAgICBpc1N1cmZhY2VBY3RpdmU6ICgpID0+IC8qIGJvb2xlYW4gKi8ge30sXG4gICAgICBpc1N1cmZhY2VEaXNhYmxlZDogKCkgPT4gLyogYm9vbGVhbiAqLyB7fSxcbiAgICAgIGFkZENsYXNzOiAoLyogY2xhc3NOYW1lOiBzdHJpbmcgKi8pID0+IHt9LFxuICAgICAgcmVtb3ZlQ2xhc3M6ICgvKiBjbGFzc05hbWU6IHN0cmluZyAqLykgPT4ge30sXG4gICAgICBjb250YWluc0V2ZW50VGFyZ2V0OiAoLyogdGFyZ2V0OiAhRXZlbnRUYXJnZXQgKi8pID0+IHt9LFxuICAgICAgcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6ICgvKiBldnRUeXBlOiBzdHJpbmcsIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXIgKi8pID0+IHt9LFxuICAgICAgZGVyZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcjogKC8qIGV2dFR5cGU6IHN0cmluZywgaGFuZGxlcjogRXZlbnRMaXN0ZW5lciAqLykgPT4ge30sXG4gICAgICByZWdpc3RlckRvY3VtZW50SW50ZXJhY3Rpb25IYW5kbGVyOiAoLyogZXZ0VHlwZTogc3RyaW5nLCBoYW5kbGVyOiBFdmVudExpc3RlbmVyICovKSA9PiB7fSxcbiAgICAgIGRlcmVnaXN0ZXJEb2N1bWVudEludGVyYWN0aW9uSGFuZGxlcjogKC8qIGV2dFR5cGU6IHN0cmluZywgaGFuZGxlcjogRXZlbnRMaXN0ZW5lciAqLykgPT4ge30sXG4gICAgICByZWdpc3RlclJlc2l6ZUhhbmRsZXI6ICgvKiBoYW5kbGVyOiBFdmVudExpc3RlbmVyICovKSA9PiB7fSxcbiAgICAgIGRlcmVnaXN0ZXJSZXNpemVIYW5kbGVyOiAoLyogaGFuZGxlcjogRXZlbnRMaXN0ZW5lciAqLykgPT4ge30sXG4gICAgICB1cGRhdGVDc3NWYXJpYWJsZTogKC8qIHZhck5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyAqLykgPT4ge30sXG4gICAgICBjb21wdXRlQm91bmRpbmdSZWN0OiAoKSA9PiAvKiBDbGllbnRSZWN0ICovIHt9LFxuICAgICAgZ2V0V2luZG93UGFnZU9mZnNldDogKCkgPT4gLyoge3g6IG51bWJlciwgeTogbnVtYmVyfSAqLyB7fSxcbiAgICB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IoYWRhcHRlcikge1xuICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oTURDUmlwcGxlRm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciwgYWRhcHRlcikpO1xuXG4gICAgLyoqIEBwcml2YXRlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5sYXlvdXRGcmFtZV8gPSAwO1xuXG4gICAgLyoqIEBwcml2YXRlIHshQ2xpZW50UmVjdH0gKi9cbiAgICB0aGlzLmZyYW1lXyA9IC8qKiBAdHlwZSB7IUNsaWVudFJlY3R9ICovICh7d2lkdGg6IDAsIGhlaWdodDogMH0pO1xuXG4gICAgLyoqIEBwcml2YXRlIHshQWN0aXZhdGlvblN0YXRlVHlwZX0gKi9cbiAgICB0aGlzLmFjdGl2YXRpb25TdGF0ZV8gPSB0aGlzLmRlZmF1bHRBY3RpdmF0aW9uU3RhdGVfKCk7XG5cbiAgICAvKiogQHByaXZhdGUge251bWJlcn0gKi9cbiAgICB0aGlzLmluaXRpYWxTaXplXyA9IDA7XG5cbiAgICAvKiogQHByaXZhdGUge251bWJlcn0gKi9cbiAgICB0aGlzLm1heFJhZGl1c18gPSAwO1xuXG4gICAgLyoqIEBwcml2YXRlIHtmdW5jdGlvbighRXZlbnQpfSAqL1xuICAgIHRoaXMuYWN0aXZhdGVIYW5kbGVyXyA9IChlKSA9PiB0aGlzLmFjdGl2YXRlXyhlKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7ZnVuY3Rpb24oIUV2ZW50KX0gKi9cbiAgICB0aGlzLmRlYWN0aXZhdGVIYW5kbGVyXyA9IChlKSA9PiB0aGlzLmRlYWN0aXZhdGVfKGUpO1xuXG4gICAgLyoqIEBwcml2YXRlIHtmdW5jdGlvbig/RXZlbnQ9KX0gKi9cbiAgICB0aGlzLmZvY3VzSGFuZGxlcl8gPSAoKSA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoXG4gICAgICAoKSA9PiB0aGlzLmFkYXB0ZXJfLmFkZENsYXNzKE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5CR19GT0NVU0VEKVxuICAgICk7XG5cbiAgICAvKiogQHByaXZhdGUge2Z1bmN0aW9uKD9FdmVudD0pfSAqL1xuICAgIHRoaXMuYmx1ckhhbmRsZXJfID0gKCkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKFxuICAgICAgKCkgPT4gdGhpcy5hZGFwdGVyXy5yZW1vdmVDbGFzcyhNRENSaXBwbGVGb3VuZGF0aW9uLmNzc0NsYXNzZXMuQkdfRk9DVVNFRClcbiAgICApO1xuXG4gICAgLyoqIEBwcml2YXRlIHshRnVuY3Rpb259ICovXG4gICAgdGhpcy5yZXNpemVIYW5kbGVyXyA9ICgpID0+IHRoaXMubGF5b3V0KCk7XG5cbiAgICAvKiogQHByaXZhdGUge3tsZWZ0OiBudW1iZXIsIHRvcDpudW1iZXJ9fSAqL1xuICAgIHRoaXMudW5ib3VuZGVkQ29vcmRzXyA9IHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgfTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7bnVtYmVyfSAqL1xuICAgIHRoaXMuZmdTY2FsZV8gPSAwO1xuXG4gICAgLyoqIEBwcml2YXRlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5hY3RpdmF0aW9uVGltZXJfID0gMDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7bnVtYmVyfSAqL1xuICAgIHRoaXMuZmdEZWFjdGl2YXRpb25SZW1vdmFsVGltZXJfID0gMDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLmFjdGl2YXRpb25BbmltYXRpb25IYXNFbmRlZF8gPSBmYWxzZTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7IUZ1bmN0aW9ufSAqL1xuICAgIHRoaXMuYWN0aXZhdGlvblRpbWVyQ2FsbGJhY2tfID0gKCkgPT4ge1xuICAgICAgdGhpcy5hY3RpdmF0aW9uQW5pbWF0aW9uSGFzRW5kZWRfID0gdHJ1ZTtcbiAgICAgIHRoaXMucnVuRGVhY3RpdmF0aW9uVVhMb2dpY0lmUmVhZHlfKCk7XG4gICAgfTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P0V2ZW50fSAqL1xuICAgIHRoaXMucHJldmlvdXNBY3RpdmF0aW9uRXZlbnRfID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBXZSBjb21wdXRlIHRoaXMgcHJvcGVydHkgc28gdGhhdCB3ZSBhcmUgbm90IHF1ZXJ5aW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjbGllbnRcbiAgICogdW50aWwgdGhlIHBvaW50IGluIHRpbWUgd2hlcmUgdGhlIGZvdW5kYXRpb24gcmVxdWVzdHMgaXQuIFRoaXMgcHJldmVudHMgc2NlbmFyaW9zIHdoZXJlXG4gICAqIGNsaWVudC1zaWRlIGZlYXR1cmUtZGV0ZWN0aW9uIG1heSBoYXBwZW4gdG9vIGVhcmx5LCBzdWNoIGFzIHdoZW4gY29tcG9uZW50cyBhcmUgcmVuZGVyZWQgb24gdGhlIHNlcnZlclxuICAgKiBhbmQgdGhlbiBpbml0aWFsaXplZCBhdCBtb3VudCB0aW1lIG9uIHRoZSBjbGllbnQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc1N1cHBvcnRlZF8oKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlcl8uYnJvd3NlclN1cHBvcnRzQ3NzVmFycygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFBY3RpdmF0aW9uU3RhdGVUeXBlfVxuICAgKi9cbiAgZGVmYXVsdEFjdGl2YXRpb25TdGF0ZV8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzQWN0aXZhdGVkOiBmYWxzZSxcbiAgICAgIGhhc0RlYWN0aXZhdGlvblVYUnVuOiBmYWxzZSxcbiAgICAgIHdhc0FjdGl2YXRlZEJ5UG9pbnRlcjogZmFsc2UsXG4gICAgICB3YXNFbGVtZW50TWFkZUFjdGl2ZTogZmFsc2UsXG4gICAgICBhY3RpdmF0aW9uRXZlbnQ6IG51bGwsXG4gICAgICBpc1Byb2dyYW1tYXRpYzogZmFsc2UsXG4gICAgfTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgaWYgKCF0aGlzLmlzU3VwcG9ydGVkXygpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucmVnaXN0ZXJSb290SGFuZGxlcnNfKCk7XG5cbiAgICBjb25zdCB7Uk9PVCwgVU5CT1VOREVEfSA9IE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3NlcztcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgdGhpcy5hZGFwdGVyXy5hZGRDbGFzcyhST09UKTtcbiAgICAgIGlmICh0aGlzLmFkYXB0ZXJfLmlzVW5ib3VuZGVkKCkpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5hZGRDbGFzcyhVTkJPVU5ERUQpO1xuICAgICAgICAvLyBVbmJvdW5kZWQgcmlwcGxlcyBuZWVkIGxheW91dCBsb2dpYyBhcHBsaWVkIGltbWVkaWF0ZWx5IHRvIHNldCBjb29yZGluYXRlcyBmb3IgYm90aCBzaGFkZSBhbmQgcmlwcGxlXG4gICAgICAgIHRoaXMubGF5b3V0SW50ZXJuYWxfKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIGlmICghdGhpcy5pc1N1cHBvcnRlZF8oKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFjdGl2YXRpb25UaW1lcl8pIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmFjdGl2YXRpb25UaW1lcl8pO1xuICAgICAgdGhpcy5hY3RpdmF0aW9uVGltZXJfID0gMDtcbiAgICAgIGNvbnN0IHtGR19BQ1RJVkFUSU9OfSA9IE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3NlcztcbiAgICAgIHRoaXMuYWRhcHRlcl8ucmVtb3ZlQ2xhc3MoRkdfQUNUSVZBVElPTik7XG4gICAgfVxuXG4gICAgdGhpcy5kZXJlZ2lzdGVyUm9vdEhhbmRsZXJzXygpO1xuICAgIHRoaXMuZGVyZWdpc3RlckRlYWN0aXZhdGlvbkhhbmRsZXJzXygpO1xuXG4gICAgY29uc3Qge1JPT1QsIFVOQk9VTkRFRH0gPSBNRENSaXBwbGVGb3VuZGF0aW9uLmNzc0NsYXNzZXM7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHRoaXMuYWRhcHRlcl8ucmVtb3ZlQ2xhc3MoUk9PVCk7XG4gICAgICB0aGlzLmFkYXB0ZXJfLnJlbW92ZUNsYXNzKFVOQk9VTkRFRCk7XG4gICAgICB0aGlzLnJlbW92ZUNzc1ZhcnNfKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgcmVnaXN0ZXJSb290SGFuZGxlcnNfKCkge1xuICAgIEFDVElWQVRJT05fRVZFTlRfVFlQRVMuZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgICAgdGhpcy5hZGFwdGVyXy5yZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcih0eXBlLCB0aGlzLmFjdGl2YXRlSGFuZGxlcl8pO1xuICAgIH0pO1xuICAgIHRoaXMuYWRhcHRlcl8ucmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoJ2ZvY3VzJywgdGhpcy5mb2N1c0hhbmRsZXJfKTtcbiAgICB0aGlzLmFkYXB0ZXJfLnJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdibHVyJywgdGhpcy5ibHVySGFuZGxlcl8pO1xuXG4gICAgaWYgKHRoaXMuYWRhcHRlcl8uaXNVbmJvdW5kZWQoKSkge1xuICAgICAgdGhpcy5hZGFwdGVyXy5yZWdpc3RlclJlc2l6ZUhhbmRsZXIodGhpcy5yZXNpemVIYW5kbGVyXyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUV2ZW50fSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZWdpc3RlckRlYWN0aXZhdGlvbkhhbmRsZXJzXyhlKSB7XG4gICAgaWYgKGUudHlwZSA9PT0gJ2tleWRvd24nKSB7XG4gICAgICB0aGlzLmFkYXB0ZXJfLnJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdrZXl1cCcsIHRoaXMuZGVhY3RpdmF0ZUhhbmRsZXJfKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVMuZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgICAgICB0aGlzLmFkYXB0ZXJfLnJlZ2lzdGVyRG9jdW1lbnRJbnRlcmFjdGlvbkhhbmRsZXIodHlwZSwgdGhpcy5kZWFjdGl2YXRlSGFuZGxlcl8pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIGRlcmVnaXN0ZXJSb290SGFuZGxlcnNfKCkge1xuICAgIEFDVElWQVRJT05fRVZFTlRfVFlQRVMuZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgICAgdGhpcy5hZGFwdGVyXy5kZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKHR5cGUsIHRoaXMuYWN0aXZhdGVIYW5kbGVyXyk7XG4gICAgfSk7XG4gICAgdGhpcy5hZGFwdGVyXy5kZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdmb2N1cycsIHRoaXMuZm9jdXNIYW5kbGVyXyk7XG4gICAgdGhpcy5hZGFwdGVyXy5kZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdibHVyJywgdGhpcy5ibHVySGFuZGxlcl8pO1xuXG4gICAgaWYgKHRoaXMuYWRhcHRlcl8uaXNVbmJvdW5kZWQoKSkge1xuICAgICAgdGhpcy5hZGFwdGVyXy5kZXJlZ2lzdGVyUmVzaXplSGFuZGxlcih0aGlzLnJlc2l6ZUhhbmRsZXJfKTtcbiAgICB9XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgZGVyZWdpc3RlckRlYWN0aXZhdGlvbkhhbmRsZXJzXygpIHtcbiAgICB0aGlzLmFkYXB0ZXJfLmRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoJ2tleXVwJywgdGhpcy5kZWFjdGl2YXRlSGFuZGxlcl8pO1xuICAgIFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICAgIHRoaXMuYWRhcHRlcl8uZGVyZWdpc3RlckRvY3VtZW50SW50ZXJhY3Rpb25IYW5kbGVyKHR5cGUsIHRoaXMuZGVhY3RpdmF0ZUhhbmRsZXJfKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICByZW1vdmVDc3NWYXJzXygpIHtcbiAgICBjb25zdCB7c3RyaW5nc30gPSBNRENSaXBwbGVGb3VuZGF0aW9uO1xuICAgIE9iamVjdC5rZXlzKHN0cmluZ3MpLmZvckVhY2goKGspID0+IHtcbiAgICAgIGlmIChrLmluZGV4T2YoJ1ZBUl8nKSA9PT0gMCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXJfLnVwZGF0ZUNzc1ZhcmlhYmxlKHN0cmluZ3Nba10sIG51bGwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7P0V2ZW50fSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhY3RpdmF0ZV8oZSkge1xuICAgIGlmICh0aGlzLmFkYXB0ZXJfLmlzU3VyZmFjZURpc2FibGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBhY3RpdmF0aW9uU3RhdGUgPSB0aGlzLmFjdGl2YXRpb25TdGF0ZV87XG4gICAgaWYgKGFjdGl2YXRpb25TdGF0ZS5pc0FjdGl2YXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEF2b2lkIHJlYWN0aW5nIHRvIGZvbGxvdy1vbiBldmVudHMgZmlyZWQgYnkgdG91Y2ggZGV2aWNlIGFmdGVyIGFuIGFscmVhZHktcHJvY2Vzc2VkIHVzZXIgaW50ZXJhY3Rpb25cbiAgICBjb25zdCBwcmV2aW91c0FjdGl2YXRpb25FdmVudCA9IHRoaXMucHJldmlvdXNBY3RpdmF0aW9uRXZlbnRfO1xuICAgIGNvbnN0IGlzU2FtZUludGVyYWN0aW9uID0gcHJldmlvdXNBY3RpdmF0aW9uRXZlbnQgJiYgZSAmJiBwcmV2aW91c0FjdGl2YXRpb25FdmVudC50eXBlICE9PSBlLnR5cGU7XG4gICAgaWYgKGlzU2FtZUludGVyYWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYWN0aXZhdGlvblN0YXRlLmlzQWN0aXZhdGVkID0gdHJ1ZTtcbiAgICBhY3RpdmF0aW9uU3RhdGUuaXNQcm9ncmFtbWF0aWMgPSBlID09PSBudWxsO1xuICAgIGFjdGl2YXRpb25TdGF0ZS5hY3RpdmF0aW9uRXZlbnQgPSBlO1xuICAgIGFjdGl2YXRpb25TdGF0ZS53YXNBY3RpdmF0ZWRCeVBvaW50ZXIgPSBhY3RpdmF0aW9uU3RhdGUuaXNQcm9ncmFtbWF0aWMgPyBmYWxzZSA6IChcbiAgICAgIGUudHlwZSA9PT0gJ21vdXNlZG93bicgfHwgZS50eXBlID09PSAndG91Y2hzdGFydCcgfHwgZS50eXBlID09PSAncG9pbnRlcmRvd24nXG4gICAgKTtcblxuICAgIGNvbnN0IGhhc0FjdGl2YXRlZENoaWxkID1cbiAgICAgIGUgJiYgYWN0aXZhdGVkVGFyZ2V0cy5sZW5ndGggPiAwICYmIGFjdGl2YXRlZFRhcmdldHMuc29tZSgodGFyZ2V0KSA9PiB0aGlzLmFkYXB0ZXJfLmNvbnRhaW5zRXZlbnRUYXJnZXQodGFyZ2V0KSk7XG4gICAgaWYgKGhhc0FjdGl2YXRlZENoaWxkKSB7XG4gICAgICAvLyBJbW1lZGlhdGVseSByZXNldCBhY3RpdmF0aW9uIHN0YXRlLCB3aGlsZSBwcmVzZXJ2aW5nIGxvZ2ljIHRoYXQgcHJldmVudHMgdG91Y2ggZm9sbG93LW9uIGV2ZW50c1xuICAgICAgdGhpcy5yZXNldEFjdGl2YXRpb25TdGF0ZV8oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZSkge1xuICAgICAgYWN0aXZhdGVkVGFyZ2V0cy5wdXNoKC8qKiBAdHlwZSB7IUV2ZW50VGFyZ2V0fSAqLyAoZS50YXJnZXQpKTtcbiAgICAgIHRoaXMucmVnaXN0ZXJEZWFjdGl2YXRpb25IYW5kbGVyc18oZSk7XG4gICAgfVxuXG4gICAgYWN0aXZhdGlvblN0YXRlLndhc0VsZW1lbnRNYWRlQWN0aXZlID0gdGhpcy5jaGVja0VsZW1lbnRNYWRlQWN0aXZlXyhlKTtcbiAgICBpZiAoYWN0aXZhdGlvblN0YXRlLndhc0VsZW1lbnRNYWRlQWN0aXZlKSB7XG4gICAgICB0aGlzLmFuaW1hdGVBY3RpdmF0aW9uXygpO1xuICAgIH1cblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAvLyBSZXNldCBhcnJheSBvbiBuZXh0IGZyYW1lIGFmdGVyIHRoZSBjdXJyZW50IGV2ZW50IGhhcyBoYWQgYSBjaGFuY2UgdG8gYnViYmxlIHRvIHByZXZlbnQgYW5jZXN0b3IgcmlwcGxlc1xuICAgICAgYWN0aXZhdGVkVGFyZ2V0cyA9IFtdO1xuXG4gICAgICBpZiAoIWFjdGl2YXRpb25TdGF0ZS53YXNFbGVtZW50TWFkZUFjdGl2ZSAmJiAoZS5rZXkgPT09ICcgJyB8fCBlLmtleUNvZGUgPT09IDMyKSkge1xuICAgICAgICAvLyBJZiBzcGFjZSB3YXMgcHJlc3NlZCwgdHJ5IGFnYWluIHdpdGhpbiBhbiByQUYgY2FsbCB0byBkZXRlY3QgOmFjdGl2ZSwgYmVjYXVzZSBkaWZmZXJlbnQgVUFzIHJlcG9ydFxuICAgICAgICAvLyBhY3RpdmUgc3RhdGVzIGluY29uc2lzdGVudGx5IHdoZW4gdGhleSdyZSBjYWxsZWQgd2l0aGluIGV2ZW50IGhhbmRsaW5nIGNvZGU6XG4gICAgICAgIC8vIC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NjM1OTcxXG4gICAgICAgIC8vIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTI5Mzc0MVxuICAgICAgICAvLyBXZSB0cnkgZmlyc3Qgb3V0c2lkZSByQUYgdG8gc3VwcG9ydCBFZGdlLCB3aGljaCBkb2VzIG5vdCBleGhpYml0IHRoaXMgcHJvYmxlbSwgYnV0IHdpbGwgY3Jhc2ggaWYgYSBDU1NcbiAgICAgICAgLy8gdmFyaWFibGUgaXMgc2V0IHdpdGhpbiBhIHJBRiBjYWxsYmFjayBmb3IgYSBzdWJtaXQgYnV0dG9uIGludGVyYWN0aW9uICgjMjI0MSkuXG4gICAgICAgIGFjdGl2YXRpb25TdGF0ZS53YXNFbGVtZW50TWFkZUFjdGl2ZSA9IHRoaXMuY2hlY2tFbGVtZW50TWFkZUFjdGl2ZV8oZSk7XG4gICAgICAgIGlmIChhY3RpdmF0aW9uU3RhdGUud2FzRWxlbWVudE1hZGVBY3RpdmUpIHtcbiAgICAgICAgICB0aGlzLmFuaW1hdGVBY3RpdmF0aW9uXygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghYWN0aXZhdGlvblN0YXRlLndhc0VsZW1lbnRNYWRlQWN0aXZlKSB7XG4gICAgICAgIC8vIFJlc2V0IGFjdGl2YXRpb24gc3RhdGUgaW1tZWRpYXRlbHkgaWYgZWxlbWVudCB3YXMgbm90IG1hZGUgYWN0aXZlLlxuICAgICAgICB0aGlzLmFjdGl2YXRpb25TdGF0ZV8gPSB0aGlzLmRlZmF1bHRBY3RpdmF0aW9uU3RhdGVfKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/RXZlbnR9IGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNoZWNrRWxlbWVudE1hZGVBY3RpdmVfKGUpIHtcbiAgICByZXR1cm4gKGUgJiYgZS50eXBlID09PSAna2V5ZG93bicpID8gdGhpcy5hZGFwdGVyXy5pc1N1cmZhY2VBY3RpdmUoKSA6IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/RXZlbnQ9fSBldmVudCBPcHRpb25hbCBldmVudCBjb250YWluaW5nIHBvc2l0aW9uIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgYWN0aXZhdGUoZXZlbnQgPSBudWxsKSB7XG4gICAgdGhpcy5hY3RpdmF0ZV8oZXZlbnQpO1xuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIGFuaW1hdGVBY3RpdmF0aW9uXygpIHtcbiAgICBjb25zdCB7VkFSX0ZHX1RSQU5TTEFURV9TVEFSVCwgVkFSX0ZHX1RSQU5TTEFURV9FTkR9ID0gTURDUmlwcGxlRm91bmRhdGlvbi5zdHJpbmdzO1xuICAgIGNvbnN0IHtGR19ERUFDVElWQVRJT04sIEZHX0FDVElWQVRJT059ID0gTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzO1xuICAgIGNvbnN0IHtERUFDVElWQVRJT05fVElNRU9VVF9NU30gPSBNRENSaXBwbGVGb3VuZGF0aW9uLm51bWJlcnM7XG5cbiAgICB0aGlzLmxheW91dEludGVybmFsXygpO1xuXG4gICAgbGV0IHRyYW5zbGF0ZVN0YXJ0ID0gJyc7XG4gICAgbGV0IHRyYW5zbGF0ZUVuZCA9ICcnO1xuXG4gICAgaWYgKCF0aGlzLmFkYXB0ZXJfLmlzVW5ib3VuZGVkKCkpIHtcbiAgICAgIGNvbnN0IHtzdGFydFBvaW50LCBlbmRQb2ludH0gPSB0aGlzLmdldEZnVHJhbnNsYXRpb25Db29yZGluYXRlc18oKTtcbiAgICAgIHRyYW5zbGF0ZVN0YXJ0ID0gYCR7c3RhcnRQb2ludC54fXB4LCAke3N0YXJ0UG9pbnQueX1weGA7XG4gICAgICB0cmFuc2xhdGVFbmQgPSBgJHtlbmRQb2ludC54fXB4LCAke2VuZFBvaW50Lnl9cHhgO1xuICAgIH1cblxuICAgIHRoaXMuYWRhcHRlcl8udXBkYXRlQ3NzVmFyaWFibGUoVkFSX0ZHX1RSQU5TTEFURV9TVEFSVCwgdHJhbnNsYXRlU3RhcnQpO1xuICAgIHRoaXMuYWRhcHRlcl8udXBkYXRlQ3NzVmFyaWFibGUoVkFSX0ZHX1RSQU5TTEFURV9FTkQsIHRyYW5zbGF0ZUVuZCk7XG4gICAgLy8gQ2FuY2VsIGFueSBvbmdvaW5nIGFjdGl2YXRpb24vZGVhY3RpdmF0aW9uIGFuaW1hdGlvbnNcbiAgICBjbGVhclRpbWVvdXQodGhpcy5hY3RpdmF0aW9uVGltZXJfKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5mZ0RlYWN0aXZhdGlvblJlbW92YWxUaW1lcl8pO1xuICAgIHRoaXMucm1Cb3VuZGVkQWN0aXZhdGlvbkNsYXNzZXNfKCk7XG4gICAgdGhpcy5hZGFwdGVyXy5yZW1vdmVDbGFzcyhGR19ERUFDVElWQVRJT04pO1xuXG4gICAgLy8gRm9yY2UgbGF5b3V0IGluIG9yZGVyIHRvIHJlLXRyaWdnZXIgdGhlIGFuaW1hdGlvbi5cbiAgICB0aGlzLmFkYXB0ZXJfLmNvbXB1dGVCb3VuZGluZ1JlY3QoKTtcbiAgICB0aGlzLmFkYXB0ZXJfLmFkZENsYXNzKEZHX0FDVElWQVRJT04pO1xuICAgIHRoaXMuYWN0aXZhdGlvblRpbWVyXyA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5hY3RpdmF0aW9uVGltZXJDYWxsYmFja18oKSwgREVBQ1RJVkFUSU9OX1RJTUVPVVRfTVMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm4ge3tzdGFydFBvaW50OiBQb2ludFR5cGUsIGVuZFBvaW50OiBQb2ludFR5cGV9fVxuICAgKi9cbiAgZ2V0RmdUcmFuc2xhdGlvbkNvb3JkaW5hdGVzXygpIHtcbiAgICBjb25zdCB7YWN0aXZhdGlvbkV2ZW50LCB3YXNBY3RpdmF0ZWRCeVBvaW50ZXJ9ID0gdGhpcy5hY3RpdmF0aW9uU3RhdGVfO1xuXG4gICAgbGV0IHN0YXJ0UG9pbnQ7XG4gICAgaWYgKHdhc0FjdGl2YXRlZEJ5UG9pbnRlcikge1xuICAgICAgc3RhcnRQb2ludCA9IGdldE5vcm1hbGl6ZWRFdmVudENvb3JkcyhcbiAgICAgICAgLyoqIEB0eXBlIHshRXZlbnR9ICovIChhY3RpdmF0aW9uRXZlbnQpLFxuICAgICAgICB0aGlzLmFkYXB0ZXJfLmdldFdpbmRvd1BhZ2VPZmZzZXQoKSwgdGhpcy5hZGFwdGVyXy5jb21wdXRlQm91bmRpbmdSZWN0KClcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0UG9pbnQgPSB7XG4gICAgICAgIHg6IHRoaXMuZnJhbWVfLndpZHRoIC8gMixcbiAgICAgICAgeTogdGhpcy5mcmFtZV8uaGVpZ2h0IC8gMixcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIENlbnRlciB0aGUgZWxlbWVudCBhcm91bmQgdGhlIHN0YXJ0IHBvaW50LlxuICAgIHN0YXJ0UG9pbnQgPSB7XG4gICAgICB4OiBzdGFydFBvaW50LnggLSAodGhpcy5pbml0aWFsU2l6ZV8gLyAyKSxcbiAgICAgIHk6IHN0YXJ0UG9pbnQueSAtICh0aGlzLmluaXRpYWxTaXplXyAvIDIpLFxuICAgIH07XG5cbiAgICBjb25zdCBlbmRQb2ludCA9IHtcbiAgICAgIHg6ICh0aGlzLmZyYW1lXy53aWR0aCAvIDIpIC0gKHRoaXMuaW5pdGlhbFNpemVfIC8gMiksXG4gICAgICB5OiAodGhpcy5mcmFtZV8uaGVpZ2h0IC8gMikgLSAodGhpcy5pbml0aWFsU2l6ZV8gLyAyKSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtzdGFydFBvaW50LCBlbmRQb2ludH07XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgcnVuRGVhY3RpdmF0aW9uVVhMb2dpY0lmUmVhZHlfKCkge1xuICAgIC8vIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBib3RoIHdoZW4gYSBwb2ludGluZyBkZXZpY2UgaXMgcmVsZWFzZWQsIGFuZCB3aGVuIHRoZSBhY3RpdmF0aW9uIGFuaW1hdGlvbiBlbmRzLlxuICAgIC8vIFRoZSBkZWFjdGl2YXRpb24gYW5pbWF0aW9uIHNob3VsZCBvbmx5IHJ1biBhZnRlciBib3RoIG9mIHRob3NlIG9jY3VyLlxuICAgIGNvbnN0IHtGR19ERUFDVElWQVRJT059ID0gTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzO1xuICAgIGNvbnN0IHtoYXNEZWFjdGl2YXRpb25VWFJ1biwgaXNBY3RpdmF0ZWR9ID0gdGhpcy5hY3RpdmF0aW9uU3RhdGVfO1xuICAgIGNvbnN0IGFjdGl2YXRpb25IYXNFbmRlZCA9IGhhc0RlYWN0aXZhdGlvblVYUnVuIHx8ICFpc0FjdGl2YXRlZDtcblxuICAgIGlmIChhY3RpdmF0aW9uSGFzRW5kZWQgJiYgdGhpcy5hY3RpdmF0aW9uQW5pbWF0aW9uSGFzRW5kZWRfKSB7XG4gICAgICB0aGlzLnJtQm91bmRlZEFjdGl2YXRpb25DbGFzc2VzXygpO1xuICAgICAgdGhpcy5hZGFwdGVyXy5hZGRDbGFzcyhGR19ERUFDVElWQVRJT04pO1xuICAgICAgdGhpcy5mZ0RlYWN0aXZhdGlvblJlbW92YWxUaW1lcl8gPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5yZW1vdmVDbGFzcyhGR19ERUFDVElWQVRJT04pO1xuICAgICAgfSwgbnVtYmVycy5GR19ERUFDVElWQVRJT05fTVMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBybUJvdW5kZWRBY3RpdmF0aW9uQ2xhc3Nlc18oKSB7XG4gICAgY29uc3Qge0ZHX0FDVElWQVRJT059ID0gTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzO1xuICAgIHRoaXMuYWRhcHRlcl8ucmVtb3ZlQ2xhc3MoRkdfQUNUSVZBVElPTik7XG4gICAgdGhpcy5hY3RpdmF0aW9uQW5pbWF0aW9uSGFzRW5kZWRfID0gZmFsc2U7XG4gICAgdGhpcy5hZGFwdGVyXy5jb21wdXRlQm91bmRpbmdSZWN0KCk7XG4gIH1cblxuICByZXNldEFjdGl2YXRpb25TdGF0ZV8oKSB7XG4gICAgdGhpcy5wcmV2aW91c0FjdGl2YXRpb25FdmVudF8gPSB0aGlzLmFjdGl2YXRpb25TdGF0ZV8uYWN0aXZhdGlvbkV2ZW50O1xuICAgIHRoaXMuYWN0aXZhdGlvblN0YXRlXyA9IHRoaXMuZGVmYXVsdEFjdGl2YXRpb25TdGF0ZV8oKTtcbiAgICAvLyBUb3VjaCBkZXZpY2VzIG1heSBmaXJlIGFkZGl0aW9uYWwgZXZlbnRzIGZvciB0aGUgc2FtZSBpbnRlcmFjdGlvbiB3aXRoaW4gYSBzaG9ydCB0aW1lLlxuICAgIC8vIFN0b3JlIHRoZSBwcmV2aW91cyBldmVudCB1bnRpbCBpdCdzIHNhZmUgdG8gYXNzdW1lIHRoYXQgc3Vic2VxdWVudCBldmVudHMgYXJlIGZvciBuZXcgaW50ZXJhY3Rpb25zLlxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5wcmV2aW91c0FjdGl2YXRpb25FdmVudF8gPSBudWxsLCBNRENSaXBwbGVGb3VuZGF0aW9uLm51bWJlcnMuVEFQX0RFTEFZX01TKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gez9FdmVudH0gZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZGVhY3RpdmF0ZV8oZSkge1xuICAgIGNvbnN0IGFjdGl2YXRpb25TdGF0ZSA9IHRoaXMuYWN0aXZhdGlvblN0YXRlXztcbiAgICAvLyBUaGlzIGNhbiBoYXBwZW4gaW4gc2NlbmFyaW9zIHN1Y2ggYXMgd2hlbiB5b3UgaGF2ZSBhIGtleXVwIGV2ZW50IHRoYXQgYmx1cnMgdGhlIGVsZW1lbnQuXG4gICAgaWYgKCFhY3RpdmF0aW9uU3RhdGUuaXNBY3RpdmF0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0ZSA9IC8qKiBAdHlwZSB7IUFjdGl2YXRpb25TdGF0ZVR5cGV9ICovIChPYmplY3QuYXNzaWduKHt9LCBhY3RpdmF0aW9uU3RhdGUpKTtcblxuICAgIGlmIChhY3RpdmF0aW9uU3RhdGUuaXNQcm9ncmFtbWF0aWMpIHtcbiAgICAgIGNvbnN0IGV2dE9iamVjdCA9IG51bGw7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hbmltYXRlRGVhY3RpdmF0aW9uXyhldnRPYmplY3QsIHN0YXRlKSk7XG4gICAgICB0aGlzLnJlc2V0QWN0aXZhdGlvblN0YXRlXygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlcmVnaXN0ZXJEZWFjdGl2YXRpb25IYW5kbGVyc18oKTtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuYWN0aXZhdGlvblN0YXRlXy5oYXNEZWFjdGl2YXRpb25VWFJ1biA9IHRydWU7XG4gICAgICAgIHRoaXMuYW5pbWF0ZURlYWN0aXZhdGlvbl8oZSwgc3RhdGUpO1xuICAgICAgICB0aGlzLnJlc2V0QWN0aXZhdGlvblN0YXRlXygpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7P0V2ZW50PX0gZXZlbnQgT3B0aW9uYWwgZXZlbnQgY29udGFpbmluZyBwb3NpdGlvbiBpbmZvcm1hdGlvbi5cbiAgICovXG4gIGRlYWN0aXZhdGUoZXZlbnQgPSBudWxsKSB7XG4gICAgdGhpcy5kZWFjdGl2YXRlXyhldmVudCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgKiBAcGFyYW0geyFBY3RpdmF0aW9uU3RhdGVUeXBlfSBvcHRpb25zXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhbmltYXRlRGVhY3RpdmF0aW9uXyhlLCB7d2FzQWN0aXZhdGVkQnlQb2ludGVyLCB3YXNFbGVtZW50TWFkZUFjdGl2ZX0pIHtcbiAgICBpZiAod2FzQWN0aXZhdGVkQnlQb2ludGVyIHx8IHdhc0VsZW1lbnRNYWRlQWN0aXZlKSB7XG4gICAgICB0aGlzLnJ1bkRlYWN0aXZhdGlvblVYTG9naWNJZlJlYWR5XygpO1xuICAgIH1cbiAgfVxuXG4gIGxheW91dCgpIHtcbiAgICBpZiAodGhpcy5sYXlvdXRGcmFtZV8pIHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMubGF5b3V0RnJhbWVfKTtcbiAgICB9XG4gICAgdGhpcy5sYXlvdXRGcmFtZV8gPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgdGhpcy5sYXlvdXRJbnRlcm5hbF8oKTtcbiAgICAgIHRoaXMubGF5b3V0RnJhbWVfID0gMDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBsYXlvdXRJbnRlcm5hbF8oKSB7XG4gICAgdGhpcy5mcmFtZV8gPSB0aGlzLmFkYXB0ZXJfLmNvbXB1dGVCb3VuZGluZ1JlY3QoKTtcbiAgICBjb25zdCBtYXhEaW0gPSBNYXRoLm1heCh0aGlzLmZyYW1lXy5oZWlnaHQsIHRoaXMuZnJhbWVfLndpZHRoKTtcblxuICAgIC8vIFN1cmZhY2UgZGlhbWV0ZXIgaXMgdHJlYXRlZCBkaWZmZXJlbnRseSBmb3IgdW5ib3VuZGVkIHZzLiBib3VuZGVkIHJpcHBsZXMuXG4gICAgLy8gVW5ib3VuZGVkIHJpcHBsZSBkaWFtZXRlciBpcyBjYWxjdWxhdGVkIHNtYWxsZXIgc2luY2UgdGhlIHN1cmZhY2UgaXMgZXhwZWN0ZWQgdG8gYWxyZWFkeSBiZSBwYWRkZWQgYXBwcm9wcmlhdGVseVxuICAgIC8vIHRvIGV4dGVuZCB0aGUgaGl0Ym94LCBhbmQgdGhlIHJpcHBsZSBpcyBleHBlY3RlZCB0byBtZWV0IHRoZSBlZGdlcyBvZiB0aGUgcGFkZGVkIGhpdGJveCAod2hpY2ggaXMgdHlwaWNhbGx5XG4gICAgLy8gc3F1YXJlKS4gQm91bmRlZCByaXBwbGVzLCBvbiB0aGUgb3RoZXIgaGFuZCwgYXJlIGZ1bGx5IGV4cGVjdGVkIHRvIGV4cGFuZCBiZXlvbmQgdGhlIHN1cmZhY2UncyBsb25nZXN0IGRpYW1ldGVyXG4gICAgLy8gKGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIGRpYWdvbmFsIHBsdXMgYSBjb25zdGFudCBwYWRkaW5nKSwgYW5kIGFyZSBjbGlwcGVkIGF0IHRoZSBzdXJmYWNlJ3MgYm9yZGVyIHZpYVxuICAgIC8vIGBvdmVyZmxvdzogaGlkZGVuYC5cbiAgICBjb25zdCBnZXRCb3VuZGVkUmFkaXVzID0gKCkgPT4ge1xuICAgICAgY29uc3QgaHlwb3RlbnVzZSA9IE1hdGguc3FydChNYXRoLnBvdyh0aGlzLmZyYW1lXy53aWR0aCwgMikgKyBNYXRoLnBvdyh0aGlzLmZyYW1lXy5oZWlnaHQsIDIpKTtcbiAgICAgIHJldHVybiBoeXBvdGVudXNlICsgTURDUmlwcGxlRm91bmRhdGlvbi5udW1iZXJzLlBBRERJTkc7XG4gICAgfTtcblxuICAgIHRoaXMubWF4UmFkaXVzXyA9IHRoaXMuYWRhcHRlcl8uaXNVbmJvdW5kZWQoKSA/IG1heERpbSA6IGdldEJvdW5kZWRSYWRpdXMoKTtcblxuICAgIC8vIFJpcHBsZSBpcyBzaXplZCBhcyBhIGZyYWN0aW9uIG9mIHRoZSBsYXJnZXN0IGRpbWVuc2lvbiBvZiB0aGUgc3VyZmFjZSwgdGhlbiBzY2FsZXMgdXAgdXNpbmcgYSBDU1Mgc2NhbGUgdHJhbnNmb3JtXG4gICAgdGhpcy5pbml0aWFsU2l6ZV8gPSBtYXhEaW0gKiBNRENSaXBwbGVGb3VuZGF0aW9uLm51bWJlcnMuSU5JVElBTF9PUklHSU5fU0NBTEU7XG4gICAgdGhpcy5mZ1NjYWxlXyA9IHRoaXMubWF4UmFkaXVzXyAvIHRoaXMuaW5pdGlhbFNpemVfO1xuXG4gICAgdGhpcy51cGRhdGVMYXlvdXRDc3NWYXJzXygpO1xuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIHVwZGF0ZUxheW91dENzc1ZhcnNfKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIFZBUl9GR19TSVpFLCBWQVJfTEVGVCwgVkFSX1RPUCwgVkFSX0ZHX1NDQUxFLFxuICAgIH0gPSBNRENSaXBwbGVGb3VuZGF0aW9uLnN0cmluZ3M7XG5cbiAgICB0aGlzLmFkYXB0ZXJfLnVwZGF0ZUNzc1ZhcmlhYmxlKFZBUl9GR19TSVpFLCBgJHt0aGlzLmluaXRpYWxTaXplX31weGApO1xuICAgIHRoaXMuYWRhcHRlcl8udXBkYXRlQ3NzVmFyaWFibGUoVkFSX0ZHX1NDQUxFLCB0aGlzLmZnU2NhbGVfKTtcblxuICAgIGlmICh0aGlzLmFkYXB0ZXJfLmlzVW5ib3VuZGVkKCkpIHtcbiAgICAgIHRoaXMudW5ib3VuZGVkQ29vcmRzXyA9IHtcbiAgICAgICAgbGVmdDogTWF0aC5yb3VuZCgodGhpcy5mcmFtZV8ud2lkdGggLyAyKSAtICh0aGlzLmluaXRpYWxTaXplXyAvIDIpKSxcbiAgICAgICAgdG9wOiBNYXRoLnJvdW5kKCh0aGlzLmZyYW1lXy5oZWlnaHQgLyAyKSAtICh0aGlzLmluaXRpYWxTaXplXyAvIDIpKSxcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuYWRhcHRlcl8udXBkYXRlQ3NzVmFyaWFibGUoVkFSX0xFRlQsIGAke3RoaXMudW5ib3VuZGVkQ29vcmRzXy5sZWZ0fXB4YCk7XG4gICAgICB0aGlzLmFkYXB0ZXJfLnVwZGF0ZUNzc1ZhcmlhYmxlKFZBUl9UT1AsIGAke3RoaXMudW5ib3VuZGVkQ29vcmRzXy50b3B9cHhgKTtcbiAgICB9XG4gIH1cblxuICAvKiogQHBhcmFtIHtib29sZWFufSB1bmJvdW5kZWQgKi9cbiAgc2V0VW5ib3VuZGVkKHVuYm91bmRlZCkge1xuICAgIGNvbnN0IHtVTkJPVU5ERUR9ID0gTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzO1xuICAgIGlmICh1bmJvdW5kZWQpIHtcbiAgICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3MoVU5CT1VOREVEKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGFwdGVyXy5yZW1vdmVDbGFzcyhVTkJPVU5ERUQpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNRENSaXBwbGVGb3VuZGF0aW9uO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBNRENDb21wb25lbnQgZnJvbSAnQG1hdGVyaWFsL2Jhc2UvY29tcG9uZW50JztcbmltcG9ydCBNRENSaXBwbGVBZGFwdGVyIGZyb20gJy4vYWRhcHRlcic7XG5pbXBvcnQgTURDUmlwcGxlRm91bmRhdGlvbiBmcm9tICcuL2ZvdW5kYXRpb24nO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuL3V0aWwnO1xuXG4vKipcbiAqIEBleHRlbmRzIE1EQ0NvbXBvbmVudDwhTURDUmlwcGxlRm91bmRhdGlvbj5cbiAqL1xuY2xhc3MgTURDUmlwcGxlIGV4dGVuZHMgTURDQ29tcG9uZW50IHtcbiAgLyoqIEBwYXJhbSB7Li4uP30gYXJncyAqL1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG5cbiAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xuICAgIHRoaXMudW5ib3VuZGVkXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fSByb290XG4gICAqIEBwYXJhbSB7e2lzVW5ib3VuZGVkOiAoYm9vbGVhbnx1bmRlZmluZWQpfT19IG9wdGlvbnNcbiAgICogQHJldHVybiB7IU1EQ1JpcHBsZX1cbiAgICovXG4gIHN0YXRpYyBhdHRhY2hUbyhyb290LCB7aXNVbmJvdW5kZWQgPSB1bmRlZmluZWR9ID0ge30pIHtcbiAgICBjb25zdCByaXBwbGUgPSBuZXcgTURDUmlwcGxlKHJvb3QpO1xuICAgIC8vIE9ubHkgb3ZlcnJpZGUgdW5ib3VuZGVkIGJlaGF2aW9yIGlmIG9wdGlvbiBpcyBleHBsaWNpdGx5IHNwZWNpZmllZFxuICAgIGlmIChpc1VuYm91bmRlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByaXBwbGUudW5ib3VuZGVkID0gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoaXNVbmJvdW5kZWQpO1xuICAgIH1cbiAgICByZXR1cm4gcmlwcGxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVJpcHBsZUNhcGFibGVTdXJmYWNlfSBpbnN0YW5jZVxuICAgKiBAcmV0dXJuIHshTURDUmlwcGxlQWRhcHRlcn1cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVBZGFwdGVyKGluc3RhbmNlKSB7XG4gICAgY29uc3QgTUFUQ0hFUyA9IHV0aWwuZ2V0TWF0Y2hlc1Byb3BlcnR5KEhUTUxFbGVtZW50LnByb3RvdHlwZSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgYnJvd3NlclN1cHBvcnRzQ3NzVmFyczogKCkgPT4gdXRpbC5zdXBwb3J0c0Nzc1ZhcmlhYmxlcyh3aW5kb3cpLFxuICAgICAgaXNVbmJvdW5kZWQ6ICgpID0+IGluc3RhbmNlLnVuYm91bmRlZCxcbiAgICAgIGlzU3VyZmFjZUFjdGl2ZTogKCkgPT4gaW5zdGFuY2Uucm9vdF9bTUFUQ0hFU10oJzphY3RpdmUnKSxcbiAgICAgIGlzU3VyZmFjZURpc2FibGVkOiAoKSA9PiBpbnN0YW5jZS5kaXNhYmxlZCxcbiAgICAgIGFkZENsYXNzOiAoY2xhc3NOYW1lKSA9PiBpbnN0YW5jZS5yb290Xy5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSksXG4gICAgICByZW1vdmVDbGFzczogKGNsYXNzTmFtZSkgPT4gaW5zdGFuY2Uucm9vdF8uY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpLFxuICAgICAgY29udGFpbnNFdmVudFRhcmdldDogKHRhcmdldCkgPT4gaW5zdGFuY2Uucm9vdF8uY29udGFpbnModGFyZ2V0KSxcbiAgICAgIHJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyOiAoZXZ0VHlwZSwgaGFuZGxlcikgPT5cbiAgICAgICAgaW5zdGFuY2Uucm9vdF8uYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyLCB1dGlsLmFwcGx5UGFzc2l2ZSgpKSxcbiAgICAgIGRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IChldnRUeXBlLCBoYW5kbGVyKSA9PlxuICAgICAgICBpbnN0YW5jZS5yb290Xy5yZW1vdmVFdmVudExpc3RlbmVyKGV2dFR5cGUsIGhhbmRsZXIsIHV0aWwuYXBwbHlQYXNzaXZlKCkpLFxuICAgICAgcmVnaXN0ZXJEb2N1bWVudEludGVyYWN0aW9uSGFuZGxlcjogKGV2dFR5cGUsIGhhbmRsZXIpID0+XG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2dFR5cGUsIGhhbmRsZXIsIHV0aWwuYXBwbHlQYXNzaXZlKCkpLFxuICAgICAgZGVyZWdpc3RlckRvY3VtZW50SW50ZXJhY3Rpb25IYW5kbGVyOiAoZXZ0VHlwZSwgaGFuZGxlcikgPT5cbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgaGFuZGxlciwgdXRpbC5hcHBseVBhc3NpdmUoKSksXG4gICAgICByZWdpc3RlclJlc2l6ZUhhbmRsZXI6IChoYW5kbGVyKSA9PiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlciksXG4gICAgICBkZXJlZ2lzdGVyUmVzaXplSGFuZGxlcjogKGhhbmRsZXIpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVyKSxcbiAgICAgIHVwZGF0ZUNzc1ZhcmlhYmxlOiAodmFyTmFtZSwgdmFsdWUpID0+IGluc3RhbmNlLnJvb3RfLnN0eWxlLnNldFByb3BlcnR5KHZhck5hbWUsIHZhbHVlKSxcbiAgICAgIGNvbXB1dGVCb3VuZGluZ1JlY3Q6ICgpID0+IGluc3RhbmNlLnJvb3RfLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgZ2V0V2luZG93UGFnZU9mZnNldDogKCkgPT4gKHt4OiB3aW5kb3cucGFnZVhPZmZzZXQsIHk6IHdpbmRvdy5wYWdlWU9mZnNldH0pLFxuICAgIH07XG4gIH1cblxuICAvKiogQHJldHVybiB7Ym9vbGVhbn0gKi9cbiAgZ2V0IHVuYm91bmRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy51bmJvdW5kZWRfO1xuICB9XG5cbiAgLyoqIEBwYXJhbSB7Ym9vbGVhbn0gdW5ib3VuZGVkICovXG4gIHNldCB1bmJvdW5kZWQodW5ib3VuZGVkKSB7XG4gICAgdGhpcy51bmJvdW5kZWRfID0gQm9vbGVhbih1bmJvdW5kZWQpO1xuICAgIHRoaXMuc2V0VW5ib3VuZGVkXygpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3N1cmUgQ29tcGlsZXIgdGhyb3dzIGFuIGFjY2VzcyBjb250cm9sIGVycm9yIHdoZW4gZGlyZWN0bHkgYWNjZXNzaW5nIGFcbiAgICogcHJvdGVjdGVkIG9yIHByaXZhdGUgcHJvcGVydHkgaW5zaWRlIGEgZ2V0dGVyL3NldHRlciwgbGlrZSB1bmJvdW5kZWQgYWJvdmUuXG4gICAqIEJ5IGFjY2Vzc2luZyB0aGUgcHJvdGVjdGVkIHByb3BlcnR5IGluc2lkZSBhIG1ldGhvZCwgd2Ugc29sdmUgdGhhdCBwcm9ibGVtLlxuICAgKiBUaGF0J3Mgd2h5IHRoaXMgZnVuY3Rpb24gZXhpc3RzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2V0VW5ib3VuZGVkXygpIHtcbiAgICB0aGlzLmZvdW5kYXRpb25fLnNldFVuYm91bmRlZCh0aGlzLnVuYm91bmRlZF8pO1xuICB9XG5cbiAgYWN0aXZhdGUoKSB7XG4gICAgdGhpcy5mb3VuZGF0aW9uXy5hY3RpdmF0ZSgpO1xuICB9XG5cbiAgZGVhY3RpdmF0ZSgpIHtcbiAgICB0aGlzLmZvdW5kYXRpb25fLmRlYWN0aXZhdGUoKTtcbiAgfVxuXG4gIGxheW91dCgpIHtcbiAgICB0aGlzLmZvdW5kYXRpb25fLmxheW91dCgpO1xuICB9XG5cbiAgLyoqIEByZXR1cm4geyFNRENSaXBwbGVGb3VuZGF0aW9ufSAqL1xuICBnZXREZWZhdWx0Rm91bmRhdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IE1EQ1JpcHBsZUZvdW5kYXRpb24oTURDUmlwcGxlLmNyZWF0ZUFkYXB0ZXIodGhpcykpO1xuICB9XG5cbiAgaW5pdGlhbFN5bmNXaXRoRE9NKCkge1xuICAgIHRoaXMudW5ib3VuZGVkID0gJ21kY1JpcHBsZUlzVW5ib3VuZGVkJyBpbiB0aGlzLnJvb3RfLmRhdGFzZXQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTZWUgTWF0ZXJpYWwgRGVzaWduIHNwZWMgZm9yIG1vcmUgZGV0YWlscyBvbiB3aGVuIHRvIHVzZSByaXBwbGVzLlxuICogaHR0cHM6Ly9tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9jaG9yZW9ncmFwaHkuaHRtbCNjaG9yZW9ncmFwaHktY3JlYXRpb25cbiAqIEByZWNvcmRcbiAqL1xuY2xhc3MgUmlwcGxlQ2FwYWJsZVN1cmZhY2Uge31cblxuLyoqIEBwcm90ZWN0ZWQgeyFFbGVtZW50fSAqL1xuUmlwcGxlQ2FwYWJsZVN1cmZhY2UucHJvdG90eXBlLnJvb3RfO1xuXG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoZSByaXBwbGUgYmxlZWRzIG91dCBvZiB0aGUgYm91bmRzIG9mIHRoZSBlbGVtZW50LlxuICogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfVxuICovXG5SaXBwbGVDYXBhYmxlU3VyZmFjZS5wcm90b3R5cGUudW5ib3VuZGVkO1xuXG4vKipcbiAqIFdoZXRoZXIgb3Igbm90IHRoZSByaXBwbGUgaXMgYXR0YWNoZWQgdG8gYSBkaXNhYmxlZCBjb21wb25lbnQuXG4gKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gKi9cblJpcHBsZUNhcGFibGVTdXJmYWNlLnByb3RvdHlwZS5kaXNhYmxlZDtcblxuZXhwb3J0IHtNRENSaXBwbGUsIE1EQ1JpcHBsZUZvdW5kYXRpb24sIFJpcHBsZUNhcGFibGVTdXJmYWNlLCB1dGlsfTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIFN0b3JlcyByZXN1bHQgZnJvbSBzdXBwb3J0c0Nzc1ZhcmlhYmxlcyB0byBhdm9pZCByZWR1bmRhbnQgcHJvY2Vzc2luZyB0byBkZXRlY3QgQ1NTIGN1c3RvbSB2YXJpYWJsZSBzdXBwb3J0LlxuICogQHByaXZhdGUge2Jvb2xlYW58dW5kZWZpbmVkfVxuICovXG5sZXQgc3VwcG9ydHNDc3NWYXJpYWJsZXNfO1xuXG4vKipcbiAqIFN0b3JlcyByZXN1bHQgZnJvbSBhcHBseVBhc3NpdmUgdG8gYXZvaWQgcmVkdW5kYW50IHByb2Nlc3NpbmcgdG8gZGV0ZWN0IHBhc3NpdmUgZXZlbnQgbGlzdGVuZXIgc3VwcG9ydC5cbiAqIEBwcml2YXRlIHtib29sZWFufHVuZGVmaW5lZH1cbiAqL1xubGV0IHN1cHBvcnRzUGFzc2l2ZV87XG5cbi8qKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5kb3dPYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGRldGVjdEVkZ2VQc2V1ZG9WYXJCdWcod2luZG93T2JqKSB7XG4gIC8vIERldGVjdCB2ZXJzaW9ucyBvZiBFZGdlIHdpdGggYnVnZ3kgdmFyKCkgc3VwcG9ydFxuICAvLyBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzExNDk1NDQ4L1xuICBjb25zdCBkb2N1bWVudCA9IHdpbmRvd09iai5kb2N1bWVudDtcbiAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBub2RlLmNsYXNzTmFtZSA9ICdtZGMtcmlwcGxlLXN1cmZhY2UtLXRlc3QtZWRnZS12YXItYnVnJztcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChub2RlKTtcblxuICAvLyBUaGUgYnVnIGV4aXN0cyBpZiA6OmJlZm9yZSBzdHlsZSBlbmRzIHVwIHByb3BhZ2F0aW5nIHRvIHRoZSBwYXJlbnQgZWxlbWVudC5cbiAgLy8gQWRkaXRpb25hbGx5LCBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgbnVsbCBpbiBpZnJhbWVzIHdpdGggZGlzcGxheTogXCJub25lXCIgaW4gRmlyZWZveCxcbiAgLy8gYnV0IEZpcmVmb3ggaXMga25vd24gdG8gc3VwcG9ydCBDU1MgY3VzdG9tIHByb3BlcnRpZXMgY29ycmVjdGx5LlxuICAvLyBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICBjb25zdCBjb21wdXRlZFN0eWxlID0gd2luZG93T2JqLmdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gIGNvbnN0IGhhc1BzZXVkb1ZhckJ1ZyA9IGNvbXB1dGVkU3R5bGUgIT09IG51bGwgJiYgY29tcHV0ZWRTdHlsZS5ib3JkZXJUb3BTdHlsZSA9PT0gJ3NvbGlkJztcbiAgbm9kZS5yZW1vdmUoKTtcbiAgcmV0dXJuIGhhc1BzZXVkb1ZhckJ1Zztcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpbmRvd09ialxuICogQHBhcmFtIHtib29sZWFuPX0gZm9yY2VSZWZyZXNoXG4gKiBAcmV0dXJuIHtib29sZWFufHVuZGVmaW5lZH1cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0Nzc1ZhcmlhYmxlcyh3aW5kb3dPYmosIGZvcmNlUmVmcmVzaCA9IGZhbHNlKSB7XG4gIGxldCBzdXBwb3J0c0Nzc1ZhcmlhYmxlcyA9IHN1cHBvcnRzQ3NzVmFyaWFibGVzXztcbiAgaWYgKHR5cGVvZiBzdXBwb3J0c0Nzc1ZhcmlhYmxlc18gPT09ICdib29sZWFuJyAmJiAhZm9yY2VSZWZyZXNoKSB7XG4gICAgcmV0dXJuIHN1cHBvcnRzQ3NzVmFyaWFibGVzO1xuICB9XG5cbiAgY29uc3Qgc3VwcG9ydHNGdW5jdGlvblByZXNlbnQgPSB3aW5kb3dPYmouQ1NTICYmIHR5cGVvZiB3aW5kb3dPYmouQ1NTLnN1cHBvcnRzID09PSAnZnVuY3Rpb24nO1xuICBpZiAoIXN1cHBvcnRzRnVuY3Rpb25QcmVzZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZXhwbGljaXRseVN1cHBvcnRzQ3NzVmFycyA9IHdpbmRvd09iai5DU1Muc3VwcG9ydHMoJy0tY3NzLXZhcnMnLCAneWVzJyk7XG4gIC8vIFNlZTogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NDY2OVxuICAvLyBTZWU6IFJFQURNRSBzZWN0aW9uIG9uIFNhZmFyaVxuICBjb25zdCB3ZUFyZUZlYXR1cmVEZXRlY3RpbmdTYWZhcmkxMHBsdXMgPSAoXG4gICAgd2luZG93T2JqLkNTUy5zdXBwb3J0cygnKC0tY3NzLXZhcnM6IHllcyknKSAmJlxuICAgIHdpbmRvd09iai5DU1Muc3VwcG9ydHMoJ2NvbG9yJywgJyMwMDAwMDAwMCcpXG4gICk7XG5cbiAgaWYgKGV4cGxpY2l0bHlTdXBwb3J0c0Nzc1ZhcnMgfHwgd2VBcmVGZWF0dXJlRGV0ZWN0aW5nU2FmYXJpMTBwbHVzKSB7XG4gICAgc3VwcG9ydHNDc3NWYXJpYWJsZXMgPSAhZGV0ZWN0RWRnZVBzZXVkb1ZhckJ1Zyh3aW5kb3dPYmopO1xuICB9IGVsc2Uge1xuICAgIHN1cHBvcnRzQ3NzVmFyaWFibGVzID0gZmFsc2U7XG4gIH1cblxuICBpZiAoIWZvcmNlUmVmcmVzaCkge1xuICAgIHN1cHBvcnRzQ3NzVmFyaWFibGVzXyA9IHN1cHBvcnRzQ3NzVmFyaWFibGVzO1xuICB9XG4gIHJldHVybiBzdXBwb3J0c0Nzc1ZhcmlhYmxlcztcbn1cblxuLy9cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGN1cnJlbnQgYnJvd3NlciBzdXBwb3J0cyBwYXNzaXZlIGV2ZW50IGxpc3RlbmVycywgYW5kIGlmIHNvLCB1c2UgdGhlbS5cbiAqIEBwYXJhbSB7IVdpbmRvdz19IGdsb2JhbE9ialxuICogQHBhcmFtIHtib29sZWFuPX0gZm9yY2VSZWZyZXNoXG4gKiBAcmV0dXJuIHtib29sZWFufHtwYXNzaXZlOiBib29sZWFufX1cbiAqL1xuZnVuY3Rpb24gYXBwbHlQYXNzaXZlKGdsb2JhbE9iaiA9IHdpbmRvdywgZm9yY2VSZWZyZXNoID0gZmFsc2UpIHtcbiAgaWYgKHN1cHBvcnRzUGFzc2l2ZV8gPT09IHVuZGVmaW5lZCB8fCBmb3JjZVJlZnJlc2gpIHtcbiAgICBsZXQgaXNTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgZ2xvYmFsT2JqLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCB7Z2V0IHBhc3NpdmUoKSB7XG4gICAgICAgIGlzU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgIH19KTtcbiAgICB9IGNhdGNoIChlKSB7IH1cblxuICAgIHN1cHBvcnRzUGFzc2l2ZV8gPSBpc1N1cHBvcnRlZDtcbiAgfVxuXG4gIHJldHVybiBzdXBwb3J0c1Bhc3NpdmVfID8ge3Bhc3NpdmU6IHRydWV9IDogZmFsc2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHshT2JqZWN0fSBIVE1MRWxlbWVudFByb3RvdHlwZVxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gKi9cbmZ1bmN0aW9uIGdldE1hdGNoZXNQcm9wZXJ0eShIVE1MRWxlbWVudFByb3RvdHlwZSkge1xuICByZXR1cm4gW1xuICAgICd3ZWJraXRNYXRjaGVzU2VsZWN0b3InLCAnbXNNYXRjaGVzU2VsZWN0b3InLCAnbWF0Y2hlcycsXG4gIF0uZmlsdGVyKChwKSA9PiBwIGluIEhUTUxFbGVtZW50UHJvdG90eXBlKS5wb3AoKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFFdmVudH0gZXZcbiAqIEBwYXJhbSB7e3g6IG51bWJlciwgeTogbnVtYmVyfX0gcGFnZU9mZnNldFxuICogQHBhcmFtIHshQ2xpZW50UmVjdH0gY2xpZW50UmVjdFxuICogQHJldHVybiB7e3g6IG51bWJlciwgeTogbnVtYmVyfX1cbiAqL1xuZnVuY3Rpb24gZ2V0Tm9ybWFsaXplZEV2ZW50Q29vcmRzKGV2LCBwYWdlT2Zmc2V0LCBjbGllbnRSZWN0KSB7XG4gIGNvbnN0IHt4LCB5fSA9IHBhZ2VPZmZzZXQ7XG4gIGNvbnN0IGRvY3VtZW50WCA9IHggKyBjbGllbnRSZWN0LmxlZnQ7XG4gIGNvbnN0IGRvY3VtZW50WSA9IHkgKyBjbGllbnRSZWN0LnRvcDtcblxuICBsZXQgbm9ybWFsaXplZFg7XG4gIGxldCBub3JtYWxpemVkWTtcbiAgLy8gRGV0ZXJtaW5lIHRvdWNoIHBvaW50IHJlbGF0aXZlIHRvIHRoZSByaXBwbGUgY29udGFpbmVyLlxuICBpZiAoZXYudHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgbm9ybWFsaXplZFggPSBldi5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCAtIGRvY3VtZW50WDtcbiAgICBub3JtYWxpemVkWSA9IGV2LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIC0gZG9jdW1lbnRZO1xuICB9IGVsc2Uge1xuICAgIG5vcm1hbGl6ZWRYID0gZXYucGFnZVggLSBkb2N1bWVudFg7XG4gICAgbm9ybWFsaXplZFkgPSBldi5wYWdlWSAtIGRvY3VtZW50WTtcbiAgfVxuXG4gIHJldHVybiB7eDogbm9ybWFsaXplZFgsIHk6IG5vcm1hbGl6ZWRZfTtcbn1cblxuZXhwb3J0IHtzdXBwb3J0c0Nzc1ZhcmlhYmxlcywgYXBwbHlQYXNzaXZlLCBnZXRNYXRjaGVzUHJvcGVydHksIGdldE5vcm1hbGl6ZWRFdmVudENvb3Jkc307XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGNzc0NsYXNzZXMgPSB7XG4gIFJPT1Q6ICdtZGMtc25hY2tiYXInLFxuICBURVhUOiAnbWRjLXNuYWNrYmFyX190ZXh0JyxcbiAgQUNUSU9OX1dSQVBQRVI6ICdtZGMtc25hY2tiYXJfX2FjdGlvbi13cmFwcGVyJyxcbiAgQUNUSU9OX0JVVFRPTjogJ21kYy1zbmFja2Jhcl9fYWN0aW9uLWJ1dHRvbicsXG4gIEFDVElWRTogJ21kYy1zbmFja2Jhci0tYWN0aXZlJyxcbiAgTVVMVElMSU5FOiAnbWRjLXNuYWNrYmFyLS1tdWx0aWxpbmUnLFxuICBBQ1RJT05fT05fQk9UVE9NOiAnbWRjLXNuYWNrYmFyLS1hY3Rpb24tb24tYm90dG9tJyxcbn07XG5cbmV4cG9ydCBjb25zdCBzdHJpbmdzID0ge1xuICBURVhUX1NFTEVDVE9SOiAnLm1kYy1zbmFja2Jhcl9fdGV4dCcsXG4gIEFDVElPTl9XUkFQUEVSX1NFTEVDVE9SOiAnLm1kYy1zbmFja2Jhcl9fYWN0aW9uLXdyYXBwZXInLFxuICBBQ1RJT05fQlVUVE9OX1NFTEVDVE9SOiAnLm1kYy1zbmFja2Jhcl9fYWN0aW9uLWJ1dHRvbicsXG4gIFNIT1dfRVZFTlQ6ICdNRENTbmFja2JhcjpzaG93JyxcbiAgSElERV9FVkVOVDogJ01EQ1NuYWNrYmFyOmhpZGUnLFxufTtcblxuZXhwb3J0IGNvbnN0IG51bWJlcnMgPSB7XG4gIE1FU1NBR0VfVElNRU9VVDogMjc1MCxcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge01EQ0ZvdW5kYXRpb259IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2luZGV4JztcbmltcG9ydCB7Y3NzQ2xhc3Nlcywgc3RyaW5ncywgbnVtYmVyc30gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNRENTbmFja2JhckZvdW5kYXRpb24gZXh0ZW5kcyBNRENGb3VuZGF0aW9uIHtcbiAgc3RhdGljIGdldCBjc3NDbGFzc2VzKCkge1xuICAgIHJldHVybiBjc3NDbGFzc2VzO1xuICB9XG5cbiAgc3RhdGljIGdldCBzdHJpbmdzKCkge1xuICAgIHJldHVybiBzdHJpbmdzO1xuICB9XG5cbiAgc3RhdGljIGdldCBkZWZhdWx0QWRhcHRlcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYWRkQ2xhc3M6ICgvKiBjbGFzc05hbWU6IHN0cmluZyAqLykgPT4ge30sXG4gICAgICByZW1vdmVDbGFzczogKC8qIGNsYXNzTmFtZTogc3RyaW5nICovKSA9PiB7fSxcbiAgICAgIHNldEFyaWFIaWRkZW46ICgpID0+IHt9LFxuICAgICAgdW5zZXRBcmlhSGlkZGVuOiAoKSA9PiB7fSxcbiAgICAgIHNldEFjdGlvbkFyaWFIaWRkZW46ICgpID0+IHt9LFxuICAgICAgdW5zZXRBY3Rpb25BcmlhSGlkZGVuOiAoKSA9PiB7fSxcbiAgICAgIHNldEFjdGlvblRleHQ6ICgvKiBhY3Rpb25UZXh0OiBzdHJpbmcgKi8pID0+IHt9LFxuICAgICAgc2V0TWVzc2FnZVRleHQ6ICgvKiBtZXNzYWdlOiBzdHJpbmcgKi8pID0+IHt9LFxuICAgICAgc2V0Rm9jdXM6ICgpID0+IHt9LFxuICAgICAgdmlzaWJpbGl0eUlzSGlkZGVuOiAoKSA9PiAvKiBib29sZWFuICovIGZhbHNlLFxuICAgICAgcmVnaXN0ZXJDYXB0dXJlZEJsdXJIYW5kbGVyOiAoLyogaGFuZGxlcjogRXZlbnRMaXN0ZW5lciAqLykgPT4ge30sXG4gICAgICBkZXJlZ2lzdGVyQ2FwdHVyZWRCbHVySGFuZGxlcjogKC8qIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXIgKi8pID0+IHt9LFxuICAgICAgcmVnaXN0ZXJWaXNpYmlsaXR5Q2hhbmdlSGFuZGxlcjogKC8qIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXIgKi8pID0+IHt9LFxuICAgICAgZGVyZWdpc3RlclZpc2liaWxpdHlDaGFuZ2VIYW5kbGVyOiAoLyogaGFuZGxlcjogRXZlbnRMaXN0ZW5lciAqLykgPT4ge30sXG4gICAgICByZWdpc3RlckNhcHR1cmVkSW50ZXJhY3Rpb25IYW5kbGVyOiAoLyogZXZ0VHlwZTogc3RyaW5nLCBoYW5kbGVyOiBFdmVudExpc3RlbmVyICovKSA9PiB7fSxcbiAgICAgIGRlcmVnaXN0ZXJDYXB0dXJlZEludGVyYWN0aW9uSGFuZGxlcjogKC8qIGV2dFR5cGU6IHN0cmluZywgaGFuZGxlcjogRXZlbnRMaXN0ZW5lciAqLykgPT4ge30sXG4gICAgICByZWdpc3RlckFjdGlvbkNsaWNrSGFuZGxlcjogKC8qIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXIgKi8pID0+IHt9LFxuICAgICAgZGVyZWdpc3RlckFjdGlvbkNsaWNrSGFuZGxlcjogKC8qIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXIgKi8pID0+IHt9LFxuICAgICAgcmVnaXN0ZXJUcmFuc2l0aW9uRW5kSGFuZGxlcjogKC8qIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXIgKi8pID0+IHt9LFxuICAgICAgZGVyZWdpc3RlclRyYW5zaXRpb25FbmRIYW5kbGVyOiAoLyogaGFuZGxlcjogRXZlbnRMaXN0ZW5lciAqLykgPT4ge30sXG4gICAgICBub3RpZnlTaG93OiAoKSA9PiB7fSxcbiAgICAgIG5vdGlmeUhpZGU6ICgpID0+IHt9LFxuICAgIH07XG4gIH1cblxuICBnZXQgYWN0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZV87XG4gIH1cblxuICBjb25zdHJ1Y3RvcihhZGFwdGVyKSB7XG4gICAgc3VwZXIoT2JqZWN0LmFzc2lnbihNRENTbmFja2JhckZvdW5kYXRpb24uZGVmYXVsdEFkYXB0ZXIsIGFkYXB0ZXIpKTtcblxuICAgIHRoaXMuYWN0aXZlXyA9IGZhbHNlO1xuICAgIHRoaXMuYWN0aW9uV2FzQ2xpY2tlZF8gPSBmYWxzZTtcbiAgICB0aGlzLmRpc21pc3NPbkFjdGlvbl8gPSB0cnVlO1xuICAgIHRoaXMuZmlyc3RGb2N1c18gPSB0cnVlO1xuICAgIHRoaXMucG9pbnRlckRvd25SZWNvZ25pemVkXyA9IGZhbHNlO1xuICAgIHRoaXMuc25hY2tiYXJIYXNGb2N1c18gPSBmYWxzZTtcbiAgICB0aGlzLnNuYWNrYmFyRGF0YV8gPSBudWxsO1xuICAgIHRoaXMucXVldWVfID0gW107XG4gICAgdGhpcy5hY3Rpb25DbGlja0hhbmRsZXJfID0gKCkgPT4ge1xuICAgICAgdGhpcy5hY3Rpb25XYXNDbGlja2VkXyA9IHRydWU7XG4gICAgICB0aGlzLmludm9rZUFjdGlvbl8oKTtcbiAgICB9O1xuICAgIHRoaXMudmlzaWJpbGl0eWNoYW5nZUhhbmRsZXJfID0gKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkXyk7XG4gICAgICB0aGlzLnNuYWNrYmFySGFzRm9jdXNfID0gdHJ1ZTtcblxuICAgICAgaWYgKCF0aGlzLmFkYXB0ZXJfLnZpc2liaWxpdHlJc0hpZGRlbigpKSB7XG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5jbGVhbnVwXy5iaW5kKHRoaXMpLCB0aGlzLnNuYWNrYmFyRGF0YV8udGltZW91dCB8fCBudW1iZXJzLk1FU1NBR0VfVElNRU9VVCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmludGVyYWN0aW9uSGFuZGxlcl8gPSAoZXZ0KSA9PiB7XG4gICAgICBpZiAoZXZ0LnR5cGUgPT0gJ3RvdWNoc3RhcnQnIHx8IGV2dC50eXBlID09ICdtb3VzZWRvd24nKSB7XG4gICAgICAgIHRoaXMucG9pbnRlckRvd25SZWNvZ25pemVkXyA9IHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLmhhbmRsZVBvc3NpYmxlVGFiS2V5Ym9hcmRGb2N1c18oZXZ0KTtcblxuICAgICAgaWYgKGV2dC50eXBlID09ICdmb2N1cycpIHtcbiAgICAgICAgdGhpcy5wb2ludGVyRG93blJlY29nbml6ZWRfID0gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmJsdXJIYW5kbGVyXyA9ICgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZF8pO1xuICAgICAgdGhpcy5zbmFja2Jhckhhc0ZvY3VzXyA9IGZhbHNlO1xuICAgICAgdGhpcy50aW1lb3V0SWRfID0gc2V0VGltZW91dCh0aGlzLmNsZWFudXBfLmJpbmQodGhpcyksIHRoaXMuc25hY2tiYXJEYXRhXy50aW1lb3V0IHx8IG51bWJlcnMuTUVTU0FHRV9USU1FT1VUKTtcbiAgICB9O1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmFkYXB0ZXJfLnJlZ2lzdGVyQWN0aW9uQ2xpY2tIYW5kbGVyKHRoaXMuYWN0aW9uQ2xpY2tIYW5kbGVyXyk7XG4gICAgdGhpcy5hZGFwdGVyXy5zZXRBcmlhSGlkZGVuKCk7XG4gICAgdGhpcy5hZGFwdGVyXy5zZXRBY3Rpb25BcmlhSGlkZGVuKCk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuYWRhcHRlcl8uZGVyZWdpc3RlckFjdGlvbkNsaWNrSGFuZGxlcih0aGlzLmFjdGlvbkNsaWNrSGFuZGxlcl8pO1xuICAgIHRoaXMuYWRhcHRlcl8uZGVyZWdpc3RlckNhcHR1cmVkQmx1ckhhbmRsZXIodGhpcy5ibHVySGFuZGxlcl8pO1xuICAgIHRoaXMuYWRhcHRlcl8uZGVyZWdpc3RlclZpc2liaWxpdHlDaGFuZ2VIYW5kbGVyKHRoaXMudmlzaWJpbGl0eWNoYW5nZUhhbmRsZXJfKTtcbiAgICBbJ3RvdWNoc3RhcnQnLCAnbW91c2Vkb3duJywgJ2ZvY3VzJ10uZm9yRWFjaCgoZXZ0VHlwZSkgPT4ge1xuICAgICAgdGhpcy5hZGFwdGVyXy5kZXJlZ2lzdGVyQ2FwdHVyZWRJbnRlcmFjdGlvbkhhbmRsZXIoZXZ0VHlwZSwgdGhpcy5pbnRlcmFjdGlvbkhhbmRsZXJfKTtcbiAgICB9KTtcbiAgfVxuXG4gIGRpc21pc3Nlc09uQWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmRpc21pc3NPbkFjdGlvbl87XG4gIH1cblxuICBzZXREaXNtaXNzT25BY3Rpb24oZGlzbWlzc09uQWN0aW9uKSB7XG4gICAgdGhpcy5kaXNtaXNzT25BY3Rpb25fID0gISFkaXNtaXNzT25BY3Rpb247XG4gIH1cblxuICBzaG93KGRhdGEpIHtcbiAgICBpZiAoIWRhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1BsZWFzZSBwcm92aWRlIGEgZGF0YSBvYmplY3Qgd2l0aCBhdCBsZWFzdCBhIG1lc3NhZ2UgdG8gZGlzcGxheS4nKTtcbiAgICB9XG4gICAgaWYgKCFkYXRhLm1lc3NhZ2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHByb3ZpZGUgYSBtZXNzYWdlIHRvIGJlIGRpc3BsYXllZC4nKTtcbiAgICB9XG4gICAgaWYgKGRhdGEuYWN0aW9uSGFuZGxlciAmJiAhZGF0YS5hY3Rpb25UZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSBwcm92aWRlIGFjdGlvbiB0ZXh0IHdpdGggdGhlIGhhbmRsZXIuJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgdGhpcy5xdWV1ZV8ucHVzaChkYXRhKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkXyk7XG4gICAgdGhpcy5zbmFja2JhckRhdGFfID0gZGF0YTtcbiAgICB0aGlzLmZpcnN0Rm9jdXNfID0gdHJ1ZTtcbiAgICB0aGlzLmFkYXB0ZXJfLnJlZ2lzdGVyVmlzaWJpbGl0eUNoYW5nZUhhbmRsZXIodGhpcy52aXNpYmlsaXR5Y2hhbmdlSGFuZGxlcl8pO1xuICAgIHRoaXMuYWRhcHRlcl8ucmVnaXN0ZXJDYXB0dXJlZEJsdXJIYW5kbGVyKHRoaXMuYmx1ckhhbmRsZXJfKTtcbiAgICBbJ3RvdWNoc3RhcnQnLCAnbW91c2Vkb3duJywgJ2ZvY3VzJ10uZm9yRWFjaCgoZXZ0VHlwZSkgPT4ge1xuICAgICAgdGhpcy5hZGFwdGVyXy5yZWdpc3RlckNhcHR1cmVkSW50ZXJhY3Rpb25IYW5kbGVyKGV2dFR5cGUsIHRoaXMuaW50ZXJhY3Rpb25IYW5kbGVyXyk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB7QUNUSVZFLCBNVUxUSUxJTkUsIEFDVElPTl9PTl9CT1RUT019ID0gY3NzQ2xhc3NlcztcblxuICAgIHRoaXMuYWRhcHRlcl8uc2V0TWVzc2FnZVRleHQodGhpcy5zbmFja2JhckRhdGFfLm1lc3NhZ2UpO1xuXG4gICAgaWYgKHRoaXMuc25hY2tiYXJEYXRhXy5tdWx0aWxpbmUpIHtcbiAgICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3MoTVVMVElMSU5FKTtcbiAgICAgIGlmICh0aGlzLnNuYWNrYmFyRGF0YV8uYWN0aW9uT25Cb3R0b20pIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5hZGRDbGFzcyhBQ1RJT05fT05fQk9UVE9NKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5zbmFja2JhckRhdGFfLmFjdGlvbkhhbmRsZXIpIHtcbiAgICAgIHRoaXMuYWRhcHRlcl8uc2V0QWN0aW9uVGV4dCh0aGlzLnNuYWNrYmFyRGF0YV8uYWN0aW9uVGV4dCk7XG4gICAgICB0aGlzLmFjdGlvbkhhbmRsZXJfID0gdGhpcy5zbmFja2JhckRhdGFfLmFjdGlvbkhhbmRsZXI7XG4gICAgICB0aGlzLnNldEFjdGlvbkhpZGRlbl8oZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldEFjdGlvbkhpZGRlbl8odHJ1ZSk7XG4gICAgICB0aGlzLmFjdGlvbkhhbmRsZXJfID0gbnVsbDtcbiAgICAgIHRoaXMuYWRhcHRlcl8uc2V0QWN0aW9uVGV4dChudWxsKTtcbiAgICB9XG5cbiAgICB0aGlzLmFjdGl2ZV8gPSB0cnVlO1xuICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3MoQUNUSVZFKTtcbiAgICB0aGlzLmFkYXB0ZXJfLnVuc2V0QXJpYUhpZGRlbigpO1xuICAgIHRoaXMuYWRhcHRlcl8ubm90aWZ5U2hvdygpO1xuXG4gICAgdGhpcy50aW1lb3V0SWRfID0gc2V0VGltZW91dCh0aGlzLmNsZWFudXBfLmJpbmQodGhpcyksIHRoaXMuc25hY2tiYXJEYXRhXy50aW1lb3V0IHx8IG51bWJlcnMuTUVTU0FHRV9USU1FT1VUKTtcbiAgfVxuXG4gIGhhbmRsZVBvc3NpYmxlVGFiS2V5Ym9hcmRGb2N1c18oKSB7XG4gICAgY29uc3QgaGlqYWNrRm9jdXMgPVxuICAgICAgdGhpcy5maXJzdEZvY3VzXyAmJiAhdGhpcy5wb2ludGVyRG93blJlY29nbml6ZWRfO1xuXG4gICAgaWYgKGhpamFja0ZvY3VzKSB7XG4gICAgICB0aGlzLnNldEZvY3VzT25BY3Rpb25fKCk7XG4gICAgfVxuXG4gICAgdGhpcy5maXJzdEZvY3VzXyA9IGZhbHNlO1xuICB9XG5cbiAgc2V0Rm9jdXNPbkFjdGlvbl8oKSB7XG4gICAgdGhpcy5hZGFwdGVyXy5zZXRGb2N1cygpO1xuICAgIHRoaXMuc25hY2tiYXJIYXNGb2N1c18gPSB0cnVlO1xuICAgIHRoaXMuZmlyc3RGb2N1c18gPSBmYWxzZTtcbiAgfVxuXG4gIGludm9rZUFjdGlvbl8oKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghdGhpcy5hY3Rpb25IYW5kbGVyXykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWN0aW9uSGFuZGxlcl8oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKHRoaXMuZGlzbWlzc09uQWN0aW9uXykge1xuICAgICAgICB0aGlzLmNsZWFudXBfKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2xlYW51cF8oKSB7XG4gICAgY29uc3QgYWxsb3dEaXNtaXNzYWwgPSAhdGhpcy5zbmFja2Jhckhhc0ZvY3VzXyB8fCB0aGlzLmFjdGlvbldhc0NsaWNrZWRfO1xuXG4gICAgaWYgKGFsbG93RGlzbWlzc2FsKSB7XG4gICAgICBjb25zdCB7QUNUSVZFLCBNVUxUSUxJTkUsIEFDVElPTl9PTl9CT1RUT019ID0gY3NzQ2xhc3NlcztcblxuICAgICAgdGhpcy5hZGFwdGVyXy5yZW1vdmVDbGFzcyhBQ1RJVkUpO1xuXG4gICAgICBjb25zdCBoYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0SWRfKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5kZXJlZ2lzdGVyVHJhbnNpdGlvbkVuZEhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgIHRoaXMuYWRhcHRlcl8ucmVtb3ZlQ2xhc3MoTVVMVElMSU5FKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5yZW1vdmVDbGFzcyhBQ1RJT05fT05fQk9UVE9NKTtcbiAgICAgICAgdGhpcy5zZXRBY3Rpb25IaWRkZW5fKHRydWUpO1xuICAgICAgICB0aGlzLmFkYXB0ZXJfLnNldEFyaWFIaWRkZW4oKTtcbiAgICAgICAgdGhpcy5hY3RpdmVfID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc25hY2tiYXJIYXNGb2N1c18gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5ub3RpZnlIaWRlKCk7XG4gICAgICAgIHRoaXMuc2hvd05leHRfKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmFkYXB0ZXJfLnJlZ2lzdGVyVHJhbnNpdGlvbkVuZEhhbmRsZXIoaGFuZGxlcik7XG4gICAgfVxuICB9XG5cbiAgc2hvd05leHRfKCkge1xuICAgIGlmICghdGhpcy5xdWV1ZV8ubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2hvdyh0aGlzLnF1ZXVlXy5zaGlmdCgpKTtcbiAgfVxuXG4gIHNldEFjdGlvbkhpZGRlbl8oaXNIaWRkZW4pIHtcbiAgICBpZiAoaXNIaWRkZW4pIHtcbiAgICAgIHRoaXMuYWRhcHRlcl8uc2V0QWN0aW9uQXJpYUhpZGRlbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFkYXB0ZXJfLnVuc2V0QWN0aW9uQXJpYUhpZGRlbigpO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtNRENDb21wb25lbnR9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2luZGV4JztcbmltcG9ydCBNRENTbmFja2JhckZvdW5kYXRpb24gZnJvbSAnLi9mb3VuZGF0aW9uJztcbmltcG9ydCB7Z2V0Q29ycmVjdEV2ZW50TmFtZX0gZnJvbSAnQG1hdGVyaWFsL2FuaW1hdGlvbi9pbmRleCc7XG5cbmV4cG9ydCB7TURDU25hY2tiYXJGb3VuZGF0aW9ufTtcblxuZXhwb3J0IGNsYXNzIE1EQ1NuYWNrYmFyIGV4dGVuZHMgTURDQ29tcG9uZW50IHtcbiAgc3RhdGljIGF0dGFjaFRvKHJvb3QpIHtcbiAgICByZXR1cm4gbmV3IE1EQ1NuYWNrYmFyKHJvb3QpO1xuICB9XG5cbiAgc2hvdyhkYXRhKSB7XG4gICAgdGhpcy5mb3VuZGF0aW9uXy5zaG93KGRhdGEpO1xuICB9XG5cbiAgZ2V0RGVmYXVsdEZvdW5kYXRpb24oKSB7XG4gICAgY29uc3Qge1xuICAgICAgVEVYVF9TRUxFQ1RPUixcbiAgICAgIEFDVElPTl9CVVRUT05fU0VMRUNUT1IsXG4gICAgfSA9IE1EQ1NuYWNrYmFyRm91bmRhdGlvbi5zdHJpbmdzO1xuICAgIGNvbnN0IGdldFRleHQgPSAoKSA9PiB0aGlzLnJvb3RfLnF1ZXJ5U2VsZWN0b3IoVEVYVF9TRUxFQ1RPUik7XG4gICAgY29uc3QgZ2V0QWN0aW9uQnV0dG9uID0gKCkgPT4gdGhpcy5yb290Xy5xdWVyeVNlbGVjdG9yKEFDVElPTl9CVVRUT05fU0VMRUNUT1IpO1xuXG4gICAgLyogZXNsaW50IGJyYWNlLXN0eWxlOiBcIm9mZlwiICovXG4gICAgcmV0dXJuIG5ldyBNRENTbmFja2JhckZvdW5kYXRpb24oe1xuICAgICAgYWRkQ2xhc3M6IChjbGFzc05hbWUpID0+IHRoaXMucm9vdF8uY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpLFxuICAgICAgcmVtb3ZlQ2xhc3M6IChjbGFzc05hbWUpID0+IHRoaXMucm9vdF8uY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpLFxuICAgICAgc2V0QXJpYUhpZGRlbjogKCkgPT4gdGhpcy5yb290Xy5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKSxcbiAgICAgIHVuc2V0QXJpYUhpZGRlbjogKCkgPT4gdGhpcy5yb290Xy5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyksXG4gICAgICBzZXRBY3Rpb25BcmlhSGlkZGVuOiAoKSA9PiBnZXRBY3Rpb25CdXR0b24oKS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKSxcbiAgICAgIHVuc2V0QWN0aW9uQXJpYUhpZGRlbjogKCkgPT4gZ2V0QWN0aW9uQnV0dG9uKCkucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpLFxuICAgICAgc2V0QWN0aW9uVGV4dDogKHRleHQpID0+IHtnZXRBY3Rpb25CdXR0b24oKS50ZXh0Q29udGVudCA9IHRleHQ7fSxcbiAgICAgIHNldE1lc3NhZ2VUZXh0OiAodGV4dCkgPT4ge2dldFRleHQoKS50ZXh0Q29udGVudCA9IHRleHQ7fSxcbiAgICAgIHNldEZvY3VzOiAoKSA9PiBnZXRBY3Rpb25CdXR0b24oKS5mb2N1cygpLFxuICAgICAgdmlzaWJpbGl0eUlzSGlkZGVuOiAoKSA9PiBkb2N1bWVudC5oaWRkZW4sXG4gICAgICByZWdpc3RlckNhcHR1cmVkQmx1ckhhbmRsZXI6IChoYW5kbGVyKSA9PiBnZXRBY3Rpb25CdXR0b24oKS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgaGFuZGxlciwgdHJ1ZSksXG4gICAgICBkZXJlZ2lzdGVyQ2FwdHVyZWRCbHVySGFuZGxlcjogKGhhbmRsZXIpID0+IGdldEFjdGlvbkJ1dHRvbigpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCBoYW5kbGVyLCB0cnVlKSxcbiAgICAgIHJlZ2lzdGVyVmlzaWJpbGl0eUNoYW5nZUhhbmRsZXI6IChoYW5kbGVyKSA9PiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlciksXG4gICAgICBkZXJlZ2lzdGVyVmlzaWJpbGl0eUNoYW5nZUhhbmRsZXI6IChoYW5kbGVyKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlciksXG4gICAgICByZWdpc3RlckNhcHR1cmVkSW50ZXJhY3Rpb25IYW5kbGVyOiAoZXZ0LCBoYW5kbGVyKSA9PlxuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoZXZ0LCBoYW5kbGVyLCB0cnVlKSxcbiAgICAgIGRlcmVnaXN0ZXJDYXB0dXJlZEludGVyYWN0aW9uSGFuZGxlcjogKGV2dCwgaGFuZGxlcikgPT5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKGV2dCwgaGFuZGxlciwgdHJ1ZSksXG4gICAgICByZWdpc3RlckFjdGlvbkNsaWNrSGFuZGxlcjogKGhhbmRsZXIpID0+IGdldEFjdGlvbkJ1dHRvbigpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlciksXG4gICAgICBkZXJlZ2lzdGVyQWN0aW9uQ2xpY2tIYW5kbGVyOiAoaGFuZGxlcikgPT4gZ2V0QWN0aW9uQnV0dG9uKCkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVyKSxcbiAgICAgIHJlZ2lzdGVyVHJhbnNpdGlvbkVuZEhhbmRsZXI6XG4gICAgICAgIChoYW5kbGVyKSA9PiB0aGlzLnJvb3RfLmFkZEV2ZW50TGlzdGVuZXIoZ2V0Q29ycmVjdEV2ZW50TmFtZSh3aW5kb3csICd0cmFuc2l0aW9uZW5kJyksIGhhbmRsZXIpLFxuICAgICAgZGVyZWdpc3RlclRyYW5zaXRpb25FbmRIYW5kbGVyOlxuICAgICAgICAoaGFuZGxlcikgPT4gdGhpcy5yb290Xy5yZW1vdmVFdmVudExpc3RlbmVyKGdldENvcnJlY3RFdmVudE5hbWUod2luZG93LCAndHJhbnNpdGlvbmVuZCcpLCBoYW5kbGVyKSxcbiAgICAgIG5vdGlmeVNob3c6ICgpID0+IHRoaXMuZW1pdChNRENTbmFja2JhckZvdW5kYXRpb24uc3RyaW5ncy5TSE9XX0VWRU5UKSxcbiAgICAgIG5vdGlmeUhpZGU6ICgpID0+IHRoaXMuZW1pdChNRENTbmFja2JhckZvdW5kYXRpb24uc3RyaW5ncy5ISURFX0VWRU5UKSxcbiAgICB9KTtcbiAgfVxuXG4gIGdldCBkaXNtaXNzZXNPbkFjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5mb3VuZGF0aW9uXy5kaXNtaXNzZXNPbkFjdGlvbigpO1xuICB9XG5cbiAgc2V0IGRpc21pc3Nlc09uQWN0aW9uKGRpc21pc3Nlc09uQWN0aW9uKSB7XG4gICAgdGhpcy5mb3VuZGF0aW9uXy5zZXREaXNtaXNzT25BY3Rpb24oZGlzbWlzc2VzT25BY3Rpb24pO1xuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciBidG9hID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5idG9hICYmIHdpbmRvdy5idG9hLmJpbmQod2luZG93KSkgfHwgcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J0b2EnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG4gICAgdmFyIHhEb21haW4gPSBmYWxzZTtcblxuICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG4gICAgLy8gT25seSBzdXBwb3J0cyBQT1NUIGFuZCBHRVQgY2FsbHMgYW5kIGRvZXNuJ3QgcmV0dXJucyB0aGUgcmVzcG9uc2UgaGVhZGVycy5cbiAgICAvLyBET04nVCBkbyB0aGlzIGZvciB0ZXN0aW5nIGIvYyBYTUxIdHRwUmVxdWVzdCBpcyBtb2NrZWQsIG5vdCBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgICAhaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG4gICAgICB4RG9tYWluID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uIGhhbmRsZVByb2dyZXNzKCkge307XG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0W2xvYWRFdmVudF0gPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQgJiYgIXhEb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIC8vIElFIHNlbmRzIDEyMjMgaW5zdGVhZCBvZiAyMDQgKGh0dHBzOi8vZ2l0aHViLmNvbS9heGlvcy9heGlvcy9pc3N1ZXMvMjAxKVxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gMjA0IDogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gJ05vIENvbnRlbnQnIDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZSh1dGlscy5tZXJnZShkZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG4gICAgICB1cmw6IGFyZ3VtZW50c1swXVxuICAgIH0sIGFyZ3VtZW50c1sxXSk7XG4gIH1cblxuICBjb25maWcgPSB1dGlscy5tZXJnZShkZWZhdWx0cywge21ldGhvZDogJ2dldCd9LCB0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCIvKiFcbiAqIGNsaXBib2FyZC5qcyB2Mi4wLjFcbiAqIGh0dHBzOi8vemVub3JvY2hhLmdpdGh1Yi5pby9jbGlwYm9hcmQuanNcbiAqIFxuICogTGljZW5zZWQgTUlUIMKpIFplbm8gUm9jaGFcbiAqL1xuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiQ2xpcGJvYXJkSlNcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiQ2xpcGJvYXJkSlNcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICBpZiAodHJ1ZSkge1xuICAgICAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbbW9kdWxlLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gKGZhY3RvcnkpLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9ICh0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSAnZnVuY3Rpb24nID9cblx0XHRcdFx0KF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSkgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBmYWN0b3J5KG1vZHVsZSwgcmVxdWlyZSgnc2VsZWN0JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtb2QgPSB7XG4gICAgICAgICAgICBleHBvcnRzOiB7fVxuICAgICAgICB9O1xuICAgICAgICBmYWN0b3J5KG1vZCwgZ2xvYmFsLnNlbGVjdCk7XG4gICAgICAgIGdsb2JhbC5jbGlwYm9hcmRBY3Rpb24gPSBtb2QuZXhwb3J0cztcbiAgICB9XG59KSh0aGlzLCBmdW5jdGlvbiAobW9kdWxlLCBfc2VsZWN0KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIF9zZWxlY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0KTtcblxuICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgICAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICAgICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICAgICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgICAgIH07XG4gICAgfSgpO1xuXG4gICAgdmFyIENsaXBib2FyZEFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBDbGlwYm9hcmRBY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsaXBib2FyZEFjdGlvbik7XG5cbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmluaXRTZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIGJhc2UgcHJvcGVydGllcyBwYXNzZWQgZnJvbSBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgICAgICovXG5cblxuICAgICAgICBfY3JlYXRlQ2xhc3MoQ2xpcGJvYXJkQWN0aW9uLCBbe1xuICAgICAgICAgICAga2V5OiAncmVzb2x2ZU9wdGlvbnMnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc29sdmVPcHRpb25zKCkge1xuICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uID0gb3B0aW9ucy5hY3Rpb247XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXR0ZXIgPSBvcHRpb25zLmVtaXR0ZXI7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQgPSBvcHRpb25zLnRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSBvcHRpb25zLnRleHQ7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyID0gb3B0aW9ucy50cmlnZ2VyO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRleHQgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnaW5pdFNlbGVjdGlvbicsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdFNlbGVjdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0RmFrZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RUYXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3NlbGVjdEZha2UnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdEZha2UoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHZhciBpc1JUTCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RpcicpID09ICdydGwnO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVGYWtlKCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmZha2VIYW5kbGVyQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW1vdmVGYWtlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VIYW5kbGVyID0gdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmZha2VIYW5kbGVyQ2FsbGJhY2spIHx8IHRydWU7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmZha2VFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHpvb21pbmcgb24gaU9TXG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS5mb250U2l6ZSA9ICcxMnB0JztcbiAgICAgICAgICAgICAgICAvLyBSZXNldCBib3ggbW9kZWxcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VFbGVtLnN0eWxlLmJvcmRlciA9ICcwJztcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VFbGVtLnN0eWxlLnBhZGRpbmcgPSAnMCc7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gICAgICAgICAgICAgICAgLy8gTW92ZSBlbGVtZW50IG91dCBvZiBzY3JlZW4gaG9yaXpvbnRhbGx5XG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZVtpc1JUTCA/ICdyaWdodCcgOiAnbGVmdCddID0gJy05OTk5cHgnO1xuICAgICAgICAgICAgICAgIC8vIE1vdmUgZWxlbWVudCB0byB0aGUgc2FtZSBwb3NpdGlvbiB2ZXJ0aWNhbGx5XG4gICAgICAgICAgICAgICAgdmFyIHlQb3NpdGlvbiA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUudG9wID0geVBvc2l0aW9uICsgJ3B4JztcblxuICAgICAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc2V0QXR0cmlidXRlKCdyZWFkb25seScsICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VFbGVtLnZhbHVlID0gdGhpcy50ZXh0O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5mYWtlRWxlbSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVGV4dCA9ICgwLCBfc2VsZWN0Mi5kZWZhdWx0KSh0aGlzLmZha2VFbGVtKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvcHlUZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3JlbW92ZUZha2UnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUZha2UoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmFrZUhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmZha2VIYW5kbGVyQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZha2VIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mYWtlRWxlbSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLmZha2VFbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdzZWxlY3RUYXJnZXQnLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdFRhcmdldCgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVGV4dCA9ICgwLCBfc2VsZWN0Mi5kZWZhdWx0KSh0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3B5VGV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdjb3B5VGV4dCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29weVRleHQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1Y2NlZWRlZCA9IHZvaWQgMDtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2NlZWRlZCA9IGRvY3VtZW50LmV4ZWNDb21tYW5kKHRoaXMuYWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VlZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZXN1bHQoc3VjY2VlZGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnaGFuZGxlUmVzdWx0JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVSZXN1bHQoc3VjY2VlZGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoc3VjY2VlZGVkID8gJ3N1Y2Nlc3MnIDogJ2Vycm9yJywge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IHRoaXMuYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnNlbGVjdGVkVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogdGhpcy50cmlnZ2VyLFxuICAgICAgICAgICAgICAgICAgICBjbGVhclNlbGVjdGlvbjogdGhpcy5jbGVhclNlbGVjdGlvbi5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2NsZWFyU2VsZWN0aW9uJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhclNlbGVjdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlci5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZGVzdHJveScsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUZha2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnYWN0aW9uJyxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KCkge1xuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdjb3B5JztcblxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGlvbiA9IGFjdGlvbjtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hY3Rpb24gIT09ICdjb3B5JyAmJiB0aGlzLl9hY3Rpb24gIT09ICdjdXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBcImFjdGlvblwiIHZhbHVlLCB1c2UgZWl0aGVyIFwiY29weVwiIG9yIFwiY3V0XCInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAndGFyZ2V0JyxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHRhcmdldCkge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICYmICh0eXBlb2YgdGFyZ2V0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0YXJnZXQpKSA9PT0gJ29iamVjdCcgJiYgdGFyZ2V0Lm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT09ICdjb3B5JyAmJiB0YXJnZXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFwidGFyZ2V0XCIgYXR0cmlidXRlLiBQbGVhc2UgdXNlIFwicmVhZG9ubHlcIiBpbnN0ZWFkIG9mIFwiZGlzYWJsZWRcIiBhdHRyaWJ1dGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uID09PSAnY3V0JyAmJiAodGFyZ2V0Lmhhc0F0dHJpYnV0ZSgncmVhZG9ubHknKSB8fCB0YXJnZXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBcInRhcmdldFwiIGF0dHJpYnV0ZS4gWW91IGNhblxcJ3QgY3V0IHRleHQgZnJvbSBlbGVtZW50cyB3aXRoIFwicmVhZG9ubHlcIiBvciBcImRpc2FibGVkXCIgYXR0cmlidXRlcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgXCJ0YXJnZXRcIiB2YWx1ZSwgdXNlIGEgdmFsaWQgRWxlbWVudCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90YXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1dKTtcblxuICAgICAgICByZXR1cm4gQ2xpcGJvYXJkQWN0aW9uO1xuICAgIH0oKTtcblxuICAgIG1vZHVsZS5leHBvcnRzID0gQ2xpcGJvYXJkQWN0aW9uO1xufSk7XG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xudmFyIGRlbGVnYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuLyoqXG4gKiBWYWxpZGF0ZXMgYWxsIHBhcmFtcyBhbmQgY2FsbHMgdGhlIHJpZ2h0XG4gKiBsaXN0ZW5lciBmdW5jdGlvbiBiYXNlZCBvbiBpdHMgdGFyZ2V0IHR5cGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8SFRNTEVsZW1lbnR8SFRNTENvbGxlY3Rpb258Tm9kZUxpc3R9IHRhcmdldFxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGxpc3Rlbih0YXJnZXQsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0YXJnZXQgJiYgIXR5cGUgJiYgIWNhbGxiYWNrKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyByZXF1aXJlZCBhcmd1bWVudHMnKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzLnN0cmluZyh0eXBlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdTZWNvbmQgYXJndW1lbnQgbXVzdCBiZSBhIFN0cmluZycpO1xuICAgIH1cblxuICAgIGlmICghaXMuZm4oY2FsbGJhY2spKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoaXJkIGFyZ3VtZW50IG11c3QgYmUgYSBGdW5jdGlvbicpO1xuICAgIH1cblxuICAgIGlmIChpcy5ub2RlKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIGxpc3Rlbk5vZGUodGFyZ2V0LCB0eXBlLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzLm5vZGVMaXN0KHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIGxpc3Rlbk5vZGVMaXN0KHRhcmdldCwgdHlwZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIGlmIChpcy5zdHJpbmcodGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gbGlzdGVuU2VsZWN0b3IodGFyZ2V0LCB0eXBlLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgU3RyaW5nLCBIVE1MRWxlbWVudCwgSFRNTENvbGxlY3Rpb24sIG9yIE5vZGVMaXN0Jyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYSBIVE1MIGVsZW1lbnRcbiAqIGFuZCByZXR1cm5zIGEgcmVtb3ZlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBsaXN0ZW5Ob2RlKG5vZGUsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYSBsaXN0IG9mIEhUTUwgZWxlbWVudHNcbiAqIGFuZCByZXR1cm5zIGEgcmVtb3ZlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Tm9kZUxpc3R8SFRNTENvbGxlY3Rpb259IG5vZGVMaXN0XG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbGlzdGVuTm9kZUxpc3Qobm9kZUxpc3QsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChub2RlTGlzdCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG5vZGVMaXN0LCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEFkZCBhbiBldmVudCBsaXN0ZW5lciB0byBhIHNlbGVjdG9yXG4gKiBhbmQgcmV0dXJucyBhIHJlbW92ZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBsaXN0ZW5TZWxlY3RvcihzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZGVsZWdhdGUoZG9jdW1lbnQuYm9keSwgc2VsZWN0b3IsIHR5cGUsIGNhbGxiYWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0ZW47XG5cblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmZ1bmN0aW9uIEUgKCkge1xuICAvLyBLZWVwIHRoaXMgZW1wdHkgc28gaXQncyBlYXNpZXIgdG8gaW5oZXJpdCBmcm9tXG4gIC8vICh2aWEgaHR0cHM6Ly9naXRodWIuY29tL2xpcHNtYWNrIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9pc3N1ZXMvMylcbn1cblxuRS5wcm90b3R5cGUgPSB7XG4gIG9uOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2ssIGN0eCkge1xuICAgIHZhciBlID0gdGhpcy5lIHx8ICh0aGlzLmUgPSB7fSk7XG5cbiAgICAoZVtuYW1lXSB8fCAoZVtuYW1lXSA9IFtdKSkucHVzaCh7XG4gICAgICBmbjogY2FsbGJhY2ssXG4gICAgICBjdHg6IGN0eFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgb25jZTogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjdHgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZnVuY3Rpb24gbGlzdGVuZXIgKCkge1xuICAgICAgc2VsZi5vZmYobmFtZSwgbGlzdGVuZXIpO1xuICAgICAgY2FsbGJhY2suYXBwbHkoY3R4LCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lci5fID0gY2FsbGJhY2tcbiAgICByZXR1cm4gdGhpcy5vbihuYW1lLCBsaXN0ZW5lciwgY3R4KTtcbiAgfSxcblxuICBlbWl0OiBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBkYXRhID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHZhciBldnRBcnIgPSAoKHRoaXMuZSB8fCAodGhpcy5lID0ge30pKVtuYW1lXSB8fCBbXSkuc2xpY2UoKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IGV2dEFyci5sZW5ndGg7XG5cbiAgICBmb3IgKGk7IGkgPCBsZW47IGkrKykge1xuICAgICAgZXZ0QXJyW2ldLmZuLmFwcGx5KGV2dEFycltpXS5jdHgsIGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG9mZjogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGUgPSB0aGlzLmUgfHwgKHRoaXMuZSA9IHt9KTtcbiAgICB2YXIgZXZ0cyA9IGVbbmFtZV07XG4gICAgdmFyIGxpdmVFdmVudHMgPSBbXTtcblxuICAgIGlmIChldnRzICYmIGNhbGxiYWNrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXZ0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoZXZ0c1tpXS5mbiAhPT0gY2FsbGJhY2sgJiYgZXZ0c1tpXS5mbi5fICE9PSBjYWxsYmFjaylcbiAgICAgICAgICBsaXZlRXZlbnRzLnB1c2goZXZ0c1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGV2ZW50IGZyb20gcXVldWUgdG8gcHJldmVudCBtZW1vcnkgbGVha1xuICAgIC8vIFN1Z2dlc3RlZCBieSBodHRwczovL2dpdGh1Yi5jb20vbGF6ZFxuICAgIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9jb21taXQvYzZlYmZhYTliYzk3M2IzM2QxMTBhODRhMzA3NzQyYjdjZjk0Yzk1MyNjb21taXRjb21tZW50LTUwMjQ5MTBcblxuICAgIChsaXZlRXZlbnRzLmxlbmd0aClcbiAgICAgID8gZVtuYW1lXSA9IGxpdmVFdmVudHNcbiAgICAgIDogZGVsZXRlIGVbbmFtZV07XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFO1xuXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIGlmICh0cnVlKSB7XG4gICAgICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFttb2R1bGUsIF9fd2VicGFja19yZXF1aXJlX18oMCksIF9fd2VicGFja19yZXF1aXJlX18oMiksIF9fd2VicGFja19yZXF1aXJlX18oMSldLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSAoZmFjdG9yeSksXG5cdFx0XHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKHR5cGVvZiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPT09ICdmdW5jdGlvbicgP1xuXHRcdFx0XHQoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyksXG5cdFx0XHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGZhY3RvcnkobW9kdWxlLCByZXF1aXJlKCcuL2NsaXBib2FyZC1hY3Rpb24nKSwgcmVxdWlyZSgndGlueS1lbWl0dGVyJyksIHJlcXVpcmUoJ2dvb2QtbGlzdGVuZXInKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1vZCA9IHtcbiAgICAgICAgICAgIGV4cG9ydHM6IHt9XG4gICAgICAgIH07XG4gICAgICAgIGZhY3RvcnkobW9kLCBnbG9iYWwuY2xpcGJvYXJkQWN0aW9uLCBnbG9iYWwudGlueUVtaXR0ZXIsIGdsb2JhbC5nb29kTGlzdGVuZXIpO1xuICAgICAgICBnbG9iYWwuY2xpcGJvYXJkID0gbW9kLmV4cG9ydHM7XG4gICAgfVxufSkodGhpcywgZnVuY3Rpb24gKG1vZHVsZSwgX2NsaXBib2FyZEFjdGlvbiwgX3RpbnlFbWl0dGVyLCBfZ29vZExpc3RlbmVyKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIF9jbGlwYm9hcmRBY3Rpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xpcGJvYXJkQWN0aW9uKTtcblxuICAgIHZhciBfdGlueUVtaXR0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGlueUVtaXR0ZXIpO1xuXG4gICAgdmFyIF9nb29kTGlzdGVuZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ29vZExpc3RlbmVyKTtcblxuICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgICAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICAgICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICAgICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgICAgIH07XG4gICAgfSgpO1xuXG4gICAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgICAgICBpZiAoIXNlbGYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgICAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gICAgfVxuXG4gICAgdmFyIENsaXBib2FyZCA9IGZ1bmN0aW9uIChfRW1pdHRlcikge1xuICAgICAgICBfaW5oZXJpdHMoQ2xpcGJvYXJkLCBfRW1pdHRlcik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfEhUTUxFbGVtZW50fEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0fSB0cmlnZ2VyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBDbGlwYm9hcmQodHJpZ2dlciwgb3B0aW9ucykge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsaXBib2FyZCk7XG5cbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDbGlwYm9hcmQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDbGlwYm9hcmQpKS5jYWxsKHRoaXMpKTtcblxuICAgICAgICAgICAgX3RoaXMucmVzb2x2ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgICAgICBfdGhpcy5saXN0ZW5DbGljayh0cmlnZ2VyKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIGlmIGF0dHJpYnV0ZXMgd291bGQgYmUgcmVzb2x2ZWQgdXNpbmcgaW50ZXJuYWwgc2V0dGVyIGZ1bmN0aW9uc1xuICAgICAgICAgKiBvciBjdXN0b20gZnVuY3Rpb25zIHRoYXQgd2VyZSBwYXNzZWQgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAgICAgKi9cblxuXG4gICAgICAgIF9jcmVhdGVDbGFzcyhDbGlwYm9hcmQsIFt7XG4gICAgICAgICAgICBrZXk6ICdyZXNvbHZlT3B0aW9ucycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzb2x2ZU9wdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb24gPSB0eXBlb2Ygb3B0aW9ucy5hY3Rpb24gPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmFjdGlvbiA6IHRoaXMuZGVmYXVsdEFjdGlvbjtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IHR5cGVvZiBvcHRpb25zLnRhcmdldCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMudGFyZ2V0IDogdGhpcy5kZWZhdWx0VGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dCA9IHR5cGVvZiBvcHRpb25zLnRleHQgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLnRleHQgOiB0aGlzLmRlZmF1bHRUZXh0O1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gX3R5cGVvZihvcHRpb25zLmNvbnRhaW5lcikgPT09ICdvYmplY3QnID8gb3B0aW9ucy5jb250YWluZXIgOiBkb2N1bWVudC5ib2R5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdsaXN0ZW5DbGljaycsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuQ2xpY2sodHJpZ2dlcikge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lciA9ICgwLCBfZ29vZExpc3RlbmVyMi5kZWZhdWx0KSh0cmlnZ2VyLCAnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLm9uQ2xpY2soZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ29uQ2xpY2snLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgICAgICAgIHZhciB0cmlnZ2VyID0gZS5kZWxlZ2F0ZVRhcmdldCB8fCBlLmN1cnJlbnRUYXJnZXQ7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jbGlwYm9hcmRBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlwYm9hcmRBY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuY2xpcGJvYXJkQWN0aW9uID0gbmV3IF9jbGlwYm9hcmRBY3Rpb24yLmRlZmF1bHQoe1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IHRoaXMuYWN0aW9uKHRyaWdnZXIpLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMudGFyZ2V0KHRyaWdnZXIpLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnRleHQodHJpZ2dlciksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdGhpcy5jb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IHRyaWdnZXIsXG4gICAgICAgICAgICAgICAgICAgIGVtaXR0ZXI6IHRoaXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZGVmYXVsdEFjdGlvbicsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdEFjdGlvbih0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEF0dHJpYnV0ZVZhbHVlKCdhY3Rpb24nLCB0cmlnZ2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAga2V5OiAnZGVmYXVsdFRhcmdldCcsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdFRhcmdldCh0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gZ2V0QXR0cmlidXRlVmFsdWUoJ3RhcmdldCcsIHRyaWdnZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2RlZmF1bHRUZXh0JyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWZhdWx0VGV4dCh0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEF0dHJpYnV0ZVZhbHVlKCd0ZXh0JywgdHJpZ2dlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lci5kZXN0cm95KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jbGlwYm9hcmRBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlwYm9hcmRBY3Rpb24uZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaXBib2FyZEFjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XSwgW3tcbiAgICAgICAgICAgIGtleTogJ2lzU3VwcG9ydGVkJyxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc1N1cHBvcnRlZCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbJ2NvcHknLCAnY3V0J107XG5cbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9ucyA9IHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnID8gW2FjdGlvbl0gOiBhY3Rpb247XG4gICAgICAgICAgICAgICAgdmFyIHN1cHBvcnQgPSAhIWRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN1cHBvcnRlZDtcblxuICAgICAgICAgICAgICAgIGFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnQgPSBzdXBwb3J0ICYmICEhZG9jdW1lbnQucXVlcnlDb21tYW5kU3VwcG9ydGVkKGFjdGlvbik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3VwcG9ydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHJldHVybiBDbGlwYm9hcmQ7XG4gICAgfShfdGlueUVtaXR0ZXIyLmRlZmF1bHQpO1xuXG4gICAgLyoqXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRvIHJldHJpZXZlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3VmZml4XG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QXR0cmlidXRlVmFsdWUoc3VmZml4LCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGUgPSAnZGF0YS1jbGlwYm9hcmQtJyArIHN1ZmZpeDtcblxuICAgICAgICBpZiAoIWVsZW1lbnQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gQ2xpcGJvYXJkO1xufSk7XG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgRE9DVU1FTlRfTk9ERV9UWVBFID0gOTtcblxuLyoqXG4gKiBBIHBvbHlmaWxsIGZvciBFbGVtZW50Lm1hdGNoZXMoKVxuICovXG5pZiAodHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmICFFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzKSB7XG4gICAgdmFyIHByb3RvID0gRWxlbWVudC5wcm90b3R5cGU7XG5cbiAgICBwcm90by5tYXRjaGVzID0gcHJvdG8ubWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICAgICAgICAgICAgICAgIHByb3RvLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgICAgICAgICAgICAgICBwcm90by5tc01hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgICAgICAgICAgICAgICBwcm90by5vTWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICAgICAgICAgICAgICAgIHByb3RvLndlYmtpdE1hdGNoZXNTZWxlY3Rvcjtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgY2xvc2VzdCBwYXJlbnQgdGhhdCBtYXRjaGVzIGEgc2VsZWN0b3IuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBjbG9zZXN0IChlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgIT09IERPQ1VNRU5UX05PREVfVFlQRSkge1xuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQubWF0Y2hlcyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgZWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb3Nlc3Q7XG5cblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBjbG9zZXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuLyoqXG4gKiBEZWxlZ2F0ZXMgZXZlbnQgdG8gYSBzZWxlY3Rvci5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHVzZUNhcHR1cmVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gX2RlbGVnYXRlKGVsZW1lbnQsIHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSkge1xuICAgIHZhciBsaXN0ZW5lckZuID0gbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lckZuLCB1c2VDYXB0dXJlKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyRm4sIHVzZUNhcHR1cmUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIERlbGVnYXRlcyBldmVudCB0byBhIHNlbGVjdG9yLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd8QXJyYXl9IFtlbGVtZW50c11cbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHVzZUNhcHR1cmVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZGVsZWdhdGUoZWxlbWVudHMsIHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSkge1xuICAgIC8vIEhhbmRsZSB0aGUgcmVndWxhciBFbGVtZW50IHVzYWdlXG4gICAgaWYgKHR5cGVvZiBlbGVtZW50cy5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBfZGVsZWdhdGUuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgRWxlbWVudC1sZXNzIHVzYWdlLCBpdCBkZWZhdWx0cyB0byBnbG9iYWwgZGVsZWdhdGlvblxuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBVc2UgYGRvY3VtZW50YCBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyLCB0aGVuIGFwcGx5IGFyZ3VtZW50c1xuICAgICAgICAvLyBUaGlzIGlzIGEgc2hvcnQgd2F5IHRvIC51bnNoaWZ0IGBhcmd1bWVudHNgIHdpdGhvdXQgcnVubmluZyBpbnRvIGRlb3B0aW1pemF0aW9uc1xuICAgICAgICByZXR1cm4gX2RlbGVnYXRlLmJpbmQobnVsbCwgZG9jdW1lbnQpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIFNlbGVjdG9yLWJhc2VkIHVzYWdlXG4gICAgaWYgKHR5cGVvZiBlbGVtZW50cyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1lbnRzKTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgQXJyYXktbGlrZSBiYXNlZCB1c2FnZVxuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBfZGVsZWdhdGUoZWxlbWVudCwgc2VsZWN0b3IsIHR5cGUsIGNhbGxiYWNrLCB1c2VDYXB0dXJlKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBGaW5kcyBjbG9zZXN0IG1hdGNoIGFuZCBpbnZva2VzIGNhbGxiYWNrLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBsaXN0ZW5lcihlbGVtZW50LCBzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgICBlLmRlbGVnYXRlVGFyZ2V0ID0gY2xvc2VzdChlLnRhcmdldCwgc2VsZWN0b3IpO1xuXG4gICAgICAgIGlmIChlLmRlbGVnYXRlVGFyZ2V0KSB7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKGVsZW1lbnQsIGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlbGVnYXRlO1xuXG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vKipcbiAqIENoZWNrIGlmIGFyZ3VtZW50IGlzIGEgSFRNTCBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0cy5ub2RlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZFxuICAgICAgICAmJiB2YWx1ZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50XG4gICAgICAgICYmIHZhbHVlLm5vZGVUeXBlID09PSAxO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhcmd1bWVudCBpcyBhIGxpc3Qgb2YgSFRNTCBlbGVtZW50cy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydHMubm9kZUxpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblxuICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICYmICh0eXBlID09PSAnW29iamVjdCBOb2RlTGlzdF0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEhUTUxDb2xsZWN0aW9uXScpXG4gICAgICAgICYmICgnbGVuZ3RoJyBpbiB2YWx1ZSlcbiAgICAgICAgJiYgKHZhbHVlLmxlbmd0aCA9PT0gMCB8fCBleHBvcnRzLm5vZGUodmFsdWVbMF0pKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYXJndW1lbnQgaXMgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLnN0cmluZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZydcbiAgICAgICAgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGFyZ3VtZW50IGlzIGEgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmZuID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cbiAgICByZXR1cm4gdHlwZSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmZ1bmN0aW9uIHNlbGVjdChlbGVtZW50KSB7XG4gICAgdmFyIHNlbGVjdGVkVGV4dDtcblxuICAgIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgICBlbGVtZW50LmZvY3VzKCk7XG5cbiAgICAgICAgc2VsZWN0ZWRUZXh0ID0gZWxlbWVudC52YWx1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0lOUFVUJyB8fCBlbGVtZW50Lm5vZGVOYW1lID09PSAnVEVYVEFSRUEnKSB7XG4gICAgICAgIHZhciBpc1JlYWRPbmx5ID0gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3JlYWRvbmx5Jyk7XG5cbiAgICAgICAgaWYgKCFpc1JlYWRPbmx5KSB7XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgncmVhZG9ubHknLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LnNlbGVjdCgpO1xuICAgICAgICBlbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKDAsIGVsZW1lbnQudmFsdWUubGVuZ3RoKTtcblxuICAgICAgICBpZiAoIWlzUmVhZE9ubHkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdyZWFkb25seScpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZWN0ZWRUZXh0ID0gZWxlbWVudC52YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJykpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG5cbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGVsZW1lbnQpO1xuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG5cbiAgICAgICAgc2VsZWN0ZWRUZXh0ID0gc2VsZWN0aW9uLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdGVkVGV4dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZWxlY3Q7XG5cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xufSk7IiwidmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LFxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXBwbHlEZWNvcmF0b3JzKENsYXNzLCBwcm9wcykge1xuICB2YXIgcHJvdG90eXBlID0gQ2xhc3MucHJvdG90eXBlO1xuXG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgdmFyIGRlY29yYXRvcnMgPSBwcm9wc1trZXldO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBkZWNvcmF0b3JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGRlY29yYXRvciA9IGRlY29yYXRvcnNbaV07XG5cbiAgICAgIGRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwga2V5LCBkZWNvcmF0b3IocHJvdG90eXBlLCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm90b3R5cGUsIGtleSkpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gQ2xhc3M7XG59IiwiZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmltcG9ydCB7IGRlY29yYXRlLCBjcmVhdGVEZWZhdWx0U2V0dGVyLCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzLCBnZXRPd25LZXlzLCBiaW5kIH0gZnJvbSAnLi9wcml2YXRlL3V0aWxzJztcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcbiAgICBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxuXG52YXIgbWFwU3RvcmUgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIGdldEJvdW5kU3VwZXIob2JqLCBmbikge1xuICBpZiAodHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVc2luZyBAYXV0b2JpbmQgb24gJyArIGZuLm5hbWUgKyAnKCkgcmVxdWlyZXMgV2Vha01hcCBzdXBwb3J0IGR1ZSB0byBpdHMgdXNlIG9mIHN1cGVyLicgKyBmbi5uYW1lICsgJygpXFxuICAgICAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXlwaGVscHMvY29yZS1kZWNvcmF0b3JzLmpzL2lzc3Vlcy8yMCcpO1xuICB9XG5cbiAgaWYgKCFtYXBTdG9yZSkge1xuICAgIG1hcFN0b3JlID0gbmV3IFdlYWtNYXAoKTtcbiAgfVxuXG4gIGlmIChtYXBTdG9yZS5oYXMob2JqKSA9PT0gZmFsc2UpIHtcbiAgICBtYXBTdG9yZS5zZXQob2JqLCBuZXcgV2Vha01hcCgpKTtcbiAgfVxuXG4gIHZhciBzdXBlclN0b3JlID0gbWFwU3RvcmUuZ2V0KG9iaik7XG5cbiAgaWYgKHN1cGVyU3RvcmUuaGFzKGZuKSA9PT0gZmFsc2UpIHtcbiAgICBzdXBlclN0b3JlLnNldChmbiwgYmluZChmbiwgb2JqKSk7XG4gIH1cblxuICByZXR1cm4gc3VwZXJTdG9yZS5nZXQoZm4pO1xufVxuXG5mdW5jdGlvbiBhdXRvYmluZENsYXNzKGtsYXNzKSB7XG4gIHZhciBkZXNjcyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoa2xhc3MucHJvdG90eXBlKTtcbiAgdmFyIGtleXMgPSBnZXRPd25LZXlzKGRlc2NzKTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIGRlc2MgPSBkZXNjc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBkZXNjLnZhbHVlICE9PSAnZnVuY3Rpb24nIHx8IGtleSA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgZGVmaW5lUHJvcGVydHkoa2xhc3MucHJvdG90eXBlLCBrZXksIGF1dG9iaW5kTWV0aG9kKGtsYXNzLnByb3RvdHlwZSwga2V5LCBkZXNjKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXV0b2JpbmRNZXRob2QodGFyZ2V0LCBrZXksIF9yZWYpIHtcbiAgdmFyIGZuID0gX3JlZi52YWx1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZSA9IF9yZWYuY29uZmlndXJhYmxlLFxuICAgICAgZW51bWVyYWJsZSA9IF9yZWYuZW51bWVyYWJsZTtcblxuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdAYXV0b2JpbmQgY2FuIG9ubHkgYmUgdXNlZCBvbiBmdW5jdGlvbnMsIG5vdDogJyArIGZuKTtcbiAgfVxuXG4gIHZhciBjb25zdHJ1Y3RvciA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcblxuXG4gIHJldHVybiB7XG4gICAgY29uZmlndXJhYmxlOiBjb25maWd1cmFibGUsXG4gICAgZW51bWVyYWJsZTogZW51bWVyYWJsZSxcblxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgLy8gQ2xhc3MucHJvdG90eXBlLmtleSBsb29rdXBcbiAgICAgIC8vIFNvbWVvbmUgYWNjZXNzZXMgdGhlIHByb3BlcnR5IGRpcmVjdGx5IG9uIHRoZSBwcm90b3R5cGUgb24gd2hpY2ggaXQgaXNcbiAgICAgIC8vIGFjdHVhbGx5IGRlZmluZWQgb24sIGkuZS4gQ2xhc3MucHJvdG90eXBlLmhhc093blByb3BlcnR5KGtleSlcbiAgICAgIGlmICh0aGlzID09PSB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgfVxuXG4gICAgICAvLyBDbGFzcy5wcm90b3R5cGUua2V5IGxvb2t1cFxuICAgICAgLy8gU29tZW9uZSBhY2Nlc3NlcyB0aGUgcHJvcGVydHkgZGlyZWN0bHkgb24gYSBwcm90b3R5cGUgYnV0IGl0IHdhcyBmb3VuZFxuICAgICAgLy8gdXAgdGhlIGNoYWluLCBub3QgZGVmaW5lZCBkaXJlY3RseSBvbiBpdFxuICAgICAgLy8gaS5lLiBDbGFzcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoa2V5KSA9PSBmYWxzZSAmJiBrZXkgaW4gQ2xhc3MucHJvdG90eXBlXG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciAhPT0gY29uc3RydWN0b3IgJiYgZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IgPT09IGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmbjtcbiAgICAgIH1cblxuICAgICAgLy8gQXV0b2JvdW5kIG1ldGhvZCBjYWxsaW5nIHN1cGVyLnNhbWVNZXRob2QoKSB3aGljaCBpcyBhbHNvIGF1dG9ib3VuZCBhbmQgc28gb24uXG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciAhPT0gY29uc3RydWN0b3IgJiYga2V5IGluIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlKSB7XG4gICAgICAgIHJldHVybiBnZXRCb3VuZFN1cGVyKHRoaXMsIGZuKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGJvdW5kRm4gPSBiaW5kKGZuLCB0aGlzKTtcblxuICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIC8vIE5PVCBlbnVtZXJhYmxlIHdoZW4gaXQncyBhIGJvdW5kIG1ldGhvZFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IGJvdW5kRm5cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYm91bmRGbjtcbiAgICB9LFxuXG4gICAgc2V0OiBjcmVhdGVEZWZhdWx0U2V0dGVyKGtleSlcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlKGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGF1dG9iaW5kQ2xhc3MuYXBwbHkodW5kZWZpbmVkLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhdXRvYmluZE1ldGhvZC5hcHBseSh1bmRlZmluZWQsIF90b0NvbnN1bWFibGVBcnJheShhcmdzKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXV0b2JpbmQoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaGFuZGxlKGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaGFuZGxlKGFyZ3MpO1xuICB9XG59IiwiLyoqXG4gKiBjb3JlLWRlY29yYXRvcnMuanNcbiAqIChjKSAyMDE3IEpheSBQaGVscHMgYW5kIGNvbnRyaWJ1dG9yc1xuICogTUlUIExpY2Vuc2VkXG4gKiBodHRwczovL2dpdGh1Yi5jb20vamF5cGhlbHBzL2NvcmUtZGVjb3JhdG9ycy5qc1xuICogQGxpY2Vuc2VcbiAqL1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBvdmVycmlkZSB9IGZyb20gJy4vb3ZlcnJpZGUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkZXByZWNhdGUsIGRlZmF1bHQgYXMgZGVwcmVjYXRlZCB9IGZyb20gJy4vZGVwcmVjYXRlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3VwcHJlc3NXYXJuaW5ncyB9IGZyb20gJy4vc3VwcHJlc3Mtd2FybmluZ3MnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtZW1vaXplIH0gZnJvbSAnLi9tZW1vaXplJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYXV0b2JpbmQgfSBmcm9tICcuL2F1dG9iaW5kJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVhZG9ubHkgfSBmcm9tICcuL3JlYWRvbmx5JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZW51bWVyYWJsZSB9IGZyb20gJy4vZW51bWVyYWJsZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG5vbmVudW1lcmFibGUgfSBmcm9tICcuL25vbmVudW1lcmFibGUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBub25jb25maWd1cmFibGUgfSBmcm9tICcuL25vbmNvbmZpZ3VyYWJsZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRlYm91bmNlIH0gZnJvbSAnLi9kZWJvdW5jZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRocm90dGxlIH0gZnJvbSAnLi90aHJvdHRsZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRlY29yYXRlIH0gZnJvbSAnLi9kZWNvcmF0ZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1peGluLCBkZWZhdWx0IGFzIG1peGlucyB9IGZyb20gJy4vbWl4aW4nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBsYXp5SW5pdGlhbGl6ZSB9IGZyb20gJy4vbGF6eS1pbml0aWFsaXplJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdGltZSB9IGZyb20gJy4vdGltZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGV4dGVuZERlc2NyaXB0b3IgfSBmcm9tICcuL2V4dGVuZERlc2NyaXB0b3InO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwcm9maWxlIH0gZnJvbSAnLi9wcm9maWxlJztcblxuLy8gSGVscGVyIHRvIGFwcGx5IGRlY29yYXRvcnMgdG8gYSBjbGFzcyB3aXRob3V0IHRyYW5zcGlsZXIgc3VwcG9ydFxuZXhwb3J0IHsgZGVmYXVsdCBhcyBhcHBseURlY29yYXRvcnMgfSBmcm9tICcuL2FwcGx5RGVjb3JhdG9ycyc7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG5pbXBvcnQgeyBkZWNvcmF0ZSwgbWV0YUZvciwgaW50ZXJuYWxEZXByZWNhdGlvbiB9IGZyb20gJy4vcHJpdmF0ZS91dGlscyc7XG5cbnZhciBERUZBVUxUX1RJTUVPVVQgPSAzMDA7XG5cbmZ1bmN0aW9uIGhhbmRsZURlc2NyaXB0b3IodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IsIF9yZWYpIHtcbiAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICBfcmVmMiQgPSBfcmVmMlswXSxcbiAgICAgIHdhaXQgPSBfcmVmMiQgPT09IHVuZGVmaW5lZCA/IERFRkFVTFRfVElNRU9VVCA6IF9yZWYyJCxcbiAgICAgIF9yZWYyJDIgPSBfcmVmMlsxXSxcbiAgICAgIGltbWVkaWF0ZSA9IF9yZWYyJDIgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZjIkMjtcblxuICB2YXIgY2FsbGJhY2sgPSBkZXNjcmlwdG9yLnZhbHVlO1xuXG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ09ubHkgZnVuY3Rpb25zIGNhbiBiZSBkZWJvdW5jZWQnKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZGVzY3JpcHRvciwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBfbWV0YUZvciA9IG1ldGFGb3IodGhpcyksXG4gICAgICAgICAgZGVib3VuY2VUaW1lb3V0SWRzID0gX21ldGFGb3IuZGVib3VuY2VUaW1lb3V0SWRzO1xuXG4gICAgICB2YXIgdGltZW91dCA9IGRlYm91bmNlVGltZW91dElkc1trZXldO1xuICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXG4gICAgICBkZWJvdW5jZVRpbWVvdXRJZHNba2V5XSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWxldGUgZGVib3VuY2VUaW1lb3V0SWRzW2tleV07XG4gICAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgICAgY2FsbGJhY2suYXBwbHkoX3RoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9LCB3YWl0KTtcblxuICAgICAgaWYgKGNhbGxOb3cpIHtcbiAgICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2UoKSB7XG4gIGludGVybmFsRGVwcmVjYXRpb24oJ0BkZWJvdW5jZSBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgc2hvcnRseS4gVXNlIEBkZWJvdW5jZSBmcm9tIGxvZGFzaC1kZWNvcmF0b3JzLlxcblxcbiAgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbG9kYXNoLWRlY29yYXRvcnMnKTtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZGVjb3JhdGUoaGFuZGxlRGVzY3JpcHRvciwgYXJncyk7XG59IiwiZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmZ1bmN0aW9uIF90b0FycmF5KGFycikgeyByZXR1cm4gQXJyYXkuaXNBcnJheShhcnIpID8gYXJyIDogQXJyYXkuZnJvbShhcnIpOyB9XG5cbmltcG9ydCB7IGRlY29yYXRlIGFzIF9kZWNvcmF0ZSwgY3JlYXRlRGVmYXVsdFNldHRlciB9IGZyb20gJy4vcHJpdmF0ZS91dGlscyc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cblxuZnVuY3Rpb24gaGFuZGxlRGVzY3JpcHRvcih0YXJnZXQsIGtleSwgZGVzY3JpcHRvciwgX3JlZikge1xuICB2YXIgX3JlZjIgPSBfdG9BcnJheShfcmVmKSxcbiAgICAgIGRlY29yYXRvciA9IF9yZWYyWzBdLFxuICAgICAgYXJncyA9IF9yZWYyLnNsaWNlKDEpO1xuXG4gIHZhciBjb25maWd1cmFibGUgPSBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSxcbiAgICAgIGVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUsXG4gICAgICB3cml0YWJsZSA9IGRlc2NyaXB0b3Iud3JpdGFibGU7XG5cbiAgdmFyIG9yaWdpbmFsR2V0ID0gZGVzY3JpcHRvci5nZXQ7XG4gIHZhciBvcmlnaW5hbFNldCA9IGRlc2NyaXB0b3Iuc2V0O1xuICB2YXIgb3JpZ2luYWxWYWx1ZSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gIHZhciBpc0dldHRlciA9ICEhb3JpZ2luYWxHZXQ7XG5cbiAgcmV0dXJuIHtcbiAgICBjb25maWd1cmFibGU6IGNvbmZpZ3VyYWJsZSxcbiAgICBlbnVtZXJhYmxlOiBlbnVtZXJhYmxlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGZuID0gaXNHZXR0ZXIgPyBvcmlnaW5hbEdldC5jYWxsKHRoaXMpIDogb3JpZ2luYWxWYWx1ZTtcbiAgICAgIHZhciB2YWx1ZSA9IGRlY29yYXRvci5jYWxsLmFwcGx5KGRlY29yYXRvciwgW3RoaXMsIGZuXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3MpKSk7XG5cbiAgICAgIGlmIChpc0dldHRlcikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZGVzYyA9IHtcbiAgICAgICAgICBjb25maWd1cmFibGU6IGNvbmZpZ3VyYWJsZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiBlbnVtZXJhYmxlXG4gICAgICAgIH07XG5cbiAgICAgICAgZGVzYy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICBkZXNjLndyaXRhYmxlID0gd3JpdGFibGU7XG5cbiAgICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCBkZXNjKTtcblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNldDogaXNHZXR0ZXIgPyBvcmlnaW5hbFNldCA6IGNyZWF0ZURlZmF1bHRTZXR0ZXIoKVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWNvcmF0ZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIF9kZWNvcmF0ZShoYW5kbGVEZXNjcmlwdG9yLCBhcmdzKTtcbn0iLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbmltcG9ydCB7IGRlY29yYXRlLCB3YXJuIH0gZnJvbSAnLi9wcml2YXRlL3V0aWxzJztcblxudmFyIERFRkFVTFRfTVNHID0gJ1RoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkIGluIGZ1dHVyZSB2ZXJzaW9ucy4nO1xuXG5mdW5jdGlvbiBoYW5kbGVEZXNjcmlwdG9yKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yLCBfcmVmKSB7XG4gIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgX3JlZjIkID0gX3JlZjJbMF0sXG4gICAgICBtc2cgPSBfcmVmMiQgPT09IHVuZGVmaW5lZCA/IERFRkFVTFRfTVNHIDogX3JlZjIkLFxuICAgICAgX3JlZjIkMiA9IF9yZWYyWzFdLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyJDIgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZjIkMjtcblxuICBpZiAodHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ09ubHkgZnVuY3Rpb25zIGNhbiBiZSBtYXJrZWQgYXMgZGVwcmVjYXRlZCcpO1xuICB9XG5cbiAgdmFyIG1ldGhvZFNpZ25hdHVyZSA9IHRhcmdldC5jb25zdHJ1Y3Rvci5uYW1lICsgJyMnICsga2V5O1xuXG4gIGlmIChvcHRpb25zLnVybCkge1xuICAgIG1zZyArPSAnXFxuXFxuICAgIFNlZSAnICsgb3B0aW9ucy51cmwgKyAnIGZvciBtb3JlIGRldGFpbHMuXFxuXFxuJztcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZGVzY3JpcHRvciwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXByZWNhdGlvbldyYXBwZXIoKSB7XG4gICAgICB3YXJuKCdERVBSRUNBVElPTiAnICsgbWV0aG9kU2lnbmF0dXJlICsgJzogJyArIG1zZyk7XG4gICAgICByZXR1cm4gZGVzY3JpcHRvci52YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlcHJlY2F0ZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGRlY29yYXRlKGhhbmRsZURlc2NyaXB0b3IsIGFyZ3MpO1xufSIsImltcG9ydCB7IGRlY29yYXRlIH0gZnJvbSAnLi9wcml2YXRlL3V0aWxzJztcblxuZnVuY3Rpb24gaGFuZGxlRGVzY3JpcHRvcih0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gZGVzY3JpcHRvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZW51bWVyYWJsZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGRlY29yYXRlKGhhbmRsZURlc2NyaXB0b3IsIGFyZ3MpO1xufSIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB7IGRlY29yYXRlIH0gZnJvbSAnLi9wcml2YXRlL3V0aWxzJztcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5cbmZ1bmN0aW9uIGhhbmRsZURlc2NyaXB0b3IodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgdmFyIHN1cGVyS2xhc3MgPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpO1xuICB2YXIgc3VwZXJEZXNjID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHN1cGVyS2xhc3MsIGtleSk7XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdXBlckRlc2MsIHtcbiAgICB2YWx1ZTogZGVzY3JpcHRvci52YWx1ZSxcbiAgICBpbml0aWFsaXplcjogZGVzY3JpcHRvci5pbml0aWFsaXplcixcbiAgICBnZXQ6IGRlc2NyaXB0b3IuZ2V0IHx8IHN1cGVyRGVzYy5nZXQsXG4gICAgc2V0OiBkZXNjcmlwdG9yLnNldCB8fCBzdXBlckRlc2Muc2V0XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlbmREZXNjcmlwdG9yKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZGVjb3JhdGUoaGFuZGxlRGVzY3JpcHRvciwgYXJncyk7XG59IiwiaW1wb3J0IHsgZGVjb3JhdGUsIGNyZWF0ZURlZmF1bHRTZXR0ZXIgfSBmcm9tICcuL3ByaXZhdGUvdXRpbHMnO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5cbmZ1bmN0aW9uIGhhbmRsZURlc2NyaXB0b3IodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgdmFyIGNvbmZpZ3VyYWJsZSA9IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlLFxuICAgICAgZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSxcbiAgICAgIGluaXRpYWxpemVyID0gZGVzY3JpcHRvci5pbml0aWFsaXplcixcbiAgICAgIHZhbHVlID0gZGVzY3JpcHRvci52YWx1ZTtcblxuICByZXR1cm4ge1xuICAgIGNvbmZpZ3VyYWJsZTogY29uZmlndXJhYmxlLFxuICAgIGVudW1lcmFibGU6IGVudW1lcmFibGUsXG5cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIC8vIFRoaXMgaGFwcGVucyBpZiBzb21lb25lIGFjY2Vzc2VzIHRoZVxuICAgICAgLy8gcHJvcGVydHkgZGlyZWN0bHkgb24gdGhlIHByb3RvdHlwZVxuICAgICAgaWYgKHRoaXMgPT09IHRhcmdldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZXQgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyLmNhbGwodGhpcykgOiB2YWx1ZTtcblxuICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogY29uZmlndXJhYmxlLFxuICAgICAgICBlbnVtZXJhYmxlOiBlbnVtZXJhYmxlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHJldFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcblxuXG4gICAgc2V0OiBjcmVhdGVEZWZhdWx0U2V0dGVyKGtleSlcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGF6eUluaXRpYWxpemUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBkZWNvcmF0ZShoYW5kbGVEZXNjcmlwdG9yLCBhcmdzKTtcbn0iLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBkZWNvcmF0ZSwgaW50ZXJuYWxEZXByZWNhdGlvbiB9IGZyb20gJy4vcHJpdmF0ZS91dGlscyc7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KGNhY2hlLCB2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IE9iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGNhY2hlW3ZhbHVlXSB8fCAoY2FjaGVbdmFsdWVdID0ge30pO1xufVxuXG5mdW5jdGlvbiBhcHBseUFuZENhY2hlKGNvbnRleHQsIGZuLCBhcmdzLCBjYWNoZSwgc2lnbmF0dXJlKSB7XG4gIHZhciByZXQgPSBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgY2FjaGVbc2lnbmF0dXJlXSA9IHJldDtcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gbWV0YUZvckRlc2NyaXB0b3IoZGVzY3JpcHRvcikge1xuICB2YXIgZm4gPSB2b2lkIDAsXG4gICAgICB3cmFwS2V5ID0gdm9pZCAwO1xuXG4gIC8vIFRoaXMgaXMgdWdseSBjb2RlLCBidXQgd2F5IGZhc3RlciB0aGFuIG90aGVyXG4gIC8vIHdheXMgSSB0cmllZCB0aGF0ICpsb29rZWQqIHByZXR0eVxuXG4gIGlmIChkZXNjcmlwdG9yLnZhbHVlKSB7XG4gICAgZm4gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIHdyYXBLZXkgPSAndmFsdWUnO1xuICB9IGVsc2UgaWYgKGRlc2NyaXB0b3IuZ2V0KSB7XG4gICAgZm4gPSBkZXNjcmlwdG9yLmdldDtcbiAgICB3cmFwS2V5ID0gJ2dldCc7XG4gIH0gZWxzZSBpZiAoZGVzY3JpcHRvci5zZXQpIHtcbiAgICBmbiA9IGRlc2NyaXB0b3Iuc2V0O1xuICAgIHdyYXBLZXkgPSAnc2V0JztcbiAgfVxuXG4gIHJldHVybiB7IGZuOiBmbiwgd3JhcEtleTogd3JhcEtleSB9O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVEZXNjcmlwdG9yKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gIHZhciBfbWV0YUZvckRlc2NyaXB0b3IgPSBtZXRhRm9yRGVzY3JpcHRvcihkZXNjcmlwdG9yKSxcbiAgICAgIGZuID0gX21ldGFGb3JEZXNjcmlwdG9yLmZuLFxuICAgICAgd3JhcEtleSA9IF9tZXRhRm9yRGVzY3JpcHRvci53cmFwS2V5O1xuXG4gIHZhciBhcmd1bWVudENhY2hlID0gbmV3IFdlYWtNYXAoKTtcbiAgdmFyIHNpZ25hdHVyZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHByaW1hdGl2ZVJlZkNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGFyZ3VtZW50SWRDb3VudGVyID0gMDtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGRlc2NyaXB0b3IsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgd3JhcEtleSwgZnVuY3Rpb24gbWVtb2l6ZVdyYXBwZXIoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIHNpZ25hdHVyZSA9ICcwJztcblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJncy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhcmcgPSBhcmdzW2ldO1xuICAgICAgdmFyIGFyZ1JlZiA9IHRvT2JqZWN0KHByaW1hdGl2ZVJlZkNhY2hlLCBhcmcpO1xuICAgICAgdmFyIGFyZ0tleSA9IGFyZ3VtZW50Q2FjaGUuZ2V0KGFyZ1JlZik7XG5cbiAgICAgIGlmIChhcmdLZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhcmdLZXkgPSArK2FyZ3VtZW50SWRDb3VudGVyO1xuICAgICAgICBhcmd1bWVudENhY2hlLnNldChhcmdSZWYsIGFyZ0tleSk7XG4gICAgICB9XG5cbiAgICAgIHNpZ25hdHVyZSArPSBhcmdLZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpZ25hdHVyZUNhY2hlW3NpZ25hdHVyZV0gfHwgYXBwbHlBbmRDYWNoZSh0aGlzLCBmbiwgYXJndW1lbnRzLCBzaWduYXR1cmVDYWNoZSwgc2lnbmF0dXJlKTtcbiAgfSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZW1vaXplKCkge1xuICBpbnRlcm5hbERlcHJlY2F0aW9uKCdAbWVtb2l6ZSBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgc2hvcnRseS4gVXNlIEBtZW1vaXplIGZyb20gbG9kYXNoLWRlY29yYXRvcnMuXFxuXFxuICBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9sb2Rhc2gtZGVjb3JhdG9ycycpO1xuXG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgcmV0dXJuIGRlY29yYXRlKGhhbmRsZURlc2NyaXB0b3IsIGFyZ3MpO1xufSIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuaW1wb3J0IHsgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycywgZ2V0T3duS2V5cywgaW50ZXJuYWxEZXByZWNhdGlvbiB9IGZyb20gJy4vcHJpdmF0ZS91dGlscyc7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcbiAgICBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxuXG5mdW5jdGlvbiBidWdneVN5bWJvbChzeW1ib2wpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW1ib2wpID09PSAnW29iamVjdCBTeW1ib2xdJyAmJiAodHlwZW9mIHN5bWJvbCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yoc3ltYm9sKSkgPT09ICdvYmplY3QnO1xufVxuXG5mdW5jdGlvbiBoYXNQcm9wZXJ0eShwcm9wLCBvYmopIHtcbiAgLy8gV2UgaGF2ZSB0byB0cmF2ZXJzZSBtYW51YWxseSBwcm90b3R5cGVzJyBjaGFpbiBmb3IgcG9seWZpbGxlZCBFUzYgU3ltYm9sc1xuICAvLyBsaWtlIFwiaW5cIiBvcGVyYXRvciBkb2VzLlxuICAvLyBJLmUuOiBCYWJlbCA1IFN5bWJvbCBwb2x5ZmlsbCBzdG9yZXMgZXZlcnkgY3JlYXRlZCBzeW1ib2wgaW4gT2JqZWN0LnByb3RvdHlwZS5cbiAgLy8gVGhhdCdzIHdoeSB3ZSBjYW5ub3QgdXNlIGNvbnN0cnVjdGlvbiBsaWtlIFwicHJvcCBpbiBvYmpcIiB0byBjaGVjaywgaWYgbmVlZGVkXG4gIC8vIHByb3AgYWN0dWFsbHkgZXhpc3RzIGluIGdpdmVuIG9iamVjdC9wcm90b3R5cGVzJyBjaGFpbi5cbiAgaWYgKGJ1Z2d5U3ltYm9sKHByb3ApKSB7XG4gICAgZG8ge1xuICAgICAgaWYgKG9iaiA9PT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgICAgICAvLyBQb2x5ZmlsbCBhc3NpZ25zIHVuZGVmaW5lZCBhcyB2YWx1ZSBmb3Igc3RvcmVkIHN5bWJvbCBrZXkuXG4gICAgICAgIC8vIFdlIGNhbiBhc3N1bWUgaW4gdGhpcyBzcGVjaWFsIGNhc2UgaWYgdGhlcmUgaXMgbm90aGluZyBhc3NpZ25lZCBpdCBkb2Vzbid0IGV4aXN0LlxuICAgICAgICByZXR1cm4gdHlwZW9mIG9ialtwcm9wXSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICB9XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKG9iaiA9IGdldFByb3RvdHlwZU9mKG9iaikpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJvcCBpbiBvYmo7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlQ2xhc3ModGFyZ2V0LCBtaXhpbnMpIHtcbiAgaWYgKCFtaXhpbnMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdAbWl4aW4oKSBjbGFzcyAnICsgdGFyZ2V0Lm5hbWUgKyAnIHJlcXVpcmVzIGF0IGxlYXN0IG9uZSBtaXhpbiBhcyBhbiBhcmd1bWVudCcpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBtaXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGRlc2NzID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhtaXhpbnNbaV0pO1xuICAgIHZhciBrZXlzID0gZ2V0T3duS2V5cyhkZXNjcyk7XG5cbiAgICBmb3IgKHZhciBqID0gMCwgayA9IGtleXMubGVuZ3RoOyBqIDwgazsgaisrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tqXTtcblxuICAgICAgaWYgKCFoYXNQcm9wZXJ0eShrZXksIHRhcmdldC5wcm90b3R5cGUpKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldC5wcm90b3R5cGUsIGtleSwgZGVzY3Nba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1peGluKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWl4aW5zID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWl4aW5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaW50ZXJuYWxEZXByZWNhdGlvbignQG1peGluIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBzaG9ydGx5LiBVc2UgQG1peGluIGZyb20gbG9kYXNoLWRlY29yYXRvcnMuXFxuXFxuICBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9sb2Rhc2gtZGVjb3JhdG9ycycpO1xuXG4gIGlmICh0eXBlb2YgbWl4aW5zWzBdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGhhbmRsZUNsYXNzKG1peGluc1swXSwgW10pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICByZXR1cm4gaGFuZGxlQ2xhc3ModGFyZ2V0LCBtaXhpbnMpO1xuICAgIH07XG4gIH1cbn0iLCJpbXBvcnQgeyBkZWNvcmF0ZSB9IGZyb20gJy4vcHJpdmF0ZS91dGlscyc7XG5cbmZ1bmN0aW9uIGhhbmRsZURlc2NyaXB0b3IodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSBmYWxzZTtcbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vbmNvbmZpZ3VyYWJsZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGRlY29yYXRlKGhhbmRsZURlc2NyaXB0b3IsIGFyZ3MpO1xufSIsImltcG9ydCB7IGRlY29yYXRlIH0gZnJvbSAnLi9wcml2YXRlL3V0aWxzJztcblxuZnVuY3Rpb24gaGFuZGxlRGVzY3JpcHRvcih0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBmYWxzZTtcbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vbmVudW1lcmFibGUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBkZWNvcmF0ZShoYW5kbGVEZXNjcmlwdG9yLCBhcmdzKTtcbn0iLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmltcG9ydCB7IGRlY29yYXRlIH0gZnJvbSAnLi9wcml2YXRlL3V0aWxzJztcblxudmFyIEdFTkVSSUNfRlVOQ1RJT05fRVJST1IgPSAne2NoaWxkfSBkb2VzIG5vdCBwcm9wZXJseSBvdmVycmlkZSB7cGFyZW50fSc7XG52YXIgRlVOQ1RJT05fUkVHRVhQID0gL15mdW5jdGlvbiAoW18kYS16QS1aXFx4QTAtXFx1RkZGRl1bXyRhLXpBLVowLTlcXHhBMC1cXHVGRkZGXSopPyhcXChbXlxcKV0qXFwpKVtcXHNcXFNdKyQvO1xuXG52YXIgU3ludGF4RXJyb3JSZXBvcnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgX2NyZWF0ZUNsYXNzKFN5bnRheEVycm9yUmVwb3J0ZXIsIFt7XG4gICAga2V5OiAnX2dldFRvcGljJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFRvcGljKGRlc2NyaXB0b3IpIHtcbiAgICAgIGlmIChkZXNjcmlwdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICgnZ2V0JyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9yLmdldDtcbiAgICAgIH1cblxuICAgICAgaWYgKCdzZXQnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3Iuc2V0O1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19leHRyYWN0VG9waWNTaWduYXR1cmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZXh0cmFjdFRvcGljU2lnbmF0dXJlKHRvcGljKSB7XG4gICAgICBzd2l0Y2ggKHR5cGVvZiB0b3BpYyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodG9waWMpKSB7XG4gICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZXh0cmFjdEZ1bmN0aW9uU2lnbmF0dXJlKHRvcGljKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdGhpcy5rZXk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2V4dHJhY3RGdW5jdGlvblNpZ25hdHVyZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9leHRyYWN0RnVuY3Rpb25TaWduYXR1cmUoZm4pIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBmbi50b1N0cmluZygpLnJlcGxhY2UoRlVOQ1RJT05fUkVHRVhQLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IF90aGlzLmtleTtcbiAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50c1syXTtcbiAgICAgICAgcmV0dXJuIG5hbWUgKyBwYXJhbXM7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdrZXknLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2hpbGREZXNjcmlwdG9yLmtleTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwYXJlbnROb3RhdGlvbicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnRLbGFzcy5jb25zdHJ1Y3Rvci5uYW1lICsgJyMnICsgdGhpcy5wYXJlbnRQcm9wZXJ0eVNpZ25hdHVyZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjaGlsZE5vdGF0aW9uJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNoaWxkS2xhc3MuY29uc3RydWN0b3IubmFtZSArICcjJyArIHRoaXMuY2hpbGRQcm9wZXJ0eVNpZ25hdHVyZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwYXJlbnRUb3BpYycsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZ2V0VG9waWModGhpcy5wYXJlbnREZXNjcmlwdG9yKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjaGlsZFRvcGljJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXRUb3BpYyh0aGlzLmNoaWxkRGVzY3JpcHRvcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGFyZW50UHJvcGVydHlTaWduYXR1cmUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2V4dHJhY3RUb3BpY1NpZ25hdHVyZSh0aGlzLnBhcmVudFRvcGljKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjaGlsZFByb3BlcnR5U2lnbmF0dXJlJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9leHRyYWN0VG9waWNTaWduYXR1cmUodGhpcy5jaGlsZFRvcGljKTtcbiAgICB9XG4gIH1dKTtcblxuICBmdW5jdGlvbiBTeW50YXhFcnJvclJlcG9ydGVyKHBhcmVudEtsYXNzLCBjaGlsZEtsYXNzLCBwYXJlbnREZXNjcmlwdG9yLCBjaGlsZERlc2NyaXB0b3IpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3ludGF4RXJyb3JSZXBvcnRlcik7XG5cbiAgICB0aGlzLnBhcmVudEtsYXNzID0gcGFyZW50S2xhc3M7XG4gICAgdGhpcy5jaGlsZEtsYXNzID0gY2hpbGRLbGFzcztcbiAgICB0aGlzLnBhcmVudERlc2NyaXB0b3IgPSBwYXJlbnREZXNjcmlwdG9yO1xuICAgIHRoaXMuY2hpbGREZXNjcmlwdG9yID0gY2hpbGREZXNjcmlwdG9yO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFN5bnRheEVycm9yUmVwb3J0ZXIsIFt7XG4gICAga2V5OiAnYXNzZXJ0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbikge1xuICAgICAgdmFyIG1zZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG5cbiAgICAgIGlmIChjb25kaXRpb24gIT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5lcnJvcihHRU5FUklDX0ZVTkNUSU9OX0VSUk9SICsgbXNnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlcnJvcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVycm9yKG1zZykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIG1zZyA9IG1zZ1xuICAgICAgLy8gUmVwbGFjZSBsYXppbHksIGJlY2F1c2UgdGhleSBhY3R1YWxseSBtaWdodCBub3RcbiAgICAgIC8vIGJlIGF2YWlsYWJsZSBpbiBhbGwgY2FzZXNcbiAgICAgIC5yZXBsYWNlKCd7cGFyZW50fScsIGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIucGFyZW50Tm90YXRpb247XG4gICAgICB9KS5yZXBsYWNlKCd7Y2hpbGR9JywgZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5jaGlsZE5vdGF0aW9uO1xuICAgICAgfSk7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IobXNnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3ludGF4RXJyb3JSZXBvcnRlcjtcbn0oKTtcblxuZnVuY3Rpb24gZ2V0RGVzY3JpcHRvclR5cGUoZGVzY3JpcHRvcikge1xuICBpZiAoZGVzY3JpcHRvci5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xuICAgIHJldHVybiAnZGF0YSc7XG4gIH1cblxuICBpZiAoZGVzY3JpcHRvci5oYXNPd25Qcm9wZXJ0eSgnZ2V0JykgfHwgZGVzY3JpcHRvci5oYXNPd25Qcm9wZXJ0eSgnc2V0JykpIHtcbiAgICByZXR1cm4gJ2FjY2Vzc29yJztcbiAgfVxuXG4gIC8vIElmIG5vbmUgb2YgdGhlbSBleGlzdCwgYnJvd3NlcnMgdHJlYXQgaXQgYXNcbiAgLy8gYSBkYXRhIGRlc2NyaXB0b3Igd2l0aCBhIHZhbHVlIG9mIGB1bmRlZmluZWRgXG4gIHJldHVybiAnZGF0YSc7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRnVuY3Rpb25TaWduYXR1cmVzKHBhcmVudCwgY2hpbGQsIHJlcG9ydGVyKSB7XG4gIHJlcG9ydGVyLmFzc2VydChwYXJlbnQubGVuZ3RoID09PSBjaGlsZC5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBjaGVja0RhdGFEZXNjcmlwdG9ycyhwYXJlbnQsIGNoaWxkLCByZXBvcnRlcikge1xuICB2YXIgcGFyZW50VmFsdWVUeXBlID0gX3R5cGVvZihwYXJlbnQudmFsdWUpO1xuICB2YXIgY2hpbGRWYWx1ZVR5cGUgPSBfdHlwZW9mKGNoaWxkLnZhbHVlKTtcblxuICBpZiAocGFyZW50VmFsdWVUeXBlID09PSAndW5kZWZpbmVkJyAmJiBjaGlsZFZhbHVlVHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBjbGFzcyBwcm9wZXJ0aWVzIGNhbiBiZSBhbnkgZXhwcmVzc2lvbiwgd2hpY2ggaXNuJ3QgcmFuIHVudGlsIHRoZVxuICAgIC8vIHRoZSBpbnN0YW5jZSBpcyBjcmVhdGVkLCBzbyB3ZSBjYW4ndCByZWxpYWJseSBnZXQgdHlwZSBpbmZvcm1hdGlvblxuICAgIC8vIGZvciB0aGVtIHlldCAocGVyIHNwZWMpLiBQZXJoYXBzIHdoZW4gQmFiZWwgaW5jbHVkZXMgZmxvdy10eXBlIGluZm9cbiAgICAvLyBpbiBydW50aW1lPyBUcmllZCByZWdleCBzb2x1dGlvbnMsIGJ1dCBzdXBlciBoYWNreSBhbmQgb25seSBmZWFzaWJsZVxuICAgIC8vIG9uIHByaW1pdGl2ZXMsIHdoaWNoIGlzIGNvbmZ1c2luZyBmb3IgdXNhZ2UuLi5cbiAgICByZXBvcnRlci5lcnJvcignZGVzY3JpcHRvciB2YWx1ZXMgYXJlIGJvdGggdW5kZWZpbmVkLiAoY2xhc3MgcHJvcGVydGllcyBhcmUgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkKVxcJycpO1xuICB9XG5cbiAgaWYgKHBhcmVudFZhbHVlVHlwZSAhPT0gY2hpbGRWYWx1ZVR5cGUpIHtcbiAgICB2YXIgaXNGdW5jdGlvbk92ZXJVbmRlZmluZWQgPSBjaGlsZFZhbHVlVHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiBwYXJlbnRWYWx1ZVR5cGUgPT09IHVuZGVmaW5lZDtcbiAgICAvLyBFdmVuIHRob3VnaCB3ZSBkb24ndCBzdXBwb3J0IGNsYXNzIHByb3BlcnRpZXMsIHRoaXNcbiAgICAvLyB3aWxsIHN0aWxsIGhhbmRsZSBtb3JlIHRoYW4ganVzdCBmdW5jdGlvbnMsIGp1c3QgaW4gY2FzZS5cbiAgICAvLyBTaGFkb3dpbmcgYW4gdW5kZWZpbmVkIHZhbHVlIGlzIGFuIGVycm9yIGlmIHRoZSBpbmhlcml0ZWRcbiAgICAvLyB2YWx1ZSB3YXMgdW5kZWZpbmVkICh1c3VhbGx5IGEgY2xhc3MgcHJvcGVydHksIG5vdCBhIG1ldGhvZClcbiAgICBpZiAoaXNGdW5jdGlvbk92ZXJVbmRlZmluZWQgfHwgcGFyZW50VmFsdWVUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcG9ydGVyLmVycm9yKCd2YWx1ZSB0eXBlcyBkbyBub3QgbWF0Y2guIHtwYXJlbnR9IGlzIFwiJyArIHBhcmVudFZhbHVlVHlwZSArICdcIiwge2NoaWxkfSBpcyBcIicgKyBjaGlsZFZhbHVlVHlwZSArICdcIicpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFN3aXRjaCwgaW4gcHJlcGFyYXRpb24gZm9yIHN1cHBvcnRpbmcgbW9yZSB0eXBlc1xuICBzd2l0Y2ggKGNoaWxkVmFsdWVUeXBlKSB7XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgY2hlY2tGdW5jdGlvblNpZ25hdHVyZXMocGFyZW50LnZhbHVlLCBjaGlsZC52YWx1ZSwgcmVwb3J0ZXIpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmVwb3J0ZXIuZXJyb3IoJ1VuZXhwZWN0ZWQgZXJyb3IuIFBsZWFzZSBmaWxlIGEgYnVnIHdpdGg6IHtwYXJlbnR9IGlzIFwiJyArIHBhcmVudFZhbHVlVHlwZSArICdcIiwge2NoaWxkfSBpcyBcIicgKyBjaGlsZFZhbHVlVHlwZSArICdcIicpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tBY2Nlc3NvckRlc2NyaXB0b3JzKHBhcmVudCwgY2hpbGQsIHJlcG9ydGVyKSB7XG4gIHZhciBwYXJlbnRIYXNHZXR0ZXIgPSB0eXBlb2YgcGFyZW50LmdldCA9PT0gJ2Z1bmN0aW9uJztcbiAgdmFyIGNoaWxkSGFzR2V0dGVyID0gdHlwZW9mIGNoaWxkLmdldCA9PT0gJ2Z1bmN0aW9uJztcbiAgdmFyIHBhcmVudEhhc1NldHRlciA9IHR5cGVvZiBwYXJlbnQuc2V0ID09PSAnZnVuY3Rpb24nO1xuICB2YXIgY2hpbGRIYXNTZXR0ZXIgPSB0eXBlb2YgY2hpbGQuc2V0ID09PSAnZnVuY3Rpb24nO1xuXG4gIGlmIChwYXJlbnRIYXNHZXR0ZXIgfHwgY2hpbGRIYXNHZXR0ZXIpIHtcbiAgICBpZiAoIXBhcmVudEhhc0dldHRlciAmJiBwYXJlbnRIYXNTZXR0ZXIpIHtcbiAgICAgIHJlcG9ydGVyLmVycm9yKCd7cGFyZW50fSBpcyBzZXR0ZXIgYnV0IHtjaGlsZH0gaXMgZ2V0dGVyJyk7XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZEhhc0dldHRlciAmJiBjaGlsZEhhc1NldHRlcikge1xuICAgICAgcmVwb3J0ZXIuZXJyb3IoJ3twYXJlbnR9IGlzIGdldHRlciBidXQge2NoaWxkfSBpcyBzZXR0ZXInKTtcbiAgICB9XG5cbiAgICBjaGVja0Z1bmN0aW9uU2lnbmF0dXJlcyhwYXJlbnQuZ2V0LCBjaGlsZC5nZXQsIHJlcG9ydGVyKTtcbiAgfVxuXG4gIGlmIChwYXJlbnRIYXNTZXR0ZXIgfHwgY2hpbGRIYXNTZXR0ZXIpIHtcbiAgICBpZiAoIXBhcmVudEhhc1NldHRlciAmJiBwYXJlbnRIYXNHZXR0ZXIpIHtcbiAgICAgIHJlcG9ydGVyLmVycm9yKCd7cGFyZW50fSBpcyBnZXR0ZXIgYnV0IHtjaGlsZH0gaXMgc2V0dGVyJyk7XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZEhhc1NldHRlciAmJiBjaGlsZEhhc0dldHRlcikge1xuICAgICAgcmVwb3J0ZXIuZXJyb3IoJ3twYXJlbnR9IGlzIHNldHRlciBidXQge2NoaWxkfSBpcyBnZXR0ZXInKTtcbiAgICB9XG5cbiAgICBjaGVja0Z1bmN0aW9uU2lnbmF0dXJlcyhwYXJlbnQuc2V0LCBjaGlsZC5zZXQsIHJlcG9ydGVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0Rlc2NyaXB0b3JzKHBhcmVudCwgY2hpbGQsIHJlcG9ydGVyKSB7XG4gIHZhciBwYXJlbnRUeXBlID0gZ2V0RGVzY3JpcHRvclR5cGUocGFyZW50KTtcbiAgdmFyIGNoaWxkVHlwZSA9IGdldERlc2NyaXB0b3JUeXBlKGNoaWxkKTtcblxuICBpZiAocGFyZW50VHlwZSAhPT0gY2hpbGRUeXBlKSB7XG4gICAgcmVwb3J0ZXIuZXJyb3IoJ2Rlc2NyaXB0b3IgdHlwZXMgZG8gbm90IG1hdGNoLiB7cGFyZW50fSBpcyBcIicgKyBwYXJlbnRUeXBlICsgJ1wiLCB7Y2hpbGR9IGlzIFwiJyArIGNoaWxkVHlwZSArICdcIicpO1xuICB9XG5cbiAgc3dpdGNoIChjaGlsZFR5cGUpIHtcbiAgICBjYXNlICdkYXRhJzpcbiAgICAgIGNoZWNrRGF0YURlc2NyaXB0b3JzKHBhcmVudCwgY2hpbGQsIHJlcG9ydGVyKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnYWNjZXNzb3InOlxuICAgICAgY2hlY2tBY2Nlc3NvckRlc2NyaXB0b3JzKHBhcmVudCwgY2hpbGQsIHJlcG9ydGVyKTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbnZhciBzdWdnZXN0aW9uVHJhbnNmb3JtcyA9IFtmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXkudG9Mb3dlckNhc2UoKTtcbn0sIGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleS50b1VwcGVyQ2FzZSgpO1xufSwgZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5ICsgJ3MnO1xufSwgZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5LnNsaWNlKDAsIC0xKTtcbn0sIGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleS5zbGljZSgxLCBrZXkubGVuZ3RoKTtcbn1dO1xuXG5mdW5jdGlvbiBmaW5kUG9zc2libGVBbHRlcm5hdGl2ZXMoc3VwZXJLbGFzcywga2V5KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3VnZ2VzdGlvblRyYW5zZm9ybXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGZuID0gc3VnZ2VzdGlvblRyYW5zZm9ybXNbaV07XG4gICAgdmFyIHN1Z2dlc3Rpb24gPSBmbihrZXkpO1xuXG4gICAgaWYgKHN1Z2dlc3Rpb24gaW4gc3VwZXJLbGFzcykge1xuICAgICAgcmV0dXJuIHN1Z2dlc3Rpb247XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZURlc2NyaXB0b3IodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgZGVzY3JpcHRvci5rZXkgPSBrZXk7XG4gIHZhciBzdXBlcktsYXNzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCk7XG4gIHZhciBzdXBlckRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHN1cGVyS2xhc3MsIGtleSk7XG4gIHZhciByZXBvcnRlciA9IG5ldyBTeW50YXhFcnJvclJlcG9ydGVyKHN1cGVyS2xhc3MsIHRhcmdldCwgc3VwZXJEZXNjcmlwdG9yLCBkZXNjcmlwdG9yKTtcblxuICBpZiAoc3VwZXJEZXNjcmlwdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgc3VnZ2VzdGVkS2V5ID0gZmluZFBvc3NpYmxlQWx0ZXJuYXRpdmVzKHN1cGVyS2xhc3MsIGtleSk7XG4gICAgdmFyIHN1Z2dlc3Rpb24gPSBzdWdnZXN0ZWRLZXkgPyAnXFxuXFxuICBEaWQgeW91IG1lYW4gXCInICsgc3VnZ2VzdGVkS2V5ICsgJ1wiPycgOiAnJztcbiAgICByZXBvcnRlci5lcnJvcignTm8gZGVzY3JpcHRvciBtYXRjaGluZyB7Y2hpbGR9IHdhcyBmb3VuZCBvbiB0aGUgcHJvdG90eXBlIGNoYWluLicgKyBzdWdnZXN0aW9uKTtcbiAgfVxuXG4gIGNoZWNrRGVzY3JpcHRvcnMoc3VwZXJEZXNjcmlwdG9yLCBkZXNjcmlwdG9yLCByZXBvcnRlcik7XG5cbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG92ZXJyaWRlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZGVjb3JhdGUoaGFuZGxlRGVzY3JpcHRvciwgYXJncyk7XG59IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2Rlc2MsIF92YWx1ZSwgX2NsYXNzLCBfZGVzY3JpcHRvciwgX2Rlc2NyaXB0b3IyLCBfZGVzY3JpcHRvcjMsIF9kZXNjcmlwdG9yNCwgX2Rlc2NyaXB0b3I1O1xuXG5mdW5jdGlvbiBfaW5pdERlZmluZVByb3AodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvciwgY29udGV4dCkge1xuICBpZiAoIWRlc2NyaXB0b3IpIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHtcbiAgICBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGUsXG4gICAgY29uZmlndXJhYmxlOiBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSxcbiAgICB3cml0YWJsZTogZGVzY3JpcHRvci53cml0YWJsZSxcbiAgICB2YWx1ZTogZGVzY3JpcHRvci5pbml0aWFsaXplciA/IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KSA6IHZvaWQgMFxuICB9KTtcbn1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JzLCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7XG4gIHZhciBkZXNjID0ge307XG4gIE9iamVjdFsna2UnICsgJ3lzJ10oZGVzY3JpcHRvcikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgZGVzY1trZXldID0gZGVzY3JpcHRvcltrZXldO1xuICB9KTtcbiAgZGVzYy5lbnVtZXJhYmxlID0gISFkZXNjLmVudW1lcmFibGU7XG4gIGRlc2MuY29uZmlndXJhYmxlID0gISFkZXNjLmNvbmZpZ3VyYWJsZTtcblxuICBpZiAoJ3ZhbHVlJyBpbiBkZXNjIHx8IGRlc2MuaW5pdGlhbGl6ZXIpIHtcbiAgICBkZXNjLndyaXRhYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIGRlc2MgPSBkZWNvcmF0b3JzLnNsaWNlKCkucmV2ZXJzZSgpLnJlZHVjZShmdW5jdGlvbiAoZGVzYywgZGVjb3JhdG9yKSB7XG4gICAgcmV0dXJuIGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5LCBkZXNjKSB8fCBkZXNjO1xuICB9LCBkZXNjKTtcblxuICBpZiAoY29udGV4dCAmJiBkZXNjLmluaXRpYWxpemVyICE9PSB2b2lkIDApIHtcbiAgICBkZXNjLnZhbHVlID0gZGVzYy5pbml0aWFsaXplciA/IGRlc2MuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KSA6IHZvaWQgMDtcbiAgICBkZXNjLmluaXRpYWxpemVyID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKGRlc2MuaW5pdGlhbGl6ZXIgPT09IHZvaWQgMCkge1xuICAgIE9iamVjdFsnZGVmaW5lJyArICdQcm9wZXJ0eSddKHRhcmdldCwgcHJvcGVydHksIGRlc2MpO1xuICAgIGRlc2MgPSBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGRlc2M7XG59XG5cbmZ1bmN0aW9uIF9pbml0aWFsaXplcldhcm5pbmdIZWxwZXIoZGVzY3JpcHRvciwgY29udGV4dCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0RlY29yYXRpbmcgY2xhc3MgcHJvcGVydHkgZmFpbGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgdHJhbnNmb3JtLWNsYXNzLXByb3BlcnRpZXMgaXMgZW5hYmxlZC4nKTtcbn1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmltcG9ydCBsYXp5SW5pdGlhbGl6ZSBmcm9tICcuLi9sYXp5LWluaXRpYWxpemUnO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsXG4gICAgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZXNjcmlwdG9yKGRlc2MpIHtcbiAgaWYgKCFkZXNjIHx8ICFkZXNjLmhhc093blByb3BlcnR5KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXMgPSBbJ3ZhbHVlJywgJ2luaXRpYWxpemVyJywgJ2dldCcsICdzZXQnXTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGRlc2MuaGFzT3duUHJvcGVydHkoa2V5c1tpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29yYXRlKGhhbmRsZURlc2NyaXB0b3IsIGVudHJ5QXJncykge1xuICBpZiAoaXNEZXNjcmlwdG9yKGVudHJ5QXJnc1tlbnRyeUFyZ3MubGVuZ3RoIC0gMV0pKSB7XG4gICAgcmV0dXJuIGhhbmRsZURlc2NyaXB0b3IuYXBwbHkodW5kZWZpbmVkLCBfdG9Db25zdW1hYmxlQXJyYXkoZW50cnlBcmdzKS5jb25jYXQoW1tdXSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaGFuZGxlRGVzY3JpcHRvci5hcHBseSh1bmRlZmluZWQsIF90b0NvbnN1bWFibGVBcnJheShBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKS5jb25jYXQoW2VudHJ5QXJnc10pKTtcbiAgICB9O1xuICB9XG59XG5cbnZhciBNZXRhID0gKF9jbGFzcyA9IGZ1bmN0aW9uIE1ldGEoKSB7XG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZXRhKTtcblxuICBfaW5pdERlZmluZVByb3AodGhpcywgJ2RlYm91bmNlVGltZW91dElkcycsIF9kZXNjcmlwdG9yLCB0aGlzKTtcblxuICBfaW5pdERlZmluZVByb3AodGhpcywgJ3Rocm90dGxlVGltZW91dElkcycsIF9kZXNjcmlwdG9yMiwgdGhpcyk7XG5cbiAgX2luaXREZWZpbmVQcm9wKHRoaXMsICd0aHJvdHRsZVByZXZpb3VzVGltZXN0YW1wcycsIF9kZXNjcmlwdG9yMywgdGhpcyk7XG5cbiAgX2luaXREZWZpbmVQcm9wKHRoaXMsICd0aHJvdHRsZVRyYWlsaW5nQXJncycsIF9kZXNjcmlwdG9yNCwgdGhpcyk7XG5cbiAgX2luaXREZWZpbmVQcm9wKHRoaXMsICdwcm9maWxlTGFzdFJhbicsIF9kZXNjcmlwdG9yNSwgdGhpcyk7XG59LCAoX2Rlc2NyaXB0b3IgPSBfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKF9jbGFzcy5wcm90b3R5cGUsICdkZWJvdW5jZVRpbWVvdXRJZHMnLCBbbGF6eUluaXRpYWxpemVdLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pLCBfZGVzY3JpcHRvcjIgPSBfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKF9jbGFzcy5wcm90b3R5cGUsICd0aHJvdHRsZVRpbWVvdXRJZHMnLCBbbGF6eUluaXRpYWxpemVdLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiBpbml0aWFsaXplcigpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pLCBfZGVzY3JpcHRvcjMgPSBfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKF9jbGFzcy5wcm90b3R5cGUsICd0aHJvdHRsZVByZXZpb3VzVGltZXN0YW1wcycsIFtsYXp5SW5pdGlhbGl6ZV0sIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxufSksIF9kZXNjcmlwdG9yNCA9IF9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoX2NsYXNzLnByb3RvdHlwZSwgJ3Rocm90dGxlVHJhaWxpbmdBcmdzJywgW2xhenlJbml0aWFsaXplXSwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gaW5pdGlhbGl6ZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn0pLCBfZGVzY3JpcHRvcjUgPSBfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKF9jbGFzcy5wcm90b3R5cGUsICdwcm9maWxlTGFzdFJhbicsIFtsYXp5SW5pdGlhbGl6ZV0sIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgaW5pdGlhbGl6ZXI6IGZ1bmN0aW9uIGluaXRpYWxpemVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59KSksIF9jbGFzcyk7XG5cblxudmFyIE1FVEFfS0VZID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyA/IFN5bWJvbCgnX19jb3JlX2RlY29yYXRvcnNfXycpIDogJ19fY29yZV9kZWNvcmF0b3JzX18nO1xuXG5leHBvcnQgZnVuY3Rpb24gbWV0YUZvcihvYmopIHtcbiAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShNRVRBX0tFWSkgPT09IGZhbHNlKSB7XG4gICAgZGVmaW5lUHJvcGVydHkob2JqLCBNRVRBX0tFWSwge1xuICAgICAgLy8gRGVmYXVsdHM6IE5PVCBlbnVtZXJhYmxlLCBjb25maWd1cmFibGUsIG9yIHdyaXRhYmxlXG4gICAgICB2YWx1ZTogbmV3IE1ldGEoKVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG9ialtNRVRBX0tFWV07XG59XG5cbmV4cG9ydCB2YXIgZ2V0T3duS2V5cyA9IGdldE93blByb3BlcnR5U3ltYm9scyA/IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5TmFtZXMob2JqZWN0KS5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkpO1xufSA6IGdldE93blByb3BlcnR5TmFtZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaikge1xuICB2YXIgZGVzY3MgPSB7fTtcblxuICBnZXRPd25LZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGRlc2NzW2tleV0gPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICB9KTtcblxuICByZXR1cm4gZGVzY3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0U2V0dGVyKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gc2V0KG5ld1ZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAvLyBJUyBlbnVtZXJhYmxlIHdoZW4gcmVhc3NpZ25lZCBieSB0aGUgb3V0c2lkZSB3b3JkXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IG5ld1ZhbHVlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3VmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiaW5kKGZuLCBjb250ZXh0KSB7XG4gIGlmIChmbi5iaW5kKSB7XG4gICAgcmV0dXJuIGZuLmJpbmQoY29udGV4dCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIF9fYXV0b2JpbmRfXygpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IHZhciB3YXJuID0gZnVuY3Rpb24gKCkge1xuICBpZiAoKHR5cGVvZiBjb25zb2xlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjb25zb2xlKSkgIT09ICdvYmplY3QnIHx8ICFjb25zb2xlIHx8IHR5cGVvZiBjb25zb2xlLndhcm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge307XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJpbmQoY29uc29sZS53YXJuLCBjb25zb2xlKTtcbiAgfVxufSgpO1xuXG52YXIgc2VlbkRlcHJlY2F0aW9ucyA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGludGVybmFsRGVwcmVjYXRpb24obXNnKSB7XG4gIGlmIChzZWVuRGVwcmVjYXRpb25zW21zZ10gIT09IHRydWUpIHtcbiAgICBzZWVuRGVwcmVjYXRpb25zW21zZ10gPSB0cnVlO1xuICAgIHdhcm4oJ0RFUFJFQ0FUSU9OOiAnICsgbXNnKTtcbiAgfVxufSIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxuaW1wb3J0IHsgZGVjb3JhdGUsIG1ldGFGb3IsIHdhcm4sIGJpbmQgfSBmcm9tICcuL3ByaXZhdGUvdXRpbHMnO1xuXG52YXIgb2MgPSBjb25zb2xlO1xuXG4vLyBFeHBvcnRlZCBmb3IgbW9ja2luZyBpbiB0ZXN0c1xuZXhwb3J0IHZhciBkZWZhdWx0Q29uc29sZSA9IHtcbiAgcHJvZmlsZTogY29uc29sZS5wcm9maWxlID8gYmluZChjb25zb2xlLnByb2ZpbGUsIGNvbnNvbGUpIDogZnVuY3Rpb24gKCkge30sXG4gIHByb2ZpbGVFbmQ6IGNvbnNvbGUucHJvZmlsZUVuZCA/IGJpbmQoY29uc29sZS5wcm9maWxlRW5kLCBjb25zb2xlKSA6IGZ1bmN0aW9uICgpIHt9LFxuICB3YXJuOiB3YXJuXG59O1xuXG5mdW5jdGlvbiBoYW5kbGVEZXNjcmlwdG9yKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yLCBfcmVmKSB7XG4gIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDMpLFxuICAgICAgX3JlZjIkID0gX3JlZjJbMF0sXG4gICAgICBwcmVmaXggPSBfcmVmMiQgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBfcmVmMiQsXG4gICAgICBfcmVmMiQyID0gX3JlZjJbMV0sXG4gICAgICBvbmNlVGhyb3R0bGVPckZ1bmN0aW9uID0gX3JlZjIkMiA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcmVmMiQyLFxuICAgICAgX3JlZjIkMyA9IF9yZWYyWzJdLFxuICAgICAgY29uc29sZSA9IF9yZWYyJDMgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRDb25zb2xlIDogX3JlZjIkMztcblxuICBpZiAoIXByb2ZpbGUuX19lbmFibGVkKSB7XG4gICAgaWYgKCFwcm9maWxlLl9fd2FybmVkKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2NvbnNvbGUucHJvZmlsZSBpcyBub3Qgc3VwcG9ydGVkLiBBbGwgQHByb2ZpbGUgZGVjb3JhdG9ycyBhcmUgZGlzYWJsZWQuJyk7XG4gICAgICBwcm9maWxlLl9fd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gIH1cblxuICB2YXIgZm4gPSBkZXNjcmlwdG9yLnZhbHVlO1xuXG4gIGlmIChwcmVmaXggPT09IG51bGwpIHtcbiAgICBwcmVmaXggPSB0YXJnZXQuY29uc3RydWN0b3IubmFtZSArICcuJyArIGtleTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0Bwcm9maWxlIGNhbiBvbmx5IGJlIHVzZWQgb24gZnVuY3Rpb25zLCBub3Q6ICcgKyBmbik7XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGRlc2NyaXB0b3IsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgIHZhciBtZXRhID0gbWV0YUZvcih0aGlzKTtcbiAgICAgIGlmIChvbmNlVGhyb3R0bGVPckZ1bmN0aW9uID09PSB0cnVlICYmICFtZXRhLnByb2ZpbGVMYXN0UmFuIHx8IG9uY2VUaHJvdHRsZU9yRnVuY3Rpb24gPT09IGZhbHNlIHx8IHR5cGVvZiBvbmNlVGhyb3R0bGVPckZ1bmN0aW9uID09PSAnbnVtYmVyJyAmJiBub3cgLSBtZXRhLnByb2ZpbGVMYXN0UmFuID4gb25jZVRocm90dGxlT3JGdW5jdGlvbiB8fCB0eXBlb2Ygb25jZVRocm90dGxlT3JGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJyAmJiBvbmNlVGhyb3R0bGVPckZ1bmN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgY29uc29sZS5wcm9maWxlKHByZWZpeCk7XG4gICAgICAgIG1ldGEucHJvZmlsZUxhc3RSYW4gPSBub3c7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgY29uc29sZS5wcm9maWxlRW5kKHByZWZpeCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvZmlsZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGRlY29yYXRlKGhhbmRsZURlc2NyaXB0b3IsIGFyZ3MpO1xufVxuXG4vLyBPbmx5IENocm9tZSwgRmlyZWZveCwgYW5kIEVkZ2Ugc3VwcG9ydCBwcm9maWxlLlxuLy8gRXhwb3NpbmcgcHJvcGVydGllcyBmb3IgdGVzdGluZy5cbnByb2ZpbGUuX19lbmFibGVkID0gISFjb25zb2xlLnByb2ZpbGU7XG5wcm9maWxlLl9fd2FybmVkID0gZmFsc2U7IiwiaW1wb3J0IHsgZGVjb3JhdGUgfSBmcm9tICcuL3ByaXZhdGUvdXRpbHMnO1xuXG5mdW5jdGlvbiBoYW5kbGVEZXNjcmlwdG9yKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gIGRlc2NyaXB0b3Iud3JpdGFibGUgPSBmYWxzZTtcbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlYWRvbmx5KCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZGVjb3JhdGUoaGFuZGxlRGVzY3JpcHRvciwgYXJncyk7XG59IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5pbXBvcnQgeyBkZWNvcmF0ZSB9IGZyb20gJy4vcHJpdmF0ZS91dGlscyc7XG5cbmZ1bmN0aW9uIHN1cHByZXNzZWRXYXJuaW5nTm9vcCgpIHtcbiAgLy8gV2FybmluZ3MgYXJlIGN1cnJlbnRseSBzdXBwcmVzc2VkIHZpYSBAc3VwcHJlc3NXYXJuaW5nc1xufVxuXG5mdW5jdGlvbiBhcHBseVdpdGhvdXRXYXJuaW5ncyhjb250ZXh0LCBmbiwgYXJncykge1xuICBpZiAoKHR5cGVvZiBjb25zb2xlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjb25zb2xlKSkgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIG5hdGl2ZVdhcm4gPSBjb25zb2xlLndhcm47XG4gICAgY29uc29sZS53YXJuID0gc3VwcHJlc3NlZFdhcm5pbmdOb29wO1xuICAgIHZhciByZXQgPSBmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICBjb25zb2xlLndhcm4gPSBuYXRpdmVXYXJuO1xuICAgIHJldHVybiByZXQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZURlc2NyaXB0b3IodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBkZXNjcmlwdG9yLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN1cHByZXNzV2FybmluZ3NXcmFwcGVyKCkge1xuICAgICAgcmV0dXJuIGFwcGx5V2l0aG91dFdhcm5pbmdzKHRoaXMsIGRlc2NyaXB0b3IudmFsdWUsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3VwcHJlc3NXYXJuaW5ncygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGRlY29yYXRlKGhhbmRsZURlc2NyaXB0b3IsIGFyZ3MpO1xufSIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxuaW1wb3J0IHsgZGVjb3JhdGUsIG1ldGFGb3IsIGludGVybmFsRGVwcmVjYXRpb24gfSBmcm9tICcuL3ByaXZhdGUvdXRpbHMnO1xuXG52YXIgREVGQVVMVF9USU1FT1VUID0gMzAwO1xuXG5mdW5jdGlvbiBoYW5kbGVEZXNjcmlwdG9yKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yLCBfcmVmKSB7XG4gIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgX3JlZjIkID0gX3JlZjJbMF0sXG4gICAgICB3YWl0ID0gX3JlZjIkID09PSB1bmRlZmluZWQgPyBERUZBVUxUX1RJTUVPVVQgOiBfcmVmMiQsXG4gICAgICBfcmVmMiQyID0gX3JlZjJbMV0sXG4gICAgICBvcHRpb25zID0gX3JlZjIkMiA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmMiQyO1xuXG4gIHZhciBjYWxsYmFjayA9IGRlc2NyaXB0b3IudmFsdWU7XG5cbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignT25seSBmdW5jdGlvbnMgY2FuIGJlIHRocm90dGxlZCcpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMubGVhZGluZyAhPT0gZmFsc2UpIHtcbiAgICBvcHRpb25zLmxlYWRpbmcgPSB0cnVlO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgb3B0aW9ucy50cmFpbGluZyA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGRlc2NyaXB0b3IsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgbWV0YSA9IG1ldGFGb3IodGhpcyk7XG4gICAgICB2YXIgdGhyb3R0bGVUaW1lb3V0SWRzID0gbWV0YS50aHJvdHRsZVRpbWVvdXRJZHMsXG4gICAgICAgICAgdGhyb3R0bGVQcmV2aW91c1RpbWVzdGFtcHMgPSBtZXRhLnRocm90dGxlUHJldmlvdXNUaW1lc3RhbXBzO1xuXG4gICAgICB2YXIgdGltZW91dCA9IHRocm90dGxlVGltZW91dElkc1trZXldO1xuICAgICAgLy8gbGFzdCBleGVjdXRlIHRpbWVzdGFtcFxuICAgICAgdmFyIHByZXZpb3VzID0gdGhyb3R0bGVQcmV2aW91c1RpbWVzdGFtcHNba2V5XSB8fCAwO1xuICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG5cbiAgICAgIGlmIChvcHRpb25zLnRyYWlsaW5nKSB7XG4gICAgICAgIG1ldGEudGhyb3R0bGVUcmFpbGluZ0FyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGZpcnN0IGJlIGNhbGxlZCBhbmQgZGlzYWJsZSB0aGUgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2VcbiAgICAgIC8vIHNldCBsYXN0IGV4ZWN1dGUgdGltZXN0YW1wIHRvIG5vd1xuICAgICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgIHByZXZpb3VzID0gbm93O1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG5cbiAgICAgIGlmIChyZW1haW5pbmcgPD0gMCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIGRlbGV0ZSB0aHJvdHRsZVRpbWVvdXRJZHNba2V5XTtcbiAgICAgICAgdGhyb3R0bGVQcmV2aW91c1RpbWVzdGFtcHNba2V5XSA9IG5vdztcbiAgICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQgJiYgb3B0aW9ucy50cmFpbGluZykge1xuICAgICAgICB0aHJvdHRsZVRpbWVvdXRJZHNba2V5XSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRocm90dGxlUHJldmlvdXNUaW1lc3RhbXBzW2tleV0gPSBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlID8gMCA6IERhdGUubm93KCk7XG4gICAgICAgICAgZGVsZXRlIHRocm90dGxlVGltZW91dElkc1trZXldO1xuICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KF90aGlzLCBtZXRhLnRocm90dGxlVHJhaWxpbmdBcmdzKTtcbiAgICAgICAgICAvLyBkb24ndCBsZWFrIG1lbW9yeSFcbiAgICAgICAgICBtZXRhLnRocm90dGxlVHJhaWxpbmdBcmdzID0gbnVsbDtcbiAgICAgICAgfSwgcmVtYWluaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aHJvdHRsZSgpIHtcbiAgaW50ZXJuYWxEZXByZWNhdGlvbignQHRocm90dGxlIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBzaG9ydGx5LiBVc2UgQHRocm90dGxlIGZyb20gbG9kYXNoLWRlY29yYXRvcnMuXFxuXFxuICBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9sb2Rhc2gtZGVjb3JhdG9ycycpO1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBkZWNvcmF0ZShoYW5kbGVEZXNjcmlwdG9yLCBhcmdzKTtcbn0iLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbmltcG9ydCB7IGRlY29yYXRlIH0gZnJvbSAnLi9wcml2YXRlL3V0aWxzJztcblxudmFyIGxhYmVscyA9IHt9O1xuXG4vLyBFeHBvcnRlZCBmb3IgbW9ja2luZyBpbiB0ZXN0c1xuZXhwb3J0IHZhciBkZWZhdWx0Q29uc29sZSA9IHtcbiAgdGltZTogY29uc29sZS50aW1lID8gY29uc29sZS50aW1lLmJpbmQoY29uc29sZSkgOiBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICBsYWJlbHNbbGFiZWxdID0gbmV3IERhdGUoKTtcbiAgfSxcbiAgdGltZUVuZDogY29uc29sZS50aW1lRW5kID8gY29uc29sZS50aW1lRW5kLmJpbmQoY29uc29sZSkgOiBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICB2YXIgdGltZU5vdyA9IG5ldyBEYXRlKCk7XG4gICAgdmFyIHRpbWVUYWtlbiA9IHRpbWVOb3cgLSBsYWJlbHNbbGFiZWxdO1xuICAgIGRlbGV0ZSBsYWJlbHNbbGFiZWxdO1xuICAgIGNvbnNvbGUubG9nKGxhYmVsICsgJzogJyArIHRpbWVUYWtlbiArICdtcycpO1xuICB9XG59O1xuXG52YXIgY291bnQgPSAwO1xuXG5mdW5jdGlvbiBoYW5kbGVEZXNjcmlwdG9yKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yLCBfcmVmKSB7XG4gIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgX3JlZjIkID0gX3JlZjJbMF0sXG4gICAgICBwcmVmaXggPSBfcmVmMiQgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBfcmVmMiQsXG4gICAgICBfcmVmMiQyID0gX3JlZjJbMV0sXG4gICAgICBjb25zb2xlID0gX3JlZjIkMiA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnNvbGUgOiBfcmVmMiQyO1xuXG4gIHZhciBmbiA9IGRlc2NyaXB0b3IudmFsdWU7XG5cbiAgaWYgKHByZWZpeCA9PT0gbnVsbCkge1xuICAgIHByZWZpeCA9IHRhcmdldC5jb25zdHJ1Y3Rvci5uYW1lICsgJy4nICsga2V5O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignQHRpbWUgY2FuIG9ubHkgYmUgdXNlZCBvbiBmdW5jdGlvbnMsIG5vdDogJyArIGZuKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZGVzY3JpcHRvciwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgIHZhciBsYWJlbCA9IHByZWZpeCArICctJyArIGNvdW50O1xuICAgICAgY291bnQrKztcbiAgICAgIGNvbnNvbGUudGltZShsYWJlbCk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgY29uc29sZS50aW1lRW5kKGxhYmVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aW1lKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZGVjb3JhdGUoaGFuZGxlRGVzY3JpcHRvciwgYXJncyk7XG59IiwiLyohIEhhbW1lci5KUyAtIHYyLjAuNyAtIDIwMTYtMDQtMjJcbiAqIGh0dHA6Ly9oYW1tZXJqcy5naXRodWIuaW8vXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE2IEpvcmlrIFRhbmdlbGRlcjtcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAqL1xuKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIGV4cG9ydE5hbWUsIHVuZGVmaW5lZCkge1xuICAndXNlIHN0cmljdCc7XG5cbnZhciBWRU5ET1JfUFJFRklYRVMgPSBbJycsICd3ZWJraXQnLCAnTW96JywgJ01TJywgJ21zJywgJ28nXTtcbnZhciBURVNUX0VMRU1FTlQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxudmFyIFRZUEVfRlVOQ1RJT04gPSAnZnVuY3Rpb24nO1xuXG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIG5vdyA9IERhdGUubm93O1xuXG4vKipcbiAqIHNldCBhIHRpbWVvdXQgd2l0aCBhIGdpdmVuIHNjb3BlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVvdXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBzZXRUaW1lb3V0Q29udGV4dChmbiwgdGltZW91dCwgY29udGV4dCkge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGJpbmRGbihmbiwgY29udGV4dCksIHRpbWVvdXQpO1xufVxuXG4vKipcbiAqIGlmIHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheSwgd2Ugd2FudCB0byBleGVjdXRlIHRoZSBmbiBvbiBlYWNoIGVudHJ5XG4gKiBpZiBpdCBhaW50IGFuIGFycmF5IHdlIGRvbid0IHdhbnQgdG8gZG8gYSB0aGluZy5cbiAqIHRoaXMgaXMgdXNlZCBieSBhbGwgdGhlIG1ldGhvZHMgdGhhdCBhY2NlcHQgYSBzaW5nbGUgYW5kIGFycmF5IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfEFycmF5fSBhcmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBmblxuICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0XVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGludm9rZUFycmF5QXJnKGFyZywgZm4sIGNvbnRleHQpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgIGVhY2goYXJnLCBjb250ZXh0W2ZuXSwgY29udGV4dCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogd2FsayBvYmplY3RzIGFuZCBhcnJheXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICovXG5mdW5jdGlvbiBlYWNoKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICB2YXIgaTtcblxuICAgIGlmICghb2JqKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob2JqLmZvckVhY2gpIHtcbiAgICAgICAgb2JqLmZvckVhY2goaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAob2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IG9iai5sZW5ndGgpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2ldLCBpLCBvYmopO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgb2JqLmhhc093blByb3BlcnR5KGkpICYmIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2ldLCBpLCBvYmopO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIHdyYXAgYSBtZXRob2Qgd2l0aCBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgYW5kIHN0YWNrIHRyYWNlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXRob2RcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIG5ldyBmdW5jdGlvbiB3cmFwcGluZyB0aGUgc3VwcGxpZWQgbWV0aG9kLlxuICovXG5mdW5jdGlvbiBkZXByZWNhdGUobWV0aG9kLCBuYW1lLCBtZXNzYWdlKSB7XG4gICAgdmFyIGRlcHJlY2F0aW9uTWVzc2FnZSA9ICdERVBSRUNBVEVEIE1FVEhPRDogJyArIG5hbWUgKyAnXFxuJyArIG1lc3NhZ2UgKyAnIEFUIFxcbic7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcignZ2V0LXN0YWNrLXRyYWNlJyk7XG4gICAgICAgIHZhciBzdGFjayA9IGUgJiYgZS5zdGFjayA/IGUuc3RhY2sucmVwbGFjZSgvXlteXFwoXSs/W1xcbiRdL2dtLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eXFxzK2F0XFxzKy9nbSwgJycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXk9iamVjdC48YW5vbnltb3VzPlxccypcXCgvZ20sICd7YW5vbnltb3VzfSgpQCcpIDogJ1Vua25vd24gU3RhY2sgVHJhY2UnO1xuXG4gICAgICAgIHZhciBsb2cgPSB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUud2FybiB8fCB3aW5kb3cuY29uc29sZS5sb2cpO1xuICAgICAgICBpZiAobG9nKSB7XG4gICAgICAgICAgICBsb2cuY2FsbCh3aW5kb3cuY29uc29sZSwgZGVwcmVjYXRpb25NZXNzYWdlLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5cbi8qKlxuICogZXh0ZW5kIG9iamVjdC5cbiAqIG1lYW5zIHRoYXQgcHJvcGVydGllcyBpbiBkZXN0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gYnkgdGhlIG9uZXMgaW4gc3JjLlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICogQHBhcmFtIHsuLi5PYmplY3R9IG9iamVjdHNfdG9fYXNzaWduXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB0YXJnZXRcbiAqL1xudmFyIGFzc2lnbjtcbmlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3V0cHV0ID0gT2JqZWN0KHRhcmdldCk7XG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChzb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuZXh0S2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KG5leHRLZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbbmV4dEtleV0gPSBzb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xufSBlbHNlIHtcbiAgICBhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xufVxuXG4vKipcbiAqIGV4dGVuZCBvYmplY3QuXG4gKiBtZWFucyB0aGF0IHByb3BlcnRpZXMgaW4gZGVzdCB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IHRoZSBvbmVzIGluIHNyYy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBkZXN0XG4gKiBAcGFyYW0ge09iamVjdH0gc3JjXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFttZXJnZT1mYWxzZV1cbiAqIEByZXR1cm5zIHtPYmplY3R9IGRlc3RcbiAqL1xudmFyIGV4dGVuZCA9IGRlcHJlY2F0ZShmdW5jdGlvbiBleHRlbmQoZGVzdCwgc3JjLCBtZXJnZSkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc3JjKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBrZXlzLmxlbmd0aCkge1xuICAgICAgICBpZiAoIW1lcmdlIHx8IChtZXJnZSAmJiBkZXN0W2tleXNbaV1dID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICBkZXN0W2tleXNbaV1dID0gc3JjW2tleXNbaV1dO1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIGRlc3Q7XG59LCAnZXh0ZW5kJywgJ1VzZSBgYXNzaWduYC4nKTtcblxuLyoqXG4gKiBtZXJnZSB0aGUgdmFsdWVzIGZyb20gc3JjIGluIHRoZSBkZXN0LlxuICogbWVhbnMgdGhhdCBwcm9wZXJ0aWVzIHRoYXQgZXhpc3QgaW4gZGVzdCB3aWxsIG5vdCBiZSBvdmVyd3JpdHRlbiBieSBzcmNcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZXN0XG4gKiBAcGFyYW0ge09iamVjdH0gc3JjXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBkZXN0XG4gKi9cbnZhciBtZXJnZSA9IGRlcHJlY2F0ZShmdW5jdGlvbiBtZXJnZShkZXN0LCBzcmMpIHtcbiAgICByZXR1cm4gZXh0ZW5kKGRlc3QsIHNyYywgdHJ1ZSk7XG59LCAnbWVyZ2UnLCAnVXNlIGBhc3NpZ25gLicpO1xuXG4vKipcbiAqIHNpbXBsZSBjbGFzcyBpbmhlcml0YW5jZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2hpbGRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGJhc2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc11cbiAqL1xuZnVuY3Rpb24gaW5oZXJpdChjaGlsZCwgYmFzZSwgcHJvcGVydGllcykge1xuICAgIHZhciBiYXNlUCA9IGJhc2UucHJvdG90eXBlLFxuICAgICAgICBjaGlsZFA7XG5cbiAgICBjaGlsZFAgPSBjaGlsZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGJhc2VQKTtcbiAgICBjaGlsZFAuY29uc3RydWN0b3IgPSBjaGlsZDtcbiAgICBjaGlsZFAuX3N1cGVyID0gYmFzZVA7XG5cbiAgICBpZiAocHJvcGVydGllcykge1xuICAgICAgICBhc3NpZ24oY2hpbGRQLCBwcm9wZXJ0aWVzKTtcbiAgICB9XG59XG5cbi8qKlxuICogc2ltcGxlIGZ1bmN0aW9uIGJpbmRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBiaW5kRm4oZm4sIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYm91bmRGbigpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBsZXQgYSBib29sZWFuIHZhbHVlIGFsc28gYmUgYSBmdW5jdGlvbiB0aGF0IG11c3QgcmV0dXJuIGEgYm9vbGVhblxuICogdGhpcyBmaXJzdCBpdGVtIGluIGFyZ3Mgd2lsbCBiZSB1c2VkIGFzIHRoZSBjb250ZXh0XG4gKiBAcGFyYW0ge0Jvb2xlYW58RnVuY3Rpb259IHZhbFxuICogQHBhcmFtIHtBcnJheX0gW2FyZ3NdXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gYm9vbE9yRm4odmFsLCBhcmdzKSB7XG4gICAgaWYgKHR5cGVvZiB2YWwgPT0gVFlQRV9GVU5DVElPTikge1xuICAgICAgICByZXR1cm4gdmFsLmFwcGx5KGFyZ3MgPyBhcmdzWzBdIHx8IHVuZGVmaW5lZCA6IHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG59XG5cbi8qKlxuICogdXNlIHRoZSB2YWwyIHdoZW4gdmFsMSBpcyB1bmRlZmluZWRcbiAqIEBwYXJhbSB7Kn0gdmFsMVxuICogQHBhcmFtIHsqfSB2YWwyXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gaWZVbmRlZmluZWQodmFsMSwgdmFsMikge1xuICAgIHJldHVybiAodmFsMSA9PT0gdW5kZWZpbmVkKSA/IHZhbDIgOiB2YWwxO1xufVxuXG4vKipcbiAqIGFkZEV2ZW50TGlzdGVuZXIgd2l0aCBtdWx0aXBsZSBldmVudHMgYXQgb25jZVxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAqL1xuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcnModGFyZ2V0LCB0eXBlcywgaGFuZGxlcikge1xuICAgIGVhY2goc3BsaXRTdHIodHlwZXMpLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiByZW1vdmVFdmVudExpc3RlbmVyIHdpdGggbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2VcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IHRhcmdldFxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRhcmdldCwgdHlwZXMsIGhhbmRsZXIpIHtcbiAgICBlYWNoKHNwbGl0U3RyKHR5cGVzKSwgZnVuY3Rpb24odHlwZSkge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogZmluZCBpZiBhIG5vZGUgaXMgaW4gdGhlIGdpdmVuIHBhcmVudFxuICogQG1ldGhvZCBoYXNQYXJlbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudFxuICogQHJldHVybiB7Qm9vbGVhbn0gZm91bmRcbiAqL1xuZnVuY3Rpb24gaGFzUGFyZW50KG5vZGUsIHBhcmVudCkge1xuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgIGlmIChub2RlID09IHBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIHNtYWxsIGluZGV4T2Ygd3JhcHBlclxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtTdHJpbmd9IGZpbmRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBmb3VuZFxuICovXG5mdW5jdGlvbiBpblN0cihzdHIsIGZpbmQpIHtcbiAgICByZXR1cm4gc3RyLmluZGV4T2YoZmluZCkgPiAtMTtcbn1cblxuLyoqXG4gKiBzcGxpdCBzdHJpbmcgb24gd2hpdGVzcGFjZVxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybnMge0FycmF5fSB3b3Jkc1xuICovXG5mdW5jdGlvbiBzcGxpdFN0cihzdHIpIHtcbiAgICByZXR1cm4gc3RyLnRyaW0oKS5zcGxpdCgvXFxzKy9nKTtcbn1cblxuLyoqXG4gKiBmaW5kIGlmIGEgYXJyYXkgY29udGFpbnMgdGhlIG9iamVjdCB1c2luZyBpbmRleE9mIG9yIGEgc2ltcGxlIHBvbHlGaWxsXG4gKiBAcGFyYW0ge0FycmF5fSBzcmNcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaW5kXG4gKiBAcGFyYW0ge1N0cmluZ30gW2ZpbmRCeUtleV1cbiAqIEByZXR1cm4ge0Jvb2xlYW58TnVtYmVyfSBmYWxzZSB3aGVuIG5vdCBmb3VuZCwgb3IgdGhlIGluZGV4XG4gKi9cbmZ1bmN0aW9uIGluQXJyYXkoc3JjLCBmaW5kLCBmaW5kQnlLZXkpIHtcbiAgICBpZiAoc3JjLmluZGV4T2YgJiYgIWZpbmRCeUtleSkge1xuICAgICAgICByZXR1cm4gc3JjLmluZGV4T2YoZmluZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHNyYy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICgoZmluZEJ5S2V5ICYmIHNyY1tpXVtmaW5kQnlLZXldID09IGZpbmQpIHx8ICghZmluZEJ5S2V5ICYmIHNyY1tpXSA9PT0gZmluZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxufVxuXG4vKipcbiAqIGNvbnZlcnQgYXJyYXktbGlrZSBvYmplY3RzIHRvIHJlYWwgYXJyYXlzXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG9iaiwgMCk7XG59XG5cbi8qKlxuICogdW5pcXVlIGFycmF5IHdpdGggb2JqZWN0cyBiYXNlZCBvbiBhIGtleSAobGlrZSAnaWQnKSBvciBqdXN0IGJ5IHRoZSBhcnJheSdzIHZhbHVlXG4gKiBAcGFyYW0ge0FycmF5fSBzcmMgW3tpZDoxfSx7aWQ6Mn0se2lkOjF9XVxuICogQHBhcmFtIHtTdHJpbmd9IFtrZXldXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtzb3J0PUZhbHNlXVxuICogQHJldHVybnMge0FycmF5fSBbe2lkOjF9LHtpZDoyfV1cbiAqL1xuZnVuY3Rpb24gdW5pcXVlQXJyYXkoc3JjLCBrZXksIHNvcnQpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IHNyYy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbCA9IGtleSA/IHNyY1tpXVtrZXldIDogc3JjW2ldO1xuICAgICAgICBpZiAoaW5BcnJheSh2YWx1ZXMsIHZhbCkgPCAwKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goc3JjW2ldKTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXNbaV0gPSB2YWw7XG4gICAgICAgIGkrKztcbiAgICB9XG5cbiAgICBpZiAoc29ydCkge1xuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuc29ydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuc29ydChmdW5jdGlvbiBzb3J0VW5pcXVlQXJyYXkoYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBhW2tleV0gPiBiW2tleV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xufVxuXG4vKipcbiAqIGdldCB0aGUgcHJlZml4ZWQgcHJvcGVydHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICogQHJldHVybnMge1N0cmluZ3xVbmRlZmluZWR9IHByZWZpeGVkXG4gKi9cbmZ1bmN0aW9uIHByZWZpeGVkKG9iaiwgcHJvcGVydHkpIHtcbiAgICB2YXIgcHJlZml4LCBwcm9wO1xuICAgIHZhciBjYW1lbFByb3AgPSBwcm9wZXJ0eVswXS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBWRU5ET1JfUFJFRklYRVMubGVuZ3RoKSB7XG4gICAgICAgIHByZWZpeCA9IFZFTkRPUl9QUkVGSVhFU1tpXTtcbiAgICAgICAgcHJvcCA9IChwcmVmaXgpID8gcHJlZml4ICsgY2FtZWxQcm9wIDogcHJvcGVydHk7XG5cbiAgICAgICAgaWYgKHByb3AgaW4gb2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogZ2V0IGEgdW5pcXVlIGlkXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB1bmlxdWVJZFxuICovXG52YXIgX3VuaXF1ZUlkID0gMTtcbmZ1bmN0aW9uIHVuaXF1ZUlkKCkge1xuICAgIHJldHVybiBfdW5pcXVlSWQrKztcbn1cblxuLyoqXG4gKiBnZXQgdGhlIHdpbmRvdyBvYmplY3Qgb2YgYW4gZWxlbWVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0RvY3VtZW50Vmlld3xXaW5kb3d9XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvd0ZvckVsZW1lbnQoZWxlbWVudCkge1xuICAgIHZhciBkb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQgfHwgZWxlbWVudDtcbiAgICByZXR1cm4gKGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93IHx8IHdpbmRvdyk7XG59XG5cbnZhciBNT0JJTEVfUkVHRVggPSAvbW9iaWxlfHRhYmxldHxpcChhZHxob25lfG9kKXxhbmRyb2lkL2k7XG5cbnZhciBTVVBQT1JUX1RPVUNIID0gKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyk7XG52YXIgU1VQUE9SVF9QT0lOVEVSX0VWRU5UUyA9IHByZWZpeGVkKHdpbmRvdywgJ1BvaW50ZXJFdmVudCcpICE9PSB1bmRlZmluZWQ7XG52YXIgU1VQUE9SVF9PTkxZX1RPVUNIID0gU1VQUE9SVF9UT1VDSCAmJiBNT0JJTEVfUkVHRVgudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxudmFyIElOUFVUX1RZUEVfVE9VQ0ggPSAndG91Y2gnO1xudmFyIElOUFVUX1RZUEVfUEVOID0gJ3Blbic7XG52YXIgSU5QVVRfVFlQRV9NT1VTRSA9ICdtb3VzZSc7XG52YXIgSU5QVVRfVFlQRV9LSU5FQ1QgPSAna2luZWN0JztcblxudmFyIENPTVBVVEVfSU5URVJWQUwgPSAyNTtcblxudmFyIElOUFVUX1NUQVJUID0gMTtcbnZhciBJTlBVVF9NT1ZFID0gMjtcbnZhciBJTlBVVF9FTkQgPSA0O1xudmFyIElOUFVUX0NBTkNFTCA9IDg7XG5cbnZhciBESVJFQ1RJT05fTk9ORSA9IDE7XG52YXIgRElSRUNUSU9OX0xFRlQgPSAyO1xudmFyIERJUkVDVElPTl9SSUdIVCA9IDQ7XG52YXIgRElSRUNUSU9OX1VQID0gODtcbnZhciBESVJFQ1RJT05fRE9XTiA9IDE2O1xuXG52YXIgRElSRUNUSU9OX0hPUklaT05UQUwgPSBESVJFQ1RJT05fTEVGVCB8IERJUkVDVElPTl9SSUdIVDtcbnZhciBESVJFQ1RJT05fVkVSVElDQUwgPSBESVJFQ1RJT05fVVAgfCBESVJFQ1RJT05fRE9XTjtcbnZhciBESVJFQ1RJT05fQUxMID0gRElSRUNUSU9OX0hPUklaT05UQUwgfCBESVJFQ1RJT05fVkVSVElDQUw7XG5cbnZhciBQUk9QU19YWSA9IFsneCcsICd5J107XG52YXIgUFJPUFNfQ0xJRU5UX1hZID0gWydjbGllbnRYJywgJ2NsaWVudFknXTtcblxuLyoqXG4gKiBjcmVhdGUgbmV3IGlucHV0IHR5cGUgbWFuYWdlclxuICogQHBhcmFtIHtNYW5hZ2VyfSBtYW5hZ2VyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0lucHV0fVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIElucHV0KG1hbmFnZXIsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMubWFuYWdlciA9IG1hbmFnZXI7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuZWxlbWVudCA9IG1hbmFnZXIuZWxlbWVudDtcbiAgICB0aGlzLnRhcmdldCA9IG1hbmFnZXIub3B0aW9ucy5pbnB1dFRhcmdldDtcblxuICAgIC8vIHNtYWxsZXIgd3JhcHBlciBhcm91bmQgdGhlIGhhbmRsZXIsIGZvciB0aGUgc2NvcGUgYW5kIHRoZSBlbmFibGVkIHN0YXRlIG9mIHRoZSBtYW5hZ2VyLFxuICAgIC8vIHNvIHdoZW4gZGlzYWJsZWQgdGhlIGlucHV0IGV2ZW50cyBhcmUgY29tcGxldGVseSBieXBhc3NlZC5cbiAgICB0aGlzLmRvbUhhbmRsZXIgPSBmdW5jdGlvbihldikge1xuICAgICAgICBpZiAoYm9vbE9yRm4obWFuYWdlci5vcHRpb25zLmVuYWJsZSwgW21hbmFnZXJdKSkge1xuICAgICAgICAgICAgc2VsZi5oYW5kbGVyKGV2KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmluaXQoKTtcblxufVxuXG5JbnB1dC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogc2hvdWxkIGhhbmRsZSB0aGUgaW5wdXRFdmVudCBkYXRhIGFuZCB0cmlnZ2VyIHRoZSBjYWxsYmFja1xuICAgICAqIEB2aXJ0dWFsXG4gICAgICovXG4gICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7IH0sXG5cbiAgICAvKipcbiAgICAgKiBiaW5kIHRoZSBldmVudHNcbiAgICAgKi9cbiAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ldkVsICYmIGFkZEV2ZW50TGlzdGVuZXJzKHRoaXMuZWxlbWVudCwgdGhpcy5ldkVsLCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgICAgICB0aGlzLmV2VGFyZ2V0ICYmIGFkZEV2ZW50TGlzdGVuZXJzKHRoaXMudGFyZ2V0LCB0aGlzLmV2VGFyZ2V0LCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgICAgICB0aGlzLmV2V2luICYmIGFkZEV2ZW50TGlzdGVuZXJzKGdldFdpbmRvd0ZvckVsZW1lbnQodGhpcy5lbGVtZW50KSwgdGhpcy5ldldpbiwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdW5iaW5kIHRoZSBldmVudHNcbiAgICAgKi9cbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ldkVsICYmIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMuZWxlbWVudCwgdGhpcy5ldkVsLCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgICAgICB0aGlzLmV2VGFyZ2V0ICYmIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMudGFyZ2V0LCB0aGlzLmV2VGFyZ2V0LCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgICAgICB0aGlzLmV2V2luICYmIHJlbW92ZUV2ZW50TGlzdGVuZXJzKGdldFdpbmRvd0ZvckVsZW1lbnQodGhpcy5lbGVtZW50KSwgdGhpcy5ldldpbiwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIGNyZWF0ZSBuZXcgaW5wdXQgdHlwZSBtYW5hZ2VyXG4gKiBjYWxsZWQgYnkgdGhlIE1hbmFnZXIgY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7SGFtbWVyfSBtYW5hZ2VyXG4gKiBAcmV0dXJucyB7SW5wdXR9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0SW5zdGFuY2UobWFuYWdlcikge1xuICAgIHZhciBUeXBlO1xuICAgIHZhciBpbnB1dENsYXNzID0gbWFuYWdlci5vcHRpb25zLmlucHV0Q2xhc3M7XG5cbiAgICBpZiAoaW5wdXRDbGFzcykge1xuICAgICAgICBUeXBlID0gaW5wdXRDbGFzcztcbiAgICB9IGVsc2UgaWYgKFNVUFBPUlRfUE9JTlRFUl9FVkVOVFMpIHtcbiAgICAgICAgVHlwZSA9IFBvaW50ZXJFdmVudElucHV0O1xuICAgIH0gZWxzZSBpZiAoU1VQUE9SVF9PTkxZX1RPVUNIKSB7XG4gICAgICAgIFR5cGUgPSBUb3VjaElucHV0O1xuICAgIH0gZWxzZSBpZiAoIVNVUFBPUlRfVE9VQ0gpIHtcbiAgICAgICAgVHlwZSA9IE1vdXNlSW5wdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgVHlwZSA9IFRvdWNoTW91c2VJbnB1dDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyAoVHlwZSkobWFuYWdlciwgaW5wdXRIYW5kbGVyKTtcbn1cblxuLyoqXG4gKiBoYW5kbGUgaW5wdXQgZXZlbnRzXG4gKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFR5cGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICovXG5mdW5jdGlvbiBpbnB1dEhhbmRsZXIobWFuYWdlciwgZXZlbnRUeXBlLCBpbnB1dCkge1xuICAgIHZhciBwb2ludGVyc0xlbiA9IGlucHV0LnBvaW50ZXJzLmxlbmd0aDtcbiAgICB2YXIgY2hhbmdlZFBvaW50ZXJzTGVuID0gaW5wdXQuY2hhbmdlZFBvaW50ZXJzLmxlbmd0aDtcbiAgICB2YXIgaXNGaXJzdCA9IChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiAocG9pbnRlcnNMZW4gLSBjaGFuZ2VkUG9pbnRlcnNMZW4gPT09IDApKTtcbiAgICB2YXIgaXNGaW5hbCA9IChldmVudFR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSAmJiAocG9pbnRlcnNMZW4gLSBjaGFuZ2VkUG9pbnRlcnNMZW4gPT09IDApKTtcblxuICAgIGlucHV0LmlzRmlyc3QgPSAhIWlzRmlyc3Q7XG4gICAgaW5wdXQuaXNGaW5hbCA9ICEhaXNGaW5hbDtcblxuICAgIGlmIChpc0ZpcnN0KSB7XG4gICAgICAgIG1hbmFnZXIuc2Vzc2lvbiA9IHt9O1xuICAgIH1cblxuICAgIC8vIHNvdXJjZSBldmVudCBpcyB0aGUgbm9ybWFsaXplZCB2YWx1ZSBvZiB0aGUgZG9tRXZlbnRzXG4gICAgLy8gbGlrZSAndG91Y2hzdGFydCwgbW91c2V1cCwgcG9pbnRlcmRvd24nXG4gICAgaW5wdXQuZXZlbnRUeXBlID0gZXZlbnRUeXBlO1xuXG4gICAgLy8gY29tcHV0ZSBzY2FsZSwgcm90YXRpb24gZXRjXG4gICAgY29tcHV0ZUlucHV0RGF0YShtYW5hZ2VyLCBpbnB1dCk7XG5cbiAgICAvLyBlbWl0IHNlY3JldCBldmVudFxuICAgIG1hbmFnZXIuZW1pdCgnaGFtbWVyLmlucHV0JywgaW5wdXQpO1xuXG4gICAgbWFuYWdlci5yZWNvZ25pemUoaW5wdXQpO1xuICAgIG1hbmFnZXIuc2Vzc2lvbi5wcmV2SW5wdXQgPSBpbnB1dDtcbn1cblxuLyoqXG4gKiBleHRlbmQgdGhlIGRhdGEgd2l0aCBzb21lIHVzYWJsZSBwcm9wZXJ0aWVzIGxpa2Ugc2NhbGUsIHJvdGF0ZSwgdmVsb2NpdHkgZXRjXG4gKiBAcGFyYW0ge09iamVjdH0gbWFuYWdlclxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVJbnB1dERhdGEobWFuYWdlciwgaW5wdXQpIHtcbiAgICB2YXIgc2Vzc2lvbiA9IG1hbmFnZXIuc2Vzc2lvbjtcbiAgICB2YXIgcG9pbnRlcnMgPSBpbnB1dC5wb2ludGVycztcbiAgICB2YXIgcG9pbnRlcnNMZW5ndGggPSBwb2ludGVycy5sZW5ndGg7XG5cbiAgICAvLyBzdG9yZSB0aGUgZmlyc3QgaW5wdXQgdG8gY2FsY3VsYXRlIHRoZSBkaXN0YW5jZSBhbmQgZGlyZWN0aW9uXG4gICAgaWYgKCFzZXNzaW9uLmZpcnN0SW5wdXQpIHtcbiAgICAgICAgc2Vzc2lvbi5maXJzdElucHV0ID0gc2ltcGxlQ2xvbmVJbnB1dERhdGEoaW5wdXQpO1xuICAgIH1cblxuICAgIC8vIHRvIGNvbXB1dGUgc2NhbGUgYW5kIHJvdGF0aW9uIHdlIG5lZWQgdG8gc3RvcmUgdGhlIG11bHRpcGxlIHRvdWNoZXNcbiAgICBpZiAocG9pbnRlcnNMZW5ndGggPiAxICYmICFzZXNzaW9uLmZpcnN0TXVsdGlwbGUpIHtcbiAgICAgICAgc2Vzc2lvbi5maXJzdE11bHRpcGxlID0gc2ltcGxlQ2xvbmVJbnB1dERhdGEoaW5wdXQpO1xuICAgIH0gZWxzZSBpZiAocG9pbnRlcnNMZW5ndGggPT09IDEpIHtcbiAgICAgICAgc2Vzc2lvbi5maXJzdE11bHRpcGxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0SW5wdXQgPSBzZXNzaW9uLmZpcnN0SW5wdXQ7XG4gICAgdmFyIGZpcnN0TXVsdGlwbGUgPSBzZXNzaW9uLmZpcnN0TXVsdGlwbGU7XG4gICAgdmFyIG9mZnNldENlbnRlciA9IGZpcnN0TXVsdGlwbGUgPyBmaXJzdE11bHRpcGxlLmNlbnRlciA6IGZpcnN0SW5wdXQuY2VudGVyO1xuXG4gICAgdmFyIGNlbnRlciA9IGlucHV0LmNlbnRlciA9IGdldENlbnRlcihwb2ludGVycyk7XG4gICAgaW5wdXQudGltZVN0YW1wID0gbm93KCk7XG4gICAgaW5wdXQuZGVsdGFUaW1lID0gaW5wdXQudGltZVN0YW1wIC0gZmlyc3RJbnB1dC50aW1lU3RhbXA7XG5cbiAgICBpbnB1dC5hbmdsZSA9IGdldEFuZ2xlKG9mZnNldENlbnRlciwgY2VudGVyKTtcbiAgICBpbnB1dC5kaXN0YW5jZSA9IGdldERpc3RhbmNlKG9mZnNldENlbnRlciwgY2VudGVyKTtcblxuICAgIGNvbXB1dGVEZWx0YVhZKHNlc3Npb24sIGlucHV0KTtcbiAgICBpbnB1dC5vZmZzZXREaXJlY3Rpb24gPSBnZXREaXJlY3Rpb24oaW5wdXQuZGVsdGFYLCBpbnB1dC5kZWx0YVkpO1xuXG4gICAgdmFyIG92ZXJhbGxWZWxvY2l0eSA9IGdldFZlbG9jaXR5KGlucHV0LmRlbHRhVGltZSwgaW5wdXQuZGVsdGFYLCBpbnB1dC5kZWx0YVkpO1xuICAgIGlucHV0Lm92ZXJhbGxWZWxvY2l0eVggPSBvdmVyYWxsVmVsb2NpdHkueDtcbiAgICBpbnB1dC5vdmVyYWxsVmVsb2NpdHlZID0gb3ZlcmFsbFZlbG9jaXR5Lnk7XG4gICAgaW5wdXQub3ZlcmFsbFZlbG9jaXR5ID0gKGFicyhvdmVyYWxsVmVsb2NpdHkueCkgPiBhYnMob3ZlcmFsbFZlbG9jaXR5LnkpKSA/IG92ZXJhbGxWZWxvY2l0eS54IDogb3ZlcmFsbFZlbG9jaXR5Lnk7XG5cbiAgICBpbnB1dC5zY2FsZSA9IGZpcnN0TXVsdGlwbGUgPyBnZXRTY2FsZShmaXJzdE11bHRpcGxlLnBvaW50ZXJzLCBwb2ludGVycykgOiAxO1xuICAgIGlucHV0LnJvdGF0aW9uID0gZmlyc3RNdWx0aXBsZSA/IGdldFJvdGF0aW9uKGZpcnN0TXVsdGlwbGUucG9pbnRlcnMsIHBvaW50ZXJzKSA6IDA7XG5cbiAgICBpbnB1dC5tYXhQb2ludGVycyA9ICFzZXNzaW9uLnByZXZJbnB1dCA/IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA6ICgoaW5wdXQucG9pbnRlcnMubGVuZ3RoID5cbiAgICAgICAgc2Vzc2lvbi5wcmV2SW5wdXQubWF4UG9pbnRlcnMpID8gaW5wdXQucG9pbnRlcnMubGVuZ3RoIDogc2Vzc2lvbi5wcmV2SW5wdXQubWF4UG9pbnRlcnMpO1xuXG4gICAgY29tcHV0ZUludGVydmFsSW5wdXREYXRhKHNlc3Npb24sIGlucHV0KTtcblxuICAgIC8vIGZpbmQgdGhlIGNvcnJlY3QgdGFyZ2V0XG4gICAgdmFyIHRhcmdldCA9IG1hbmFnZXIuZWxlbWVudDtcbiAgICBpZiAoaGFzUGFyZW50KGlucHV0LnNyY0V2ZW50LnRhcmdldCwgdGFyZ2V0KSkge1xuICAgICAgICB0YXJnZXQgPSBpbnB1dC5zcmNFdmVudC50YXJnZXQ7XG4gICAgfVxuICAgIGlucHV0LnRhcmdldCA9IHRhcmdldDtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZURlbHRhWFkoc2Vzc2lvbiwgaW5wdXQpIHtcbiAgICB2YXIgY2VudGVyID0gaW5wdXQuY2VudGVyO1xuICAgIHZhciBvZmZzZXQgPSBzZXNzaW9uLm9mZnNldERlbHRhIHx8IHt9O1xuICAgIHZhciBwcmV2RGVsdGEgPSBzZXNzaW9uLnByZXZEZWx0YSB8fCB7fTtcbiAgICB2YXIgcHJldklucHV0ID0gc2Vzc2lvbi5wcmV2SW5wdXQgfHwge307XG5cbiAgICBpZiAoaW5wdXQuZXZlbnRUeXBlID09PSBJTlBVVF9TVEFSVCB8fCBwcmV2SW5wdXQuZXZlbnRUeXBlID09PSBJTlBVVF9FTkQpIHtcbiAgICAgICAgcHJldkRlbHRhID0gc2Vzc2lvbi5wcmV2RGVsdGEgPSB7XG4gICAgICAgICAgICB4OiBwcmV2SW5wdXQuZGVsdGFYIHx8IDAsXG4gICAgICAgICAgICB5OiBwcmV2SW5wdXQuZGVsdGFZIHx8IDBcbiAgICAgICAgfTtcblxuICAgICAgICBvZmZzZXQgPSBzZXNzaW9uLm9mZnNldERlbHRhID0ge1xuICAgICAgICAgICAgeDogY2VudGVyLngsXG4gICAgICAgICAgICB5OiBjZW50ZXIueVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGlucHV0LmRlbHRhWCA9IHByZXZEZWx0YS54ICsgKGNlbnRlci54IC0gb2Zmc2V0LngpO1xuICAgIGlucHV0LmRlbHRhWSA9IHByZXZEZWx0YS55ICsgKGNlbnRlci55IC0gb2Zmc2V0LnkpO1xufVxuXG4vKipcbiAqIHZlbG9jaXR5IGlzIGNhbGN1bGF0ZWQgZXZlcnkgeCBtc1xuICogQHBhcmFtIHtPYmplY3R9IHNlc3Npb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICovXG5mdW5jdGlvbiBjb21wdXRlSW50ZXJ2YWxJbnB1dERhdGEoc2Vzc2lvbiwgaW5wdXQpIHtcbiAgICB2YXIgbGFzdCA9IHNlc3Npb24ubGFzdEludGVydmFsIHx8IGlucHV0LFxuICAgICAgICBkZWx0YVRpbWUgPSBpbnB1dC50aW1lU3RhbXAgLSBsYXN0LnRpbWVTdGFtcCxcbiAgICAgICAgdmVsb2NpdHksIHZlbG9jaXR5WCwgdmVsb2NpdHlZLCBkaXJlY3Rpb247XG5cbiAgICBpZiAoaW5wdXQuZXZlbnRUeXBlICE9IElOUFVUX0NBTkNFTCAmJiAoZGVsdGFUaW1lID4gQ09NUFVURV9JTlRFUlZBTCB8fCBsYXN0LnZlbG9jaXR5ID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHZhciBkZWx0YVggPSBpbnB1dC5kZWx0YVggLSBsYXN0LmRlbHRhWDtcbiAgICAgICAgdmFyIGRlbHRhWSA9IGlucHV0LmRlbHRhWSAtIGxhc3QuZGVsdGFZO1xuXG4gICAgICAgIHZhciB2ID0gZ2V0VmVsb2NpdHkoZGVsdGFUaW1lLCBkZWx0YVgsIGRlbHRhWSk7XG4gICAgICAgIHZlbG9jaXR5WCA9IHYueDtcbiAgICAgICAgdmVsb2NpdHlZID0gdi55O1xuICAgICAgICB2ZWxvY2l0eSA9IChhYnModi54KSA+IGFicyh2LnkpKSA/IHYueCA6IHYueTtcbiAgICAgICAgZGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uKGRlbHRhWCwgZGVsdGFZKTtcblxuICAgICAgICBzZXNzaW9uLmxhc3RJbnRlcnZhbCA9IGlucHV0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHVzZSBsYXRlc3QgdmVsb2NpdHkgaW5mbyBpZiBpdCBkb2Vzbid0IG92ZXJ0YWtlIGEgbWluaW11bSBwZXJpb2RcbiAgICAgICAgdmVsb2NpdHkgPSBsYXN0LnZlbG9jaXR5O1xuICAgICAgICB2ZWxvY2l0eVggPSBsYXN0LnZlbG9jaXR5WDtcbiAgICAgICAgdmVsb2NpdHlZID0gbGFzdC52ZWxvY2l0eVk7XG4gICAgICAgIGRpcmVjdGlvbiA9IGxhc3QuZGlyZWN0aW9uO1xuICAgIH1cblxuICAgIGlucHV0LnZlbG9jaXR5ID0gdmVsb2NpdHk7XG4gICAgaW5wdXQudmVsb2NpdHlYID0gdmVsb2NpdHlYO1xuICAgIGlucHV0LnZlbG9jaXR5WSA9IHZlbG9jaXR5WTtcbiAgICBpbnB1dC5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG59XG5cbi8qKlxuICogY3JlYXRlIGEgc2ltcGxlIGNsb25lIGZyb20gdGhlIGlucHV0IHVzZWQgZm9yIHN0b3JhZ2Ugb2YgZmlyc3RJbnB1dCBhbmQgZmlyc3RNdWx0aXBsZVxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBjbG9uZWRJbnB1dERhdGFcbiAqL1xuZnVuY3Rpb24gc2ltcGxlQ2xvbmVJbnB1dERhdGEoaW5wdXQpIHtcbiAgICAvLyBtYWtlIGEgc2ltcGxlIGNvcHkgb2YgdGhlIHBvaW50ZXJzIGJlY2F1c2Ugd2Ugd2lsbCBnZXQgYSByZWZlcmVuY2UgaWYgd2UgZG9uJ3RcbiAgICAvLyB3ZSBvbmx5IG5lZWQgY2xpZW50WFkgZm9yIHRoZSBjYWxjdWxhdGlvbnNcbiAgICB2YXIgcG9pbnRlcnMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBpbnB1dC5wb2ludGVycy5sZW5ndGgpIHtcbiAgICAgICAgcG9pbnRlcnNbaV0gPSB7XG4gICAgICAgICAgICBjbGllbnRYOiByb3VuZChpbnB1dC5wb2ludGVyc1tpXS5jbGllbnRYKSxcbiAgICAgICAgICAgIGNsaWVudFk6IHJvdW5kKGlucHV0LnBvaW50ZXJzW2ldLmNsaWVudFkpXG4gICAgICAgIH07XG4gICAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0aW1lU3RhbXA6IG5vdygpLFxuICAgICAgICBwb2ludGVyczogcG9pbnRlcnMsXG4gICAgICAgIGNlbnRlcjogZ2V0Q2VudGVyKHBvaW50ZXJzKSxcbiAgICAgICAgZGVsdGFYOiBpbnB1dC5kZWx0YVgsXG4gICAgICAgIGRlbHRhWTogaW5wdXQuZGVsdGFZXG4gICAgfTtcbn1cblxuLyoqXG4gKiBnZXQgdGhlIGNlbnRlciBvZiBhbGwgdGhlIHBvaW50ZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBwb2ludGVyc1xuICogQHJldHVybiB7T2JqZWN0fSBjZW50ZXIgY29udGFpbnMgYHhgIGFuZCBgeWAgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBnZXRDZW50ZXIocG9pbnRlcnMpIHtcbiAgICB2YXIgcG9pbnRlcnNMZW5ndGggPSBwb2ludGVycy5sZW5ndGg7XG5cbiAgICAvLyBubyBuZWVkIHRvIGxvb3Agd2hlbiBvbmx5IG9uZSB0b3VjaFxuICAgIGlmIChwb2ludGVyc0xlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogcm91bmQocG9pbnRlcnNbMF0uY2xpZW50WCksXG4gICAgICAgICAgICB5OiByb3VuZChwb2ludGVyc1swXS5jbGllbnRZKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciB4ID0gMCwgeSA9IDAsIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgcG9pbnRlcnNMZW5ndGgpIHtcbiAgICAgICAgeCArPSBwb2ludGVyc1tpXS5jbGllbnRYO1xuICAgICAgICB5ICs9IHBvaW50ZXJzW2ldLmNsaWVudFk7XG4gICAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB4OiByb3VuZCh4IC8gcG9pbnRlcnNMZW5ndGgpLFxuICAgICAgICB5OiByb3VuZCh5IC8gcG9pbnRlcnNMZW5ndGgpXG4gICAgfTtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIHZlbG9jaXR5IGJldHdlZW4gdHdvIHBvaW50cy4gdW5pdCBpcyBpbiBweCBwZXIgbXMuXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsdGFUaW1lXG4gKiBAcGFyYW0ge051bWJlcn0geFxuICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAqIEByZXR1cm4ge09iamVjdH0gdmVsb2NpdHkgYHhgIGFuZCBgeWBcbiAqL1xuZnVuY3Rpb24gZ2V0VmVsb2NpdHkoZGVsdGFUaW1lLCB4LCB5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogeCAvIGRlbHRhVGltZSB8fCAwLFxuICAgICAgICB5OiB5IC8gZGVsdGFUaW1lIHx8IDBcbiAgICB9O1xufVxuXG4vKipcbiAqIGdldCB0aGUgZGlyZWN0aW9uIGJldHdlZW4gdHdvIHBvaW50c1xuICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gKiBAcmV0dXJuIHtOdW1iZXJ9IGRpcmVjdGlvblxuICovXG5mdW5jdGlvbiBnZXREaXJlY3Rpb24oeCwgeSkge1xuICAgIGlmICh4ID09PSB5KSB7XG4gICAgICAgIHJldHVybiBESVJFQ1RJT05fTk9ORTtcbiAgICB9XG5cbiAgICBpZiAoYWJzKHgpID49IGFicyh5KSkge1xuICAgICAgICByZXR1cm4geCA8IDAgPyBESVJFQ1RJT05fTEVGVCA6IERJUkVDVElPTl9SSUdIVDtcbiAgICB9XG4gICAgcmV0dXJuIHkgPCAwID8gRElSRUNUSU9OX1VQIDogRElSRUNUSU9OX0RPV047XG59XG5cbi8qKlxuICogY2FsY3VsYXRlIHRoZSBhYnNvbHV0ZSBkaXN0YW5jZSBiZXR3ZWVuIHR3byBwb2ludHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwMSB7eCwgeX1cbiAqIEBwYXJhbSB7T2JqZWN0fSBwMiB7eCwgeX1cbiAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wc10gY29udGFpbmluZyB4IGFuZCB5IGtleXNcbiAqIEByZXR1cm4ge051bWJlcn0gZGlzdGFuY2VcbiAqL1xuZnVuY3Rpb24gZ2V0RGlzdGFuY2UocDEsIHAyLCBwcm9wcykge1xuICAgIGlmICghcHJvcHMpIHtcbiAgICAgICAgcHJvcHMgPSBQUk9QU19YWTtcbiAgICB9XG4gICAgdmFyIHggPSBwMltwcm9wc1swXV0gLSBwMVtwcm9wc1swXV0sXG4gICAgICAgIHkgPSBwMltwcm9wc1sxXV0gLSBwMVtwcm9wc1sxXV07XG5cbiAgICByZXR1cm4gTWF0aC5zcXJ0KCh4ICogeCkgKyAoeSAqIHkpKTtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIGFuZ2xlIGJldHdlZW4gdHdvIGNvb3JkaW5hdGVzXG4gKiBAcGFyYW0ge09iamVjdH0gcDFcbiAqIEBwYXJhbSB7T2JqZWN0fSBwMlxuICogQHBhcmFtIHtBcnJheX0gW3Byb3BzXSBjb250YWluaW5nIHggYW5kIHkga2V5c1xuICogQHJldHVybiB7TnVtYmVyfSBhbmdsZVxuICovXG5mdW5jdGlvbiBnZXRBbmdsZShwMSwgcDIsIHByb3BzKSB7XG4gICAgaWYgKCFwcm9wcykge1xuICAgICAgICBwcm9wcyA9IFBST1BTX1hZO1xuICAgIH1cbiAgICB2YXIgeCA9IHAyW3Byb3BzWzBdXSAtIHAxW3Byb3BzWzBdXSxcbiAgICAgICAgeSA9IHAyW3Byb3BzWzFdXSAtIHAxW3Byb3BzWzFdXTtcbiAgICByZXR1cm4gTWF0aC5hdGFuMih5LCB4KSAqIDE4MCAvIE1hdGguUEk7XG59XG5cbi8qKlxuICogY2FsY3VsYXRlIHRoZSByb3RhdGlvbiBkZWdyZWVzIGJldHdlZW4gdHdvIHBvaW50ZXJzZXRzXG4gKiBAcGFyYW0ge0FycmF5fSBzdGFydCBhcnJheSBvZiBwb2ludGVyc1xuICogQHBhcmFtIHtBcnJheX0gZW5kIGFycmF5IG9mIHBvaW50ZXJzXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHJvdGF0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldFJvdGF0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gZ2V0QW5nbGUoZW5kWzFdLCBlbmRbMF0sIFBST1BTX0NMSUVOVF9YWSkgKyBnZXRBbmdsZShzdGFydFsxXSwgc3RhcnRbMF0sIFBST1BTX0NMSUVOVF9YWSk7XG59XG5cbi8qKlxuICogY2FsY3VsYXRlIHRoZSBzY2FsZSBmYWN0b3IgYmV0d2VlbiB0d28gcG9pbnRlcnNldHNcbiAqIG5vIHNjYWxlIGlzIDEsIGFuZCBnb2VzIGRvd24gdG8gMCB3aGVuIHBpbmNoZWQgdG9nZXRoZXIsIGFuZCBiaWdnZXIgd2hlbiBwaW5jaGVkIG91dFxuICogQHBhcmFtIHtBcnJheX0gc3RhcnQgYXJyYXkgb2YgcG9pbnRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGVuZCBhcnJheSBvZiBwb2ludGVyc1xuICogQHJldHVybiB7TnVtYmVyfSBzY2FsZVxuICovXG5mdW5jdGlvbiBnZXRTY2FsZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGdldERpc3RhbmNlKGVuZFswXSwgZW5kWzFdLCBQUk9QU19DTElFTlRfWFkpIC8gZ2V0RGlzdGFuY2Uoc3RhcnRbMF0sIHN0YXJ0WzFdLCBQUk9QU19DTElFTlRfWFkpO1xufVxuXG52YXIgTU9VU0VfSU5QVVRfTUFQID0ge1xuICAgIG1vdXNlZG93bjogSU5QVVRfU1RBUlQsXG4gICAgbW91c2Vtb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIG1vdXNldXA6IElOUFVUX0VORFxufTtcblxudmFyIE1PVVNFX0VMRU1FTlRfRVZFTlRTID0gJ21vdXNlZG93bic7XG52YXIgTU9VU0VfV0lORE9XX0VWRU5UUyA9ICdtb3VzZW1vdmUgbW91c2V1cCc7XG5cbi8qKlxuICogTW91c2UgZXZlbnRzIGlucHV0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIElucHV0XG4gKi9cbmZ1bmN0aW9uIE1vdXNlSW5wdXQoKSB7XG4gICAgdGhpcy5ldkVsID0gTU9VU0VfRUxFTUVOVF9FVkVOVFM7XG4gICAgdGhpcy5ldldpbiA9IE1PVVNFX1dJTkRPV19FVkVOVFM7XG5cbiAgICB0aGlzLnByZXNzZWQgPSBmYWxzZTsgLy8gbW91c2Vkb3duIHN0YXRlXG5cbiAgICBJbnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KE1vdXNlSW5wdXQsIElucHV0LCB7XG4gICAgLyoqXG4gICAgICogaGFuZGxlIG1vdXNlIGV2ZW50c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldlxuICAgICAqL1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIE1FaGFuZGxlcihldikge1xuICAgICAgICB2YXIgZXZlbnRUeXBlID0gTU9VU0VfSU5QVVRfTUFQW2V2LnR5cGVdO1xuXG4gICAgICAgIC8vIG9uIHN0YXJ0IHdlIHdhbnQgdG8gaGF2ZSB0aGUgbGVmdCBtb3VzZSBidXR0b24gZG93blxuICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQgJiYgZXYuYnV0dG9uID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnByZXNzZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX01PVkUgJiYgZXYud2hpY2ggIT09IDEpIHtcbiAgICAgICAgICAgIGV2ZW50VHlwZSA9IElOUFVUX0VORDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1vdXNlIG11c3QgYmUgZG93blxuICAgICAgICBpZiAoIXRoaXMucHJlc3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX0VORCkge1xuICAgICAgICAgICAgdGhpcy5wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhbGxiYWNrKHRoaXMubWFuYWdlciwgZXZlbnRUeXBlLCB7XG4gICAgICAgICAgICBwb2ludGVyczogW2V2XSxcbiAgICAgICAgICAgIGNoYW5nZWRQb2ludGVyczogW2V2XSxcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiBJTlBVVF9UWVBFX01PVVNFLFxuICAgICAgICAgICAgc3JjRXZlbnQ6IGV2XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG52YXIgUE9JTlRFUl9JTlBVVF9NQVAgPSB7XG4gICAgcG9pbnRlcmRvd246IElOUFVUX1NUQVJULFxuICAgIHBvaW50ZXJtb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIHBvaW50ZXJ1cDogSU5QVVRfRU5ELFxuICAgIHBvaW50ZXJjYW5jZWw6IElOUFVUX0NBTkNFTCxcbiAgICBwb2ludGVyb3V0OiBJTlBVVF9DQU5DRUxcbn07XG5cbi8vIGluIElFMTAgdGhlIHBvaW50ZXIgdHlwZXMgaXMgZGVmaW5lZCBhcyBhbiBlbnVtXG52YXIgSUUxMF9QT0lOVEVSX1RZUEVfRU5VTSA9IHtcbiAgICAyOiBJTlBVVF9UWVBFX1RPVUNILFxuICAgIDM6IElOUFVUX1RZUEVfUEVOLFxuICAgIDQ6IElOUFVUX1RZUEVfTU9VU0UsXG4gICAgNTogSU5QVVRfVFlQRV9LSU5FQ1QgLy8gc2VlIGh0dHBzOi8vdHdpdHRlci5jb20vamFjb2Jyb3NzaS9zdGF0dXMvNDgwNTk2NDM4NDg5ODkwODE2XG59O1xuXG52YXIgUE9JTlRFUl9FTEVNRU5UX0VWRU5UUyA9ICdwb2ludGVyZG93bic7XG52YXIgUE9JTlRFUl9XSU5ET1dfRVZFTlRTID0gJ3BvaW50ZXJtb3ZlIHBvaW50ZXJ1cCBwb2ludGVyY2FuY2VsJztcblxuLy8gSUUxMCBoYXMgcHJlZml4ZWQgc3VwcG9ydCwgYW5kIGNhc2Utc2Vuc2l0aXZlXG5pZiAod2luZG93Lk1TUG9pbnRlckV2ZW50ICYmICF3aW5kb3cuUG9pbnRlckV2ZW50KSB7XG4gICAgUE9JTlRFUl9FTEVNRU5UX0VWRU5UUyA9ICdNU1BvaW50ZXJEb3duJztcbiAgICBQT0lOVEVSX1dJTkRPV19FVkVOVFMgPSAnTVNQb2ludGVyTW92ZSBNU1BvaW50ZXJVcCBNU1BvaW50ZXJDYW5jZWwnO1xufVxuXG4vKipcbiAqIFBvaW50ZXIgZXZlbnRzIGlucHV0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIElucHV0XG4gKi9cbmZ1bmN0aW9uIFBvaW50ZXJFdmVudElucHV0KCkge1xuICAgIHRoaXMuZXZFbCA9IFBPSU5URVJfRUxFTUVOVF9FVkVOVFM7XG4gICAgdGhpcy5ldldpbiA9IFBPSU5URVJfV0lORE9XX0VWRU5UUztcblxuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLnN0b3JlID0gKHRoaXMubWFuYWdlci5zZXNzaW9uLnBvaW50ZXJFdmVudHMgPSBbXSk7XG59XG5cbmluaGVyaXQoUG9pbnRlckV2ZW50SW5wdXQsIElucHV0LCB7XG4gICAgLyoqXG4gICAgICogaGFuZGxlIG1vdXNlIGV2ZW50c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldlxuICAgICAqL1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIFBFaGFuZGxlcihldikge1xuICAgICAgICB2YXIgc3RvcmUgPSB0aGlzLnN0b3JlO1xuICAgICAgICB2YXIgcmVtb3ZlUG9pbnRlciA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBldmVudFR5cGVOb3JtYWxpemVkID0gZXYudHlwZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ21zJywgJycpO1xuICAgICAgICB2YXIgZXZlbnRUeXBlID0gUE9JTlRFUl9JTlBVVF9NQVBbZXZlbnRUeXBlTm9ybWFsaXplZF07XG4gICAgICAgIHZhciBwb2ludGVyVHlwZSA9IElFMTBfUE9JTlRFUl9UWVBFX0VOVU1bZXYucG9pbnRlclR5cGVdIHx8IGV2LnBvaW50ZXJUeXBlO1xuXG4gICAgICAgIHZhciBpc1RvdWNoID0gKHBvaW50ZXJUeXBlID09IElOUFVUX1RZUEVfVE9VQ0gpO1xuXG4gICAgICAgIC8vIGdldCBpbmRleCBvZiB0aGUgZXZlbnQgaW4gdGhlIHN0b3JlXG4gICAgICAgIHZhciBzdG9yZUluZGV4ID0gaW5BcnJheShzdG9yZSwgZXYucG9pbnRlcklkLCAncG9pbnRlcklkJyk7XG5cbiAgICAgICAgLy8gc3RhcnQgYW5kIG1vdXNlIG11c3QgYmUgZG93blxuICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQgJiYgKGV2LmJ1dHRvbiA9PT0gMCB8fCBpc1RvdWNoKSkge1xuICAgICAgICAgICAgaWYgKHN0b3JlSW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgc3RvcmUucHVzaChldik7XG4gICAgICAgICAgICAgICAgc3RvcmVJbmRleCA9IHN0b3JlLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcbiAgICAgICAgICAgIHJlbW92ZVBvaW50ZXIgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaXQgbm90IGZvdW5kLCBzbyB0aGUgcG9pbnRlciBoYXNuJ3QgYmVlbiBkb3duIChzbyBpdCdzIHByb2JhYmx5IGEgaG92ZXIpXG4gICAgICAgIGlmIChzdG9yZUluZGV4IDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIHRoZSBldmVudCBpbiB0aGUgc3RvcmVcbiAgICAgICAgc3RvcmVbc3RvcmVJbmRleF0gPSBldjtcblxuICAgICAgICB0aGlzLmNhbGxiYWNrKHRoaXMubWFuYWdlciwgZXZlbnRUeXBlLCB7XG4gICAgICAgICAgICBwb2ludGVyczogc3RvcmUsXG4gICAgICAgICAgICBjaGFuZ2VkUG9pbnRlcnM6IFtldl0sXG4gICAgICAgICAgICBwb2ludGVyVHlwZTogcG9pbnRlclR5cGUsXG4gICAgICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHJlbW92ZVBvaW50ZXIpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBmcm9tIHRoZSBzdG9yZVxuICAgICAgICAgICAgc3RvcmUuc3BsaWNlKHN0b3JlSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbnZhciBTSU5HTEVfVE9VQ0hfSU5QVVRfTUFQID0ge1xuICAgIHRvdWNoc3RhcnQ6IElOUFVUX1NUQVJULFxuICAgIHRvdWNobW92ZTogSU5QVVRfTU9WRSxcbiAgICB0b3VjaGVuZDogSU5QVVRfRU5ELFxuICAgIHRvdWNoY2FuY2VsOiBJTlBVVF9DQU5DRUxcbn07XG5cbnZhciBTSU5HTEVfVE9VQ0hfVEFSR0VUX0VWRU5UUyA9ICd0b3VjaHN0YXJ0JztcbnZhciBTSU5HTEVfVE9VQ0hfV0lORE9XX0VWRU5UUyA9ICd0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCc7XG5cbi8qKlxuICogVG91Y2ggZXZlbnRzIGlucHV0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIElucHV0XG4gKi9cbmZ1bmN0aW9uIFNpbmdsZVRvdWNoSW5wdXQoKSB7XG4gICAgdGhpcy5ldlRhcmdldCA9IFNJTkdMRV9UT1VDSF9UQVJHRVRfRVZFTlRTO1xuICAgIHRoaXMuZXZXaW4gPSBTSU5HTEVfVE9VQ0hfV0lORE9XX0VWRU5UUztcbiAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcblxuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoU2luZ2xlVG91Y2hJbnB1dCwgSW5wdXQsIHtcbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBURWhhbmRsZXIoZXYpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBTSU5HTEVfVE9VQ0hfSU5QVVRfTUFQW2V2LnR5cGVdO1xuXG4gICAgICAgIC8vIHNob3VsZCB3ZSBoYW5kbGUgdGhlIHRvdWNoIGV2ZW50cz9cbiAgICAgICAgaWYgKHR5cGUgPT09IElOUFVUX1NUQVJUKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b3VjaGVzID0gbm9ybWFsaXplU2luZ2xlVG91Y2hlcy5jYWxsKHRoaXMsIGV2LCB0eXBlKTtcblxuICAgICAgICAvLyB3aGVuIGRvbmUsIHJlc2V0IHRoZSBzdGFydGVkIHN0YXRlXG4gICAgICAgIGlmICh0eXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkgJiYgdG91Y2hlc1swXS5sZW5ndGggLSB0b3VjaGVzWzFdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhbGxiYWNrKHRoaXMubWFuYWdlciwgdHlwZSwge1xuICAgICAgICAgICAgcG9pbnRlcnM6IHRvdWNoZXNbMF0sXG4gICAgICAgICAgICBjaGFuZ2VkUG9pbnRlcnM6IHRvdWNoZXNbMV0sXG4gICAgICAgICAgICBwb2ludGVyVHlwZTogSU5QVVRfVFlQRV9UT1VDSCxcbiAgICAgICAgICAgIHNyY0V2ZW50OiBldlxuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBAdGhpcyB7VG91Y2hJbnB1dH1cbiAqIEBwYXJhbSB7T2JqZWN0fSBldlxuICogQHBhcmFtIHtOdW1iZXJ9IHR5cGUgZmxhZ1xuICogQHJldHVybnMge3VuZGVmaW5lZHxBcnJheX0gW2FsbCwgY2hhbmdlZF1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplU2luZ2xlVG91Y2hlcyhldiwgdHlwZSkge1xuICAgIHZhciBhbGwgPSB0b0FycmF5KGV2LnRvdWNoZXMpO1xuICAgIHZhciBjaGFuZ2VkID0gdG9BcnJheShldi5jaGFuZ2VkVG91Y2hlcyk7XG5cbiAgICBpZiAodHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpKSB7XG4gICAgICAgIGFsbCA9IHVuaXF1ZUFycmF5KGFsbC5jb25jYXQoY2hhbmdlZCksICdpZGVudGlmaWVyJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFthbGwsIGNoYW5nZWRdO1xufVxuXG52YXIgVE9VQ0hfSU5QVVRfTUFQID0ge1xuICAgIHRvdWNoc3RhcnQ6IElOUFVUX1NUQVJULFxuICAgIHRvdWNobW92ZTogSU5QVVRfTU9WRSxcbiAgICB0b3VjaGVuZDogSU5QVVRfRU5ELFxuICAgIHRvdWNoY2FuY2VsOiBJTlBVVF9DQU5DRUxcbn07XG5cbnZhciBUT1VDSF9UQVJHRVRfRVZFTlRTID0gJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJztcblxuLyoqXG4gKiBNdWx0aS11c2VyIHRvdWNoIGV2ZW50cyBpbnB1dFxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBJbnB1dFxuICovXG5mdW5jdGlvbiBUb3VjaElucHV0KCkge1xuICAgIHRoaXMuZXZUYXJnZXQgPSBUT1VDSF9UQVJHRVRfRVZFTlRTO1xuICAgIHRoaXMudGFyZ2V0SWRzID0ge307XG5cbiAgICBJbnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KFRvdWNoSW5wdXQsIElucHV0LCB7XG4gICAgaGFuZGxlcjogZnVuY3Rpb24gTVRFaGFuZGxlcihldikge1xuICAgICAgICB2YXIgdHlwZSA9IFRPVUNIX0lOUFVUX01BUFtldi50eXBlXTtcbiAgICAgICAgdmFyIHRvdWNoZXMgPSBnZXRUb3VjaGVzLmNhbGwodGhpcywgZXYsIHR5cGUpO1xuICAgICAgICBpZiAoIXRvdWNoZXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCB0eXBlLCB7XG4gICAgICAgICAgICBwb2ludGVyczogdG91Y2hlc1swXSxcbiAgICAgICAgICAgIGNoYW5nZWRQb2ludGVyczogdG91Y2hlc1sxXSxcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiBJTlBVVF9UWVBFX1RPVUNILFxuICAgICAgICAgICAgc3JjRXZlbnQ6IGV2XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIEB0aGlzIHtUb3VjaElucHV0fVxuICogQHBhcmFtIHtPYmplY3R9IGV2XG4gKiBAcGFyYW0ge051bWJlcn0gdHlwZSBmbGFnXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfEFycmF5fSBbYWxsLCBjaGFuZ2VkXVxuICovXG5mdW5jdGlvbiBnZXRUb3VjaGVzKGV2LCB0eXBlKSB7XG4gICAgdmFyIGFsbFRvdWNoZXMgPSB0b0FycmF5KGV2LnRvdWNoZXMpO1xuICAgIHZhciB0YXJnZXRJZHMgPSB0aGlzLnRhcmdldElkcztcblxuICAgIC8vIHdoZW4gdGhlcmUgaXMgb25seSBvbmUgdG91Y2gsIHRoZSBwcm9jZXNzIGNhbiBiZSBzaW1wbGlmaWVkXG4gICAgaWYgKHR5cGUgJiAoSU5QVVRfU1RBUlQgfCBJTlBVVF9NT1ZFKSAmJiBhbGxUb3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB0YXJnZXRJZHNbYWxsVG91Y2hlc1swXS5pZGVudGlmaWVyXSA9IHRydWU7XG4gICAgICAgIHJldHVybiBbYWxsVG91Y2hlcywgYWxsVG91Y2hlc107XG4gICAgfVxuXG4gICAgdmFyIGksXG4gICAgICAgIHRhcmdldFRvdWNoZXMsXG4gICAgICAgIGNoYW5nZWRUb3VjaGVzID0gdG9BcnJheShldi5jaGFuZ2VkVG91Y2hlcyksXG4gICAgICAgIGNoYW5nZWRUYXJnZXRUb3VjaGVzID0gW10sXG4gICAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0O1xuXG4gICAgLy8gZ2V0IHRhcmdldCB0b3VjaGVzIGZyb20gdG91Y2hlc1xuICAgIHRhcmdldFRvdWNoZXMgPSBhbGxUb3VjaGVzLmZpbHRlcihmdW5jdGlvbih0b3VjaCkge1xuICAgICAgICByZXR1cm4gaGFzUGFyZW50KHRvdWNoLnRhcmdldCwgdGFyZ2V0KTtcbiAgICB9KTtcblxuICAgIC8vIGNvbGxlY3QgdG91Y2hlc1xuICAgIGlmICh0eXBlID09PSBJTlBVVF9TVEFSVCkge1xuICAgICAgICBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCB0YXJnZXRUb3VjaGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGFyZ2V0SWRzW3RhcmdldFRvdWNoZXNbaV0uaWRlbnRpZmllcl0gPSB0cnVlO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIGNoYW5nZWQgdG91Y2hlcyB0byBvbmx5IGNvbnRhaW4gdG91Y2hlcyB0aGF0IGV4aXN0IGluIHRoZSBjb2xsZWN0ZWQgdGFyZ2V0IGlkc1xuICAgIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgY2hhbmdlZFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgIGlmICh0YXJnZXRJZHNbY2hhbmdlZFRvdWNoZXNbaV0uaWRlbnRpZmllcl0pIHtcbiAgICAgICAgICAgIGNoYW5nZWRUYXJnZXRUb3VjaGVzLnB1c2goY2hhbmdlZFRvdWNoZXNbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYW51cCByZW1vdmVkIHRvdWNoZXNcbiAgICAgICAgaWYgKHR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSkge1xuICAgICAgICAgICAgZGVsZXRlIHRhcmdldElkc1tjaGFuZ2VkVG91Y2hlc1tpXS5pZGVudGlmaWVyXTtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgaWYgKCFjaGFuZ2VkVGFyZ2V0VG91Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBbXG4gICAgICAgIC8vIG1lcmdlIHRhcmdldFRvdWNoZXMgd2l0aCBjaGFuZ2VkVGFyZ2V0VG91Y2hlcyBzbyBpdCBjb250YWlucyBBTEwgdG91Y2hlcywgaW5jbHVkaW5nICdlbmQnIGFuZCAnY2FuY2VsJ1xuICAgICAgICB1bmlxdWVBcnJheSh0YXJnZXRUb3VjaGVzLmNvbmNhdChjaGFuZ2VkVGFyZ2V0VG91Y2hlcyksICdpZGVudGlmaWVyJywgdHJ1ZSksXG4gICAgICAgIGNoYW5nZWRUYXJnZXRUb3VjaGVzXG4gICAgXTtcbn1cblxuLyoqXG4gKiBDb21iaW5lZCB0b3VjaCBhbmQgbW91c2UgaW5wdXRcbiAqXG4gKiBUb3VjaCBoYXMgYSBoaWdoZXIgcHJpb3JpdHkgdGhlbiBtb3VzZSwgYW5kIHdoaWxlIHRvdWNoaW5nIG5vIG1vdXNlIGV2ZW50cyBhcmUgYWxsb3dlZC5cbiAqIFRoaXMgYmVjYXVzZSB0b3VjaCBkZXZpY2VzIGFsc28gZW1pdCBtb3VzZSBldmVudHMgd2hpbGUgZG9pbmcgYSB0b3VjaC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIElucHV0XG4gKi9cblxudmFyIERFRFVQX1RJTUVPVVQgPSAyNTAwO1xudmFyIERFRFVQX0RJU1RBTkNFID0gMjU7XG5cbmZ1bmN0aW9uIFRvdWNoTW91c2VJbnB1dCgpIHtcbiAgICBJbnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdmFyIGhhbmRsZXIgPSBiaW5kRm4odGhpcy5oYW5kbGVyLCB0aGlzKTtcbiAgICB0aGlzLnRvdWNoID0gbmV3IFRvdWNoSW5wdXQodGhpcy5tYW5hZ2VyLCBoYW5kbGVyKTtcbiAgICB0aGlzLm1vdXNlID0gbmV3IE1vdXNlSW5wdXQodGhpcy5tYW5hZ2VyLCBoYW5kbGVyKTtcblxuICAgIHRoaXMucHJpbWFyeVRvdWNoID0gbnVsbDtcbiAgICB0aGlzLmxhc3RUb3VjaGVzID0gW107XG59XG5cbmluaGVyaXQoVG91Y2hNb3VzZUlucHV0LCBJbnB1dCwge1xuICAgIC8qKlxuICAgICAqIGhhbmRsZSBtb3VzZSBhbmQgdG91Y2ggZXZlbnRzXG4gICAgICogQHBhcmFtIHtIYW1tZXJ9IG1hbmFnZXJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXRFdmVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGFcbiAgICAgKi9cbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBUTUVoYW5kbGVyKG1hbmFnZXIsIGlucHV0RXZlbnQsIGlucHV0RGF0YSkge1xuICAgICAgICB2YXIgaXNUb3VjaCA9IChpbnB1dERhdGEucG9pbnRlclR5cGUgPT0gSU5QVVRfVFlQRV9UT1VDSCksXG4gICAgICAgICAgICBpc01vdXNlID0gKGlucHV0RGF0YS5wb2ludGVyVHlwZSA9PSBJTlBVVF9UWVBFX01PVVNFKTtcblxuICAgICAgICBpZiAoaXNNb3VzZSAmJiBpbnB1dERhdGEuc291cmNlQ2FwYWJpbGl0aWVzICYmIGlucHV0RGF0YS5zb3VyY2VDYXBhYmlsaXRpZXMuZmlyZXNUb3VjaEV2ZW50cykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2hlbiB3ZSdyZSBpbiBhIHRvdWNoIGV2ZW50LCByZWNvcmQgdG91Y2hlcyB0byAgZGUtZHVwZSBzeW50aGV0aWMgbW91c2UgZXZlbnRcbiAgICAgICAgaWYgKGlzVG91Y2gpIHtcbiAgICAgICAgICAgIHJlY29yZFRvdWNoZXMuY2FsbCh0aGlzLCBpbnB1dEV2ZW50LCBpbnB1dERhdGEpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTW91c2UgJiYgaXNTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGlucHV0RGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sobWFuYWdlciwgaW5wdXRFdmVudCwgaW5wdXREYXRhKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgKi9cbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnRvdWNoLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5tb3VzZS5kZXN0cm95KCk7XG4gICAgfVxufSk7XG5cbmZ1bmN0aW9uIHJlY29yZFRvdWNoZXMoZXZlbnRUeXBlLCBldmVudERhdGEpIHtcbiAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQpIHtcbiAgICAgICAgdGhpcy5wcmltYXJ5VG91Y2ggPSBldmVudERhdGEuY2hhbmdlZFBvaW50ZXJzWzBdLmlkZW50aWZpZXI7XG4gICAgICAgIHNldExhc3RUb3VjaC5jYWxsKHRoaXMsIGV2ZW50RGF0YSk7XG4gICAgfSBlbHNlIGlmIChldmVudFR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSkge1xuICAgICAgICBzZXRMYXN0VG91Y2guY2FsbCh0aGlzLCBldmVudERhdGEpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0TGFzdFRvdWNoKGV2ZW50RGF0YSkge1xuICAgIHZhciB0b3VjaCA9IGV2ZW50RGF0YS5jaGFuZ2VkUG9pbnRlcnNbMF07XG5cbiAgICBpZiAodG91Y2guaWRlbnRpZmllciA9PT0gdGhpcy5wcmltYXJ5VG91Y2gpIHtcbiAgICAgICAgdmFyIGxhc3RUb3VjaCA9IHt4OiB0b3VjaC5jbGllbnRYLCB5OiB0b3VjaC5jbGllbnRZfTtcbiAgICAgICAgdGhpcy5sYXN0VG91Y2hlcy5wdXNoKGxhc3RUb3VjaCk7XG4gICAgICAgIHZhciBsdHMgPSB0aGlzLmxhc3RUb3VjaGVzO1xuICAgICAgICB2YXIgcmVtb3ZlTGFzdFRvdWNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGx0cy5pbmRleE9mKGxhc3RUb3VjaCk7XG4gICAgICAgICAgICBpZiAoaSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgbHRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc2V0VGltZW91dChyZW1vdmVMYXN0VG91Y2gsIERFRFVQX1RJTUVPVVQpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNTeW50aGV0aWNFdmVudChldmVudERhdGEpIHtcbiAgICB2YXIgeCA9IGV2ZW50RGF0YS5zcmNFdmVudC5jbGllbnRYLCB5ID0gZXZlbnREYXRhLnNyY0V2ZW50LmNsaWVudFk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxhc3RUb3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5sYXN0VG91Y2hlc1tpXTtcbiAgICAgICAgdmFyIGR4ID0gTWF0aC5hYnMoeCAtIHQueCksIGR5ID0gTWF0aC5hYnMoeSAtIHQueSk7XG4gICAgICAgIGlmIChkeCA8PSBERURVUF9ESVNUQU5DRSAmJiBkeSA8PSBERURVUF9ESVNUQU5DRSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgUFJFRklYRURfVE9VQ0hfQUNUSU9OID0gcHJlZml4ZWQoVEVTVF9FTEVNRU5ULnN0eWxlLCAndG91Y2hBY3Rpb24nKTtcbnZhciBOQVRJVkVfVE9VQ0hfQUNUSU9OID0gUFJFRklYRURfVE9VQ0hfQUNUSU9OICE9PSB1bmRlZmluZWQ7XG5cbi8vIG1hZ2ljYWwgdG91Y2hBY3Rpb24gdmFsdWVcbnZhciBUT1VDSF9BQ1RJT05fQ09NUFVURSA9ICdjb21wdXRlJztcbnZhciBUT1VDSF9BQ1RJT05fQVVUTyA9ICdhdXRvJztcbnZhciBUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OID0gJ21hbmlwdWxhdGlvbic7IC8vIG5vdCBpbXBsZW1lbnRlZFxudmFyIFRPVUNIX0FDVElPTl9OT05FID0gJ25vbmUnO1xudmFyIFRPVUNIX0FDVElPTl9QQU5fWCA9ICdwYW4teCc7XG52YXIgVE9VQ0hfQUNUSU9OX1BBTl9ZID0gJ3Bhbi15JztcbnZhciBUT1VDSF9BQ1RJT05fTUFQID0gZ2V0VG91Y2hBY3Rpb25Qcm9wcygpO1xuXG4vKipcbiAqIFRvdWNoIEFjdGlvblxuICogc2V0cyB0aGUgdG91Y2hBY3Rpb24gcHJvcGVydHkgb3IgdXNlcyB0aGUganMgYWx0ZXJuYXRpdmVcbiAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gVG91Y2hBY3Rpb24obWFuYWdlciwgdmFsdWUpIHtcbiAgICB0aGlzLm1hbmFnZXIgPSBtYW5hZ2VyO1xuICAgIHRoaXMuc2V0KHZhbHVlKTtcbn1cblxuVG91Y2hBY3Rpb24ucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIHNldCB0aGUgdG91Y2hBY3Rpb24gdmFsdWUgb24gdGhlIGVsZW1lbnQgb3IgZW5hYmxlIHRoZSBwb2x5ZmlsbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gZmluZCBvdXQgdGhlIHRvdWNoLWFjdGlvbiBieSB0aGUgZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgaWYgKHZhbHVlID09IFRPVUNIX0FDVElPTl9DT01QVVRFKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuY29tcHV0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE5BVElWRV9UT1VDSF9BQ1RJT04gJiYgdGhpcy5tYW5hZ2VyLmVsZW1lbnQuc3R5bGUgJiYgVE9VQ0hfQUNUSU9OX01BUFt2YWx1ZV0pIHtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbGVtZW50LnN0eWxlW1BSRUZJWEVEX1RPVUNIX0FDVElPTl0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjdGlvbnMgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICoganVzdCByZS1zZXQgdGhlIHRvdWNoQWN0aW9uIHZhbHVlXG4gICAgICovXG4gICAgdXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5zZXQodGhpcy5tYW5hZ2VyLm9wdGlvbnMudG91Y2hBY3Rpb24pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjb21wdXRlIHRoZSB2YWx1ZSBmb3IgdGhlIHRvdWNoQWN0aW9uIHByb3BlcnR5IGJhc2VkIG9uIHRoZSByZWNvZ25pemVyJ3Mgc2V0dGluZ3NcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIGNvbXB1dGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IFtdO1xuICAgICAgICBlYWNoKHRoaXMubWFuYWdlci5yZWNvZ25pemVycywgZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICAgICAgaWYgKGJvb2xPckZuKHJlY29nbml6ZXIub3B0aW9ucy5lbmFibGUsIFtyZWNvZ25pemVyXSkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zID0gYWN0aW9ucy5jb25jYXQocmVjb2duaXplci5nZXRUb3VjaEFjdGlvbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbGVhblRvdWNoQWN0aW9ucyhhY3Rpb25zLmpvaW4oJyAnKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHRoaXMgbWV0aG9kIGlzIGNhbGxlZCBvbiBlYWNoIGlucHV0IGN5Y2xlIGFuZCBwcm92aWRlcyB0aGUgcHJldmVudGluZyBvZiB0aGUgYnJvd3NlciBiZWhhdmlvclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqL1xuICAgIHByZXZlbnREZWZhdWx0czogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIHNyY0V2ZW50ID0gaW5wdXQuc3JjRXZlbnQ7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBpbnB1dC5vZmZzZXREaXJlY3Rpb247XG5cbiAgICAgICAgLy8gaWYgdGhlIHRvdWNoIGFjdGlvbiBkaWQgcHJldmVudGVkIG9uY2UgdGhpcyBzZXNzaW9uXG4gICAgICAgIGlmICh0aGlzLm1hbmFnZXIuc2Vzc2lvbi5wcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgIHNyY0V2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgdmFyIGhhc05vbmUgPSBpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fTk9ORSkgJiYgIVRPVUNIX0FDVElPTl9NQVBbVE9VQ0hfQUNUSU9OX05PTkVdO1xuICAgICAgICB2YXIgaGFzUGFuWSA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9QQU5fWSkgJiYgIVRPVUNIX0FDVElPTl9NQVBbVE9VQ0hfQUNUSU9OX1BBTl9ZXTtcbiAgICAgICAgdmFyIGhhc1BhblggPSBpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fUEFOX1gpICYmICFUT1VDSF9BQ1RJT05fTUFQW1RPVUNIX0FDVElPTl9QQU5fWF07XG5cbiAgICAgICAgaWYgKGhhc05vbmUpIHtcbiAgICAgICAgICAgIC8vZG8gbm90IHByZXZlbnQgZGVmYXVsdHMgaWYgdGhpcyBpcyBhIHRhcCBnZXN0dXJlXG5cbiAgICAgICAgICAgIHZhciBpc1RhcFBvaW50ZXIgPSBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IDE7XG4gICAgICAgICAgICB2YXIgaXNUYXBNb3ZlbWVudCA9IGlucHV0LmRpc3RhbmNlIDwgMjtcbiAgICAgICAgICAgIHZhciBpc1RhcFRvdWNoVGltZSA9IGlucHV0LmRlbHRhVGltZSA8IDI1MDtcblxuICAgICAgICAgICAgaWYgKGlzVGFwUG9pbnRlciAmJiBpc1RhcE1vdmVtZW50ICYmIGlzVGFwVG91Y2hUaW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc1BhblggJiYgaGFzUGFuWSkge1xuICAgICAgICAgICAgLy8gYHBhbi14IHBhbi15YCBtZWFucyBicm93c2VyIGhhbmRsZXMgYWxsIHNjcm9sbGluZy9wYW5uaW5nLCBkbyBub3QgcHJldmVudFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc05vbmUgfHxcbiAgICAgICAgICAgIChoYXNQYW5ZICYmIGRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMKSB8fFxuICAgICAgICAgICAgKGhhc1BhblggJiYgZGlyZWN0aW9uICYgRElSRUNUSU9OX1ZFUlRJQ0FMKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJldmVudFNyYyhzcmNFdmVudCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2FsbCBwcmV2ZW50RGVmYXVsdCB0byBwcmV2ZW50IHRoZSBicm93c2VyJ3MgZGVmYXVsdCBiZWhhdmlvciAoc2Nyb2xsaW5nIGluIG1vc3QgY2FzZXMpXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNyY0V2ZW50XG4gICAgICovXG4gICAgcHJldmVudFNyYzogZnVuY3Rpb24oc3JjRXZlbnQpIHtcbiAgICAgICAgdGhpcy5tYW5hZ2VyLnNlc3Npb24ucHJldmVudGVkID0gdHJ1ZTtcbiAgICAgICAgc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIHdoZW4gdGhlIHRvdWNoQWN0aW9ucyBhcmUgY29sbGVjdGVkIHRoZXkgYXJlIG5vdCBhIHZhbGlkIHZhbHVlLCBzbyB3ZSBuZWVkIHRvIGNsZWFuIHRoaW5ncyB1cC4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGFjdGlvbnNcbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiBjbGVhblRvdWNoQWN0aW9ucyhhY3Rpb25zKSB7XG4gICAgLy8gbm9uZVxuICAgIGlmIChpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fTk9ORSkpIHtcbiAgICAgICAgcmV0dXJuIFRPVUNIX0FDVElPTl9OT05FO1xuICAgIH1cblxuICAgIHZhciBoYXNQYW5YID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9YKTtcbiAgICB2YXIgaGFzUGFuWSA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9QQU5fWSk7XG5cbiAgICAvLyBpZiBib3RoIHBhbi14IGFuZCBwYW4teSBhcmUgc2V0IChkaWZmZXJlbnQgcmVjb2duaXplcnNcbiAgICAvLyBmb3IgZGlmZmVyZW50IGRpcmVjdGlvbnMsIGUuZy4gaG9yaXpvbnRhbCBwYW4gYnV0IHZlcnRpY2FsIHN3aXBlPylcbiAgICAvLyB3ZSBuZWVkIG5vbmUgKGFzIG90aGVyd2lzZSB3aXRoIHBhbi14IHBhbi15IGNvbWJpbmVkIG5vbmUgb2YgdGhlc2VcbiAgICAvLyByZWNvZ25pemVycyB3aWxsIHdvcmssIHNpbmNlIHRoZSBicm93c2VyIHdvdWxkIGhhbmRsZSBhbGwgcGFubmluZ1xuICAgIGlmIChoYXNQYW5YICYmIGhhc1BhblkpIHtcbiAgICAgICAgcmV0dXJuIFRPVUNIX0FDVElPTl9OT05FO1xuICAgIH1cblxuICAgIC8vIHBhbi14IE9SIHBhbi15XG4gICAgaWYgKGhhc1BhblggfHwgaGFzUGFuWSkge1xuICAgICAgICByZXR1cm4gaGFzUGFuWCA/IFRPVUNIX0FDVElPTl9QQU5fWCA6IFRPVUNIX0FDVElPTl9QQU5fWTtcbiAgICB9XG5cbiAgICAvLyBtYW5pcHVsYXRpb25cbiAgICBpZiAoaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTikpIHtcbiAgICAgICAgcmV0dXJuIFRPVUNIX0FDVElPTl9NQU5JUFVMQVRJT047XG4gICAgfVxuXG4gICAgcmV0dXJuIFRPVUNIX0FDVElPTl9BVVRPO1xufVxuXG5mdW5jdGlvbiBnZXRUb3VjaEFjdGlvblByb3BzKCkge1xuICAgIGlmICghTkFUSVZFX1RPVUNIX0FDVElPTikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciB0b3VjaE1hcCA9IHt9O1xuICAgIHZhciBjc3NTdXBwb3J0cyA9IHdpbmRvdy5DU1MgJiYgd2luZG93LkNTUy5zdXBwb3J0cztcbiAgICBbJ2F1dG8nLCAnbWFuaXB1bGF0aW9uJywgJ3Bhbi15JywgJ3Bhbi14JywgJ3Bhbi14IHBhbi15JywgJ25vbmUnXS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCkge1xuXG4gICAgICAgIC8vIElmIGNzcy5zdXBwb3J0cyBpcyBub3Qgc3VwcG9ydGVkIGJ1dCB0aGVyZSBpcyBuYXRpdmUgdG91Y2gtYWN0aW9uIGFzc3VtZSBpdCBzdXBwb3J0c1xuICAgICAgICAvLyBhbGwgdmFsdWVzLiBUaGlzIGlzIHRoZSBjYXNlIGZvciBJRSAxMCBhbmQgMTEuXG4gICAgICAgIHRvdWNoTWFwW3ZhbF0gPSBjc3NTdXBwb3J0cyA/IHdpbmRvdy5DU1Muc3VwcG9ydHMoJ3RvdWNoLWFjdGlvbicsIHZhbCkgOiB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiB0b3VjaE1hcDtcbn1cblxuLyoqXG4gKiBSZWNvZ25pemVyIGZsb3cgZXhwbGFpbmVkOyAqXG4gKiBBbGwgcmVjb2duaXplcnMgaGF2ZSB0aGUgaW5pdGlhbCBzdGF0ZSBvZiBQT1NTSUJMRSB3aGVuIGEgaW5wdXQgc2Vzc2lvbiBzdGFydHMuXG4gKiBUaGUgZGVmaW5pdGlvbiBvZiBhIGlucHV0IHNlc3Npb24gaXMgZnJvbSB0aGUgZmlyc3QgaW5wdXQgdW50aWwgdGhlIGxhc3QgaW5wdXQsIHdpdGggYWxsIGl0J3MgbW92ZW1lbnQgaW4gaXQuICpcbiAqIEV4YW1wbGUgc2Vzc2lvbiBmb3IgbW91c2UtaW5wdXQ6IG1vdXNlZG93biAtPiBtb3VzZW1vdmUgLT4gbW91c2V1cFxuICpcbiAqIE9uIGVhY2ggcmVjb2duaXppbmcgY3ljbGUgKHNlZSBNYW5hZ2VyLnJlY29nbml6ZSkgdGhlIC5yZWNvZ25pemUoKSBtZXRob2QgaXMgZXhlY3V0ZWRcbiAqIHdoaWNoIGRldGVybWluZXMgd2l0aCBzdGF0ZSBpdCBzaG91bGQgYmUuXG4gKlxuICogSWYgdGhlIHJlY29nbml6ZXIgaGFzIHRoZSBzdGF0ZSBGQUlMRUQsIENBTkNFTExFRCBvciBSRUNPR05JWkVEIChlcXVhbHMgRU5ERUQpLCBpdCBpcyByZXNldCB0b1xuICogUE9TU0lCTEUgdG8gZ2l2ZSBpdCBhbm90aGVyIGNoYW5nZSBvbiB0aGUgbmV4dCBjeWNsZS5cbiAqXG4gKiAgICAgICAgICAgICAgIFBvc3NpYmxlXG4gKiAgICAgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgKy0tLS0tKy0tLS0tLS0tLS0tLS0tLStcbiAqICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgIHxcbiAqICAgICAgKy0tLS0tKy0tLS0tKyAgICAgICAgICAgICAgIHxcbiAqICAgICAgfCAgICAgICAgICAgfCAgICAgICAgICAgICAgIHxcbiAqICAgRmFpbGVkICAgICAgQ2FuY2VsbGVkICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLSstLS0tLS0rXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICAgUmVjb2duaXplZCAgICAgICBCZWdhblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGFuZ2VkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRW5kZWQvUmVjb2duaXplZFxuICovXG52YXIgU1RBVEVfUE9TU0lCTEUgPSAxO1xudmFyIFNUQVRFX0JFR0FOID0gMjtcbnZhciBTVEFURV9DSEFOR0VEID0gNDtcbnZhciBTVEFURV9FTkRFRCA9IDg7XG52YXIgU1RBVEVfUkVDT0dOSVpFRCA9IFNUQVRFX0VOREVEO1xudmFyIFNUQVRFX0NBTkNFTExFRCA9IDE2O1xudmFyIFNUQVRFX0ZBSUxFRCA9IDMyO1xuXG4vKipcbiAqIFJlY29nbml6ZXJcbiAqIEV2ZXJ5IHJlY29nbml6ZXIgbmVlZHMgdG8gZXh0ZW5kIGZyb20gdGhpcyBjbGFzcy5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gUmVjb2duaXplcihvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gYXNzaWduKHt9LCB0aGlzLmRlZmF1bHRzLCBvcHRpb25zIHx8IHt9KTtcblxuICAgIHRoaXMuaWQgPSB1bmlxdWVJZCgpO1xuXG4gICAgdGhpcy5tYW5hZ2VyID0gbnVsbDtcblxuICAgIC8vIGRlZmF1bHQgaXMgZW5hYmxlIHRydWVcbiAgICB0aGlzLm9wdGlvbnMuZW5hYmxlID0gaWZVbmRlZmluZWQodGhpcy5vcHRpb25zLmVuYWJsZSwgdHJ1ZSk7XG5cbiAgICB0aGlzLnN0YXRlID0gU1RBVEVfUE9TU0lCTEU7XG5cbiAgICB0aGlzLnNpbXVsdGFuZW91cyA9IHt9O1xuICAgIHRoaXMucmVxdWlyZUZhaWwgPSBbXTtcbn1cblxuUmVjb2duaXplci5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogQHZpcnR1YWxcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7fSxcblxuICAgIC8qKlxuICAgICAqIHNldCBvcHRpb25zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtSZWNvZ25pemVyfVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICBhc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICAvLyBhbHNvIHVwZGF0ZSB0aGUgdG91Y2hBY3Rpb24sIGluIGNhc2Ugc29tZXRoaW5nIGNoYW5nZWQgYWJvdXQgdGhlIGRpcmVjdGlvbnMvZW5hYmxlZCBzdGF0ZVxuICAgICAgICB0aGlzLm1hbmFnZXIgJiYgdGhpcy5tYW5hZ2VyLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVjb2duaXplIHNpbXVsdGFuZW91cyB3aXRoIGFuIG90aGVyIHJlY29nbml6ZXIuXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcn0gdGhpc1xuICAgICAqL1xuICAgIHJlY29nbml6ZVdpdGg6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAncmVjb2duaXplV2l0aCcsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaW11bHRhbmVvdXMgPSB0aGlzLnNpbXVsdGFuZW91cztcbiAgICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xuICAgICAgICBpZiAoIXNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdKSB7XG4gICAgICAgICAgICBzaW11bHRhbmVvdXNbb3RoZXJSZWNvZ25pemVyLmlkXSA9IG90aGVyUmVjb2duaXplcjtcbiAgICAgICAgICAgIG90aGVyUmVjb2duaXplci5yZWNvZ25pemVXaXRoKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBkcm9wIHRoZSBzaW11bHRhbmVvdXMgbGluay4gaXQgZG9lc250IHJlbW92ZSB0aGUgbGluayBvbiB0aGUgb3RoZXIgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG4gICAgZHJvcFJlY29nbml6ZVdpdGg6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAnZHJvcFJlY29nbml6ZVdpdGgnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlclJlY29nbml6ZXIgPSBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgdGhpcyk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVjb2duaXplciBjYW4gb25seSBydW4gd2hlbiBhbiBvdGhlciBpcyBmYWlsaW5nXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcn0gdGhpc1xuICAgICAqL1xuICAgIHJlcXVpcmVGYWlsdXJlOiBmdW5jdGlvbihvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKGludm9rZUFycmF5QXJnKG90aGVyUmVjb2duaXplciwgJ3JlcXVpcmVGYWlsdXJlJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlcXVpcmVGYWlsID0gdGhpcy5yZXF1aXJlRmFpbDtcbiAgICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xuICAgICAgICBpZiAoaW5BcnJheShyZXF1aXJlRmFpbCwgb3RoZXJSZWNvZ25pemVyKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJlcXVpcmVGYWlsLnB1c2gob3RoZXJSZWNvZ25pemVyKTtcbiAgICAgICAgICAgIG90aGVyUmVjb2duaXplci5yZXF1aXJlRmFpbHVyZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZHJvcCB0aGUgcmVxdWlyZUZhaWx1cmUgbGluay4gaXQgZG9lcyBub3QgcmVtb3ZlIHRoZSBsaW5rIG9uIHRoZSBvdGhlciByZWNvZ25pemVyLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBkcm9wUmVxdWlyZUZhaWx1cmU6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAnZHJvcFJlcXVpcmVGYWlsdXJlJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xuICAgICAgICB2YXIgaW5kZXggPSBpbkFycmF5KHRoaXMucmVxdWlyZUZhaWwsIG90aGVyUmVjb2duaXplcik7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnJlcXVpcmVGYWlsLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGhhcyByZXF1aXJlIGZhaWx1cmVzIGJvb2xlYW5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBoYXNSZXF1aXJlRmFpbHVyZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1aXJlRmFpbC5sZW5ndGggPiAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBpZiB0aGUgcmVjb2duaXplciBjYW4gcmVjb2duaXplIHNpbXVsdGFuZW91cyB3aXRoIGFuIG90aGVyIHJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGNhblJlY29nbml6ZVdpdGg6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICByZXR1cm4gISF0aGlzLnNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBZb3Ugc2hvdWxkIHVzZSBgdHJ5RW1pdGAgaW5zdGVhZCBvZiBgZW1pdGAgZGlyZWN0bHkgdG8gY2hlY2tcbiAgICAgKiB0aGF0IGFsbCB0aGUgbmVlZGVkIHJlY29nbml6ZXJzIGhhcyBmYWlsZWQgYmVmb3JlIGVtaXR0aW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqL1xuICAgIGVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZTtcblxuICAgICAgICBmdW5jdGlvbiBlbWl0KGV2ZW50KSB7XG4gICAgICAgICAgICBzZWxmLm1hbmFnZXIuZW1pdChldmVudCwgaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gJ3BhbnN0YXJ0JyBhbmQgJ3Bhbm1vdmUnXG4gICAgICAgIGlmIChzdGF0ZSA8IFNUQVRFX0VOREVEKSB7XG4gICAgICAgICAgICBlbWl0KHNlbGYub3B0aW9ucy5ldmVudCArIHN0YXRlU3RyKHN0YXRlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbWl0KHNlbGYub3B0aW9ucy5ldmVudCk7IC8vIHNpbXBsZSAnZXZlbnROYW1lJyBldmVudHNcblxuICAgICAgICBpZiAoaW5wdXQuYWRkaXRpb25hbEV2ZW50KSB7IC8vIGFkZGl0aW9uYWwgZXZlbnQocGFubGVmdCwgcGFucmlnaHQsIHBpbmNoaW4sIHBpbmNob3V0Li4uKVxuICAgICAgICAgICAgZW1pdChpbnB1dC5hZGRpdGlvbmFsRXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGFuZW5kIGFuZCBwYW5jYW5jZWxcbiAgICAgICAgaWYgKHN0YXRlID49IFNUQVRFX0VOREVEKSB7XG4gICAgICAgICAgICBlbWl0KHNlbGYub3B0aW9ucy5ldmVudCArIHN0YXRlU3RyKHN0YXRlKSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhhdCBhbGwgdGhlIHJlcXVpcmUgZmFpbHVyZSByZWNvZ25pemVycyBoYXMgZmFpbGVkLFxuICAgICAqIGlmIHRydWUsIGl0IGVtaXRzIGEgZ2VzdHVyZSBldmVudCxcbiAgICAgKiBvdGhlcndpc2UsIHNldHVwIHRoZSBzdGF0ZSB0byBGQUlMRUQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICovXG4gICAgdHJ5RW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FuRW1pdCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0KGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpdCdzIGZhaWxpbmcgYW55d2F5XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9GQUlMRUQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNhbiB3ZSBlbWl0P1xuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGNhbkVtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgdGhpcy5yZXF1aXJlRmFpbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICghKHRoaXMucmVxdWlyZUZhaWxbaV0uc3RhdGUgJiAoU1RBVEVfRkFJTEVEIHwgU1RBVEVfUE9TU0lCTEUpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdXBkYXRlIHRoZSByZWNvZ25pemVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxuICAgICAqL1xuICAgIHJlY29nbml6ZTogZnVuY3Rpb24oaW5wdXREYXRhKSB7XG4gICAgICAgIC8vIG1ha2UgYSBuZXcgY29weSBvZiB0aGUgaW5wdXREYXRhXG4gICAgICAgIC8vIHNvIHdlIGNhbiBjaGFuZ2UgdGhlIGlucHV0RGF0YSB3aXRob3V0IG1lc3NpbmcgdXAgdGhlIG90aGVyIHJlY29nbml6ZXJzXG4gICAgICAgIHZhciBpbnB1dERhdGFDbG9uZSA9IGFzc2lnbih7fSwgaW5wdXREYXRhKTtcblxuICAgICAgICAvLyBpcyBpcyBlbmFibGVkIGFuZCBhbGxvdyByZWNvZ25pemluZz9cbiAgICAgICAgaWYgKCFib29sT3JGbih0aGlzLm9wdGlvbnMuZW5hYmxlLCBbdGhpcywgaW5wdXREYXRhQ2xvbmVdKSkge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0ZBSUxFRDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlc2V0IHdoZW4gd2UndmUgcmVhY2hlZCB0aGUgZW5kXG4gICAgICAgIGlmICh0aGlzLnN0YXRlICYgKFNUQVRFX1JFQ09HTklaRUQgfCBTVEFURV9DQU5DRUxMRUQgfCBTVEFURV9GQUlMRUQpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfUE9TU0lCTEU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5wcm9jZXNzKGlucHV0RGF0YUNsb25lKTtcblxuICAgICAgICAvLyB0aGUgcmVjb2duaXplciBoYXMgcmVjb2duaXplZCBhIGdlc3R1cmVcbiAgICAgICAgLy8gc28gdHJpZ2dlciBhbiBldmVudFxuICAgICAgICBpZiAodGhpcy5zdGF0ZSAmIChTVEFURV9CRUdBTiB8IFNUQVRFX0NIQU5HRUQgfCBTVEFURV9FTkRFRCB8IFNUQVRFX0NBTkNFTExFRCkpIHtcbiAgICAgICAgICAgIHRoaXMudHJ5RW1pdChpbnB1dERhdGFDbG9uZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIHRoZSBzdGF0ZSBvZiB0aGUgcmVjb2duaXplclxuICAgICAqIHRoZSBhY3R1YWwgcmVjb2duaXppbmcgaGFwcGVucyBpbiB0aGlzIG1ldGhvZFxuICAgICAqIEB2aXJ0dWFsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxuICAgICAqIEByZXR1cm5zIHtDb25zdH0gU1RBVEVcbiAgICAgKi9cbiAgICBwcm9jZXNzOiBmdW5jdGlvbihpbnB1dERhdGEpIHsgfSwgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gdGhlIHByZWZlcnJlZCB0b3VjaC1hY3Rpb25cbiAgICAgKiBAdmlydHVhbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICAgKi9cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7IH0sXG5cbiAgICAvKipcbiAgICAgKiBjYWxsZWQgd2hlbiB0aGUgZ2VzdHVyZSBpc24ndCBhbGxvd2VkIHRvIHJlY29nbml6ZVxuICAgICAqIGxpa2Ugd2hlbiBhbm90aGVyIGlzIGJlaW5nIHJlY29nbml6ZWQgb3IgaXQgaXMgZGlzYWJsZWRcbiAgICAgKiBAdmlydHVhbFxuICAgICAqL1xuICAgIHJlc2V0OiBmdW5jdGlvbigpIHsgfVxufTtcblxuLyoqXG4gKiBnZXQgYSB1c2FibGUgc3RyaW5nLCB1c2VkIGFzIGV2ZW50IHBvc3RmaXhcbiAqIEBwYXJhbSB7Q29uc3R9IHN0YXRlXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdGF0ZVxuICovXG5mdW5jdGlvbiBzdGF0ZVN0cihzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSAmIFNUQVRFX0NBTkNFTExFRCkge1xuICAgICAgICByZXR1cm4gJ2NhbmNlbCc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZSAmIFNUQVRFX0VOREVEKSB7XG4gICAgICAgIHJldHVybiAnZW5kJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlICYgU1RBVEVfQ0hBTkdFRCkge1xuICAgICAgICByZXR1cm4gJ21vdmUnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUgJiBTVEFURV9CRUdBTikge1xuICAgICAgICByZXR1cm4gJ3N0YXJ0JztcbiAgICB9XG4gICAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIGRpcmVjdGlvbiBjb25zIHRvIHN0cmluZ1xuICogQHBhcmFtIHtDb25zdH0gZGlyZWN0aW9uXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiBkaXJlY3Rpb25TdHIoZGlyZWN0aW9uKSB7XG4gICAgaWYgKGRpcmVjdGlvbiA9PSBESVJFQ1RJT05fRE9XTikge1xuICAgICAgICByZXR1cm4gJ2Rvd24nO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09IERJUkVDVElPTl9VUCkge1xuICAgICAgICByZXR1cm4gJ3VwJztcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBESVJFQ1RJT05fTEVGVCkge1xuICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09IERJUkVDVElPTl9SSUdIVCkge1xuICAgICAgICByZXR1cm4gJ3JpZ2h0JztcbiAgICB9XG4gICAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIGdldCBhIHJlY29nbml6ZXIgYnkgbmFtZSBpZiBpdCBpcyBib3VuZCB0byBhIG1hbmFnZXJcbiAqIEBwYXJhbSB7UmVjb2duaXplcnxTdHJpbmd9IG90aGVyUmVjb2duaXplclxuICogQHBhcmFtIHtSZWNvZ25pemVyfSByZWNvZ25pemVyXG4gKiBAcmV0dXJucyB7UmVjb2duaXplcn1cbiAqL1xuZnVuY3Rpb24gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHJlY29nbml6ZXIpIHtcbiAgICB2YXIgbWFuYWdlciA9IHJlY29nbml6ZXIubWFuYWdlcjtcbiAgICBpZiAobWFuYWdlcikge1xuICAgICAgICByZXR1cm4gbWFuYWdlci5nZXQob3RoZXJSZWNvZ25pemVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG90aGVyUmVjb2duaXplcjtcbn1cblxuLyoqXG4gKiBUaGlzIHJlY29nbml6ZXIgaXMganVzdCB1c2VkIGFzIGEgYmFzZSBmb3IgdGhlIHNpbXBsZSBhdHRyaWJ1dGUgcmVjb2duaXplcnMuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIFJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gQXR0clJlY29nbml6ZXIoKSB7XG4gICAgUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KEF0dHJSZWNvZ25pemVyLCBSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBBdHRyUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAxXG4gICAgICAgICAqL1xuICAgICAgICBwb2ludGVyczogMVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIGNoZWNrIGlmIGl0IHRoZSByZWNvZ25pemVyIHJlY2VpdmVzIHZhbGlkIGlucHV0LCBsaWtlIGlucHV0LmRpc3RhbmNlID4gMTAuXG4gICAgICogQG1lbWJlcm9mIEF0dHJSZWNvZ25pemVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IHJlY29nbml6ZWRcbiAgICAgKi9cbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIG9wdGlvblBvaW50ZXJzID0gdGhpcy5vcHRpb25zLnBvaW50ZXJzO1xuICAgICAgICByZXR1cm4gb3B0aW9uUG9pbnRlcnMgPT09IDAgfHwgaW5wdXQucG9pbnRlcnMubGVuZ3RoID09PSBvcHRpb25Qb2ludGVycztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvY2VzcyB0aGUgaW5wdXQgYW5kIHJldHVybiB0aGUgc3RhdGUgZm9yIHRoZSByZWNvZ25pemVyXG4gICAgICogQG1lbWJlcm9mIEF0dHJSZWNvZ25pemVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICogQHJldHVybnMgeyp9IFN0YXRlXG4gICAgICovXG4gICAgcHJvY2VzczogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgdmFyIGV2ZW50VHlwZSA9IGlucHV0LmV2ZW50VHlwZTtcblxuICAgICAgICB2YXIgaXNSZWNvZ25pemVkID0gc3RhdGUgJiAoU1RBVEVfQkVHQU4gfCBTVEFURV9DSEFOR0VEKTtcbiAgICAgICAgdmFyIGlzVmFsaWQgPSB0aGlzLmF0dHJUZXN0KGlucHV0KTtcblxuICAgICAgICAvLyBvbiBjYW5jZWwgaW5wdXQgYW5kIHdlJ3ZlIHJlY29nbml6ZWQgYmVmb3JlLCByZXR1cm4gU1RBVEVfQ0FOQ0VMTEVEXG4gICAgICAgIGlmIChpc1JlY29nbml6ZWQgJiYgKGV2ZW50VHlwZSAmIElOUFVUX0NBTkNFTCB8fCAhaXNWYWxpZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZSB8IFNUQVRFX0NBTkNFTExFRDtcbiAgICAgICAgfSBlbHNlIGlmIChpc1JlY29nbml6ZWQgfHwgaXNWYWxpZCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX0VORCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZSB8IFNUQVRFX0VOREVEO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghKHN0YXRlICYgU1RBVEVfQkVHQU4pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNUQVRFX0JFR0FOO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlIHwgU1RBVEVfQ0hBTkdFRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIFBhblxuICogUmVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIGRvd24gYW5kIG1vdmVkIGluIHRoZSBhbGxvd2VkIGRpcmVjdGlvbi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgQXR0clJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gUGFuUmVjb2duaXplcigpIHtcbiAgICBBdHRyUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdGhpcy5wWCA9IG51bGw7XG4gICAgdGhpcy5wWSA9IG51bGw7XG59XG5cbmluaGVyaXQoUGFuUmVjb2duaXplciwgQXR0clJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFBhblJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3BhbicsXG4gICAgICAgIHRocmVzaG9sZDogMTAsXG4gICAgICAgIHBvaW50ZXJzOiAxLFxuICAgICAgICBkaXJlY3Rpb246IERJUkVDVElPTl9BTExcbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBbXTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMKSB7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goVE9VQ0hfQUNUSU9OX1BBTl9ZKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlyZWN0aW9uICYgRElSRUNUSU9OX1ZFUlRJQ0FMKSB7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goVE9VQ0hfQUNUSU9OX1BBTl9YKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aW9ucztcbiAgICB9LFxuXG4gICAgZGlyZWN0aW9uVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHZhciBoYXNNb3ZlZCA9IHRydWU7XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IGlucHV0LmRpc3RhbmNlO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gaW5wdXQuZGlyZWN0aW9uO1xuICAgICAgICB2YXIgeCA9IGlucHV0LmRlbHRhWDtcbiAgICAgICAgdmFyIHkgPSBpbnB1dC5kZWx0YVk7XG5cbiAgICAgICAgLy8gbG9jayB0byBheGlzP1xuICAgICAgICBpZiAoIShkaXJlY3Rpb24gJiBvcHRpb25zLmRpcmVjdGlvbikpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMKSB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gKHggPT09IDApID8gRElSRUNUSU9OX05PTkUgOiAoeCA8IDApID8gRElSRUNUSU9OX0xFRlQgOiBESVJFQ1RJT05fUklHSFQ7XG4gICAgICAgICAgICAgICAgaGFzTW92ZWQgPSB4ICE9IHRoaXMucFg7XG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyhpbnB1dC5kZWx0YVgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAoeSA9PT0gMCkgPyBESVJFQ1RJT05fTk9ORSA6ICh5IDwgMCkgPyBESVJFQ1RJT05fVVAgOiBESVJFQ1RJT05fRE9XTjtcbiAgICAgICAgICAgICAgICBoYXNNb3ZlZCA9IHkgIT0gdGhpcy5wWTtcbiAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguYWJzKGlucHV0LmRlbHRhWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgICAgICByZXR1cm4gaGFzTW92ZWQgJiYgZGlzdGFuY2UgPiBvcHRpb25zLnRocmVzaG9sZCAmJiBkaXJlY3Rpb24gJiBvcHRpb25zLmRpcmVjdGlvbjtcbiAgICB9LFxuXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBBdHRyUmVjb2duaXplci5wcm90b3R5cGUuYXR0clRlc3QuY2FsbCh0aGlzLCBpbnB1dCkgJiZcbiAgICAgICAgICAgICh0aGlzLnN0YXRlICYgU1RBVEVfQkVHQU4gfHwgKCEodGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOKSAmJiB0aGlzLmRpcmVjdGlvblRlc3QoaW5wdXQpKSk7XG4gICAgfSxcblxuICAgIGVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG5cbiAgICAgICAgdGhpcy5wWCA9IGlucHV0LmRlbHRhWDtcbiAgICAgICAgdGhpcy5wWSA9IGlucHV0LmRlbHRhWTtcblxuICAgICAgICB2YXIgZGlyZWN0aW9uID0gZGlyZWN0aW9uU3RyKGlucHV0LmRpcmVjdGlvbik7XG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgaW5wdXQuYWRkaXRpb25hbEV2ZW50ID0gdGhpcy5vcHRpb25zLmV2ZW50ICsgZGlyZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N1cGVyLmVtaXQuY2FsbCh0aGlzLCBpbnB1dCk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogUGluY2hcbiAqIFJlY29nbml6ZWQgd2hlbiB0d28gb3IgbW9yZSBwb2ludGVycyBhcmUgbW92aW5nIHRvd2FyZCAoem9vbS1pbikgb3IgYXdheSBmcm9tIGVhY2ggb3RoZXIgKHpvb20tb3V0KS5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgQXR0clJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gUGluY2hSZWNvZ25pemVyKCkge1xuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoUGluY2hSZWNvZ25pemVyLCBBdHRyUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUGluY2hSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZXZlbnQ6ICdwaW5jaCcsXG4gICAgICAgIHRocmVzaG9sZDogMCxcbiAgICAgICAgcG9pbnRlcnM6IDJcbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9OT05FXTtcbiAgICB9LFxuXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdXBlci5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJlxuICAgICAgICAgICAgKE1hdGguYWJzKGlucHV0LnNjYWxlIC0gMSkgPiB0aGlzLm9wdGlvbnMudGhyZXNob2xkIHx8IHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTik7XG4gICAgfSxcblxuICAgIGVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5zY2FsZSAhPT0gMSkge1xuICAgICAgICAgICAgdmFyIGluT3V0ID0gaW5wdXQuc2NhbGUgPCAxID8gJ2luJyA6ICdvdXQnO1xuICAgICAgICAgICAgaW5wdXQuYWRkaXRpb25hbEV2ZW50ID0gdGhpcy5vcHRpb25zLmV2ZW50ICsgaW5PdXQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3VwZXIuZW1pdC5jYWxsKHRoaXMsIGlucHV0KTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBQcmVzc1xuICogUmVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIGRvd24gZm9yIHggbXMgd2l0aG91dCBhbnkgbW92ZW1lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIFJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gUHJlc3NSZWNvZ25pemVyKCkge1xuICAgIFJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcbiAgICB0aGlzLl9pbnB1dCA9IG51bGw7XG59XG5cbmluaGVyaXQoUHJlc3NSZWNvZ25pemVyLCBSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQcmVzc1JlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3ByZXNzJyxcbiAgICAgICAgcG9pbnRlcnM6IDEsXG4gICAgICAgIHRpbWU6IDI1MSwgLy8gbWluaW1hbCB0aW1lIG9mIHRoZSBwb2ludGVyIHRvIGJlIHByZXNzZWRcbiAgICAgICAgdGhyZXNob2xkOiA5IC8vIGEgbWluaW1hbCBtb3ZlbWVudCBpcyBvaywgYnV0IGtlZXAgaXQgbG93XG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fQVVUT107XG4gICAgfSxcblxuICAgIHByb2Nlc3M6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB2YXIgdmFsaWRQb2ludGVycyA9IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA9PT0gb3B0aW9ucy5wb2ludGVycztcbiAgICAgICAgdmFyIHZhbGlkTW92ZW1lbnQgPSBpbnB1dC5kaXN0YW5jZSA8IG9wdGlvbnMudGhyZXNob2xkO1xuICAgICAgICB2YXIgdmFsaWRUaW1lID0gaW5wdXQuZGVsdGFUaW1lID4gb3B0aW9ucy50aW1lO1xuXG4gICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG5cbiAgICAgICAgLy8gd2Ugb25seSBhbGxvdyBsaXR0bGUgbW92ZW1lbnRcbiAgICAgICAgLy8gYW5kIHdlJ3ZlIHJlYWNoZWQgYW4gZW5kIGV2ZW50LCBzbyBhIHRhcCBpcyBwb3NzaWJsZVxuICAgICAgICBpZiAoIXZhbGlkTW92ZW1lbnQgfHwgIXZhbGlkUG9pbnRlcnMgfHwgKGlucHV0LmV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpICYmICF2YWxpZFRpbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dENvbnRleHQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgICAgICAgICAgdGhpcy50cnlFbWl0KCk7XG4gICAgICAgICAgICB9LCBvcHRpb25zLnRpbWUsIHRoaXMpO1xuICAgICAgICB9IGVsc2UgaWYgKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX0VORCkge1xuICAgICAgICAgICAgcmV0dXJuIFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gU1RBVEVfUkVDT0dOSVpFRCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlucHV0ICYmIChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9FTkQpKSB7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQgKyAndXAnLCBpbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dC50aW1lU3RhbXAgPSBub3coKTtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCwgdGhpcy5faW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8qKlxuICogUm90YXRlXG4gKiBSZWNvZ25pemVkIHdoZW4gdHdvIG9yIG1vcmUgcG9pbnRlciBhcmUgbW92aW5nIGluIGEgY2lyY3VsYXIgbW90aW9uLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBSb3RhdGVSZWNvZ25pemVyKCkge1xuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoUm90YXRlUmVjb2duaXplciwgQXR0clJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFJvdGF0ZVJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3JvdGF0ZScsXG4gICAgICAgIHRocmVzaG9sZDogMCxcbiAgICAgICAgcG9pbnRlcnM6IDJcbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9OT05FXTtcbiAgICB9LFxuXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdXBlci5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJlxuICAgICAgICAgICAgKE1hdGguYWJzKGlucHV0LnJvdGF0aW9uKSA+IHRoaXMub3B0aW9ucy50aHJlc2hvbGQgfHwgdGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOKTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBTd2lwZVxuICogUmVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIG1vdmluZyBmYXN0ICh2ZWxvY2l0eSksIHdpdGggZW5vdWdoIGRpc3RhbmNlIGluIHRoZSBhbGxvd2VkIGRpcmVjdGlvbi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgQXR0clJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gU3dpcGVSZWNvZ25pemVyKCkge1xuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoU3dpcGVSZWNvZ25pemVyLCBBdHRyUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgU3dpcGVSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZXZlbnQ6ICdzd2lwZScsXG4gICAgICAgIHRocmVzaG9sZDogMTAsXG4gICAgICAgIHZlbG9jaXR5OiAwLjMsXG4gICAgICAgIGRpcmVjdGlvbjogRElSRUNUSU9OX0hPUklaT05UQUwgfCBESVJFQ1RJT05fVkVSVElDQUwsXG4gICAgICAgIHBvaW50ZXJzOiAxXG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFBhblJlY29nbml6ZXIucHJvdG90eXBlLmdldFRvdWNoQWN0aW9uLmNhbGwodGhpcyk7XG4gICAgfSxcblxuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcbiAgICAgICAgdmFyIHZlbG9jaXR5O1xuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gJiAoRElSRUNUSU9OX0hPUklaT05UQUwgfCBESVJFQ1RJT05fVkVSVElDQUwpKSB7XG4gICAgICAgICAgICB2ZWxvY2l0eSA9IGlucHV0Lm92ZXJhbGxWZWxvY2l0eTtcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkge1xuICAgICAgICAgICAgdmVsb2NpdHkgPSBpbnB1dC5vdmVyYWxsVmVsb2NpdHlYO1xuICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiAmIERJUkVDVElPTl9WRVJUSUNBTCkge1xuICAgICAgICAgICAgdmVsb2NpdHkgPSBpbnB1dC5vdmVyYWxsVmVsb2NpdHlZO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cGVyLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmXG4gICAgICAgICAgICBkaXJlY3Rpb24gJiBpbnB1dC5vZmZzZXREaXJlY3Rpb24gJiZcbiAgICAgICAgICAgIGlucHV0LmRpc3RhbmNlID4gdGhpcy5vcHRpb25zLnRocmVzaG9sZCAmJlxuICAgICAgICAgICAgaW5wdXQubWF4UG9pbnRlcnMgPT0gdGhpcy5vcHRpb25zLnBvaW50ZXJzICYmXG4gICAgICAgICAgICBhYnModmVsb2NpdHkpID4gdGhpcy5vcHRpb25zLnZlbG9jaXR5ICYmIGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX0VORDtcbiAgICB9LFxuXG4gICAgZW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGRpcmVjdGlvblN0cihpbnB1dC5vZmZzZXREaXJlY3Rpb24pO1xuICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQgKyBkaXJlY3Rpb24sIGlucHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCwgaW5wdXQpO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIEEgdGFwIGlzIGVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIGRvaW5nIGEgc21hbGwgdGFwL2NsaWNrLiBNdWx0aXBsZSB0YXBzIGFyZSByZWNvZ25pemVkIGlmIHRoZXkgb2NjdXJcbiAqIGJldHdlZW4gdGhlIGdpdmVuIGludGVydmFsIGFuZCBwb3NpdGlvbi4gVGhlIGRlbGF5IG9wdGlvbiBjYW4gYmUgdXNlZCB0byByZWNvZ25pemUgbXVsdGktdGFwcyB3aXRob3V0IGZpcmluZ1xuICogYSBzaW5nbGUgdGFwLlxuICpcbiAqIFRoZSBldmVudERhdGEgZnJvbSB0aGUgZW1pdHRlZCBldmVudCBjb250YWlucyB0aGUgcHJvcGVydHkgYHRhcENvdW50YCwgd2hpY2ggY29udGFpbnMgdGhlIGFtb3VudCBvZlxuICogbXVsdGktdGFwcyBiZWluZyByZWNvZ25pemVkLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFRhcFJlY29nbml6ZXIoKSB7XG4gICAgUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgLy8gcHJldmlvdXMgdGltZSBhbmQgY2VudGVyLFxuICAgIC8vIHVzZWQgZm9yIHRhcCBjb3VudGluZ1xuICAgIHRoaXMucFRpbWUgPSBmYWxzZTtcbiAgICB0aGlzLnBDZW50ZXIgPSBmYWxzZTtcblxuICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcbiAgICB0aGlzLl9pbnB1dCA9IG51bGw7XG4gICAgdGhpcy5jb3VudCA9IDA7XG59XG5cbmluaGVyaXQoVGFwUmVjb2duaXplciwgUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUGluY2hSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZXZlbnQ6ICd0YXAnLFxuICAgICAgICBwb2ludGVyczogMSxcbiAgICAgICAgdGFwczogMSxcbiAgICAgICAgaW50ZXJ2YWw6IDMwMCwgLy8gbWF4IHRpbWUgYmV0d2VlbiB0aGUgbXVsdGktdGFwIHRhcHNcbiAgICAgICAgdGltZTogMjUwLCAvLyBtYXggdGltZSBvZiB0aGUgcG9pbnRlciB0byBiZSBkb3duIChsaWtlIGZpbmdlciBvbiB0aGUgc2NyZWVuKVxuICAgICAgICB0aHJlc2hvbGQ6IDksIC8vIGEgbWluaW1hbCBtb3ZlbWVudCBpcyBvaywgYnV0IGtlZXAgaXQgbG93XG4gICAgICAgIHBvc1RocmVzaG9sZDogMTAgLy8gYSBtdWx0aS10YXAgY2FuIGJlIGEgYml0IG9mZiB0aGUgaW5pdGlhbCBwb3NpdGlvblxuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBbVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTl07XG4gICAgfSxcblxuICAgIHByb2Nlc3M6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIHZhciB2YWxpZFBvaW50ZXJzID0gaW5wdXQucG9pbnRlcnMubGVuZ3RoID09PSBvcHRpb25zLnBvaW50ZXJzO1xuICAgICAgICB2YXIgdmFsaWRNb3ZlbWVudCA9IGlucHV0LmRpc3RhbmNlIDwgb3B0aW9ucy50aHJlc2hvbGQ7XG4gICAgICAgIHZhciB2YWxpZFRvdWNoVGltZSA9IGlucHV0LmRlbHRhVGltZSA8IG9wdGlvbnMudGltZTtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgaWYgKChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9TVEFSVCkgJiYgKHRoaXMuY291bnQgPT09IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mYWlsVGltZW91dCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2Ugb25seSBhbGxvdyBsaXR0bGUgbW92ZW1lbnRcbiAgICAgICAgLy8gYW5kIHdlJ3ZlIHJlYWNoZWQgYW4gZW5kIGV2ZW50LCBzbyBhIHRhcCBpcyBwb3NzaWJsZVxuICAgICAgICBpZiAodmFsaWRNb3ZlbWVudCAmJiB2YWxpZFRvdWNoVGltZSAmJiB2YWxpZFBvaW50ZXJzKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuZXZlbnRUeXBlICE9IElOUFVUX0VORCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZhaWxUaW1lb3V0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB2YWxpZEludGVydmFsID0gdGhpcy5wVGltZSA/IChpbnB1dC50aW1lU3RhbXAgLSB0aGlzLnBUaW1lIDwgb3B0aW9ucy5pbnRlcnZhbCkgOiB0cnVlO1xuICAgICAgICAgICAgdmFyIHZhbGlkTXVsdGlUYXAgPSAhdGhpcy5wQ2VudGVyIHx8IGdldERpc3RhbmNlKHRoaXMucENlbnRlciwgaW5wdXQuY2VudGVyKSA8IG9wdGlvbnMucG9zVGhyZXNob2xkO1xuXG4gICAgICAgICAgICB0aGlzLnBUaW1lID0gaW5wdXQudGltZVN0YW1wO1xuICAgICAgICAgICAgdGhpcy5wQ2VudGVyID0gaW5wdXQuY2VudGVyO1xuXG4gICAgICAgICAgICBpZiAoIXZhbGlkTXVsdGlUYXAgfHwgIXZhbGlkSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudCArPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xuXG4gICAgICAgICAgICAvLyBpZiB0YXAgY291bnQgbWF0Y2hlcyB3ZSBoYXZlIHJlY29nbml6ZWQgaXQsXG4gICAgICAgICAgICAvLyBlbHNlIGl0IGhhcyBiZWdhbiByZWNvZ25pemluZy4uLlxuICAgICAgICAgICAgdmFyIHRhcENvdW50ID0gdGhpcy5jb3VudCAlIG9wdGlvbnMudGFwcztcbiAgICAgICAgICAgIGlmICh0YXBDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIG5vIGZhaWxpbmcgcmVxdWlyZW1lbnRzLCBpbW1lZGlhdGVseSB0cmlnZ2VyIHRoZSB0YXAgZXZlbnRcbiAgICAgICAgICAgICAgICAvLyBvciB3YWl0IGFzIGxvbmcgYXMgdGhlIG11bHRpdGFwIGludGVydmFsIHRvIHRyaWdnZXJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaGFzUmVxdWlyZUZhaWx1cmVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0Q29udGV4dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9SRUNPR05JWkVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cnlFbWl0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMuaW50ZXJ2YWwsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEVfQkVHQU47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XG4gICAgfSxcblxuICAgIGZhaWxUaW1lb3V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0Q29udGV4dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9GQUlMRUQ7XG4gICAgICAgIH0sIHRoaXMub3B0aW9ucy5pbnRlcnZhbCwgdGhpcyk7XG4gICAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XG4gICAgfSxcblxuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTtcbiAgICB9LFxuXG4gICAgZW1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09IFNUQVRFX1JFQ09HTklaRUQpIHtcbiAgICAgICAgICAgIHRoaXMuX2lucHV0LnRhcENvdW50ID0gdGhpcy5jb3VudDtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCwgdGhpcy5faW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8qKlxuICogU2ltcGxlIHdheSB0byBjcmVhdGUgYSBtYW5hZ2VyIHdpdGggYSBkZWZhdWx0IHNldCBvZiByZWNvZ25pemVycy5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBIYW1tZXIoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMucmVjb2duaXplcnMgPSBpZlVuZGVmaW5lZChvcHRpb25zLnJlY29nbml6ZXJzLCBIYW1tZXIuZGVmYXVsdHMucHJlc2V0KTtcbiAgICByZXR1cm4gbmV3IE1hbmFnZXIoZWxlbWVudCwgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogQGNvbnN0IHtzdHJpbmd9XG4gKi9cbkhhbW1lci5WRVJTSU9OID0gJzIuMC43JztcblxuLyoqXG4gKiBkZWZhdWx0IHNldHRpbmdzXG4gKiBAbmFtZXNwYWNlXG4gKi9cbkhhbW1lci5kZWZhdWx0cyA9IHtcbiAgICAvKipcbiAgICAgKiBzZXQgaWYgRE9NIGV2ZW50cyBhcmUgYmVpbmcgdHJpZ2dlcmVkLlxuICAgICAqIEJ1dCB0aGlzIGlzIHNsb3dlciBhbmQgdW51c2VkIGJ5IHNpbXBsZSBpbXBsZW1lbnRhdGlvbnMsIHNvIGRpc2FibGVkIGJ5IGRlZmF1bHQuXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBkb21FdmVudHM6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIGZvciB0aGUgdG91Y2hBY3Rpb24gcHJvcGVydHkvZmFsbGJhY2suXG4gICAgICogV2hlbiBzZXQgdG8gYGNvbXB1dGVgIGl0IHdpbGwgbWFnaWNhbGx5IHNldCB0aGUgY29ycmVjdCB2YWx1ZSBiYXNlZCBvbiB0aGUgYWRkZWQgcmVjb2duaXplcnMuXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKiBAZGVmYXVsdCBjb21wdXRlXG4gICAgICovXG4gICAgdG91Y2hBY3Rpb246IFRPVUNIX0FDVElPTl9DT01QVVRFLFxuXG4gICAgLyoqXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIGVuYWJsZTogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEVYUEVSSU1FTlRBTCBGRUFUVVJFIC0tIGNhbiBiZSByZW1vdmVkL2NoYW5nZWRcbiAgICAgKiBDaGFuZ2UgdGhlIHBhcmVudCBpbnB1dCB0YXJnZXQgZWxlbWVudC5cbiAgICAgKiBJZiBOdWxsLCB0aGVuIGl0IGlzIGJlaW5nIHNldCB0aGUgdG8gbWFpbiBlbGVtZW50LlxuICAgICAqIEB0eXBlIHtOdWxsfEV2ZW50VGFyZ2V0fVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBpbnB1dFRhcmdldDogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIGZvcmNlIGFuIGlucHV0IGNsYXNzXG4gICAgICogQHR5cGUge051bGx8RnVuY3Rpb259XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIGlucHV0Q2xhc3M6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IHJlY29nbml6ZXIgc2V0dXAgd2hlbiBjYWxsaW5nIGBIYW1tZXIoKWBcbiAgICAgKiBXaGVuIGNyZWF0aW5nIGEgbmV3IE1hbmFnZXIgdGhlc2Ugd2lsbCBiZSBza2lwcGVkLlxuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICBwcmVzZXQ6IFtcbiAgICAgICAgLy8gUmVjb2duaXplckNsYXNzLCBvcHRpb25zLCBbcmVjb2duaXplV2l0aCwgLi4uXSwgW3JlcXVpcmVGYWlsdXJlLCAuLi5dXG4gICAgICAgIFtSb3RhdGVSZWNvZ25pemVyLCB7ZW5hYmxlOiBmYWxzZX1dLFxuICAgICAgICBbUGluY2hSZWNvZ25pemVyLCB7ZW5hYmxlOiBmYWxzZX0sIFsncm90YXRlJ11dLFxuICAgICAgICBbU3dpcGVSZWNvZ25pemVyLCB7ZGlyZWN0aW9uOiBESVJFQ1RJT05fSE9SSVpPTlRBTH1dLFxuICAgICAgICBbUGFuUmVjb2duaXplciwge2RpcmVjdGlvbjogRElSRUNUSU9OX0hPUklaT05UQUx9LCBbJ3N3aXBlJ11dLFxuICAgICAgICBbVGFwUmVjb2duaXplcl0sXG4gICAgICAgIFtUYXBSZWNvZ25pemVyLCB7ZXZlbnQ6ICdkb3VibGV0YXAnLCB0YXBzOiAyfSwgWyd0YXAnXV0sXG4gICAgICAgIFtQcmVzc1JlY29nbml6ZXJdXG4gICAgXSxcblxuICAgIC8qKlxuICAgICAqIFNvbWUgQ1NTIHByb3BlcnRpZXMgY2FuIGJlIHVzZWQgdG8gaW1wcm92ZSB0aGUgd29ya2luZyBvZiBIYW1tZXIuXG4gICAgICogQWRkIHRoZW0gdG8gdGhpcyBtZXRob2QgYW5kIHRoZXkgd2lsbCBiZSBzZXQgd2hlbiBjcmVhdGluZyBhIG5ldyBNYW5hZ2VyLlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKi9cbiAgICBjc3NQcm9wczoge1xuICAgICAgICAvKipcbiAgICAgICAgICogRGlzYWJsZXMgdGV4dCBzZWxlY3Rpb24gdG8gaW1wcm92ZSB0aGUgZHJhZ2dpbmcgZ2VzdHVyZS4gTWFpbmx5IGZvciBkZXNrdG9wIGJyb3dzZXJzLlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAgICovXG4gICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGlzYWJsZSB0aGUgV2luZG93cyBQaG9uZSBncmlwcGVycyB3aGVuIHByZXNzaW5nIGFuIGVsZW1lbnQuXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICAgKi9cbiAgICAgICAgdG91Y2hTZWxlY3Q6ICdub25lJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGlzYWJsZXMgdGhlIGRlZmF1bHQgY2FsbG91dCBzaG93biB3aGVuIHlvdSB0b3VjaCBhbmQgaG9sZCBhIHRvdWNoIHRhcmdldC5cbiAgICAgICAgICogT24gaU9TLCB3aGVuIHlvdSB0b3VjaCBhbmQgaG9sZCBhIHRvdWNoIHRhcmdldCBzdWNoIGFzIGEgbGluaywgU2FmYXJpIGRpc3BsYXlzXG4gICAgICAgICAqIGEgY2FsbG91dCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsaW5rLiBUaGlzIHByb3BlcnR5IGFsbG93cyB5b3UgdG8gZGlzYWJsZSB0aGF0IGNhbGxvdXQuXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICAgKi9cbiAgICAgICAgdG91Y2hDYWxsb3V0OiAnbm9uZScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIHpvb21pbmcgaXMgZW5hYmxlZC4gVXNlZCBieSBJRTEwPlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAgICovXG4gICAgICAgIGNvbnRlbnRab29taW5nOiAnbm9uZScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmllcyB0aGF0IGFuIGVudGlyZSBlbGVtZW50IHNob3VsZCBiZSBkcmFnZ2FibGUgaW5zdGVhZCBvZiBpdHMgY29udGVudHMuIE1haW5seSBmb3IgZGVza3RvcCBicm93c2Vycy5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgICAqL1xuICAgICAgICB1c2VyRHJhZzogJ25vbmUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPdmVycmlkZXMgdGhlIGhpZ2hsaWdodCBjb2xvciBzaG93biB3aGVuIHRoZSB1c2VyIHRhcHMgYSBsaW5rIG9yIGEgSmF2YVNjcmlwdFxuICAgICAgICAgKiBjbGlja2FibGUgZWxlbWVudCBpbiBpT1MuIFRoaXMgcHJvcGVydHkgb2JleXMgdGhlIGFscGhhIHZhbHVlLCBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdyZ2JhKDAsMCwwLDApJ1xuICAgICAgICAgKi9cbiAgICAgICAgdGFwSGlnaGxpZ2h0Q29sb3I6ICdyZ2JhKDAsMCwwLDApJ1xuICAgIH1cbn07XG5cbnZhciBTVE9QID0gMTtcbnZhciBGT1JDRURfU1RPUCA9IDI7XG5cbi8qKlxuICogTWFuYWdlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE1hbmFnZXIoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IGFzc2lnbih7fSwgSGFtbWVyLmRlZmF1bHRzLCBvcHRpb25zIHx8IHt9KTtcblxuICAgIHRoaXMub3B0aW9ucy5pbnB1dFRhcmdldCA9IHRoaXMub3B0aW9ucy5pbnB1dFRhcmdldCB8fCBlbGVtZW50O1xuXG4gICAgdGhpcy5oYW5kbGVycyA9IHt9O1xuICAgIHRoaXMuc2Vzc2lvbiA9IHt9O1xuICAgIHRoaXMucmVjb2duaXplcnMgPSBbXTtcbiAgICB0aGlzLm9sZENzc1Byb3BzID0ge307XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuaW5wdXQgPSBjcmVhdGVJbnB1dEluc3RhbmNlKHRoaXMpO1xuICAgIHRoaXMudG91Y2hBY3Rpb24gPSBuZXcgVG91Y2hBY3Rpb24odGhpcywgdGhpcy5vcHRpb25zLnRvdWNoQWN0aW9uKTtcblxuICAgIHRvZ2dsZUNzc1Byb3BzKHRoaXMsIHRydWUpO1xuXG4gICAgZWFjaCh0aGlzLm9wdGlvbnMucmVjb2duaXplcnMsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgdmFyIHJlY29nbml6ZXIgPSB0aGlzLmFkZChuZXcgKGl0ZW1bMF0pKGl0ZW1bMV0pKTtcbiAgICAgICAgaXRlbVsyXSAmJiByZWNvZ25pemVyLnJlY29nbml6ZVdpdGgoaXRlbVsyXSk7XG4gICAgICAgIGl0ZW1bM10gJiYgcmVjb2duaXplci5yZXF1aXJlRmFpbHVyZShpdGVtWzNdKTtcbiAgICB9LCB0aGlzKTtcbn1cblxuTWFuYWdlci5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogc2V0IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtNYW5hZ2VyfVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICBhc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICAvLyBPcHRpb25zIHRoYXQgbmVlZCBhIGxpdHRsZSBtb3JlIHNldHVwXG4gICAgICAgIGlmIChvcHRpb25zLnRvdWNoQWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmlucHV0VGFyZ2V0KSB7XG4gICAgICAgICAgICAvLyBDbGVhbiB1cCBleGlzdGluZyBldmVudCBsaXN0ZW5lcnMgYW5kIHJlaW5pdGlhbGl6ZVxuICAgICAgICAgICAgdGhpcy5pbnB1dC5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmlucHV0LnRhcmdldCA9IG9wdGlvbnMuaW5wdXRUYXJnZXQ7XG4gICAgICAgICAgICB0aGlzLmlucHV0LmluaXQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogc3RvcCByZWNvZ25pemluZyBmb3IgdGhpcyBzZXNzaW9uLlxuICAgICAqIFRoaXMgc2Vzc2lvbiB3aWxsIGJlIGRpc2NhcmRlZCwgd2hlbiBhIG5ldyBbaW5wdXRdc3RhcnQgZXZlbnQgaXMgZmlyZWQuXG4gICAgICogV2hlbiBmb3JjZWQsIHRoZSByZWNvZ25pemVyIGN5Y2xlIGlzIHN0b3BwZWQgaW1tZWRpYXRlbHkuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbZm9yY2VdXG4gICAgICovXG4gICAgc3RvcDogZnVuY3Rpb24oZm9yY2UpIHtcbiAgICAgICAgdGhpcy5zZXNzaW9uLnN0b3BwZWQgPSBmb3JjZSA/IEZPUkNFRF9TVE9QIDogU1RPUDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcnVuIHRoZSByZWNvZ25pemVycyFcbiAgICAgKiBjYWxsZWQgYnkgdGhlIGlucHV0SGFuZGxlciBmdW5jdGlvbiBvbiBldmVyeSBtb3ZlbWVudCBvZiB0aGUgcG9pbnRlcnMgKHRvdWNoZXMpXG4gICAgICogaXQgd2Fsa3MgdGhyb3VnaCBhbGwgdGhlIHJlY29nbml6ZXJzIGFuZCB0cmllcyB0byBkZXRlY3QgdGhlIGdlc3R1cmUgdGhhdCBpcyBiZWluZyBtYWRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxuICAgICAqL1xuICAgIHJlY29nbml6ZTogZnVuY3Rpb24oaW5wdXREYXRhKSB7XG4gICAgICAgIHZhciBzZXNzaW9uID0gdGhpcy5zZXNzaW9uO1xuICAgICAgICBpZiAoc2Vzc2lvbi5zdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBydW4gdGhlIHRvdWNoLWFjdGlvbiBwb2x5ZmlsbFxuICAgICAgICB0aGlzLnRvdWNoQWN0aW9uLnByZXZlbnREZWZhdWx0cyhpbnB1dERhdGEpO1xuXG4gICAgICAgIHZhciByZWNvZ25pemVyO1xuICAgICAgICB2YXIgcmVjb2duaXplcnMgPSB0aGlzLnJlY29nbml6ZXJzO1xuXG4gICAgICAgIC8vIHRoaXMgaG9sZHMgdGhlIHJlY29nbml6ZXIgdGhhdCBpcyBiZWluZyByZWNvZ25pemVkLlxuICAgICAgICAvLyBzbyB0aGUgcmVjb2duaXplcidzIHN0YXRlIG5lZWRzIHRvIGJlIEJFR0FOLCBDSEFOR0VELCBFTkRFRCBvciBSRUNPR05JWkVEXG4gICAgICAgIC8vIGlmIG5vIHJlY29nbml6ZXIgaXMgZGV0ZWN0aW5nIGEgdGhpbmcsIGl0IGlzIHNldCB0byBgbnVsbGBcbiAgICAgICAgdmFyIGN1clJlY29nbml6ZXIgPSBzZXNzaW9uLmN1clJlY29nbml6ZXI7XG5cbiAgICAgICAgLy8gcmVzZXQgd2hlbiB0aGUgbGFzdCByZWNvZ25pemVyIGlzIHJlY29nbml6ZWRcbiAgICAgICAgLy8gb3Igd2hlbiB3ZSdyZSBpbiBhIG5ldyBzZXNzaW9uXG4gICAgICAgIGlmICghY3VyUmVjb2duaXplciB8fCAoY3VyUmVjb2duaXplciAmJiBjdXJSZWNvZ25pemVyLnN0YXRlICYgU1RBVEVfUkVDT0dOSVpFRCkpIHtcbiAgICAgICAgICAgIGN1clJlY29nbml6ZXIgPSBzZXNzaW9uLmN1clJlY29nbml6ZXIgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHJlY29nbml6ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmVjb2duaXplciA9IHJlY29nbml6ZXJzW2ldO1xuXG4gICAgICAgICAgICAvLyBmaW5kIG91dCBpZiB3ZSBhcmUgYWxsb3dlZCB0cnkgdG8gcmVjb2duaXplIHRoZSBpbnB1dCBmb3IgdGhpcyBvbmUuXG4gICAgICAgICAgICAvLyAxLiAgIGFsbG93IGlmIHRoZSBzZXNzaW9uIGlzIE5PVCBmb3JjZWQgc3RvcHBlZCAoc2VlIHRoZSAuc3RvcCgpIG1ldGhvZClcbiAgICAgICAgICAgIC8vIDIuICAgYWxsb3cgaWYgd2Ugc3RpbGwgaGF2ZW4ndCByZWNvZ25pemVkIGEgZ2VzdHVyZSBpbiB0aGlzIHNlc3Npb24sIG9yIHRoZSB0aGlzIHJlY29nbml6ZXIgaXMgdGhlIG9uZVxuICAgICAgICAgICAgLy8gICAgICB0aGF0IGlzIGJlaW5nIHJlY29nbml6ZWQuXG4gICAgICAgICAgICAvLyAzLiAgIGFsbG93IGlmIHRoZSByZWNvZ25pemVyIGlzIGFsbG93ZWQgdG8gcnVuIHNpbXVsdGFuZW91cyB3aXRoIHRoZSBjdXJyZW50IHJlY29nbml6ZWQgcmVjb2duaXplci5cbiAgICAgICAgICAgIC8vICAgICAgdGhpcyBjYW4gYmUgc2V0dXAgd2l0aCB0aGUgYHJlY29nbml6ZVdpdGgoKWAgbWV0aG9kIG9uIHRoZSByZWNvZ25pemVyLlxuICAgICAgICAgICAgaWYgKHNlc3Npb24uc3RvcHBlZCAhPT0gRk9SQ0VEX1NUT1AgJiYgKCAvLyAxXG4gICAgICAgICAgICAgICAgICAgICFjdXJSZWNvZ25pemVyIHx8IHJlY29nbml6ZXIgPT0gY3VyUmVjb2duaXplciB8fCAvLyAyXG4gICAgICAgICAgICAgICAgICAgIHJlY29nbml6ZXIuY2FuUmVjb2duaXplV2l0aChjdXJSZWNvZ25pemVyKSkpIHsgLy8gM1xuICAgICAgICAgICAgICAgIHJlY29nbml6ZXIucmVjb2duaXplKGlucHV0RGF0YSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlY29nbml6ZXIucmVzZXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlIHJlY29nbml6ZXIgaGFzIGJlZW4gcmVjb2duaXppbmcgdGhlIGlucHV0IGFzIGEgdmFsaWQgZ2VzdHVyZSwgd2Ugd2FudCB0byBzdG9yZSB0aGlzIG9uZSBhcyB0aGVcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgYWN0aXZlIHJlY29nbml6ZXIuIGJ1dCBvbmx5IGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBhbiBhY3RpdmUgcmVjb2duaXplclxuICAgICAgICAgICAgaWYgKCFjdXJSZWNvZ25pemVyICYmIHJlY29nbml6ZXIuc3RhdGUgJiAoU1RBVEVfQkVHQU4gfCBTVEFURV9DSEFOR0VEIHwgU1RBVEVfRU5ERUQpKSB7XG4gICAgICAgICAgICAgICAgY3VyUmVjb2duaXplciA9IHNlc3Npb24uY3VyUmVjb2duaXplciA9IHJlY29nbml6ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2V0IGEgcmVjb2duaXplciBieSBpdHMgZXZlbnQgbmFtZS5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ8U3RyaW5nfSByZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ8TnVsbH1cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uKHJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKHJlY29nbml6ZXIgaW5zdGFuY2VvZiBSZWNvZ25pemVyKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjb2duaXplcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWNvZ25pemVycyA9IHRoaXMucmVjb2duaXplcnM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVjb2duaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChyZWNvZ25pemVyc1tpXS5vcHRpb25zLmV2ZW50ID09IHJlY29nbml6ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjb2duaXplcnNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGFkZCBhIHJlY29nbml6ZXIgdG8gdGhlIG1hbmFnZXJcbiAgICAgKiBleGlzdGluZyByZWNvZ25pemVycyB3aXRoIHRoZSBzYW1lIGV2ZW50IG5hbWUgd2lsbCBiZSByZW1vdmVkXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSByZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ8TWFuYWdlcn1cbiAgICAgKi9cbiAgICBhZGQ6IGZ1bmN0aW9uKHJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKGludm9rZUFycmF5QXJnKHJlY29nbml6ZXIsICdhZGQnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZW1vdmUgZXhpc3RpbmdcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gdGhpcy5nZXQocmVjb2duaXplci5vcHRpb25zLmV2ZW50KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShleGlzdGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlY29nbml6ZXJzLnB1c2gocmVjb2duaXplcik7XG4gICAgICAgIHJlY29nbml6ZXIubWFuYWdlciA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy50b3VjaEFjdGlvbi51cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHJlY29nbml6ZXI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlbW92ZSBhIHJlY29nbml6ZXIgYnkgbmFtZSBvciBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcnxTdHJpbmd9IHJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7TWFuYWdlcn1cbiAgICAgKi9cbiAgICByZW1vdmU6IGZ1bmN0aW9uKHJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKGludm9rZUFycmF5QXJnKHJlY29nbml6ZXIsICdyZW1vdmUnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZWNvZ25pemVyID0gdGhpcy5nZXQocmVjb2duaXplcik7XG5cbiAgICAgICAgLy8gbGV0J3MgbWFrZSBzdXJlIHRoaXMgcmVjb2duaXplciBleGlzdHNcbiAgICAgICAgaWYgKHJlY29nbml6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZWNvZ25pemVycyA9IHRoaXMucmVjb2duaXplcnM7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBpbkFycmF5KHJlY29nbml6ZXJzLCByZWNvZ25pemVyKTtcblxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJlY29nbml6ZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy50b3VjaEFjdGlvbi51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBiaW5kIGV2ZW50XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50c1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAgICAgKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSB0aGlzXG4gICAgICovXG4gICAgb246IGZ1bmN0aW9uKGV2ZW50cywgaGFuZGxlcikge1xuICAgICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzO1xuICAgICAgICBlYWNoKHNwbGl0U3RyKGV2ZW50cyksIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBoYW5kbGVyc1tldmVudF0gPSBoYW5kbGVyc1tldmVudF0gfHwgW107XG4gICAgICAgICAgICBoYW5kbGVyc1tldmVudF0ucHVzaChoYW5kbGVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB1bmJpbmQgZXZlbnQsIGxlYXZlIGVtaXQgYmxhbmsgdG8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaGFuZGxlcl1cbiAgICAgKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSB0aGlzXG4gICAgICovXG4gICAgb2ZmOiBmdW5jdGlvbihldmVudHMsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzO1xuICAgICAgICBlYWNoKHNwbGl0U3RyKGV2ZW50cyksIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgaGFuZGxlcnNbZXZlbnRdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyc1tldmVudF0gJiYgaGFuZGxlcnNbZXZlbnRdLnNwbGljZShpbkFycmF5KGhhbmRsZXJzW2V2ZW50XSwgaGFuZGxlciksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGVtaXQgZXZlbnQgdG8gdGhlIGxpc3RlbmVyc1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgZW1pdDogZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgLy8gd2UgYWxzbyB3YW50IHRvIHRyaWdnZXIgZG9tIGV2ZW50c1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRvbUV2ZW50cykge1xuICAgICAgICAgICAgdHJpZ2dlckRvbUV2ZW50KGV2ZW50LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5vIGhhbmRsZXJzLCBzbyBza2lwIGl0IGFsbFxuICAgICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzW2V2ZW50XSAmJiB0aGlzLmhhbmRsZXJzW2V2ZW50XS5zbGljZSgpO1xuICAgICAgICBpZiAoIWhhbmRsZXJzIHx8ICFoYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEudHlwZSA9IGV2ZW50O1xuICAgICAgICBkYXRhLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkYXRhLnNyY0V2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IGhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgaGFuZGxlcnNbaV0oZGF0YSk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZGVzdHJveSB0aGUgbWFuYWdlciBhbmQgdW5iaW5kcyBhbGwgZXZlbnRzXG4gICAgICogaXQgZG9lc24ndCB1bmJpbmQgZG9tIGV2ZW50cywgdGhhdCBpcyB0aGUgdXNlciBvd24gcmVzcG9uc2liaWxpdHlcbiAgICAgKi9cbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ICYmIHRvZ2dsZUNzc1Byb3BzKHRoaXMsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLmhhbmRsZXJzID0ge307XG4gICAgICAgIHRoaXMuc2Vzc2lvbiA9IHt9O1xuICAgICAgICB0aGlzLmlucHV0LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgICB9XG59O1xuXG4vKipcbiAqIGFkZC9yZW1vdmUgdGhlIGNzcyBwcm9wZXJ0aWVzIGFzIGRlZmluZWQgaW4gbWFuYWdlci5vcHRpb25zLmNzc1Byb3BzXG4gKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gYWRkXG4gKi9cbmZ1bmN0aW9uIHRvZ2dsZUNzc1Byb3BzKG1hbmFnZXIsIGFkZCkge1xuICAgIHZhciBlbGVtZW50ID0gbWFuYWdlci5lbGVtZW50O1xuICAgIGlmICghZWxlbWVudC5zdHlsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBwcm9wO1xuICAgIGVhY2gobWFuYWdlci5vcHRpb25zLmNzc1Byb3BzLCBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICBwcm9wID0gcHJlZml4ZWQoZWxlbWVudC5zdHlsZSwgbmFtZSk7XG4gICAgICAgIGlmIChhZGQpIHtcbiAgICAgICAgICAgIG1hbmFnZXIub2xkQ3NzUHJvcHNbcHJvcF0gPSBlbGVtZW50LnN0eWxlW3Byb3BdO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IG1hbmFnZXIub2xkQ3NzUHJvcHNbcHJvcF0gfHwgJyc7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWFkZCkge1xuICAgICAgICBtYW5hZ2VyLm9sZENzc1Byb3BzID0ge307XG4gICAgfVxufVxuXG4vKipcbiAqIHRyaWdnZXIgZG9tIGV2ZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKi9cbmZ1bmN0aW9uIHRyaWdnZXJEb21FdmVudChldmVudCwgZGF0YSkge1xuICAgIHZhciBnZXN0dXJlRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBnZXN0dXJlRXZlbnQuaW5pdEV2ZW50KGV2ZW50LCB0cnVlLCB0cnVlKTtcbiAgICBnZXN0dXJlRXZlbnQuZ2VzdHVyZSA9IGRhdGE7XG4gICAgZGF0YS50YXJnZXQuZGlzcGF0Y2hFdmVudChnZXN0dXJlRXZlbnQpO1xufVxuXG5hc3NpZ24oSGFtbWVyLCB7XG4gICAgSU5QVVRfU1RBUlQ6IElOUFVUX1NUQVJULFxuICAgIElOUFVUX01PVkU6IElOUFVUX01PVkUsXG4gICAgSU5QVVRfRU5EOiBJTlBVVF9FTkQsXG4gICAgSU5QVVRfQ0FOQ0VMOiBJTlBVVF9DQU5DRUwsXG5cbiAgICBTVEFURV9QT1NTSUJMRTogU1RBVEVfUE9TU0lCTEUsXG4gICAgU1RBVEVfQkVHQU46IFNUQVRFX0JFR0FOLFxuICAgIFNUQVRFX0NIQU5HRUQ6IFNUQVRFX0NIQU5HRUQsXG4gICAgU1RBVEVfRU5ERUQ6IFNUQVRFX0VOREVELFxuICAgIFNUQVRFX1JFQ09HTklaRUQ6IFNUQVRFX1JFQ09HTklaRUQsXG4gICAgU1RBVEVfQ0FOQ0VMTEVEOiBTVEFURV9DQU5DRUxMRUQsXG4gICAgU1RBVEVfRkFJTEVEOiBTVEFURV9GQUlMRUQsXG5cbiAgICBESVJFQ1RJT05fTk9ORTogRElSRUNUSU9OX05PTkUsXG4gICAgRElSRUNUSU9OX0xFRlQ6IERJUkVDVElPTl9MRUZULFxuICAgIERJUkVDVElPTl9SSUdIVDogRElSRUNUSU9OX1JJR0hULFxuICAgIERJUkVDVElPTl9VUDogRElSRUNUSU9OX1VQLFxuICAgIERJUkVDVElPTl9ET1dOOiBESVJFQ1RJT05fRE9XTixcbiAgICBESVJFQ1RJT05fSE9SSVpPTlRBTDogRElSRUNUSU9OX0hPUklaT05UQUwsXG4gICAgRElSRUNUSU9OX1ZFUlRJQ0FMOiBESVJFQ1RJT05fVkVSVElDQUwsXG4gICAgRElSRUNUSU9OX0FMTDogRElSRUNUSU9OX0FMTCxcblxuICAgIE1hbmFnZXI6IE1hbmFnZXIsXG4gICAgSW5wdXQ6IElucHV0LFxuICAgIFRvdWNoQWN0aW9uOiBUb3VjaEFjdGlvbixcblxuICAgIFRvdWNoSW5wdXQ6IFRvdWNoSW5wdXQsXG4gICAgTW91c2VJbnB1dDogTW91c2VJbnB1dCxcbiAgICBQb2ludGVyRXZlbnRJbnB1dDogUG9pbnRlckV2ZW50SW5wdXQsXG4gICAgVG91Y2hNb3VzZUlucHV0OiBUb3VjaE1vdXNlSW5wdXQsXG4gICAgU2luZ2xlVG91Y2hJbnB1dDogU2luZ2xlVG91Y2hJbnB1dCxcblxuICAgIFJlY29nbml6ZXI6IFJlY29nbml6ZXIsXG4gICAgQXR0clJlY29nbml6ZXI6IEF0dHJSZWNvZ25pemVyLFxuICAgIFRhcDogVGFwUmVjb2duaXplcixcbiAgICBQYW46IFBhblJlY29nbml6ZXIsXG4gICAgU3dpcGU6IFN3aXBlUmVjb2duaXplcixcbiAgICBQaW5jaDogUGluY2hSZWNvZ25pemVyLFxuICAgIFJvdGF0ZTogUm90YXRlUmVjb2duaXplcixcbiAgICBQcmVzczogUHJlc3NSZWNvZ25pemVyLFxuXG4gICAgb246IGFkZEV2ZW50TGlzdGVuZXJzLFxuICAgIG9mZjogcmVtb3ZlRXZlbnRMaXN0ZW5lcnMsXG4gICAgZWFjaDogZWFjaCxcbiAgICBtZXJnZTogbWVyZ2UsXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgYXNzaWduOiBhc3NpZ24sXG4gICAgaW5oZXJpdDogaW5oZXJpdCxcbiAgICBiaW5kRm46IGJpbmRGbixcbiAgICBwcmVmaXhlZDogcHJlZml4ZWRcbn0pO1xuXG4vLyB0aGlzIHByZXZlbnRzIGVycm9ycyB3aGVuIEhhbW1lciBpcyBsb2FkZWQgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRFxuLy8gIHN0eWxlIGxvYWRlciBidXQgYnkgc2NyaXB0IHRhZywgbm90IGJ5IHRoZSBsb2FkZXIuXG52YXIgZnJlZUdsb2JhbCA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6ICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge30pKTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5mcmVlR2xvYmFsLkhhbW1lciA9IEhhbW1lcjtcblxuaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEhhbW1lcjtcbiAgICB9KTtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gSGFtbWVyO1xufSBlbHNlIHtcbiAgICB3aW5kb3dbZXhwb3J0TmFtZV0gPSBIYW1tZXI7XG59XG5cbn0pKHdpbmRvdywgZG9jdW1lbnQsICdIYW1tZXInKTtcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJpbXBvcnQge1xuICBGb290ZXIsXG4gIEhlYWRlcixcbiAgU3RpY2t5QmFyLFxufSBmcm9tICcuL2NvbXBvbmVudHMnO1xuaW1wb3J0IHtcbiAgRGFzaGJvYXJkLFxuICBIb21lLFxuICBQcm9qZWN0UHJldmlldyxcbiAgUmVnaXN0ZXIsXG4gIFN0eWxlZ3VpZGUsXG4gIFRlYXNlcixcbn0gZnJvbSAnLi9wYWdlcyc7XG5pbXBvcnQge1xuICBBY2NvcmRpb24sXG4gIEFqYXhNb2RhbCxcbiAgQWxlcnQsXG4gIEFuaW1hdGVTaGFwZXMsXG4gIENhcmRTdGFjayxcbiAgQ2F0ZWdvcnlGaWx0ZXIsXG4gIEhvbWVDb25jbHVzaW9uU2hhcGVzLFxuICBIb21lTnVtYmVyQW5pbWF0aW9uLFxuICBIb21lVGhvdWdodFN0YXJ0ZXIsXG4gIEhvbWVWaWRlb1BsYXllcixcbiAgTGlzdEFjY29yZGlvbixcbiAgUmVzb3VyY2VOYXYsXG4gIFNjcm9sbFRvLFxufSBmcm9tICcuL2NvbXBvbmVudHMnO1xuaW1wb3J0IHtcbiAgQ29uc2VudEZvcm0sXG4gIEZvcm1zLFxuICBDaGVja0xpc3QsXG4gIEluc3BpcmluZ0VkdWNhdG9yLFxuICBQYXJlbnRhbENvbnNlbnQsXG4gIFByb2ZpbGUsXG4gIFN0ZXBGb3JtLFxuICBTdGVwU3VtbWFyeUZvcm0sXG4gIFRlYW1Gb3JtLFxuICBUZWFzZXJGb3JtLFxufSBmcm9tICcuL2Zvcm1zJztcbmltcG9ydCB7IG5vZGVMaXN0VG9BcnJheSwgUmlwcGxlLCBBQ1RJT05fQ0xBU1NFUyB9IGZyb20gJy4vdXRpbCc7XG5cbmRlY2xhcmUgY29uc3QgYW5ndWxhcjogYW55O1xuZGVjbGFyZSBjb25zdCBnbHVlOiBhbnk7XG5kZWNsYXJlIGNvbnN0IGhlcmN1bGVzOiBhbnk7XG5cbmNvbnN0IFNFTEVDVE9SUyA9IHtcbiAgTURDX0JVVFRPTlM6ICcubWRjLWJ1dHRvbicsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb3JlIHtcbiAgcGFnZT86IHN0cmluZztcbiAgcGhhc2U/OiBzdHJpbmc7XG4gIGNhcmRTdGFjaz86IENhcmRTdGFjaztcbiAgaGVhZGVyOiBIZWFkZXI7XG4gIGZvb3RlcjogRm9vdGVyO1xuICB0ZWFzZXI/OiBUZWFzZXI7XG4gIHN0eWxlZ3VpZGU/OiBTdHlsZWd1aWRlO1xuICBmb3Jtcz86IEZvcm1zO1xuICBtZGNCdXR0b25zOiBBcnJheTxIVE1MRWxlbWVudD47XG4gIGhvbWU/OiBIb21lO1xuICBob21lQ29uY2x1c2lvblNoYXBlcz86IEhvbWVDb25jbHVzaW9uU2hhcGVzO1xuICBob21lTnVtYmVyQW5pbWF0aW9ucz86IEhvbWVOdW1iZXJBbmltYXRpb247XG4gIGhvbWVUaG91Z2h0U3RhcnRlcj86IEhvbWVUaG91Z2h0U3RhcnRlcjtcbiAgaG9tZVZpZGVvUGxheWVyPzogSG9tZVZpZGVvUGxheWVyO1xuICBhamF4TW9kYWw/OiBBamF4TW9kYWw7XG4gIHByb2ZpbGU/OiBQcm9maWxlO1xuICBwcm9qZWN0UHJldmlldz86IFByb2plY3RQcmV2aWV3O1xuICByZWdpc3Rlcj86IFJlZ2lzdGVyO1xuICBzdGVwRm9ybT86IFN0ZXBGb3JtO1xuICBzdGVwU3VtbWFyeUZvcm0/OiBTdGVwU3VtbWFyeUZvcm07XG4gIHRlYW1Gb3JtPzogVGVhbUZvcm07XG4gIHByZWZlcnNSZWR1Y2VkTW90aW9uOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBDb3JlIGNvbnN0cnVjdG9yXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IocGFnZT86IHN0cmluZykge1xuICAgIHRoaXMucGFnZSA9IHBhZ2U7XG4gICAgdGhpcy5waGFzZSA9IGRvY3VtZW50LmJvZHkuZGF0YXNldC5waGFzZTtcbiAgICB0aGlzLmhlYWRlciA9IG5ldyBIZWFkZXIodGhpcyk7XG4gICAgdGhpcy5mb290ZXIgPSBuZXcgRm9vdGVyKHRoaXMpO1xuICAgIHRoaXMubWRjQnV0dG9ucyA9IG5vZGVMaXN0VG9BcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SUy5NRENfQlVUVE9OUykpO1xuICAgIHRoaXMucHJlZmVyc1JlZHVjZWRNb3Rpb24gPSB3aW5kb3cubWF0Y2hNZWRpYSgnKHByZWZlcnMtcmVkdWNlZC1tb3Rpb24pJykubWF0Y2hlcztcbiAgfVxuXG4gIGluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5tZGNCdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgaWYgKFJpcHBsZSkge1xuICAgICAgICBuZXcgUmlwcGxlKGJ1dHRvbik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHRoaXMucHJlZmVyc1JlZHVjZWRNb3Rpb24pIHtcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLlJFRFVDRV9NT1RJT04pO1xuICAgIH1cbiAgICB0aGlzLmFuZ3VsYXJCb290c3RyYXAoKTtcblxuICAgIGlmICghdGhpcy5wYWdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLnBhZ2UpIHtcbiAgICAgIGNhc2UgJ2NvbXBldGl0aW9uLWluZm8nOlxuICAgICAgICB0aGlzLmNhcmRTdGFjayA9IG5ldyBDYXJkU3RhY2soKTtcbiAgICAgICAgdGhpcy5hamF4TW9kYWwgPSBuZXcgQWpheE1vZGFsKHRoaXMpO1xuICAgICAgICBpZiAoIXRoaXMucHJlZmVyc1JlZHVjZWRNb3Rpb24pIHtcbiAgICAgICAgICBuZXcgQW5pbWF0ZVNoYXBlcygpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZWR1Y2F0b3ItcmVzb3VyY2VzJzpcbiAgICAgICAgdGhpcy5jYXJkU3RhY2sgPSBuZXcgQ2FyZFN0YWNrKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3R1ZGVudC1yZXNvdXJjZXMnOlxuICAgICAgICB0aGlzLmNhcmRTdGFjayA9IG5ldyBDYXJkU3RhY2soKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdmYXEnOlxuICAgICAgICBuZXcgU2Nyb2xsVG8oKTtcbiAgICAgICAgbmV3IEFjY29yZGlvbigpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2hvbWUnOlxuICAgICAgICBpZiAodGhpcy5waGFzZSA9PT0gJ29wZW4nKSB7IC8vIFBoYXNlIDFcbiAgICAgICAgICB0aGlzLmNhcmRTdGFjayA9IG5ldyBDYXJkU3RhY2soKTtcbiAgICAgICAgICB0aGlzLmFqYXhNb2RhbCA9IG5ldyBBamF4TW9kYWwodGhpcyk7XG4gICAgICAgICAgbmV3IENhdGVnb3J5RmlsdGVyKCk7XG4gICAgICAgICAgdGhpcy5ob21lID0gbmV3IEhvbWUodGhpcyk7XG4gICAgICAgICAgaWYgKCF0aGlzLnByZWZlcnNSZWR1Y2VkTW90aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmhvbWVDb25jbHVzaW9uU2hhcGVzID0gbmV3IEhvbWVDb25jbHVzaW9uU2hhcGVzKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuaG9tZU51bWJlckFuaW1hdGlvbnMgPSBuZXcgSG9tZU51bWJlckFuaW1hdGlvbih0aGlzKTtcbiAgICAgICAgICB0aGlzLmhvbWVUaG91Z2h0U3RhcnRlciA9IG5ldyBIb21lVGhvdWdodFN0YXJ0ZXIodGhpcyk7XG4gICAgICAgICAgdGhpcy5ob21lVmlkZW9QbGF5ZXIgPSBuZXcgSG9tZVZpZGVvUGxheWVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5waGFzZSA9PT0gJ2p1ZGdpbmcnKSB7IC8vIFBoYXNlIDJcbiAgICAgICAgICB0aGlzLmhvbWUgPSBuZXcgSG9tZSh0aGlzKTtcbiAgICAgICAgICBuZXcgVGVhc2VyRm9ybSh0aGlzKTtcbiAgICAgICAgICB0aGlzLmZvcm1zID0gbmV3IEZvcm1zKHRoaXMpO1xuICAgICAgICAgIHRoaXMuaG9tZVRob3VnaHRTdGFydGVyID0gbmV3IEhvbWVUaG91Z2h0U3RhcnRlcigpO1xuICAgICAgICAgIHRoaXMuaG9tZVZpZGVvUGxheWVyID0gbmV3IEhvbWVWaWRlb1BsYXllcigpO1xuICAgICAgICAgIHRoaXMuYWpheE1vZGFsID0gbmV3IEFqYXhNb2RhbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgLy8gUGhhc2UgMytcbiAgICAgICAgICB0aGlzLmhvbWUgPSBuZXcgSG9tZSh0aGlzKTtcbiAgICAgICAgICBuZXcgVGVhc2VyRm9ybSh0aGlzKTtcbiAgICAgICAgICB0aGlzLmZvcm1zID0gbmV3IEZvcm1zKHRoaXMpO1xuICAgICAgICAgIHRoaXMuYWpheE1vZGFsID0gbmV3IEFqYXhNb2RhbCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY29tcGV0aXRpb24tcGFzdC1wcm9qZWN0cyc6XG4gICAgICAgIHRoaXMuYWpheE1vZGFsID0gbmV3IEFqYXhNb2RhbCh0aGlzKTtcbiAgICAgICAgY29uc3QgbGlzdEFjY29yZGlvbiA9XG4gICAgICAgICAgICBuZXcgTGlzdEFjY29yZGlvbignLmpzLXBhc3QtcHJvamVjdHMtbGlzdCcsICcuanMtcGFzdC1wcm9qZWN0cy1idXR0b24nKTtcbiAgICAgICAgbmV3IENhdGVnb3J5RmlsdGVyKGxpc3RBY2NvcmRpb24uZXhwYW5kTGlzdCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVnaXN0ZXInOlxuICAgICAgICBuZXcgU3RpY2t5QmFyKHRydWUpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyID0gbmV3IFJlZ2lzdGVyKHRoaXMpO1xuICAgICAgICB0aGlzLmZvcm1zID0gbmV3IEZvcm1zKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3N0eWxlZ3VpZGUnOlxuICAgICAgICB0aGlzLnN0eWxlZ3VpZGUgPSBuZXcgU3R5bGVndWlkZSh0aGlzKTtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG5ldyBGb3Jtcyh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0ZWFzZXInOlxuICAgICAgICB0aGlzLnRlYXNlciA9IG5ldyBUZWFzZXIodGhpcyk7XG4gICAgICAgIHRoaXMuZm9ybXMgPSBuZXcgRm9ybXModGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZGFzaGJvYXJkJzpcbiAgICAgICAgbmV3IERhc2hib2FyZCh0aGlzKTtcbiAgICAgICAgbmV3IFN0aWNreUJhcih0cnVlKTtcbiAgICAgICAgbmV3IEFsZXJ0KHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3lvdXItcHJvamVjdC1hYm91dC1tZSc6XG4gICAgICAgIHRoaXMuZm9ybXMgPSBuZXcgRm9ybXModGhpcyk7XG4gICAgICAgIHRoaXMuc3RlcEZvcm0gPSBuZXcgU3RlcEZvcm0odGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAneW91ci1wcm9qZWN0LWJpYmxpb2dyYXBoeSc6XG4gICAgICAgIHRoaXMuZm9ybXMgPSBuZXcgRm9ybXModGhpcyk7XG4gICAgICAgIHRoaXMuc3RlcEZvcm0gPSBuZXcgU3RlcEZvcm0odGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAneW91ci1wcm9qZWN0LWhlYWx0aC1zYWZldHknOlxuICAgICAgICB0aGlzLmZvcm1zID0gbmV3IEZvcm1zKHRoaXMpO1xuICAgICAgICB0aGlzLnN0ZXBGb3JtID0gbmV3IFN0ZXBGb3JtKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3Byb2plY3QtcHJldmlldyc6XG4gICAgICAgIG5ldyBTdGlja3lCYXIodHJ1ZSk7XG4gICAgICAgIG5ldyBTY3JvbGxUbygpO1xuICAgICAgICB0aGlzLnByb2plY3RQcmV2aWV3ID0gbmV3IFByb2plY3RQcmV2aWV3KHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3lvdXItcHJvamVjdC1zdWJtaXQtcmV2aWV3JzpcbiAgICAgICAgbmV3IFNjcm9sbFRvKCk7XG4gICAgICAgIG5ldyBTdGlja3lCYXIodHJ1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAneW91ci1wcm9qZWN0LXN1bW1hcnknOlxuICAgICAgICB0aGlzLmZvcm1zID0gbmV3IEZvcm1zKHRoaXMpO1xuICAgICAgICB0aGlzLnN0ZXBTdW1tYXJ5Rm9ybSA9IG5ldyBTdGVwU3VtbWFyeUZvcm0odGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAneW91ci1wcm9qZWN0LXF1ZXN0aW9uJzpcbiAgICAgICAgdGhpcy5mb3JtcyA9IG5ldyBGb3Jtcyh0aGlzKTtcbiAgICAgICAgdGhpcy5zdGVwRm9ybSA9IG5ldyBTdGVwRm9ybSh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd5b3VyLXByb2plY3QtcmVzZWFyY2gnOlxuICAgICAgICB0aGlzLmZvcm1zID0gbmV3IEZvcm1zKHRoaXMpO1xuICAgICAgICB0aGlzLnN0ZXBGb3JtID0gbmV3IFN0ZXBGb3JtKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3lvdXItcHJvamVjdC1tZXRob2QnOlxuICAgICAgICB0aGlzLmZvcm1zID0gbmV3IEZvcm1zKHRoaXMpO1xuICAgICAgICB0aGlzLnN0ZXBGb3JtID0gbmV3IFN0ZXBGb3JtKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3lvdXItcHJvamVjdC1yZXN1bHRzJzpcbiAgICAgICAgdGhpcy5mb3JtcyA9IG5ldyBGb3Jtcyh0aGlzKTtcbiAgICAgICAgdGhpcy5zdGVwRm9ybSA9IG5ldyBTdGVwRm9ybSh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd5b3VyLXByb2plY3QtY29uY2x1c2lvbic6XG4gICAgICAgIHRoaXMuZm9ybXMgPSBuZXcgRm9ybXModGhpcyk7XG4gICAgICAgIHRoaXMuc3RlcEZvcm0gPSBuZXcgU3RlcEZvcm0odGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAneW91ci1hY2NvdW50JzpcbiAgICAgICAgbmV3IFNjcm9sbFRvKCk7XG4gICAgICAgIHRoaXMuZm9ybXMgPSBuZXcgRm9ybXModGhpcyk7XG4gICAgICAgIHRoaXMucHJvZmlsZSA9IG5ldyBQcm9maWxlKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3lvdXItYWNjb3VudC10ZWFtJzpcbiAgICAgICAgbmV3IFNjcm9sbFRvKCk7XG4gICAgICAgIHRoaXMuZm9ybXMgPSBuZXcgRm9ybXModGhpcyk7XG4gICAgICAgIHRoaXMudGVhbUZvcm0gPSBuZXcgVGVhbUZvcm0odGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAneW91ci1hY2NvdW50LWNvbnNlbnQnOlxuICAgICAgICBuZXcgU2Nyb2xsVG8oKTtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG5ldyBGb3Jtcyh0aGlzKTtcbiAgICAgICAgbmV3IENvbnNlbnRGb3JtKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3lvdXItcHJvamVjdC1zdWJtaXQtY2hlY2tsaXN0JzpcbiAgICAgICAgbmV3IENoZWNrTGlzdCh0aGlzKTtcbiAgICAgICAgbmV3IFN0aWNreUJhcih0cnVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwYXJlbnRhbC1jb25zZW50JzpcbiAgICAgICAgbmV3IFBhcmVudGFsQ29uc2VudCh0aGlzKTtcbiAgICAgICAgbmV3IFN0aWNreUJhcih0cnVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd5b3VyLXByb2plY3QtaW5zcGlyaW5nLWVkdWNhdG9yJzpcbiAgICAgICAgdGhpcy5mb3JtcyA9IG5ldyBGb3Jtcyh0aGlzKTtcbiAgICAgICAgbmV3IEluc3BpcmluZ0VkdWNhdG9yKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wYWdlLmluY2x1ZGVzKCdzdHVkZW50LXJlc291cmNlcy0nKSB8fCB0aGlzLnBhZ2UuaW5jbHVkZXMoJ2VkdWNhdG9yLXJlc291cmNlcy0nKSkge1xuICAgICAgbmV3IFJlc291cmNlTmF2KCk7XG4gICAgICBpZiAoIXRoaXMucHJlZmVyc1JlZHVjZWRNb3Rpb24pIHtcbiAgICAgICAgbmV3IEFuaW1hdGVTaGFwZXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhbmd1bGFyQm9vdHN0cmFwKCkge1xuICAgIGFuZ3VsYXIubW9kdWxlKCdnc2YnLCBbXG4gICAgICBnbHVlLmxpdGUubW9kdWxlLm5hbWUsXG4gICAgICBnbHVlLm5nLmNhcm91c2VsLm1vZHVsZS5uYW1lLFxuICAgICAgZ2x1ZS5uZy5jYXJvdXNlbC5icmVha3BvaW50cy5tb2R1bGUubmFtZSxcbiAgICAgIGdsdWUubmcucGFnaW5hdGlvbi5tb2R1bGUubmFtZSxcbiAgICAgIGdsdWUubmcuemlwcHkubW9kdWxlLm5hbWUsXG4gICAgICBnbHVlLm5nLnppcHB5LnNldC5tb2R1bGUubmFtZSxcbiAgICAgIGdsdWUubmcuemlwcHkudG9nZ2xlQWxsLm1vZHVsZS5uYW1lLFxuICAgICAgZ2x1ZS5uZy50YWJieS5tb2R1bGUubmFtZSxcbiAgICAgIGhlcmN1bGVzLnRlbXBsYXRlcy5tb2R1bGUubmFtZSxcbiAgICAgIGhlcmN1bGVzLmNvbXBvbmVudHMuaGVhZGVyLm1vZHVsZS5uYW1lLFxuICAgIF0pXG4gICAgLnZhbHVlKCdnbHVlWmlwcHlTbW9vdGhFeHBhbmRGeER1cmF0aW9uJywgMzAwKVxuICAgIC52YWx1ZSgnZ2x1ZU1vZGFsU2VydmljZVN0b3JlUm91dGVEaXNhYmxlJywgdHJ1ZSlcbiAgICAuY29uZmlnKFsnJHByb3ZpZGUnLCAoJHByb3ZpZGU6IGFueSkgPT4ge1xuICAgICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckYnJvd3NlcicsIFsnJGRlbGVnYXRlJywgKCRkZWxlZ2F0ZTogYW55KSA9PiB7XG4gICAgICAgICRkZWxlZ2F0ZS5vblVybENoYW5nZSA9ICgpID0+IHsgfTtcbiAgICAgICAgJGRlbGVnYXRlLnVybCA9ICgpID0+ICcnO1xuICAgICAgICByZXR1cm4gJGRlbGVnYXRlO1xuICAgICAgfV0pO1xuICAgIH1dKTtcblxuICAgIC8vIEFkZCB5b3VyIGNvbnRyb2xsZXJzIGhlcmUgaWU6XG4gICAgLy8gZ3NmLmNvbnRyb2xsZXIoJ015Q29udHJvbGxlclRpdGxlJywgbXlDb250cm9sbGVyRmlsZSk7XG5cbiAgICBnbHVlLmFwcC5ib290c3RyYXAoJ2dzZicpO1xuICB9XG59XG4iLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgRW50cnkgcG9pbnQgZm9yIEdTRiBhcHBsaWNhdGlvbi5cbiAqL1xuXG5pbXBvcnQgQ29yZSBmcm9tICcuL0NvcmUnO1xuXG5jb25zdCBjb3JlID0gbmV3IENvcmUoZG9jdW1lbnQuYm9keS5kYXRhc2V0WydwYWdlJ10pO1xuXG5jb3JlLmluaXQoKTtcbiIsImltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJztcbmltcG9ydCB7IG5vZGVMaXN0VG9BcnJheSB9IGZyb20gJy4uL3V0aWwnO1xuXG5kZWNsYXJlIHZhciBUd2Vlbk1heDogYW55O1xuZGVjbGFyZSB2YXIgUXVhZDogYW55O1xuXG5jb25zdCBERUZBVUxUX0FOSU1BVElPTl9USU1JTkcgPSAwLjU7XG5jb25zdCBMSU5LX1NFTEVDVE9SID0gJy5qcy1hY2NvcmRpb24taXRlbSc7XG5jb25zdCBQQU5FTF9TRUxFQ1RPUiA9ICcuanMtYWNjb3JkaW9uLXBhbmVsJztcblxuaW50ZXJmYWNlIElBY2NvcmRpb25JdGVtIHtcbiAgbGluazogSFRNTEFuY2hvckVsZW1lbnQ7XG4gIHRhcmdldElkOiBzdHJpbmc7XG4gIHRhcmdldD86IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgcGFuZWw/OiBIVE1MRWxlbWVudCB8IG51bGw7XG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBBY2NvcmRpb24ge1xuICBpdGVtczogQXJyYXk8SUFjY29yZGlvbkl0ZW0+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IGxpbmtFbGVtZW50cyA9XG4gICAgICAgIG5vZGVMaXN0VG9BcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKExJTktfU0VMRUNUT1IpKTtcblxuICAgIHRoaXMuaXRlbXMgPSBsaW5rRWxlbWVudHMubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCB0YXJnZXRJZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICBjb25zdCB0YXJnZXQgPSB0YXJnZXRJZCA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0SWQpIGFzIEhUTUxFbGVtZW50IDogbnVsbDtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluazogZWxlbWVudCBhcyBIVE1MQW5jaG9yRWxlbWVudCxcbiAgICAgICAgdGFyZ2V0SWQ6IHRhcmdldElkIHx8ICcnLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgcGFuZWw6IHRhcmdldCA/IHRhcmdldC5xdWVyeVNlbGVjdG9yKFBBTkVMX1NFTEVDVE9SKSBhcyBIVE1MRWxlbWVudCA6IG51bGwsXG4gICAgICAgIGlzRXhwYW5kZWQ6IGZhbHNlLFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLml0ZW1zKSB7XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuY2hlY2tIYXNoKCk7XG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gIH1cblxuICBiaW5kRXZlbnRzKCkge1xuICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaXRlbS5saW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmhhbmRsZUFjY29yZGlvbkNsaWNrKGl0ZW0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCB0aGlzLmNoZWNrSGFzaCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlQWNjb3JkaW9uQ2xpY2soaXRlbTogSUFjY29yZGlvbkl0ZW0pIHtcbiAgICBpZiAoaXRlbS5pc0V4cGFuZGVkKSB7XG4gICAgICB0aGlzLmNvbGxhcHNlSXRlbShpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5leHBhbmRJdGVtKGl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBjaGVja0hhc2goKSB7XG4gICAgY29uc3QgY3VycmVudEhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcblxuICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYgKGN1cnJlbnRIYXNoID09PSBpdGVtLnRhcmdldElkKSB7XG4gICAgICAgIC8vIE5lZWRzIGEgc2xpZ2h0IGRlbGF5IHRvIGdldCBhY2N1cmF0ZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgY3VycmVudFNjcm9sbCA9IHdpbmRvdy5zY3JvbGxZIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG4gICAgICAgICAgaWYgKGl0ZW0ucGFuZWwpIHtcbiAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCBjdXJyZW50U2Nyb2xsIC0gKGl0ZW0ucGFuZWwub2Zmc2V0SGVpZ2h0KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAxMCk7XG4gICAgICAgIHRoaXMuZXhwYW5kSXRlbShpdGVtKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbGxhcHNlSXRlbShpdGVtOiBJQWNjb3JkaW9uSXRlbSkge1xuICAgIGlmICghaXRlbS5pc0V4cGFuZGVkKSB7IHJldHVybjsgfVxuXG4gICAgaXRlbS5pc0V4cGFuZGVkID0gZmFsc2U7XG4gICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIHVuZGVmaW5lZCwgJyAnKTtcblxuICAgIFR3ZWVuTWF4LnRvKGl0ZW0udGFyZ2V0LCBERUZBVUxUX0FOSU1BVElPTl9USU1JTkcsIHtcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIGVhc2U6IFF1YWQuZWFzZU91dCxcbiAgICAgIG9uU3RhcnQ6ICgpID0+IHtcbiAgICAgICAgaXRlbS5saW5rLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuXG4gICAgICAgIGlmIChpdGVtLnRhcmdldCkge1xuICAgICAgICAgIGl0ZW0udGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgZXhwYW5kSXRlbShpdGVtOiBJQWNjb3JkaW9uSXRlbSkge1xuICAgIGlmIChpdGVtLmlzRXhwYW5kZWQgfHwgIWl0ZW0ucGFuZWwpIHsgcmV0dXJuOyB9XG5cbiAgICBpdGVtLmlzRXhwYW5kZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShudWxsLCB1bmRlZmluZWQsIGl0ZW0udGFyZ2V0SWQpO1xuXG4gICAgVHdlZW5NYXgudG8oaXRlbS50YXJnZXQsIERFRkFVTFRfQU5JTUFUSU9OX1RJTUlORywge1xuICAgICAgaGVpZ2h0OiBpdGVtLnBhbmVsLm9mZnNldEhlaWdodCxcbiAgICAgIGVhc2U6IFF1YWQuZWFzZU91dCxcbiAgICAgIG9uU3RhcnQ6ICgpID0+IHtcbiAgICAgICAgaXRlbS5saW5rLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG5cbiAgICAgICAgaWYgKGl0ZW0udGFyZ2V0KSB7XG4gICAgICAgICAgaXRlbS50YXJnZXQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICdjb3JlLWRlY29yYXRvcnMnO1xuaW1wb3J0IHsgQUNUSU9OX0NMQVNTRVMsIG5vZGVMaXN0VG9BcnJheSB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBVUFBFUl9BR0VfUkFOR0VfQ09VTlRSSUVTID0gbmV3IFNldChbJ0FUJywgJ0JFJywgJ0JHJywgJ0hSJywgJ0NZJywgJ0NaJywgJ0RLJywgJ0VFJyxcbidGSScsICdGUicsICdERScsICdHUicsICdIVScsICdJRScsICdJVCcsICdMVicsICdMVCcsICdMVScsICdNVCcsICdOTCcsICdQTCcsICdQVCcsXG4nUk8nLCAnU0snLCAnU0knLCAnRVMnLCAnU0UnLCAnVUsnLCAnR0InXSk7XG5jb25zdCBNSURfQUdFX1JBTkdFX0NPVU5UUklFUyA9IG5ldyBTZXQoWydJTCcsICdLUiddKTtcblxudHlwZSBBZ2VSYW5nZSA9ICcxMy0xNScgfCAnMTQtMTUnIHwgJzE2LTE4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWdlUmFuZ2VSZXN0cmljdGlvbnMge1xuICBjb3VudHJ5OiBIVE1MU2VsZWN0RWxlbWVudDtcbiAgcmVnaXN0ZXJUZXJtczogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gIGFnZVJhbmdlQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgYWdlUmFuZ2VzOiBBcnJheTxIVE1MRWxlbWVudD47XG4gIGFnZVJhbmdlTGFiZWxzOiBBcnJheTxIVE1MRWxlbWVudD47XG4gIGFnZVJhbmdlID0gJyc7XG5cbiAgLyoqXG4gICAqIEFnZVJhbmdlUmVzdHJpY3Rpb25zIGNvbnN0cnVjdG9yXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgY291bnRyeTogSFRNTFNlbGVjdEVsZW1lbnQsXG4gICAgYWdlUmFuZ2VDb250YWluZXI6IEhUTUxFbGVtZW50LFxuICAgIHJlZ2lzdGVyVGVybXM/OiBIVE1MRWxlbWVudCxcbiAgKSB7XG4gICAgdGhpcy5jb3VudHJ5ID0gY291bnRyeTtcbiAgICB0aGlzLnJlZ2lzdGVyVGVybXMgPSByZWdpc3RlclRlcm1zO1xuICAgIHRoaXMuYWdlUmFuZ2VDb250YWluZXIgPSBhZ2VSYW5nZUNvbnRhaW5lcjtcbiAgICB0aGlzLmFnZVJhbmdlcyA9IG5vZGVMaXN0VG9BcnJheSh0aGlzLmFnZVJhbmdlQ29udGFpbmVyXG4gICAgICAucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKSk7XG4gICAgdGhpcy5hZ2VSYW5nZUxhYmVscyA9IG5vZGVMaXN0VG9BcnJheSh0aGlzLmFnZVJhbmdlQ29udGFpbmVyXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCdsYWJlbCcpKTtcbiAgICB0aGlzLmNvdW50cnkuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVDb3VudHJ5Q2hhbmdlKTtcblxuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGluaXQoKSB7XG4gICAgdGhpcy5hZ2VSYW5nZXMuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlQWdlQ2hhbmdlKTtcbiAgICAgIGlmICgoaW5wdXQgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZCkge1xuICAgICAgICB0aGlzLmFnZVJhbmdlID0gKGlucHV0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc2V0QWdlVmlzaWJpbGl0eSgpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUNvdW50cnlDaGFuZ2UoKSB7XG4gICAgdGhpcy5yZXNldEFnZXMoKTtcbiAgICB0aGlzLnNldEFnZVZpc2liaWxpdHkoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVBZ2VDaGFuZ2UoZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKChldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZCkge1xuICAgICAgdGhpcy5hZ2VSYW5nZSA9IChldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIHJlc2V0QWdlcygpIHtcbiAgICB0aGlzLmFnZVJhbmdlcy5mb3JFYWNoKChyYW5nZSkgPT4ge1xuICAgICAgKHJhbmdlIGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIChyYW5nZSBhcyBIVE1MSW5wdXRFbGVtZW50KS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH0pO1xuICAgIHRoaXMuYWdlUmFuZ2VMYWJlbHMuZm9yRWFjaCgobGFiZWwpID0+IHtcbiAgICAgIGxhYmVsLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICAgIGxhYmVsLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuQUNUSVZFKTtcbiAgICB9KTtcblxuICAgIHRoaXMuYWdlUmFuZ2UgPSAnJztcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBzZXRBZ2VWaXNpYmlsaXR5KCkge1xuICAgIGNvbnN0IHVwcGVyQWdlUmFuZ2UgPSBVUFBFUl9BR0VfUkFOR0VfQ09VTlRSSUVTLmhhcyh0aGlzLmNvdW50cnkudmFsdWUpO1xuICAgIGNvbnN0IG1pZEFnZVJhbmdlID0gTUlEX0FHRV9SQU5HRV9DT1VOVFJJRVMuaGFzKHRoaXMuY291bnRyeS52YWx1ZSk7XG4gICAgaWYgKHVwcGVyQWdlUmFuZ2UpIHtcbiAgICAgIHRoaXMuc2V0QWdlSW5wdXRzSGlkZGVuKG5ldyBTZXQ8QWdlUmFuZ2U+KFsnMTMtMTUnLCAnMTQtMTUnXSkpO1xuICAgICAgdGhpcy5yZWdpc3RlclRlcm1zICYmIHRoaXMucmVnaXN0ZXJUZXJtcy5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLkhJRERFTik7XG4gICAgfSBlbHNlIGlmIChtaWRBZ2VSYW5nZSkge1xuICAgICAgdGhpcy5zZXRBZ2VJbnB1dHNIaWRkZW4obmV3IFNldDxBZ2VSYW5nZT4oWycxMy0xNSddKSk7XG4gICAgICB0aGlzLnJlZ2lzdGVyVGVybXMgJiYgdGhpcy5yZWdpc3RlclRlcm1zLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRBZ2VJbnB1dHNIaWRkZW4obmV3IFNldDxBZ2VSYW5nZT4oWycxNC0xNSddKSk7XG4gICAgICB0aGlzLnJlZ2lzdGVyVGVybXMgJiYgdGhpcy5yZWdpc3RlclRlcm1zLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgc2V0QWdlSW5wdXRzSGlkZGVuKHJhbmdlU3RyaW5nOiBTZXQ8QWdlUmFuZ2U+KSB7XG4gICAgdGhpcy5hZ2VSYW5nZXMubWFwKChyYW5nZSkgPT4ge1xuICAgICAgaWYgKHJhbmdlU3RyaW5nLmhhcygocmFuZ2UgYXMgYW55KS52YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgICAgfVxuICAgIH0pLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIChpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAodGhpcy5hZ2VSYW5nZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGBsYWJlbFtmb3I9XCIke2lucHV0LmlkfVwiXWApIGFzIEhUTUxMYWJlbEVsZW1lbnQpXG4gICAgICAgICAgLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IENvcmUgZnJvbSAnLi4vQ29yZSc7XG5pbXBvcnQgeyBheGlvc0luc3RhbmNlLCBub2RlTGlzdFRvQXJyYXkgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJztcblxuY29uc3QgU0VMRUNUT1JTID0ge1xuICBNT0RBTDogJy5qcy1tb2RhbC1jb250YWluZXInLFxuICBNT0RBTF9MSU5LOiAnLmpzLW1vZGFsLWxpbmsnLFxuICBNT0RBTF9DTE9TRTogJy5oLWMtbW9kYWxfX2Nsb3NlJyxcbiAgTU9EQUxfT1ZFUkxBWTogJy5nbHVlLWMtbW9kYWxfX292ZXJsYXknLFxuICBNT0RBTF9DT05URU5UOiAnLmdsdWUtYy1tb2RhbF9fY29udGVudCcsXG59O1xuXG5jb25zdCBsb2FkZXJIdG1sID0gYFxuPGRpdiByb2xlPVwicHJvZ3Jlc3NiYXJcIiBjbGFzcz1cIm1kYy1saW5lYXItcHJvZ3Jlc3MgbWRjLWxpbmVhci1wcm9ncmVzcy0taW5kZXRlcm1pbmF0ZVwiPlxuICA8ZGl2IGNsYXNzPVwibWRjLWxpbmVhci1wcm9ncmVzc19fYnVmZmVyaW5nLWRvdHNcIj48L2Rpdj5cbiAgPGRpdiBjbGFzcz1cIm1kYy1saW5lYXItcHJvZ3Jlc3NfX2J1ZmZlclwiPjwvZGl2PlxuICA8ZGl2IGNsYXNzPVwibWRjLWxpbmVhci1wcm9ncmVzc19fYmFyIG1kYy1saW5lYXItcHJvZ3Jlc3NfX3ByaW1hcnktYmFyXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJtZGMtbGluZWFyLXByb2dyZXNzX19iYXItaW5uZXJcIj48L3NwYW4+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwibWRjLWxpbmVhci1wcm9ncmVzc19fYmFyIG1kYy1saW5lYXItcHJvZ3Jlc3NfX3NlY29uZGFyeS1iYXJcIj5cbiAgICA8c3BhbiBjbGFzcz1cIm1kYy1saW5lYXItcHJvZ3Jlc3NfX2Jhci1pbm5lclwiPjwvc3Bhbj5cbiAgPC9kaXY+XG48L2Rpdj5cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFqYXhNb2RhbCB7XG4gIGNvcmU6IENvcmU7XG4gIG1vZGFsOiBIVE1MRWxlbWVudDtcbiAgbW9kYWxMaW5rczogQXJyYXk8SFRNTEVsZW1lbnQ+O1xuICBtb2RhbENsb3NlQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgbW9kYWxPdmVybGF5OiBIVE1MRWxlbWVudDtcblxuICAvKipcbiAgICogQWpheE1vZGFsIGNvbnN0cnVjdG9yXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoY29yZTogQ29yZSkge1xuICAgIHRoaXMuY29yZSA9IGNvcmU7XG4gICAgdGhpcy5tb2RhbExpbmtzID0gbm9kZUxpc3RUb0FycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1JTLk1PREFMX0xJTkspKTtcbiAgICB0aGlzLm1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuTU9EQUwpIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMubW9kYWxDbG9zZUJ1dHRvbiA9IHRoaXMubW9kYWwucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuTU9EQUxfQ0xPU0UpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgIHRoaXMubW9kYWxPdmVybGF5ID0gdGhpcy5tb2RhbC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5NT0RBTF9PVkVSTEFZKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLmF0dGFjaEV2ZW50cygpO1xuICB9XG5cbiAgYXR0YWNoRXZlbnRzKCk6IHZvaWQge1xuICAgIHRoaXMubW9kYWxMaW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG4gICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVNb2RhbExpbmtDbGljayk7XG4gICAgfSk7XG4gICAgaWYgKHRoaXMubW9kYWxDbG9zZUJ1dHRvbikge1xuICAgICAgdGhpcy5tb2RhbENsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbk1vZGFsQ2xvc2UpO1xuICAgIH1cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGU6IEV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBrZXlFdmVudCA9IGUgYXMgS2V5Ym9hcmRFdmVudDtcbiAgICAgIGlmIChrZXlFdmVudC5jb2RlID09PSAnRXNjYXBlJykge1xuICAgICAgICB0aGlzLm9uTW9kYWxDbG9zZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMubW9kYWxPdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgIGlmIChlLmN1cnJlbnRUYXJnZXQgIT09IGUudGFyZ2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMub25Nb2RhbENsb3NlKCk7XG4gICAgfSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlTW9kYWxMaW5rQ2xpY2soZTogTW91c2VFdmVudCkge1xuICAgIGlmIChlLmN1cnJlbnRUYXJnZXQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbW9kYWxDb250ZW50Q29udGFpbmVyID0gKHRoaXMubW9kYWxcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLk1PREFMX0NPTlRFTlQpIGFzIEhUTUxFbGVtZW50KTtcbiAgICBtb2RhbENvbnRlbnRDb250YWluZXIuaW5uZXJIVE1MID0gbG9hZGVySHRtbDtcbiAgICBjb25zdCB0YXJnZXQgPSAoZS5jdXJyZW50VGFyZ2V0IGFzIEhUTUxBbmNob3JFbGVtZW50KS5ocmVmO1xuICAgIGF4aW9zSW5zdGFuY2UuZ2V0KHRhcmdldCkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlSHRtbCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB3cmFwcGVyLmlubmVySFRNTCA9IHJlc3BvbnNlSHRtbDtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSB3cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJyNjb250ZW50Jyk7XG4gICAgICBpZiAoY29udGVudCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBtb2RhbENvbnRlbnRDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgICBtb2RhbENvbnRlbnRDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgfSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgb25Nb2RhbENsb3NlKCkge1xuICAgIGNvbnN0IG1vZGFsQ29udGVudENvbnRhaW5lciA9ICh0aGlzLm1vZGFsXG4gICAgICAucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuTU9EQUxfQ09OVEVOVCkgYXMgSFRNTEVsZW1lbnQpO1xuICAgIG1vZGFsQ29udGVudENvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgfVxuXG59XG4iLCJpbXBvcnQgQ29yZSBmcm9tICcuLi9Db3JlJztcbmltcG9ydCB7IG5vZGVMaXN0VG9BcnJheSwgd3JpdGVDb29raWUsIHJlYWRDb29raWUsIEFDVElPTl9DTEFTU0VTIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycyc7XG5cbmNvbnN0IFNFTEVDVE9SUyA9IHtcbiAgQUxFUlRTOiAnLmpzLWFsZXJ0JyxcbiAgRElTTUlTU19CVVRUT05TOiAnLmpzLWRpc21pc3MtYWxlcnQnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWxlcnQge1xuICBjb3JlOiBDb3JlO1xuICBhbGVydHM6IEFycmF5PEhUTUxFbGVtZW50PjtcbiAgZGlzbWlzc0J1dHRvbnM6IEFycmF5PEhUTUxFbGVtZW50PjtcbiAgY29va2llVmFsdWU6IFNldDxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBBbGVydCBjb25zdHJ1Y3RvclxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6IENvcmUpIHtcbiAgICB0aGlzLmNvcmUgPSBjb3JlO1xuICAgIHRoaXMuZGlzbWlzc0J1dHRvbnMgPSBub2RlTGlzdFRvQXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUlMuRElTTUlTU19CVVRUT05TKSk7XG4gICAgdGhpcy5hbGVydHMgPSBub2RlTGlzdFRvQXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUlMuQUxFUlRTKSk7XG4gICAgdGhpcy5jb29raWVWYWx1ZSA9IHJlYWRDb29raWUoJ2FsZXJ0LWRpc21pc3NlZCcpICE9PSBudWxsID9cbiAgICAgIG5ldyBTZXQoKHJlYWRDb29raWUoJ2FsZXJ0LWRpc21pc3NlZCcpIGFzIHN0cmluZykucmVwbGFjZSgvXCIvZywgJycpLnNwbGl0KCcsJykpIDogbmV3IFNldCgpO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zZXRBbGVydFZpc2liaWxpdHkoKTtcbiAgICB0aGlzLmRpc21pc3NCdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVEaXNtaXNzKTtcbiAgICB9KTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICB0ZWFyRG93bigpOiB2b2lkIHtcbiAgICB0aGlzLmRpc21pc3NCdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgYnV0dG9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVEaXNtaXNzKTtcbiAgICB9KTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBzZXRBbGVydFZpc2liaWxpdHkoKTogdm9pZCB7XG4gICAgdGhpcy5hbGVydHMuZm9yRWFjaCgoYWxlcnQpID0+IHtcbiAgICAgIGlmICh0aGlzLmNvb2tpZVZhbHVlLmhhcygoYWxlcnQuZGF0YXNldC5hbGVydCBhcyBzdHJpbmcpKSkge1xuICAgICAgICBhbGVydC5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkhJRERFTik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlRGlzbWlzcyhlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGFsZXJ0VHlwZSA9IChlLmN1cnJlbnRUYXJnZXQgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpLmRhdGFzZXQuYWxlcnQ7XG4gICAgaWYgKCFhbGVydFR5cGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5jb29raWVWYWx1ZSA9IHRoaXMuY29va2llVmFsdWUuYWRkKGFsZXJ0VHlwZS5yZXBsYWNlKC9cIi9nLCAnJykpO1xuICAgIHdyaXRlQ29va2llKCdhbGVydC1kaXNtaXNzZWQnLCBBcnJheS5mcm9tKHRoaXMuY29va2llVmFsdWUpLnRvU3RyaW5nKCkpO1xuICAgIHRoaXMuc2V0QWxlcnRWaXNpYmlsaXR5KCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJztcbmltcG9ydCB7IG5vZGVMaXN0VG9BcnJheSwgaXNJblZpZXdwb3J0IH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IFNFTEVDVE9SUyA9IHtcbiAgU0hBUEVTX0NPTlRBSU5FUjogJy5qcy1hbmltYXRlLXNoYXBlcycsXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIElBbmltYXRlZFNoYXBlIHtcbiAgZWw6IEhUTUxFbGVtZW50O1xuICB4RmFjdG9yOiBudW1iZXI7XG4gIHlGYWN0b3I6IG51bWJlcjtcbiAgZGlyZWN0aW9uOiBudW1iZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdGVTaGFwZXMge1xuICBzaGFwZXNDb250YWluZXI6IEhUTUxFbGVtZW50O1xuICBzaGFwZXNUb0FuaW1hdGU6IEFycmF5PElBbmltYXRlZFNoYXBlPjtcbiAgc2hhcGVQYXRoczogQXJyYXk8SFRNTEVsZW1lbnQ+O1xuXG4gIC8qKlxuICAgKiBBbmltYXRlU2hhcGVzIGNvbnN0cnVjdG9yXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zaGFwZXNDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TSEFQRVNfQ09OVEFJTkVSKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLnNoYXBlUGF0aHMgPSBub2RlTGlzdFRvQXJyYXkodGhpcy5zaGFwZXNDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgncGF0aCwgcG9seWdvbicpKTtcbiAgICB0aGlzLnNoYXBlc1RvQW5pbWF0ZSA9IHRoaXMuc2hhcGVQYXRocy5tYXAoKHBhdGgpID0+IHtcbiAgICAgIHBhdGguc3R5bGUub3BhY2l0eSA9ICcxJztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsOiBwYXRoLFxuICAgICAgICB4RmFjdG9yOiB0aGlzLmdldFJhbmRvbUludCgzMCwgNzApLFxuICAgICAgICB5RmFjdG9yOiB0aGlzLmdldFJhbmRvbUludCg1LCAxMjApLFxuICAgICAgICBkaXJlY3Rpb246IHBhdGguZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCA8PSAod2luZG93LmlubmVyV2lkdGggLyAyKSA/IC0xIDogMSxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdGhpcy5oYW5kbGVTY3JvbGwoKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBpbml0KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5zaGFwZXNDb250YWluZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5vblNjcm9sbCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgb25TY3JvbGwoKSB7XG4gICAgaWYgKHRoaXMuc2hhcGVzQ29udGFpbmVyICYmIGlzSW5WaWV3cG9ydCh0aGlzLnNoYXBlc0NvbnRhaW5lcikpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmhhbmRsZVNjcm9sbCk7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVNjcm9sbCgpIHtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5zaGFwZXNUb0FuaW1hdGUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB0aGlzLmFuaW1hdGVTaGFwZSh0aGlzLnNoYXBlc1RvQW5pbWF0ZVtpbmRleF0pO1xuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBhbmltYXRlU2hhcGUoc2hhcGU6IElBbmltYXRlZFNoYXBlKSB7XG4gICAgY29uc3Qgc2hhcGVUb3AgPSBzaGFwZS5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgc2hhcGUuZWwuc3R5bGUudHJhbnNmb3JtID1cbiAgICAgICAgYHRyYW5zbGF0ZTNkKCR7c2hhcGVUb3AgLyBzaGFwZS55RmFjdG9yfXB4LFxuICAgICAgICAke3NoYXBlLmRpcmVjdGlvbiAqIChzaGFwZVRvcCAvIHNoYXBlLnhGYWN0b3IpfXB4LCAwKVxuICAgICAgICByb3RhdGUoJHtzaGFwZS5kaXJlY3Rpb24gKiAoc2hhcGVUb3AgLyA5MCl9ZGVnKWA7XG4gIH1cblxuICBnZXRSYW5kb21JbnQobWluOiBudW1iZXIsIG1heDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG4gIH1cblxufVxuIiwiLy8gVHlwZXNjcmlwdCBkb2Vzbid0IHVuZGVyc3RhbmQgQXVkaW9Db250ZXh0IGNvcnJlY3RseSB3aGVuIGEgY2hpbGQgb2Ygd2luZG93LCBhbmQgU2FmYXJpIHRocm93c1xuLy8gYSBoYXJkIGVycm9yIGlmIHRyeWluZyB0byBhZGRyZXNzIEF1ZGlvQ29udGV4dCBvdXRzaWRlIG9mIHRoZSB3aW5kb3cgc2NvcGUuIFRoaXMgZml4ZXMgdGhlIHR5cGluZ1xuLy8gZm9yIGl0IGlmIHlvdSBhZGRyZXNzIGl0IHZpYSBXaW5kb3cgdHlwZWQgYXMgYW55LlxuLyogdHNsaW50OmRpc2FibGUgKi9cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgQXVkaW9Db250ZXh0OiBBdWRpb0NvbnRleHQ7XG4gICAgd2Via2l0QXVkaW9Db250ZXh0OiBBdWRpb0NvbnRleHQ7XG4gIH1cbn1cbi8qIHRzbGludDplbmFibGUgKi9cblxuZXhwb3J0IGNsYXNzIEF1ZGlvUGxheWVyIHtcbiAgYXVkaW9DdHg6IEF1ZGlvQ29udGV4dDtcbiAgZmlsZW5hbWU6IHN0cmluZztcbiAgaXNMb2FkZWQgPSBmYWxzZTtcbiAgaXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgc291cmNlPzogQXVkaW9CdWZmZXJTb3VyY2VOb2RlIHwgbnVsbDtcbiAgZ2Fpbk5vZGU/OiBHYWluTm9kZSB8IG51bGw7XG4gIG9uTG9hZGVkPzogRnVuY3Rpb247XG4gIHZvbHVtZSA9IDE7XG4gIGRhdGE/OiBBdWRpb0J1ZmZlciB8IG51bGw7XG5cbiAgY29uc3RydWN0b3IoZmlsZW5hbWU/OiBzdHJpbmcsIG9uTG9hZGVkPzogRnVuY3Rpb24pIHtcbiAgICBpZiAoIWZpbGVuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGZpbGUgbmFtZSB3YXMgcHJvdmlkZWQgdG8gYXVkaW8gcGxheWVyJyk7XG4gICAgfVxuXG4gICAgdGhpcy5maWxlbmFtZSA9IGZpbGVuYW1lO1xuXG4gICAgdGhpcy5hdWRpb0N0eCA9IG5ldyAod2luZG93LkF1ZGlvQ29udGV4dCBhcyBhbnkgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCBhcyBhbnkpKCk7XG5cbiAgICB0aGlzLm9uTG9hZGVkID0gb25Mb2FkZWQ7XG4gICAgdGhpcy5kYXRhID0gbnVsbDtcbiAgfVxuXG4gIGxvYWQoKSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHRoaXMuZmlsZW5hbWUpO1xuXG4gICAgcmV0dXJuIHdpbmRvdy5mZXRjaChyZXF1ZXN0LCB7XG4gICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJyxcbiAgICB9KVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgLnRoZW4oKGJ1ZmZlcikgPT4ge1xuICAgICAgICAvLyBEZWNvZGUgdGhlIGF1ZGlvIGRhdGEgZ290dGVuIGZyb20gdGhlIGZldGNoIGFuZCBjYWNoZSBpdCBzbyBpdCBjYW4gYmUgcmV1c2VkIHdpdGhvdXRcbiAgICAgICAgLy8gbmVlZGluZyBhIG5ldyByZXF1ZXN0LlxuICAgICAgICB0aGlzLmF1ZGlvQ3R4LmRlY29kZUF1ZGlvRGF0YShidWZmZXIsIChkYXRhKSA9PiB7XG4gICAgICAgICAgdGhpcy5kYXRhID0gZGF0YSB8fCBudWxsO1xuICAgICAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuY3JlYXRlTm9kZXMoKTtcblxuICAgICAgICAgIC8vIElmIGFuIGV4dGVybmFsIGNhbGxiYWNrIHdhcyBwcm92aWRlZCB0byBydW4gd2hlbiBhdWRpbyBmaW5pc2hlcyBsb2FkaW5nLCBydW4gaXQgbm93LlxuICAgICAgICAgIGlmICh0aGlzLm9uTG9hZGVkKSB7XG4gICAgICAgICAgICB0aGlzLm9uTG9hZGVkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAvLyBTb21ldGhpbmcgd2VudCB3cm9uZyBpZiB0aGlzIGlzIHJlYWNoZWRcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZXJyb3J9YCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBhdWRpbyBub2RlKHMpXG4gICAqL1xuICBjcmVhdGVOb2RlcygpIHtcbiAgICBpZiAoIXRoaXMuaXNMb2FkZWQgfHwgIXRoaXMuYXVkaW9DdHgpIHsgcmV0dXJuOyB9XG5cbiAgICB0aGlzLnNvdXJjZSA9IHRoaXMuYXVkaW9DdHguY3JlYXRlQnVmZmVyU291cmNlKCk7XG4gICAgdGhpcy5nYWluTm9kZSA9IHRoaXMuYXVkaW9DdHguY3JlYXRlR2FpbigpO1xuICAgIHRoaXMuc291cmNlLmNvbm5lY3QodGhpcy5nYWluTm9kZSk7XG4gICAgdGhpcy5zb3VyY2UuYnVmZmVyID0gdGhpcy5kYXRhIHx8IG51bGw7XG4gICAgdGhpcy5nYWluTm9kZS5jb25uZWN0KHRoaXMuYXVkaW9DdHguZGVzdGluYXRpb24pO1xuICB9XG5cbiAgc2V0Vm9sdW1lKHZvbHVtZTogbnVtYmVyKSB7XG4gICAgdGhpcy52b2x1bWUgPSB2b2x1bWU7XG5cbiAgICBpZiAoIXRoaXMuZ2Fpbk5vZGUpIHsgcmV0dXJuOyB9XG5cbiAgICB0aGlzLmdhaW5Ob2RlLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKFxuICAgICAgdGhpcy52b2x1bWUsXG4gICAgICB0aGlzLmF1ZGlvQ3R4LmN1cnJlbnRUaW1lLFxuICAgICAgMC4wMSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHBsYXlpbmcgdGhlIGF1ZGlvXG4gICAqL1xuICBzdGFydChzdGFydFRpbWUgPSAwKSB7XG4gICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQgfHwgIXRoaXMuaXNMb2FkZWQpIHsgcmV0dXJuOyB9XG5cbiAgICB0aGlzLmF1ZGlvQ3R4LnJlc3VtZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5jcmVhdGVOb2RlcygpO1xuICAgICAgdGhpcy5jb25uZWN0KCk7XG5cbiAgICAgIGlmICh0aGlzLnNvdXJjZSkge1xuICAgICAgICB0aGlzLnNvdXJjZS5zdGFydCgwLCBzdGFydFRpbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgcGxheWluZyB0aGUgYXVkaW9cbiAgICovXG4gIHN0b3AoKSB7XG4gICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gIH1cblxuICAvKipcbiAgICogQ29ubmVjdCB0aGUgYXVkaW8gc291cmNlIHRvIHRoZSBhdWRpbyBkZXN0aW5hdGlvblxuICAgKi9cbiAgY29ubmVjdCgpIHtcbiAgICBpZiAodGhpcy5pc0Nvbm5lY3RlZCB8fCAhdGhpcy5nYWluTm9kZSB8fCAhdGhpcy5pc0xvYWRlZCB8fCAhdGhpcy5hdWRpb0N0eCkgeyByZXR1cm47IH1cblxuICAgIHRoaXMuZ2Fpbk5vZGUuY29ubmVjdCh0aGlzLmF1ZGlvQ3R4LmRlc3RpbmF0aW9uKTtcblxuICAgIHRoaXMuaXNDb25uZWN0ZWQgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3QgdGhlIGF1ZGlvIGZyb20gdGhlIGF1ZGlvIGRlc3RpbmF0aW9uIHRvIHN0b3AgcGxheWluZ1xuICAgKi9cbiAgZGlzY29ubmVjdCgpIHtcbiAgICBpZiAoIXRoaXMuaXNDb25uZWN0ZWQgfHwgIXRoaXMuc291cmNlIHx8ICF0aGlzLmlzTG9hZGVkKSB7IHJldHVybjsgfVxuXG4gICAgdGhpcy5zb3VyY2UuZGlzY29ubmVjdCgpO1xuXG4gICAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICB9XG59XG4iLCJpbXBvcnQgQ29yZSBmcm9tICcuLi9Db3JlJztcbmltcG9ydCB7IG5vZGVMaXN0VG9BcnJheSwgQ0tFRElUT1JfU0VUVElOR1MgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJztcblxuY29uc3QgU0VMRUNUT1JTID0ge1xuICBURVhUQVJFQTogJy5qcy1yaWNoLXRleHRhcmVhJyxcbiAgSU5MSU5FX1RFWFRBUkVBOiAnLmpzLWlubGluZS10ZXh0YXJlYScsXG4gIEhFTFBfQ09OVEFJTkVSOiAnLmpzLWhlbHAtY29udGFpbmVyJyxcbn07XG5cbmNvbnN0IFJFTU9WRV9CVVRUT05TX01PQklMRSA9IFsnQWJvdXQnLCAnQW5jaG9yJywgJ0NvcHknLCAnQ3V0JyxcbiAgICAnRm9ybWF0JywgJ0lmcmFtZScsICdKdXN0aWZ5QmxvY2snLCAnSnVzdGlmeUNlbnRlcicsICdKdXN0aWZ5TGVmdCcsXG4gICAgJ0p1c3RpZnlSaWdodCcsICdOdW1iZXJlZExpc3QnLCAnUGFzdGUnLCAnU2NheXQnLCAnU3RyaWtlJywgJ1N1YnNjcmlwdCcsXG4gICAgJ1N1cGVyc2NyaXB0JywgJ1RhYmxlJywgJ1VuZGVybGluZScsICdVbmxpbmsnXTtcblxuY29uc3QgVEVYVF9BUkVBX0hFSUdIVF9UQUJMRVQgPSA0MDA7XG5jb25zdCBURVhUX0FSRUFfSEVJR0hUX01PQklMRSA9IDI0MjtcblxuZXhwb3J0IGNsYXNzIENLRWRpdCB7XG4gIGNvcmU6IENvcmU7XG4gIGVkaXRvcj86IENLRURJVE9SLmVkaXRvcjtcbiAgdGV4dGFyZWFzOiBBcnJheTxIVE1MRWxlbWVudD47XG4gIGlubGluZVRleHRhcmVhczogQXJyYXk8SFRNTEVsZW1lbnQ+O1xuICBoZWxwQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgb25DaGFuZ2VDYWxsQmFjazogKChlOiBDS0VESVRPUi5ldmVudEluZm8pID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xuICBpc01vYmlsZVNjcmVlblNpemU6IGJvb2xlYW47XG4gIGhlaWdodDogbnVtYmVyO1xuICAvKipcbiAgICogRm9ybXMgY29uc3RydWN0b3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBDb3JlLCBvbkNoYW5nZUNhbGxiYWNrPzogKGU6IENLRURJVE9SLmV2ZW50SW5mbykgPT4gdm9pZCkge1xuICAgIHRoaXMuY29yZSA9IGNvcmU7XG4gICAgdGhpcy5vbkNoYW5nZUNhbGxCYWNrID0gb25DaGFuZ2VDYWxsYmFjaztcbiAgICB0aGlzLnRleHRhcmVhcyA9IG5vZGVMaXN0VG9BcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SUy5URVhUQVJFQSkpO1xuICAgIHRoaXMuaW5saW5lVGV4dGFyZWFzID0gbm9kZUxpc3RUb0FycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1JTLklOTElORV9URVhUQVJFQSkpO1xuICAgIHRoaXMuaGVscENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkhFTFBfQ09OVEFJTkVSKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLmlzTW9iaWxlU2NyZWVuU2l6ZSA9IHdpbmRvdy5pbm5lcldpZHRoIDwgNjAwO1xuICAgIGlmICh0aGlzLmhlbHBDb250YWluZXIpIHtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5oZWxwQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCAtIDQ1O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlaWdodCA9IDE0ODtcbiAgICB9XG5cbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgLy8gV2FpdCBmb3IgbGF5b3V0IHRvIGNvbXBsZXRlIGZvciB6aXBweSBjb21wb25lbnRcbiAgICBpZiAodGhpcy5pc01vYmlsZVNjcmVlblNpemUpIHtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gVEVYVF9BUkVBX0hFSUdIVF9NT0JJTEU7XG4gICAgfSBlbHNlIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IDEwMjQpIHtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gVEVYVF9BUkVBX0hFSUdIVF9UQUJMRVQ7XG4gICAgfVxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZXRUZXh0YXJlYXMoKSwgNjAwKTtcbiAgICB0aGlzLnNldElubGluZVRleHRhcmVhcygpO1xuICAgIENLRURJVE9SLm9uKCdpbnN0YW5jZVJlYWR5JywgKCBldiApID0+IHtcbiAgICAgIHRoaXMuZWRpdG9yID0gZXYuZWRpdG9yO1xuICAgIH0pO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIHNldFRleHRhcmVhcygpIHtcbiAgICB0aGlzLnRleHRhcmVhcy5mb3JFYWNoKCh0ZXh0YXJlYSkgPT4ge1xuICAgICAgY29uc3QgdGV4dGFyZWFFZGl0b3IgPSAoQ0tFRElUT1IgYXMgYW55KS5yZXBsYWNlKHRleHRhcmVhIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQsIHtcbiAgICAgICAgLi4uQ0tFRElUT1JfU0VUVElOR1MsXG4gICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICAgIHdvcmRjb3VudDoge1xuICAgICAgICAgIHNob3dQYXJhZ3JhcGhzOiBmYWxzZSxcbiAgICAgICAgICBtYXhXb3JkQ291bnQ6IHRleHRhcmVhLmRhdGFzZXQud29yZGNvdW50IHx8IDI1MCxcbiAgICAgICAgICBoYXJkTGltaXQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBsaW5rU2hvd1RhcmdldFRhYjogZmFsc2UsXG4gICAgICAgIHJlbW92ZUJ1dHRvbnM6IHRoaXMuaXNNb2JpbGVTY3JlZW5TaXplID9cbiAgICAgICAgICAgIFJFTU9WRV9CVVRUT05TX01PQklMRS5qb2luKCcsJykgOiBDS0VESVRPUl9TRVRUSU5HUy5yZW1vdmVCdXR0b25zLFxuICAgICAgfSk7XG4gICAgICB0ZXh0YXJlYUVkaXRvci5vbignY2hhbmdlJywgdGhpcy5oYW5kbGVUZXh0YXJlYUNoYW5nZSk7XG4gICAgfSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgc2V0SW5saW5lVGV4dGFyZWFzKCkge1xuICAgIHRoaXMuaW5saW5lVGV4dGFyZWFzLmZvckVhY2goKHRleHRhcmVhKSA9PiB7XG4gICAgICBjb25zdCB0ZXh0YXJlYUVkaXRvciA9IChDS0VESVRPUiBhcyBhbnkpLmlubGluZShcbiAgICAgICAgdGV4dGFyZWEsXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5DS0VESVRPUl9TRVRUSU5HUyxcbiAgICAgICAgICByZW1vdmVQbHVnaW5zOiAnaW1hZ2UsdGFibGUsdGFibGV0b29sc3Rvb2xiYXIsdGFibGV0b29scyxnb29nbGVkb2NzLCdcbiAgICAgICAgICAgICAgKyAndGFibGVzZWxlY3Rpb24scGlja2VyLGlmcmFtZSxkb2N1bWVudCxqdXN0aWZ5LGxpc3QsZm9ybWF0LGxpbmsnLFxuICAgICAgICAgIHdvcmRjb3VudDoge1xuICAgICAgICAgICAgc2hvd1BhcmFncmFwaHM6IGZhbHNlLFxuICAgICAgICAgICAgbWF4V29yZENvdW50OiB0ZXh0YXJlYS5kYXRhc2V0LndvcmRjb3VudCB8fCAxMDAsXG4gICAgICAgICAgICBoYXJkTGltaXQ6IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgICAgdGV4dGFyZWFFZGl0b3Iub24oJ2NoYW5nZScsIHRoaXMuaGFuZGxlVGV4dGFyZWFDaGFuZ2UpO1xuICAgIH0pO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVRleHRhcmVhQ2hhbmdlKGU6IENLRURJVE9SLmV2ZW50SW5mbykge1xuICAgIHRoaXMub25DaGFuZ2VDYWxsQmFjayAmJiB0aGlzLm9uQ2hhbmdlQ2FsbEJhY2soZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJztcbmltcG9ydCAqIGFzIEhhbW1lciBmcm9tICdoYW1tZXJqcyc7XG5pbXBvcnQgeyBub2RlTGlzdFRvQXJyYXksIE1FRElBX1FVRVJJRVMsIEFDVElPTl9DTEFTU0VTIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IFNFTEVDVE9SUyA9IHtcbiAgQ0FSRF9TVEFDSzogJy5qcy1jYXJkLXN0YWNrLWNhcm91c2VsJyxcbiAgQ0FSRDogJy5qcy1jYXJkLXN0YWNrLWNhcmQnLFxuICBQUkVWSU9VUzogJy5qcy1jYXJkLXN0YWNrLXBhZ2luYXRpb24tcHJldmlvdXMnLFxuICBORVhUOiAnLmpzLWNhcmQtc3RhY2stcGFnaW5hdGlvbi1uZXh0JyxcbiAgUEFHSU5BVElPTl9DT05UQUlORVI6ICcuanMtY2FyZC1zdGFjay1wYWdpbmF0aW9uJyxcbiAgQ0FSRFNfVUw6ICcuanMtY2FyZC1zdGFjay1saXN0Jyxcbn07XG5cbmNvbnN0IE9GRlNDUkVFTl9BTU9VTlQgPSAnLTIyMCUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkU3RhY2sge1xuICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgY2FyZHM6IEFycmF5PEhUTUxFbGVtZW50PjtcbiAgY3VycmVudEluZGV4ID0gMDtcbiAgbmV4dDogSFRNTEVsZW1lbnQ7XG4gIHByZXY6IEhUTUxFbGVtZW50O1xuICBwYWdpbmF0aW9uQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgcGFnaW5hdGlvbkxpOiBBcnJheTxIVE1MRWxlbWVudD47XG4gIG1lZFNjcmVlbjogYm9vbGVhbjtcbiAgaGFtbWVyOiBIYW1tZXJNYW5hZ2VyIHwgbnVsbDtcblxuICAvKipcbiAgICogSGVhZGVyIGNvbnN0cnVjdG9yXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoY29udGFpbmVyPzogSFRNTEVsZW1lbnQpIHtcbiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5oYW1tZXIgPSBudWxsO1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkNBUkRfU1RBQ0spIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMuY2FyZHMgPSBub2RlTGlzdFRvQXJyYXkodGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUlMuQ0FSRCkpO1xuICAgIHRoaXMubmV4dCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLk5FWFQpIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMucHJldiA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlBSRVZJT1VTKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLnBhZ2luYXRpb25Db250YWluZXIgPVxuICAgICAgICB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5QQUdJTkFUSU9OX0NPTlRBSU5FUikgYXMgSFRNTEVsZW1lbnQ7XG4gICAgdGhpcy5wYWdpbmF0aW9uTGkgPSBbXTtcbiAgICB0aGlzLm1lZFNjcmVlbiA9IHdpbmRvdy5tYXRjaE1lZGlhKE1FRElBX1FVRVJJRVMuU01BTEwpLm1hdGNoZXM7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogS2lja3Mgb2ZmIHRoZSBDYXJkU3RhY2sgaWYgc21hbGwgc2NyZWVuXG4gICAqIFNldHMgZXZlbnQgbGlzdGVuZXJzXG4gICAqIEByZXR1cm4gdm9pZFxuICAgKi9cbiAgQGF1dG9iaW5kXG4gIGluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLm1lZFNjcmVlbikge1xuICAgICAgdGhpcy5zdGFydHVwKCk7XG4gICAgICB0aGlzLm5leHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmdvVG9OZXh0KTtcbiAgICAgIHRoaXMucHJldi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuZ29Ub1ByZXZpb3VzKTtcbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHdpbmRvdyByZXNpemUgZXZlbnQgYW5kIGtpY2tzIG9mZiB0byBpbml0aWFsaXplclxuICAgKiBAcmV0dXJuIHZvaWRcbiAgICovXG4gIEBhdXRvYmluZFxuICBoYW5kbGVSZXNpemUoKTogdm9pZCB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnNldENhcmRTdGFja0J5U2NyZWVuU2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB1cCB0aGUgQ2FyZFN0YWNrIFVJLCBhcnJvd3MsIGFuZCBzd2lwZSBoYW5kbGVyXG4gICAqIEByZXR1cm4gdm9pZFxuICAgKi9cbiAgQGF1dG9iaW5kXG4gIHN0YXJ0dXAoKTogdm9pZCB7XG4gICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5BQ1RJVkUpO1xuICAgIHRoaXMubmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuZ29Ub05leHQpO1xuICAgIHRoaXMucHJldi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuZ29Ub1ByZXZpb3VzKTtcbiAgICB0aGlzLnNldFVwQ2FyZHMoKTtcbiAgICB0aGlzLnNldFZpc2libGVDYXJkcygpO1xuICAgIHRoaXMuc2V0VmlzaWJsZUFycm93cygpO1xuICAgIHRoaXMuc2V0VXBUYWJMaXN0KCk7XG4gICAgdGhpcy5oYW1tZXIgPSBuZXcgSGFtbWVyLk1hbmFnZXIoXG4gICAgICB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5DQVJEU19VTCkgYXMgSFRNTEVsZW1lbnQpO1xuICAgIHRoaXMuaGFtbWVyLmFkZChuZXcgSGFtbWVyLlN3aXBlKHtcbiAgICAgIGRpcmVjdGlvbjogSGFtbWVyLkRJUkVDVElPTl9IT1JJWk9OVEFMLFxuICAgIH0pKTtcbiAgICB0aGlzLmhhbW1lci5vbignc3dpcGUnLCB0aGlzLmhhbmRsZVN3aXBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUZWFycyBkb3duIHRoZSBDYXJkU3RhY2sgVUksIHJlbW92ZXMgbGlzdGVuZXJzLCBkZXN0cm95cyBzd2lwZSBoYW5kbGVyXG4gICAqIEByZXR1cm4gdm9pZFxuICAgKi9cbiAgQGF1dG9iaW5kXG4gIHRlYXJEb3duKCk6IHZvaWQge1xuICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLkFDVElWRSk7XG4gICAgdGhpcy5jYXJkcy5mb3JFYWNoKChjYXJkLCBpKSA9PiB7XG4gICAgICBjYXJkLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgIGNhcmQucmVtb3ZlQXR0cmlidXRlKCd0YWItaW5kZXgnKTtcbiAgICAgIGNhcmQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICAgIH0pO1xuICAgIHRoaXMucGFnaW5hdGlvbkxpID0gW107XG4gICAgdGhpcy5wYWdpbmF0aW9uQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMubmV4dC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuZ29Ub05leHQpO1xuICAgIHRoaXMucHJldi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuZ29Ub1ByZXZpb3VzKTtcbiAgICBpZiAodGhpcy5oYW1tZXIpIHtcbiAgICAgIHRoaXMuaGFtbWVyLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyB3aW5kb3cgcmVzaXplIHRvIGJ1aWxkIG9yIHRlYXIgZG93biB0aGUgQ2FyZFN0YWNrXG4gICAqIEByZXR1cm4gdm9pZFxuICAgKi9cbiAgQGF1dG9iaW5kXG4gIHNldENhcmRTdGFja0J5U2NyZWVuU2l6ZSgpOiB2b2lkIHtcbiAgICB0aGlzLm1lZFNjcmVlbiA9IHdpbmRvdy5tYXRjaE1lZGlhKE1FRElBX1FVRVJJRVMuU01BTEwpLm1hdGNoZXM7XG4gICAgaWYgKHRoaXMubWVkU2NyZWVuICYmIHRoaXMuaXNBY3RpdmUpIHtcbiAgICAgIHRoaXMudGVhckRvd24oKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLm1lZFNjcmVlbiAmJiAhdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgdGhpcy5zdGFydHVwKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIHJhbmRvbSBudW1iZXIgZnJvbSAtNCB0byA0LiBVc2VkIGluIGxheW91dC5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2VuZXJhdGVSYW5kb21Ta2V3KCk6IG51bWJlciB7XG4gICAgbGV0IG51bSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQpICsgMTsgLy8gdGhpcyB3aWxsIGdldCBhIG51bWJlciBiZXR3ZWVuIDEgYW5kIDRcbiAgICByZXR1cm4gbnVtICo9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpID09PSAxID8gMSA6IC0xOyAvLyBzZXRzIHBvcyBvciBuZWdcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHVwIHRoZSB0aGUgY2FyZHMgdmlzdWFsIGxheW91dFxuICAgKiBAcmV0dXJuIHZvaWRcbiAgICovXG4gIEBhdXRvYmluZFxuICBzZXRVcENhcmRzKCk6IHZvaWQge1xuICAgIHRoaXMuY2FyZHMuZm9yRWFjaCgoY2FyZCwgaSkgPT4ge1xuICAgICAgY2FyZC5zdHlsZS56SW5kZXggPSBgJHt0aGlzLmNhcmRzLmxlbmd0aCAtIGl9YDtcbiAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgIGNhcmQuc3R5bGUudHJhbnNmb3JtID0gJ3JvdGF0ZSgwKWRlZyc7XG4gICAgICAgIGNhcmQuc2V0QXR0cmlidXRlKCd0YWItaW5kZXgnLCAnLTEnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcmQuc3R5bGUudHJhbnNmb3JtID1cbiAgICAgICAgICAgIGByb3RhdGUoJHt0aGlzLmdlbmVyYXRlUmFuZG9tU2tldygpfWRlZylcbiAgICAgICAgICAgIHRyYW5zbGF0ZTNkKCR7dGhpcy5nZW5lcmF0ZVJhbmRvbVNrZXcoKX1weCwgJHt0aGlzLmdlbmVyYXRlUmFuZG9tU2tldygpfXB4LCAwKWA7XG4gICAgICAgIGNhcmQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB1cCB0aGUgZG90cyBhdCB0aGUgYm90dG9tIG9mIHRoZSBjYXJvdXNlbFxuICAgKiBAcmV0dXJuIHZvaWRcbiAgICovXG4gIEBhdXRvYmluZFxuICBzZXRVcFRhYkxpc3QoKTogdm9pZCB7XG4gICAgY29uc3QgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgIHVsLnNldEF0dHJpYnV0ZSgncm9sZScsICd0YWJsaXN0Jyk7XG4gICAgdWwuY2xhc3NMaXN0LmFkZCgnZ2x1ZS1wYWdpbmF0aW9uLXBhZ2UtbGlzdCcsICdnbHVlLW8tcGFnaW5hdGlvbl9fcGFnZS1saXN0Jyk7XG4gICAgdGhpcy5jYXJkcy5mb3JFYWNoKChfY2FyZCwgaSkgPT4ge1xuICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgbGkuc2V0QXR0cmlidXRlKCdkYXRhLXBhZ2UnLCBgJHtpfWApO1xuICAgICAgbGkuY2xhc3NMaXN0LmFkZCgnZ2x1ZS1vLXBhZ2luYXRpb25fX2J1dHRvbi1jb250YWluZXInLFxuICAgICAgICAgICdnbHVlLW8tcGFnaW5hdGlvbl9fcGFnZS1saXN0LWJ1dHRvbi1jb250YWluZXInKTtcbiAgICAgIHRoaXMucGFnaW5hdGlvbkxpLnB1c2gobGkpO1xuICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidXR0b24uc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgncm9sZScsICd0YWInKTtcbiAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAnZmFsc2UnKTtcbiAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGFnZScsIGAke2l9YCk7XG4gICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnZ2x1ZS1vLXBhZ2luYXRpb25fX2J1dHRvbicsXG4gICAgICAgICAgJ2dsdWUtby1wYWdpbmF0aW9uX19wYWdlLWxpc3QtYnV0dG9uJyk7XG5cbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlVGFiQ2xpY2spO1xuICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgbGkuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xuICAgICAgfVxuICAgICAgbGkuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICAgIHVsLmFwcGVuZENoaWxkKGxpKTtcbiAgICB9KTtcbiAgICB0aGlzLnBhZ2luYXRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQodWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdXAgd2hpY2ggY2FyZHMgc2hvdWxkIGJlIHZpc2libGUgYmFzZWQgb24gdGhlIGN1cnJlbnRJbmRleFxuICAgKiBAcmV0dXJuIHZvaWRcbiAgICovXG4gIEBhdXRvYmluZFxuICBzZXRWaXNpYmxlQ2FyZHMoKSB7XG4gICAgLy8gc2V0IHRoZSBjdXJyZW50ICsgMiBhbmQgdGhlIHByZXYgYXMgdmlzaWJsZVxuICAgIHRoaXMuY2FyZHMuZm9yRWFjaCgoY2FyZCwgaSkgPT4ge1xuICAgICAgY2FyZC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgICAgaWYgKGkgPj0gdGhpcy5jdXJyZW50SW5kZXggLSAxICYmIGkgPD0gdGhpcy5jdXJyZW50SW5kZXggKyAyKSB7XG4gICAgICAgIGNhcmQuc3R5bGUub3BhY2l0eSA9ICcxJztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IG9yIGhpZGUgY2Fyb3VzZWwgYXJyb3dzIHdoZW4gbmVlZGVkXG4gICAqIEByZXR1cm4gdm9pZFxuICAgKi9cbiAgQGF1dG9iaW5kXG4gIHNldFZpc2libGVBcnJvd3MoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY3VycmVudEluZGV4ID09PSAwKSB7XG4gICAgICB0aGlzLnByZXYuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgdGhpcy5wcmV2LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50SW5kZXggPT09IHRoaXMuY2FyZHMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5uZXh0LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgIHRoaXMubmV4dC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcmV2LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICB0aGlzLm5leHQuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgIHRoaXMucHJldi5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICB0aGlzLm5leHQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBbmltYXRlcyBvdXQgYWxsIG90aGVyIGNhcmRzIGJlc2lkZXMgdGhlIDMgdmlzaWJsZVxuICAgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGluZGV4ZXMgLSB0aGUgaW5kZXhlcyBvZiB0aGUgY2FyZHMgdG8gYW5pbWF0ZVxuICAgKiBAcmV0dXJuIHZvaWRcbiAgICovXG4gIEBhdXRvYmluZFxuICBhbmltYXRlT3V0KC4uLmluZGV4ZXM6IEFycmF5PG51bWJlcj4pOiB2b2lkIHtcbiAgICBpbmRleGVzLmZvckVhY2goKGluZGV4KSA9PiB7XG4gICAgICB0aGlzLmNhcmRzW2luZGV4XS5zdHlsZS50cmFuc2Zvcm0gPSBgcm90YXRlKCR7dGhpcy5nZW5lcmF0ZVJhbmRvbVNrZXcoKX1kZWcpXG4gICAgICAgICAgdHJhbnNsYXRlWCgke09GRlNDUkVFTl9BTU9VTlR9KSByb3RhdGUoJHt0aGlzLmdlbmVyYXRlUmFuZG9tU2tldygpfWRlZylgO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuaW1hdGVzIGluIHRoZSAzIHZpc2libGUgY2FyZHNcbiAgICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBpbmRleGVzIC0gdGhlIGluZGV4ZXMgb2YgdGhlIGNhcmRzIHRvIGFuaW1hdGVcbiAgICogQHJldHVybiB2b2lkXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgYW5pbWF0ZUluKC4uLmluZGV4ZXM6IEFycmF5PG51bWJlcj4pOiB2b2lkIHtcbiAgICBpbmRleGVzLmZvckVhY2goKGluZGV4KSA9PiB7XG4gICAgICB0aGlzLmNhcmRzW2luZGV4XS5zdHlsZS50cmFuc2Zvcm0gPSBgcm90YXRlKCR7dGhpcy5nZW5lcmF0ZVJhbmRvbVNrZXcoKX1kZWcpXG4gICAgICAgICAgdHJhbnNsYXRlWCgwKSByb3RhdGUoJHt0aGlzLmdlbmVyYXRlUmFuZG9tU2tldygpfWRlZylgO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgY2Fyb3VzZWwgZG90IGNsaWNrc1xuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGUgLSBDbGljayBldmVudFxuICAgKiBAcmV0dXJuIHZvaWRcbiAgICovXG4gIEBhdXRvYmluZFxuICBoYW5kbGVUYWJDbGljayhlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHRhcmdldCA9IChlLnRhcmdldCBhcyBIVE1MRWxlbWVudCk7XG4gICAgY29uc3QgaW5kZXggPSBwYXJzZUludCh0YXJnZXQuZGF0YXNldC5wYWdlIHx8ICcwJywgMTApO1xuICAgIHRoaXMudXBkYXRlUGFnaW5hdGlvbihpbmRleCk7XG4gICAgdGhpcy5nb1RvQ2FyZChpbmRleCk7XG4gICAgdGhpcy5jdXJyZW50SW5kZXggPSBpbmRleDtcbiAgICB0aGlzLnNldFZpc2libGVDYXJkcygpO1xuICAgIHRoaXMuc2V0VmlzaWJsZUFycm93cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgZGlzcGxheSBmb3IgY2Fyb3VzZWwgZG90c1xuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSB3aGljaCBpbmRleCBvZiBjYXJvdXNlbCBkb3QgdG8gZGlzcGxheVxuICAgKiBAcmV0dXJuIHZvaWRcbiAgICovXG4gIEBhdXRvYmluZFxuICB1cGRhdGVQYWdpbmF0aW9uKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnBhZ2luYXRpb25MaS5mb3JFYWNoKChsaSkgPT4ge1xuICAgICAgaWYgKHBhcnNlSW50KGxpLmRhdGFzZXQucGFnZSB8fCAnMCcsIDEwKSA9PT0gaW5kZXgpIHtcbiAgICAgICAgbGkuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgIChsaS5xdWVyeVNlbGVjdG9yKCdidXR0b24nKSBhcyBIVE1MRWxlbWVudCkuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgJ3RydWUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICAobGkucXVlcnlTZWxlY3RvcignYnV0dG9uJykgYXMgSFRNTEVsZW1lbnQpLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICdmYWxzZScpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgd2hpY2ggY2FyZCBzaG91bGQgYmUgdGhlIGZvY3VzLiBLaWNrcyBvZmYgYW5pbWF0aW9uc1xuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSB3aGljaCBpbmRleCBvZiBjYXJvdXNlbCBjYXJkIHRvIGRpc3BsYXlcbiAgICogQHJldHVybiB2b2lkXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgZ29Ub0NhcmQoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuY2FyZHMuZm9yRWFjaCgoY2FyZCwgaSkgPT4ge1xuICAgICAgY2FyZC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgIGNhcmQucmVtb3ZlQXR0cmlidXRlKCd0YWItaW5kZXgnKTtcbiAgICB9KTtcblxuICAgIGlmIChpbmRleCA+IHRoaXMuY3VycmVudEluZGV4KSB7XG4gICAgICB0aGlzLmFuaW1hdGVPdXQoLi4uQXJyYXkuZnJvbShbLi4uQXJyYXkoaW5kZXgpXS5rZXlzKCkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGlmZmVyZW5jZSA9IHRoaXMuY3VycmVudEluZGV4IC0gaW5kZXg7XG4gICAgICBpZiAoZGlmZmVyZW5jZSA9PT0gMSkge1xuICAgICAgICBjb25zdCBhbW91bnQgPSB0aGlzLmNhcmRzLmxlbmd0aCAtIGluZGV4IDwgMyA/IHRoaXMuY2FyZHMubGVuZ3RoIC0gaW5kZXggOiAzO1xuICAgICAgICB0aGlzLmFuaW1hdGVJbiguLi5BcnJheS5mcm9tKG5ldyBBcnJheShhbW91bnQpLCAoeCwgaSkgPT4gaSArIGluZGV4KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFuaW1hdGVJbiguLi5BcnJheS5mcm9tKG5ldyBBcnJheShkaWZmZXJlbmNlKSwgKHgsIGkpID0+IGkgKyBpbmRleCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY2FyZHNbaW5kZXhdLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcbiAgICB0aGlzLmNhcmRzW2luZGV4XS5zZXRBdHRyaWJ1dGUoJ3RhYi1pbmRleCcsICctMScpO1xuICAgIHRoaXMuY2FyZHNbaW5kZXhdLnN0eWxlLnRyYW5zZm9ybSA9ICdyb3RhdGUoMCknO1xuXG4gIH1cblxuICAvKipcbiAgICogSW5jcmVtZW50IHdoaWNoIGNhcmQgc2hvdWxkIGJlIHZpc2libGVcbiAgICogQHJldHVybiB2b2lkXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgZ29Ub05leHQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY3VycmVudEluZGV4ICsgMSA+PSB0aGlzLmNhcmRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZ29Ub0NhcmQodGhpcy5jdXJyZW50SW5kZXggKyAxKTtcbiAgICB0aGlzLnVwZGF0ZVBhZ2luYXRpb24odGhpcy5jdXJyZW50SW5kZXggKyAxKTtcbiAgICB0aGlzLmN1cnJlbnRJbmRleCArPSAxO1xuICAgIHRoaXMuc2V0VmlzaWJsZUNhcmRzKCk7XG4gICAgdGhpcy5zZXRWaXNpYmxlQXJyb3dzKCk7XG4gIH1cblxuICAvKipcbiAgICogRGVjcmVtZW50IHdoaWNoIGNhcmQgc2hvdWxkIGJlIHZpc2libGVcbiAgICogQHJldHVybiB2b2lkXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgZ29Ub1ByZXZpb3VzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmN1cnJlbnRJbmRleCA8PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5nb1RvQ2FyZCh0aGlzLmN1cnJlbnRJbmRleCAtIDEpO1xuICAgIHRoaXMudXBkYXRlUGFnaW5hdGlvbih0aGlzLmN1cnJlbnRJbmRleCAtIDEpO1xuXG4gICAgdGhpcy5jdXJyZW50SW5kZXggLT0gMTtcbiAgICB0aGlzLnNldFZpc2libGVDYXJkcygpO1xuICAgIHRoaXMuc2V0VmlzaWJsZUFycm93cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgc3dpcGUgZXZlbnQgZnJvbSBIYW1tZXJcbiAgICogQHBhcmFtIHtIYW1tZXJJbnB1dH0gZSAtIEhhbW1lciBldmVudCAoc3dpcGUpXG4gICAqIEByZXR1cm4gdm9pZFxuICAgKi9cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVN3aXBlKGU6IEhhbW1lcklucHV0KTogdm9pZCB7XG4gICAgY29uc3QgZGlyZWN0aW9uID0gZS5vZmZzZXREaXJlY3Rpb247XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gNCkge1xuICAgICAgdGhpcy5nb1RvUHJldmlvdXMoKTtcbiAgICB9XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gMikge1xuICAgICAgdGhpcy5nb1RvTmV4dCgpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICdjb3JlLWRlY29yYXRvcnMnO1xuaW1wb3J0IHsgQUNUSU9OX0NMQVNTRVMsIG5vZGVMaXN0VG9BcnJheSB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBQQVJFTlRfU0VMRUNUT1IgPSAnLmpzLWNhdGVnb3J5LWZpbHRlcic7XG5jb25zdCBJVEVNX1NFTEVDVE9SID0gJy5qcy1maWx0ZXItaXRlbSc7XG5jb25zdCBCVVRUT05fU0VMRUNUT1IgPSAnLmpzLWZpbHRlci1idXR0b24nO1xuXG5pbnRlcmZhY2UgSUZpbHRlcmFibGVJdGVtIHtcbiAgY2F0ZWdvcmllczogQXJyYXk8c3RyaW5nPjtcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG59XG5cbmludGVyZmFjZSBJRmlsdGVyQnV0dG9uIHtcbiAgY2F0ZWdvcnk6IHN0cmluZztcbiAgZWxlbWVudDogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gIGlzU2VsZWN0ZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBDYXRlZ29yeUZpbHRlciB7XG4gIHBhcmVudDogSFRNTEVsZW1lbnQ7XG4gIGl0ZW1zOiBBcnJheTxJRmlsdGVyYWJsZUl0ZW0+O1xuICBidXR0b25zOiBBcnJheTxJRmlsdGVyQnV0dG9uPjtcbiAgYWN0aXZlQ2F0ZWdvcmllczogU2V0PHN0cmluZz47XG4gIGFsbG93TXVsdGlwbGVDYXRlZ29yaWVzOiBib29sZWFuO1xuICBvcHRpb25hbENhbGxiYWNrPzogRnVuY3Rpb247XG5cbiAgY29uc3RydWN0b3IoY2FsbGJhY2s/OiBGdW5jdGlvbikge1xuICAgIHRoaXMucGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihQQVJFTlRfU0VMRUNUT1IpIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgdGhpcy5hbGxvd011bHRpcGxlQ2F0ZWdvcmllcyA9XG4gICAgICAgIHRoaXMucGFyZW50LmRhdGFzZXQuYWxsb3dNdWx0aXBsZUNhdGVnb3JpZXMgIT09IHVuZGVmaW5lZCA/IHRydWUgOiBmYWxzZTtcblxuICAgIGNvbnN0IGl0ZW1FbGVtZW50cyA9XG4gICAgICAgIG5vZGVMaXN0VG9BcnJheSh0aGlzLnBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKElURU1fU0VMRUNUT1IpKSBhcyBBcnJheTxIVE1MRWxlbWVudD47XG5cbiAgICB0aGlzLml0ZW1zID0gaXRlbUVsZW1lbnRzLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgY29uc3QgY2F0ZWdvcnlLZXkgPSBlbGVtZW50LmRhdGFzZXQuY2F0ZWdvcmllcyB8fCAnJztcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2F0ZWdvcmllczogY2F0ZWdvcnlLZXkuc3BsaXQoJywnKSxcbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBjb25zdCBidXR0b25FbGVtZW50cyA9XG4gICAgICAgIG5vZGVMaXN0VG9BcnJheSh0aGlzLnBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKEJVVFRPTl9TRUxFQ1RPUikpIGFzIEFycmF5PEhUTUxCdXR0b25FbGVtZW50PjtcblxuICAgIHRoaXMuYnV0dG9ucyA9IGJ1dHRvbkVsZW1lbnRzLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgY29uc3QgY2F0ZWdvcnkgPSBlbGVtZW50LmRhdGFzZXQuY2F0ZWdvcnkgfHwgJyc7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgaXNTZWxlY3RlZDogZmFsc2UsXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgdGhpcy5hY3RpdmVDYXRlZ29yaWVzID0gbmV3IFNldCgpO1xuXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9wdGlvbmFsQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pdGVtcy5sZW5ndGggPiAwICYmIHRoaXMuYnV0dG9ucy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgIGJ1dHRvbi5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVCdXR0b25DbGljay5iaW5kKHRoaXMsIGJ1dHRvbikpO1xuICAgIH0pO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUJ1dHRvbkNsaWNrKGJ1dHRvbjogSUZpbHRlckJ1dHRvbikge1xuICAgIGlmICghdGhpcy5hbGxvd011bHRpcGxlQ2F0ZWdvcmllcykge1xuICAgICAgdGhpcy5hY3RpdmVDYXRlZ29yaWVzLmNsZWFyKCk7XG4gICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCgoY3VycmVudEJ1dHRvbikgPT4ge1xuICAgICAgICBpZiAoY3VycmVudEJ1dHRvbiAhPT0gYnV0dG9uKSB7XG4gICAgICAgICAgY3VycmVudEJ1dHRvbi5pc1NlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgY3VycmVudEJ1dHRvbi5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuQUNUSVZFKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFidXR0b24uaXNTZWxlY3RlZCkge1xuICAgICAgYnV0dG9uLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5BQ1RJVkUpO1xuICAgICAgYnV0dG9uLmlzU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5hY3RpdmVDYXRlZ29yaWVzLmFkZChidXR0b24uY2F0ZWdvcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBidXR0b24uZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLkFDVElWRSk7XG4gICAgICBidXR0b24uaXNTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5hY3RpdmVDYXRlZ29yaWVzLmRlbGV0ZShidXR0b24uY2F0ZWdvcnkpO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlVmlzaWJsZUl0ZW1zKCk7XG4gIH1cblxuICB1cGRhdGVWaXNpYmxlSXRlbXMoKSB7XG4gICAgY29uc3Qgc2hvd0FsbCA9IHRoaXMuYWN0aXZlQ2F0ZWdvcmllcy5zaXplID09PSAwO1xuXG4gICAgaWYgKCFzaG93QWxsKSB7XG4gICAgICB0aGlzLnBhcmVudC5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkFDVElWRSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFyZW50LmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuQUNUSVZFKTtcbiAgICB9XG5cbiAgICB0aGlzLml0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmIChzaG93QWxsKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlSXRlbShpdGVtKTtcbiAgICAgICAgdGhpcy5kZWFjdGl2YXRlSXRlbShpdGVtKTtcbiAgICAgIH0gZWxzZSBpZiAoIXNob3dBbGwpIHtcbiAgICAgICAgbGV0IHNob3VsZFNob3cgPSBmYWxzZTtcbiAgICAgICAgaXRlbS5jYXRlZ29yaWVzLmZvckVhY2goKGNhdCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZUNhdGVnb3JpZXMuaGFzKGNhdCkpIHtcbiAgICAgICAgICAgIHNob3VsZFNob3cgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghc2hvdWxkU2hvdykge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlSXRlbShpdGVtKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHNob3VsZFNob3cpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlSXRlbShpdGVtKTtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZhdGVJdGVtKGl0ZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25hbENhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9wdGlvbmFsQ2FsbGJhY2soKTtcbiAgICB9XG4gIH1cblxuICBkaXNhYmxlSXRlbShpdGVtOiBJRmlsdGVyYWJsZUl0ZW0pIHtcbiAgICBpdGVtLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5JTkFDVElWRSk7XG4gICAgaXRlbS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuQUNUSVZFKTtcbiAgICBpdGVtLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgaXRlbS5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTtcbiAgfVxuXG4gIGVuYWJsZUl0ZW0oaXRlbTogSUZpbHRlcmFibGVJdGVtKSB7XG4gICAgaXRlbS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuSU5BQ1RJVkUpO1xuICAgIGl0ZW0uZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgaXRlbS5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgfVxuXG4gIGFjdGl2YXRlSXRlbShpdGVtOiBJRmlsdGVyYWJsZUl0ZW0pIHtcbiAgICBpdGVtLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5BQ1RJVkUpO1xuICB9XG5cbiAgZGVhY3RpdmF0ZUl0ZW0oaXRlbTogSUZpbHRlcmFibGVJdGVtKSB7XG4gICAgaXRlbS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuQUNUSVZFKTtcbiAgfVxufVxuIiwiZGVjbGFyZSBjb25zdCBUd2Vlbk1heDogYW55O1xuXG5pbXBvcnQgQ29yZSBmcm9tICcuLi9Db3JlJztcbmltcG9ydCB7IHdyaXRlQ29va2llLCByZWFkQ29va2llLCBBQ1RJT05fQ0xBU1NFUyB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICdjb3JlLWRlY29yYXRvcnMnO1xuXG5jb25zdCBTRUxFQ1RPUlMgPSB7XG4gIExBTkdVQUdFX1NFTEVDVDogJy5qcy1sYW5ndWFnZS1zZWxlY3QnLFxuICBCQUNLX1RPX1RPUDogJy5qcy1iYWNrLXRvLXRvcCcsXG4gIENPT0tJRV9DT05UQUlORVI6ICcuanMtY29va2llLWJhcicsXG4gIENPT0tJRV9ESVNNSVNTOiAnLmpzLWNvb2tpZS1iYXItZGlzbWlzcycsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb290ZXIge1xuICBjb3JlOiBDb3JlO1xuICBsYW5ndWFnZVNlbGVjdDogSFRNTFNlbGVjdEVsZW1lbnQ7XG4gIGJhY2tUb1RvcDogSFRNTEFuY2hvckVsZW1lbnQ7XG4gIGNvb2tpZUNvbnRhaW5lcj86IEhUTUxFbGVtZW50O1xuICBjb29raWVCdXR0b24/OiBIVE1MQW5jaG9yRWxlbWVudDtcbiAgY29va2llVmFsdWU6IFNldDxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBGb290ZXIgY29uc3RydWN0b3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBDb3JlKSB7XG4gICAgdGhpcy5jb3JlID0gY29yZTtcbiAgICB0aGlzLmxhbmd1YWdlU2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuTEFOR1VBR0VfU0VMRUNUKSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcbiAgICB0aGlzLmJhY2tUb1RvcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkJBQ0tfVE9fVE9QKSBhcyBIVE1MQW5jaG9yRWxlbWVudDtcbiAgICB0aGlzLmNvb2tpZUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkNPT0tJRV9DT05UQUlORVIpIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMuY29va2llQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuQ09PS0lFX0RJU01JU1MpIGFzIEhUTUxBbmNob3JFbGVtZW50O1xuICAgIHRoaXMuY29va2llVmFsdWUgPSByZWFkQ29va2llKCdhbGVydC1kaXNtaXNzZWQnKSAhPT0gbnVsbCA/XG4gICAgICBuZXcgU2V0KChyZWFkQ29va2llKCdhbGVydC1kaXNtaXNzZWQnKSBhcyBzdHJpbmcpLnJlcGxhY2UoL1wiL2csICcnKS5zcGxpdCgnLCcpKSA6IG5ldyBTZXQoKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5hdHRhY2hFdmVudHMoKTtcbiAgICB0aGlzLnNldENvb2tpZVZpc2liaWxpdHkoKTtcbiAgfVxuXG4gIGF0dGFjaEV2ZW50cygpIHtcbiAgICB0aGlzLmxhbmd1YWdlU2VsZWN0ICYmIHRoaXMubGFuZ3VhZ2VTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy51cGRhdGVMYW5ndWFnZSk7XG5cbiAgICB0aGlzLmJhY2tUb1RvcCAmJiB0aGlzLmJhY2tUb1RvcC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQmFja1RvVG9wKTtcblxuICAgIHRoaXMuY29va2llQnV0dG9uICYmIHRoaXMuY29va2llQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDb29raWVCdXR0b24pO1xuICB9XG5cbiAgdXBkYXRlTGFuZ3VhZ2UoZXZlbnQ6IEV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XG4gICAgY29uc3Qgb3B0aW9uID0gdGFyZ2V0Lm9wdGlvbnNbdGFyZ2V0LnNlbGVjdGVkSW5kZXhdO1xuICAgIHdyaXRlQ29va2llKCdsb2NhbGUnLCB0YXJnZXQudmFsdWUpO1xuICAgIGlmIChvcHRpb24uZGF0YXNldC5sb2NhdGlvbikge1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBvcHRpb24uZGF0YXNldC5sb2NhdGlvbjtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVCYWNrVG9Ub3AoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIFR3ZWVuTWF4LnRvKHdpbmRvdywgMSwge1xuICAgICAgc2Nyb2xsVG86IHtcbiAgICAgICAgeTogMCxcbiAgICAgICAgYXV0b0tpbGw6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICAvLyBzZW5kIGZvY3VzIGJhY2sgdG8gdGhlIGZpcnN0IG5hdiBpdGVtXG4gICAgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1oYXMtc3VibmF2JykgYXMgSFRNTEVsZW1lbnQpLmZvY3VzKCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlQ29va2llQnV0dG9uKGV2ZW50OiBFdmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5jb29raWVWYWx1ZSA9IHRoaXMuY29va2llVmFsdWUuYWRkKCdjb29raWUnKTtcbiAgICB3cml0ZUNvb2tpZSgnYWxlcnQtZGlzbWlzc2VkJywgQXJyYXkuZnJvbSh0aGlzLmNvb2tpZVZhbHVlKS50b1N0cmluZygpKTtcbiAgICB0aGlzLnNldENvb2tpZVZpc2liaWxpdHkoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBzZXRDb29raWVWaXNpYmlsaXR5KCkge1xuICAgIGlmICh0aGlzLmNvb2tpZVZhbHVlLmhhcygnY29va2llJykgJiYgdGhpcy5jb29raWVDb250YWluZXIpIHtcbiAgICAgIHRoaXMuY29va2llQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBDb3JlIGZyb20gJy4uL0NvcmUnO1xuaW1wb3J0IHsgTURDTWVudSB9IGZyb20gJ0BtYXRlcmlhbC9tZW51JztcbmltcG9ydCB7IG5vZGVMaXN0VG9BcnJheSwgQUNUSU9OX0NMQVNTRVMgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJztcblxuY29uc3QgU0VMRUNUT1JTID0ge1xuICBIRUFERVI6ICcuanMtaGVhZGVyJyxcbiAgU1VCX05BVl9UUklHR0VSUzogJy5qcy1oYXMtc3VibmF2JyxcbiAgUFJPRklMRV9XSURHRVQ6ICcuanMtcHJvZmlsZS13aWRnZXQnLFxuICBQUk9GSUxFX1RSSUdHRVI6ICcuanMtcHJvZmlsZS10cmlnZ2VyJyxcbiAgUFJPRklMRV9XSURHRVRfTU9CSUxFOiAnLmpzLXByb2ZpbGUtd2lkZ2V0LW1vYmlsZScsXG4gIFBST0ZJTEVfVFJJR0dFUl9NT0JJTEU6ICcuanMtcHJvZmlsZS10cmlnZ2VyLW1vYmlsZScsXG4gIFNVQl9OQVY6ICcuanMtc3VibmF2Jyxcbn07XG5cbmNvbnN0IFNDUk9MTF9ESVNUQU5DRV9USUxMX1NIQURPVyA9IDE2MDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVhZGVyIHtcbiAgY29yZTogQ29yZTtcbiAgaGFzU2hhZG93OiBib29sZWFuO1xuICBoZWFkZXI6IEhUTUxFbGVtZW50O1xuICBzdWJOYXZUcmlnZ2VyczogQXJyYXk8SFRNTEFuY2hvckVsZW1lbnQ+O1xuICBwcm9maWxlVHJpZ2dlcjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gIHByb2ZpbGVXaWRnZXQ6IEhUTUxFbGVtZW50O1xuICBwcm9maWxlTWVudTogYW55O1xuICBzdWJOYXZNZW51OiBhbnk7XG4gIHN1Yk5hdjogSFRNTEVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIEhlYWRlciBjb25zdHJ1Y3RvclxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6IENvcmUpIHtcbiAgICB0aGlzLmNvcmUgPSBjb3JlO1xuICAgIHRoaXMuaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuSEVBREVSKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLnN1Yk5hdlRyaWdnZXJzID0gbm9kZUxpc3RUb0FycmF5KFxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SUy5TVUJfTkFWX1RSSUdHRVJTKSkgYXMgQXJyYXk8SFRNTEFuY2hvckVsZW1lbnQ+O1xuICAgIHRoaXMucHJvZmlsZVRyaWdnZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5QUk9GSUxFX1RSSUdHRVIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgIHRoaXMucHJvZmlsZVdpZGdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlBST0ZJTEVfV0lER0VUKSBhcyBIVE1MRWxlbWVudDtcbiAgICBpZiAodGhpcy5wcm9maWxlV2lkZ2V0KSB7XG4gICAgICB0aGlzLnByb2ZpbGVNZW51ID0gbmV3IE1EQ01lbnUodGhpcy5wcm9maWxlV2lkZ2V0KTtcbiAgICB9XG4gICAgdGhpcy5zdWJOYXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TVUJfTkFWKSBhcyBIVE1MRWxlbWVudDtcbiAgICBpZiAodGhpcy5zdWJOYXYpIHtcbiAgICAgIHRoaXMuc3ViTmF2TWVudSA9IG5ldyBNRENNZW51KHRoaXMuc3ViTmF2KTtcbiAgICB9XG4gICAgdGhpcy5oYXNTaGFkb3cgPSB3aW5kb3cuc2Nyb2xsWSA8IFNDUk9MTF9ESVNUQU5DRV9USUxMX1NIQURPVztcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmhlYWRlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5vblNjcm9sbCk7XG4gICAgdGhpcy5vblNjcm9sbCgpO1xuXG4gICAgdGhpcy5zdWJOYXZUcmlnZ2Vycy5mb3JFYWNoKChsaW5rKSA9PiBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICdjbGljaycsIHRoaXMuaGFuZGxlU3ViTmF2VHJpZ2dlci5iaW5kKHRoaXMsIGxpbmspKSk7XG4gICAgaWYgKHRoaXMucHJvZmlsZVRyaWdnZXIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wcm9maWxlVHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlUHJvZmlsZUNsaWNrKTtcbiAgfVxuXG4gIGhhbmRsZVN1Yk5hdlRyaWdnZXIoX2xpbms6IEhUTUxBbmNob3JFbGVtZW50LCBlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID49IDkwMCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5zdWJOYXZNZW51Lm9wZW4gPSAhdGhpcy5zdWJOYXZNZW51Lm9wZW47XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVByb2ZpbGVDbGljayhlOiBNb3VzZUV2ZW50KSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMucHJvZmlsZU1lbnUub3BlbiA9ICF0aGlzLnByb2ZpbGVNZW51Lm9wZW47XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgb25TY3JvbGwoKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuaGFuZGxlU2Nyb2xsKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVTY3JvbGwoKSB7XG4gICAgaWYgKHRoaXMuaGFzU2hhZG93ICYmIHdpbmRvdy5zY3JvbGxZIDwgU0NST0xMX0RJU1RBTkNFX1RJTExfU0hBRE9XKSB7XG4gICAgICB0aGlzLmhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLkhBU19TSEFET1cpO1xuICAgICAgdGhpcy5oYXNTaGFkb3cgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmhhc1NoYWRvdyAmJiB3aW5kb3cuc2Nyb2xsWSA+PSBTQ1JPTExfRElTVEFOQ0VfVElMTF9TSEFET1cpIHtcbiAgICAgIHRoaXMuaGVhZGVyLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSEFTX1NIQURPVyk7XG4gICAgICB0aGlzLmhhc1NoYWRvdyAgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICdjb3JlLWRlY29yYXRvcnMnO1xuXG5jb25zdCBTRUxFQ1RPUlMgPSB7XG4gIENPTkNMVVNJT05fQ09OVEFJTkVSOiAnLmpzLWNvbmNsdXNpb24nLFxuICBDT05DTFVTSU9OX1NIQVBFXzE6ICcjY29uY2x1c2lvbi1zaGFwZS0xJyxcbiAgQ09OQ0xVU0lPTl9TSEFQRV8yOiAnI2NvbmNsdXNpb24tc2hhcGUtMicsXG4gIENPTkNMVVNJT05fU0hBUEVfMzogJyNjb25jbHVzaW9uLXNoYXBlLTMnLFxuICBDT05DTFVTSU9OX1NIQVBFXzQ6ICcjY29uY2x1c2lvbi1zaGFwZS00Jyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvbWVDb25jbHVzaW9uU2hhcGVzIHtcbiAgY29uY2x1c2lvbkNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gIGNvbmNsdXNpb25TaGFwZTE6IFNWR1BhdGhFbGVtZW50O1xuICBjb25jbHVzaW9uU2hhcGUyOiBTVkdQYXRoRWxlbWVudDtcbiAgY29uY2x1c2lvblNoYXBlMzogU1ZHUGF0aEVsZW1lbnQ7XG4gIGNvbmNsdXNpb25TaGFwZTQ6IFNWR1BhdGhFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBIb21lQ29uY2x1c2lvblNoYXBlcyBjb25zdHJ1Y3RvclxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29uY2x1c2lvbkNvbnRhaW5lciA9IGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuQ09OQ0xVU0lPTl9DT05UQUlORVIpIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMuY29uY2x1c2lvblNoYXBlMSA9IHRoaXMuY29uY2x1c2lvbkNvbnRhaW5lclxuICAgICAgICAucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuQ09OQ0xVU0lPTl9TSEFQRV8xKSBhcyBTVkdQYXRoRWxlbWVudDtcbiAgICB0aGlzLmNvbmNsdXNpb25TaGFwZTIgPSB0aGlzLmNvbmNsdXNpb25Db250YWluZXJcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkNPTkNMVVNJT05fU0hBUEVfMikgYXMgU1ZHUGF0aEVsZW1lbnQ7XG4gICAgdGhpcy5jb25jbHVzaW9uU2hhcGUzID0gdGhpcy5jb25jbHVzaW9uQ29udGFpbmVyXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5DT05DTFVTSU9OX1NIQVBFXzMpIGFzIFNWR1BhdGhFbGVtZW50O1xuICAgIHRoaXMuY29uY2x1c2lvblNoYXBlNCA9IHRoaXMuY29uY2x1c2lvbkNvbnRhaW5lclxuICAgICAgICAucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuQ09OQ0xVU0lPTl9TSEFQRV80KSBhcyBTVkdQYXRoRWxlbWVudDtcblxuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGluaXQoKTogdm9pZCB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwpO1xuICAgIHRoaXMub25TY3JvbGwoKTtcblxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIG9uU2Nyb2xsKCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmhhbmRsZVNjcm9sbCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlU2Nyb2xsKCkge1xuICAgIC8vIENoZWNrIGlmIGNvbmNsdXNpb24gaXMgaW4gdmlldyB0byBhbmltYXRlIGJhY2tncm91bmQgc2hhcGVzXG4gICAgaWYgKHRoaXMuY29uY2x1c2lvbkNvbnRhaW5lciAmJlxuICAgICAgdGhpcy5jb25jbHVzaW9uQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCA8XG4gICAgICAgIHdpbmRvdy5pbm5lckhlaWdodCAqIDEuMSkge1xuICAgICAgdGhpcy5hbmltYXRlQ29uY2x1c2lvblNoYXBlcygpO1xuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBhbmltYXRlQ29uY2x1c2lvblNoYXBlcygpIHtcbiAgICBpZiAodGhpcy5jb25jbHVzaW9uQ29udGFpbmVyKSB7XG4gICAgICBjb25zdCBzaGFwZTFUb3AgPSB0aGlzLmNvbmNsdXNpb25TaGFwZTEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgdGhpcy5jb25jbHVzaW9uU2hhcGUxLnN0eWxlLnRyYW5zZm9ybSA9XG4gICAgICAgICAgYHRyYW5zbGF0ZTNkKCR7c2hhcGUxVG9wIC8gMTB9cHgsIC0ke3NoYXBlMVRvcCAvIDQwfXB4LCAwKSByb3RhdGUoJHtzaGFwZTFUb3AgLyAxMDB9ZGVnKWA7XG5cbiAgICAgIGNvbnN0IHNoYXBlMlRvcCA9IHRoaXMuY29uY2x1c2lvblNoYXBlMi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICB0aGlzLmNvbmNsdXNpb25TaGFwZTIuc3R5bGUudHJhbnNmb3JtID1cbiAgICAgICAgICBgdHJhbnNsYXRlM2QoJHtzaGFwZTJUb3AgLyAzMH1weCwgLSR7c2hhcGUyVG9wIC8gMjB9cHgsIDApYDtcblxuICAgICAgY29uc3Qgc2hhcGUzVG9wID0gdGhpcy5jb25jbHVzaW9uU2hhcGUzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgIHRoaXMuY29uY2x1c2lvblNoYXBlMy5zdHlsZS50cmFuc2Zvcm0gPVxuICAgICAgICAgIGB0cmFuc2xhdGUzZCgtJHtzaGFwZTNUb3AgLyAxMH1weCwgLSR7c2hhcGUzVG9wIC8gNjB9cHgsIDApXG4gICAgICAgICAgcm90YXRlKC0ke3NoYXBlM1RvcCAvIDE1MH1kZWcpYDtcblxuICAgICAgY29uc3Qgc2hhcGU0VG9wID0gdGhpcy5jb25jbHVzaW9uU2hhcGU0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgIHRoaXMuY29uY2x1c2lvblNoYXBlNC5zdHlsZS50cmFuc2Zvcm0gPVxuICAgICAgICAgIGB0cmFuc2xhdGUzZCgkezIwIC0gKHNoYXBlNFRvcCAvIDE1KX1weCwgJHsoc2hhcGU0VG9wIC8gMTAwKSArIDYwfXB4LCAwKWA7XG4gICAgfVxuICB9XG59XG4iLCJkZWNsYXJlIHZhciBib2R5bW92aW46IGFueTtcblxuaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICdjb3JlLWRlY29yYXRvcnMnO1xuaW1wb3J0IHsgSUFuaW1hdGlvbkRhdGEgfSBmcm9tICcuLi9tb2RlbHMvSW50ZXJmYWNlJztcbmltcG9ydCBDb3JlIGZyb20gJy4uL0NvcmUnO1xuXG5jb25zdCBTRUxFQ1RPUlMgPSB7XG4gIE5VTUJFUl9PTkVfQ09OVEFJTkVSOiAnLmpzLWFuaW1hdGUtbjEnLFxuICBOVU1CRVJfVFdPX0NPTlRBSU5FUjogJy5qcy1hbmltYXRlLW4yJyxcbiAgTlVNQkVSX1RIUkVFX0NPTlRBSU5FUjogJy5qcy1hbmltYXRlLW40JyxcbiAgTlVNQkVSX0ZPVVJfQ09OVEFJTkVSOiAnLmpzLWFuaW1hdGUtbjMnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSG9tZU51bWJlckFuaW1hdGlvbiB7XG4gIGNvcmU/OiBDb3JlO1xuICBudW0xQW5pbWF0aW9uQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgbnVtMUFuaW1hdGlvbkRhdGE6IElBbmltYXRpb25EYXRhO1xuICBudW0xQW5pbWF0aW9uT2JqZWN0OiBhbnk7XG4gIG51bTJBbmltYXRpb25Db250YWluZXI6IEhUTUxFbGVtZW50O1xuICBudW0yQW5pbWF0aW9uRGF0YTogSUFuaW1hdGlvbkRhdGE7XG4gIG51bTJBbmltYXRpb25PYmplY3Q6IGFueTtcbiAgbnVtM0FuaW1hdGlvbkNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gIG51bTNBbmltYXRpb25EYXRhOiBJQW5pbWF0aW9uRGF0YTtcbiAgbnVtM0FuaW1hdGlvbk9iamVjdDogYW55O1xuICBudW00QW5pbWF0aW9uQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgbnVtNEFuaW1hdGlvbkRhdGE6IElBbmltYXRpb25EYXRhO1xuICBudW00QW5pbWF0aW9uT2JqZWN0OiBhbnk7XG4gIG51bTFIYXNQbGF5ZWQgPSBmYWxzZTtcbiAgbnVtMkhhc1BsYXllZCA9IGZhbHNlO1xuICBudW0zSGFzUGxheWVkID0gZmFsc2U7XG4gIG51bTRIYXNQbGF5ZWQgPSBmYWxzZTtcblxuICAvKipcbiAgICogTnVtYmVyQW5pbWF0aW9uIGNvbnN0cnVjdG9yXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoY29yZT86IENvcmUpIHtcbiAgICB0aGlzLmNvcmUgPSBjb3JlO1xuICAgIHRoaXMubnVtMUFuaW1hdGlvbkNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBTRUxFQ1RPUlMuTlVNQkVSX09ORV9DT05UQUlORVIsXG4gICAgKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLm51bTJBbmltYXRpb25Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgU0VMRUNUT1JTLk5VTUJFUl9UV09fQ09OVEFJTkVSLFxuICAgICkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgdGhpcy5udW0zQW5pbWF0aW9uQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIFNFTEVDVE9SUy5OVU1CRVJfVEhSRUVfQ09OVEFJTkVSLFxuICAgICkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgdGhpcy5udW00QW5pbWF0aW9uQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIFNFTEVDVE9SUy5OVU1CRVJfRk9VUl9DT05UQUlORVIsXG4gICAgKSBhcyBIVE1MRWxlbWVudDtcblxuICAgIHRoaXMubnVtMUFuaW1hdGlvbkRhdGEgPSB7XG4gICAgICBjb250YWluZXI6IHRoaXMubnVtMUFuaW1hdGlvbkNvbnRhaW5lcixcbiAgICAgIHJlbmRlcmVyOiAnc3ZnJyxcbiAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgcGF0aDogJy9zdGF0aWMvZGF0YS9udW1iZXJfMDEuanNvbicsXG4gICAgfTtcblxuICAgIHRoaXMubnVtMkFuaW1hdGlvbkRhdGEgPSB7XG4gICAgICBjb250YWluZXI6IHRoaXMubnVtMkFuaW1hdGlvbkNvbnRhaW5lcixcbiAgICAgIHJlbmRlcmVyOiAnc3ZnJyxcbiAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgcGF0aDogJy9zdGF0aWMvZGF0YS9udW1iZXJfMDIuanNvbicsXG4gICAgfTtcblxuICAgIHRoaXMubnVtM0FuaW1hdGlvbkRhdGEgPSB7XG4gICAgICBjb250YWluZXI6IHRoaXMubnVtM0FuaW1hdGlvbkNvbnRhaW5lcixcbiAgICAgIHJlbmRlcmVyOiAnc3ZnJyxcbiAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgcGF0aDogJy9zdGF0aWMvZGF0YS9udW1iZXJfMDMuanNvbicsXG4gICAgfTtcblxuICAgIHRoaXMubnVtNEFuaW1hdGlvbkRhdGEgPSB7XG4gICAgICBjb250YWluZXI6IHRoaXMubnVtNEFuaW1hdGlvbkNvbnRhaW5lcixcbiAgICAgIHJlbmRlcmVyOiAnc3ZnJyxcbiAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgcGF0aDogJy9zdGF0aWMvZGF0YS9udW1iZXJfMDQuanNvbicsXG4gICAgfTtcblxuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5udW0xQW5pbWF0aW9uT2JqZWN0ID0gYm9keW1vdmluLmxvYWRBbmltYXRpb24odGhpcy5udW0xQW5pbWF0aW9uRGF0YSk7XG4gICAgdGhpcy5udW0yQW5pbWF0aW9uT2JqZWN0ID0gYm9keW1vdmluLmxvYWRBbmltYXRpb24odGhpcy5udW0yQW5pbWF0aW9uRGF0YSk7XG4gICAgdGhpcy5udW0zQW5pbWF0aW9uT2JqZWN0ID0gYm9keW1vdmluLmxvYWRBbmltYXRpb24odGhpcy5udW0zQW5pbWF0aW9uRGF0YSk7XG4gICAgdGhpcy5udW00QW5pbWF0aW9uT2JqZWN0ID0gYm9keW1vdmluLmxvYWRBbmltYXRpb24odGhpcy5udW00QW5pbWF0aW9uRGF0YSk7XG4gICAgaWYgKHRoaXMuY29yZSAmJiB0aGlzLmNvcmUucHJlZmVyc1JlZHVjZWRNb3Rpb24pIHtcbiAgICAgIHRoaXMubnVtNEFuaW1hdGlvbk9iamVjdC5hZGRFdmVudExpc3RlbmVyKCdET01Mb2FkZWQnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMubnVtMUFuaW1hdGlvbk9iamVjdC5nb1RvQW5kU3RvcCh0aGlzLm51bTFBbmltYXRpb25PYmplY3QudG90YWxGcmFtZXMsIHRydWUpO1xuICAgICAgICB0aGlzLm51bTJBbmltYXRpb25PYmplY3QuZ29Ub0FuZFN0b3AodGhpcy5udW0yQW5pbWF0aW9uT2JqZWN0LnRvdGFsRnJhbWVzLCB0cnVlKTtcbiAgICAgICAgdGhpcy5udW0zQW5pbWF0aW9uT2JqZWN0LmdvVG9BbmRTdG9wKHRoaXMubnVtM0FuaW1hdGlvbk9iamVjdC50b3RhbEZyYW1lcywgdHJ1ZSk7XG4gICAgICAgIHRoaXMubnVtNEFuaW1hdGlvbk9iamVjdC5nb1RvQW5kU3RvcCh0aGlzLm51bTRBbmltYXRpb25PYmplY3QudG90YWxGcmFtZXMsIHRydWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uU2Nyb2xsKTtcbiAgICB0aGlzLm9uU2Nyb2xsKCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgb25TY3JvbGwoKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuaGFuZGxlU2Nyb2xsKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVTY3JvbGwoKSB7XG4gICAgaWYgKHRoaXMubnVtMUFuaW1hdGlvbkNvbnRhaW5lciAmJiAhdGhpcy5udW0xSGFzUGxheWVkKSB7XG4gICAgICBjb25zdCBudW1Ub3AgPSB0aGlzLm51bTFBbmltYXRpb25Db250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgaWYgKG51bVRvcCA8IHdpbmRvdy5pbm5lckhlaWdodCkge1xuICAgICAgICB0aGlzLm51bTFBbmltYXRpb25PYmplY3QucGxheSgpO1xuICAgICAgICB0aGlzLm51bTFIYXNQbGF5ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLm51bTJBbmltYXRpb25Db250YWluZXIgJiYgIXRoaXMubnVtMkhhc1BsYXllZCkge1xuICAgICAgY29uc3QgbnVtVG9wID0gdGhpcy5udW0yQW5pbWF0aW9uQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgIGlmIChudW1Ub3AgPCB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5udW0yQW5pbWF0aW9uT2JqZWN0LnBsYXkoKTtcbiAgICAgICAgdGhpcy5udW0ySGFzUGxheWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5udW0zQW5pbWF0aW9uQ29udGFpbmVyICYmICF0aGlzLm51bTNIYXNQbGF5ZWQpIHtcbiAgICAgIGNvbnN0IG51bVRvcCA9IHRoaXMubnVtM0FuaW1hdGlvbkNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICBpZiAobnVtVG9wIDwgd2luZG93LmlubmVySGVpZ2h0KSB7XG4gICAgICAgIHRoaXMubnVtM0FuaW1hdGlvbk9iamVjdC5wbGF5KCk7XG4gICAgICAgIHRoaXMubnVtM0hhc1BsYXllZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubnVtNEFuaW1hdGlvbkNvbnRhaW5lciAmJiAhdGhpcy5udW00SGFzUGxheWVkKSB7XG4gICAgICBjb25zdCBudW1Ub3AgPSB0aGlzLm51bTRBbmltYXRpb25Db250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgaWYgKG51bVRvcCA8IHdpbmRvdy5pbm5lckhlaWdodCkge1xuICAgICAgICB0aGlzLm51bTRBbmltYXRpb25PYmplY3QucGxheSgpO1xuICAgICAgICB0aGlzLm51bTRIYXNQbGF5ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICdjb3JlLWRlY29yYXRvcnMnO1xuXG5pbXBvcnQgeyBUaG91Z2h0U3RhcnRlciB9IGZyb20gJy4nO1xuaW1wb3J0IENvcmUgZnJvbSAnLi4vQ29yZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvbWVUaG91Z2h0U3RhcnRlciB7XG4gICAgdGhvdWdodFN0YXJ0ZXI6IFRob3VnaHRTdGFydGVyO1xuXG4gIC8qKlxuICAgKiBIb21lVGhvdWdodFN0YXJ0ZXIgY29uc3RydWN0b3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlPzogQ29yZSkge1xuICAgIHRoaXMudGhvdWdodFN0YXJ0ZXIgPSBuZXcgVGhvdWdodFN0YXJ0ZXIoY29yZSk7XG5cbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBpbml0KCk6IHZvaWQge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uU2Nyb2xsKTtcbiAgICB0aGlzLm9uU2Nyb2xsKCk7XG5cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBvblNjcm9sbCgpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5oYW5kbGVTY3JvbGwpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVNjcm9sbCgpIHtcbiAgICAvLyBOZXN0ZWQgbXVsdGlwbGUgaWYgc3RhdGVtZW50cyB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IGV4cGVuc2l2ZSBkb20gcXVlcnlpbmcgZXZlcnlcbiAgICAvLyBzY3JvbGwgZXZlbnRcbiAgICBpZiAodGhpcy50aG91Z2h0U3RhcnRlciAmJiAhdGhpcy50aG91Z2h0U3RhcnRlci5oYXNBY3RpdmF0ZWQpIHtcbiAgICAgIGlmICh0aGlzLnRob3VnaHRTdGFydGVyLmdldElzSW5WaWV3KCkpIHtcbiAgICAgICAgdGhpcy50aG91Z2h0U3RhcnRlci5hY3RpdmF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiZGVjbGFyZSB2YXIgVHdlZW5NYXg6IGFueTtcblxuaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICdjb3JlLWRlY29yYXRvcnMnO1xuaW1wb3J0IHsgVmlkZW9QbGF5ZXIgfSBmcm9tICcuJztcblxuY29uc3QgU0VMRUNUT1JTID0ge1xuICBIT01FX1ZJREVPX0JVVFRPTl9TRUxFQ1RPUjogJy5qcy1ob21lLXZpZGVvLWJ1dHRvbicsXG4gIEZFQVRVUkVfVklERU86ICcjZmVhdHVyZS12aWRlbycsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIb21lVmlkZW9QbGF5ZXIge1xuICB2aWRlb1BsYXllcjogVmlkZW9QbGF5ZXI7XG4gIGhvbWVWaWRlb0J1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gIGZlYXR1cmVWaWRlbz86IEhUTUxFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBIb21lVmlkZW9QbGF5ZXIgY29uc3RydWN0b3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmZlYXR1cmVWaWRlbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkZFQVRVUkVfVklERU8pIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMudmlkZW9QbGF5ZXIgPSBuZXcgVmlkZW9QbGF5ZXIodHJ1ZSk7XG4gICAgdGhpcy5ob21lVmlkZW9CdXR0b24gPVxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5IT01FX1ZJREVPX0JVVFRPTl9TRUxFQ1RPUikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBpbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0VmlkZW9IZWlnaHQoKTtcbiAgICB0aGlzLnZpZGVvUGxheWVyLmxvYWRBUEkoKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMudmlkZW9QbGF5ZXIuaW5pdGlhbGl6ZVZpZGVvKCk7XG4gICAgICB0aGlzLnZpZGVvUGxheWVyLnBsYXllci5hZGRFdmVudExpc3RlbmVyKCdvblJlYWR5JywgKCkgPT4ge1xuICAgICAgICB0aGlzLm9uU2Nyb2xsKCk7XG4gICAgICB9KTtcbiAgICAgIC8vIE5lZWQgdG8gcmVzZXQgdGhpcyBhZnRlciB0aGUgcGxheWVyIGlzIGxvYWRlZFxuICAgICAgdGhpcy5mZWF0dXJlVmlkZW8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5GRUFUVVJFX1ZJREVPKSBhcyBIVE1MRWxlbWVudDtcbiAgICB9KTtcbiAgICBpZiAodGhpcy5ob21lVmlkZW9CdXR0b24pIHtcbiAgICAgIHRoaXMuaG9tZVZpZGVvQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVWaWRlb0J1dHRvbkNsaWNrKTtcbiAgICB9XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5vblNjcm9sbCk7XG4gICAgdGhpcy5vblNjcm9sbCgpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25SZXNpemUpO1xuICAgIHRoaXMub25SZXNpemUoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBvblNjcm9sbCgpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5oYW5kbGVTY3JvbGwpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVNjcm9sbCgpIHtcbiAgICBpZiAodGhpcy52aWRlb1BsYXllciAmJiB0aGlzLnZpZGVvUGxheWVyLnBsYXllciAmJlxuICAgICAgICAhdGhpcy52aWRlb1BsYXllci5oYXNCZWVuUGxheWVkICYmIHRoaXMudmlkZW9QbGF5ZXIuaXNSZWFkeSkge1xuICAgICAgY29uc3QgdmlkZW9Ub3AgPSB0aGlzLnZpZGVvUGxheWVyLnZpZGVvRGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgIGlmICh2aWRlb1RvcCA8IHdpbmRvdy5pbm5lckhlaWdodCAqIDEuMjUpIHtcbiAgICAgICAgdGhpcy52aWRlb1BsYXllci5wbGF5ZXIucGxheVZpZGVvKCk7XG4gICAgICAgIHRoaXMudmlkZW9QbGF5ZXIucGxheWVyLm11dGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgb25SZXNpemUoKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVSZXNpemUoKSB7XG4gICAgdGhpcy5zZXRWaWRlb0hlaWdodCgpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIHNldFZpZGVvSGVpZ2h0KCkge1xuICAgIGlmICh0aGlzLmZlYXR1cmVWaWRlbykge1xuICAgICAgdGhpcy5mZWF0dXJlVmlkZW8uc3R5bGUuaGVpZ2h0ID0gYCR7ZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCAqIC41NjI1fXB4YDtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlVmlkZW9CdXR0b25DbGljaygpIHtcbiAgICBpZiAoIXRoaXMudmlkZW9QbGF5ZXIuaXNSZWFkeSkgeyByZXR1cm47IH1cbiAgICB0aGlzLnZpZGVvUGxheWVyLnBsYXllci51bk11dGUoKTtcbiAgICB0aGlzLnZpZGVvUGxheWVyLnNob3VsZExvb3AgPSBmYWxzZTtcbiAgICB0aGlzLnZpZGVvUGxheWVyLmhhc0JlZW5QbGF5ZWQgPSB0cnVlO1xuICAgIHRoaXMudmlkZW9QbGF5ZXIucGxheWVyLnNlZWtUbygwKTtcbiAgICB0aGlzLnZpZGVvUGxheWVyLnBsYXllci5zdG9wVmlkZW8oKTtcbiAgICB0aGlzLnZpZGVvUGxheWVyLnBsYXllci5wbGF5VmlkZW8oKTtcblxuICAgIFR3ZWVuTWF4LnRvKHRoaXMuaG9tZVZpZGVvQnV0dG9uLCAwLjI1LCB7XG4gICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuaG9tZVZpZGVvQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBTbGluZ3Nob3QsIEF1ZGlvUGxheWVyIH0gZnJvbSAnLi4vY29tcG9uZW50cyc7XG5pbXBvcnQgeyBub2RlTGlzdFRvQXJyYXksIEFDVElPTl9DTEFTU0VTLCBERUZBVUxUX0FVRElPX0xFVkVMIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycyc7XG5cbmNvbnN0IFNFTEVDVE9SUyA9IHtcbiAgVFJJR0dFUjogJy5qcy1sb2dvLXRyaWdnZXInLFxufTtcblxuaW50ZXJmYWNlIElUcmlnZ2VyIHtcbiAgYnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgc3RhcnRGcmFtZTogbnVtYmVyO1xuICBzdG9wRnJhbWU6IG51bWJlcjtcbiAgaG92ZXJTdGFydEZyYW1lOiBudW1iZXI7XG4gIGhvdmVyU3RvcEZyYW1lOiBudW1iZXI7XG4gIGF1ZGlvUGxheWVyOiBBdWRpb1BsYXllciB8IG51bGw7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBtYW5hZ2VzIHRoZSB0cmlnZ2VycyBmb3IgdGhlIGJvZHltb3ZpbiBhbmltYXRpb25zIG9uIHRoZSBsb2csIGFuZCBhbHNvIHN0YXJ0cyB1cCB0aGVcbiAqIHNsaW5nc2hvdCBmdW5jdGlvbmFsaXR5IHRoYXQgaW50ZWdyYXRlcyB3aXRoIHRoZSBsb2dvXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnRlcmFjdGl2ZUxvZ28ge1xuICBjb250YWluZXI6IEhUTUxFbGVtZW50O1xuICBhbmltYXRpb246IGFueTtcbiAgaXNIb3ZlcmluZzogYm9vbGVhbjtcbiAgaXNQbGF5aW5nOiBib29sZWFuO1xuICB0b3VjaFdhc1VzZWQ6IGJvb2xlYW47XG4gIHRyaWdnZXJzPzogQXJyYXk8SVRyaWdnZXI+O1xuICBjdXJyZW50UGxheWluZ1RyaWdnZXI/OiBJVHJpZ2dlciB8IG51bGw7XG4gIHNsaW5nc2hvdD86IFNsaW5nc2hvdDtcbiAga2V5Ym9hcmRJc0luVXNlID0gZmFsc2U7XG4gIGF1ZGlvSGFzTG9hZGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUYWtlcyBpbiBhIHBhcmVudCBodG1sIGVsZW1lbnQgYW5kIHRoZSBib2R5bW92aW4gb2JqZWN0IHRoYXQgbWFuYWdlcyB0aGUgYW5pbWF0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgYW5pbWF0aW9uT2JqZWN0OiBhbnkpIHtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLmFuaW1hdGlvbiA9IGFuaW1hdGlvbk9iamVjdDtcbiAgICB0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuICAgIHRoaXMuaXNIb3ZlcmluZyA9IGZhbHNlO1xuICAgIHRoaXMuYXVkaW9IYXNMb2FkZWQgPSBmYWxzZTtcbiAgICB0aGlzLnRvdWNoV2FzVXNlZCA9IGZhbHNlO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZUxldHRlcnMoKTtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkFDVElWRSk7XG4gICAgLy8gU3RhcnR1cCB0aGUgc2xpbmdzaG90IGNvbXBvbmVudFxuICAgIHRoaXMuc2xpbmdzaG90ID0gbmV3IFNsaW5nc2hvdCh0aGlzLmNvbnRhaW5lcik7XG4gICAgdGhpcy5zbGluZ3Nob3QuaW5pdCgpO1xuICAgIHRoaXMuaW5pdEFsbEF1ZGlvKCk7XG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gIH1cblxuICBjcmVhdGVMZXR0ZXJzKCkge1xuICAgIC8vIEdldCBhbGwgYnV0dG9uIGVsZW1lbnRzIGFuZCBjcmVhdGUgdHJpZ2dlcnMgb3V0IG9mIHRoZW0uIEVhY2ggdHJpZ2dlciBrZWVwcyB0cmFjayBvZiB3aGF0XG4gICAgLy8gZnJhbWVzIGluIHRoZSBsb2dvIGFuaW1hdGlvbiBpdCBzaG91bGQgcGxheSBhbmQgc3RvcCBhdC5cbiAgICBjb25zdCB0cmlnZ2VyRWxlbWVudHMgPVxuICAgICAgICBub2RlTGlzdFRvQXJyYXkoXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SUy5UUklHR0VSKSxcbiAgICAgICAgKSBhcyBBcnJheTxIVE1MQnV0dG9uRWxlbWVudD47XG4gICAgdGhpcy50cmlnZ2VycyA9IHRyaWdnZXJFbGVtZW50cy5tYXAoKGVsZW1lbnQ6IEhUTUxCdXR0b25FbGVtZW50KSA9PiB7XG4gICAgICBsZXQgc3RhcnRGcmFtZSA9IDA7XG4gICAgICBsZXQgc3RvcEZyYW1lID0gMDtcbiAgICAgIGxldCBob3ZlclN0YXJ0RnJhbWUgPSAwO1xuICAgICAgbGV0IGhvdmVyU3RvcEZyYW1lID0gMDtcbiAgICAgIGxldCBhdWRpb0ZpbGU7XG5cbiAgICAgIC8vIFRoZSBhbmltYXRpb24gZGF0YSBrZXkgb24gdGhlIGJ1dHRvbiBlbGVtZW50cyBkZXRlcm1pbmUgd2hpY2ggc2V0cyBvZiBmcmFtZXMgc2hvdWxkIGJlXG4gICAgICAvLyBhc3NpZ25lZCB0byBwbGF5IG9uIGNsaWNrXG4gICAgICBzd2l0Y2ggKGVsZW1lbnQuZGF0YXNldC5hbmltYXRpb24pIHtcbiAgICAgICAgY2FzZSAnc2F0ZWxsaXRlJzpcbiAgICAgICAgICBzdGFydEZyYW1lID0gMDtcbiAgICAgICAgICBzdG9wRnJhbWUgPSAyOTk7XG4gICAgICAgICAgYXVkaW9GaWxlID0gJy9zdGF0aWMvYXVkaW8vZ3NmLWJsb29wcy1TUi5tcDMnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICBzdGFydEZyYW1lID0gMTA3MTtcbiAgICAgICAgICBzdG9wRnJhbWUgPSAxMDkwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwbGFuZXRzJzpcbiAgICAgICAgICBzdGFydEZyYW1lID0gMzAwO1xuICAgICAgICAgIHN0b3BGcmFtZSA9IDYwMDtcbiAgICAgICAgICBhdWRpb0ZpbGUgPSAnL3N0YXRpYy9hdWRpby9nc2YtYmxvb3BzLUNDLm1wMyc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2JhbGxvb24xJzpcbiAgICAgICAgICBzdGFydEZyYW1lID0gMTAzMTtcbiAgICAgICAgICBzdG9wRnJhbWUgPSAxMDUwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdiYWxsb29uMic6XG4gICAgICAgICAgc3RhcnRGcmFtZSA9IDYwMTtcbiAgICAgICAgICBzdG9wRnJhbWUgPSA4NDE7XG4gICAgICAgICAgYXVkaW9GaWxlID0gJy9zdGF0aWMvYXVkaW8vZ3NmLWJsb29wcy1JLm1wMyc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3ZvbGNhbm8nOlxuICAgICAgICAgIHN0YXJ0RnJhbWUgPSA4NDE7XG4gICAgICAgICAgc3RvcEZyYW1lID0gOTkwO1xuICAgICAgICAgIGF1ZGlvRmlsZSA9ICcvc3RhdGljL2F1ZGlvL2dzZi1ibG9vcHMtQS5tcDMnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgbGV0dGVyIGRhdGEga2V5IG9uIHRoZSBidXR0b24gZWxlbWVudHMgZGV0ZXJtaW5lIHdoaWNoIHNldHMgb2YgaG92ZXIgZnJhbWVzIHNob3VsZCBiZVxuICAgICAgLy8gYXNzaWduZWQgdG8gcGxheSBvbiBob3Zlci5cbiAgICAgIHN3aXRjaCAoZWxlbWVudC5kYXRhc2V0LmxldHRlcikge1xuICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICBob3ZlclN0YXJ0RnJhbWUgPSA5OTI7XG4gICAgICAgICAgaG92ZXJTdG9wRnJhbWUgPSAxMDEwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjMSc6XG4gICAgICAgICAgaG92ZXJTdGFydEZyYW1lID0gMTAxMTtcbiAgICAgICAgICBob3ZlclN0b3BGcmFtZSA9IDEwMzA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2kxJzpcbiAgICAgICAgICBob3ZlclN0YXJ0RnJhbWUgPSAxMDMxO1xuICAgICAgICAgIGhvdmVyU3RvcEZyYW1lID0gMTA1MDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYzInOlxuICAgICAgICAgIGhvdmVyU3RhcnRGcmFtZSA9IDEwNTE7XG4gICAgICAgICAgaG92ZXJTdG9wRnJhbWUgPSAxMDcwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICBob3ZlclN0YXJ0RnJhbWUgPSAxMDcxO1xuICAgICAgICAgIGhvdmVyU3RvcEZyYW1lID0gMTA5MDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYSc6XG4gICAgICAgICAgaG92ZXJTdGFydEZyYW1lID0gMTA5MTtcbiAgICAgICAgICBob3ZlclN0b3BGcmFtZSA9IDExMTA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2kyJzpcbiAgICAgICAgICBob3ZlclN0YXJ0RnJhbWUgPSAxMTExO1xuICAgICAgICAgIGhvdmVyU3RvcEZyYW1lID0gMTEzMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncic6XG4gICAgICAgICAgaG92ZXJTdGFydEZyYW1lID0gMTEzMTtcbiAgICAgICAgICBob3ZlclN0b3BGcmFtZSA9IDExNTE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJ1dHRvbjogZWxlbWVudCxcbiAgICAgICAgc3RhcnRGcmFtZTogc3RhcnRGcmFtZSxcbiAgICAgICAgc3RvcEZyYW1lOiBzdG9wRnJhbWUsXG4gICAgICAgIGhvdmVyU3RhcnRGcmFtZTogaG92ZXJTdGFydEZyYW1lLFxuICAgICAgICBob3ZlclN0b3BGcmFtZTogaG92ZXJTdG9wRnJhbWUsXG4gICAgICAgIGF1ZGlvUGxheWVyOiBhdWRpb0ZpbGUgPyBuZXcgQXVkaW9QbGF5ZXIoYXVkaW9GaWxlKSA6IG51bGwsXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgYmluZEV2ZW50cygpIHtcbiAgICBpZiAoIXRoaXMudHJpZ2dlcnMpIHsgcmV0dXJuOyB9XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuc2V0VG91Y2hXYXNVc2VkKTtcbiAgICAvLyBBZGQgZXh0cmEgZm9jdXMgc3RhdGUgc3R5bGVzIGlmIHRoZSB1c2VyIGlzIHRhYmJpbmcgdGhyb3VnaCB0aGUgcGFnZSB0byBhY2Nlc3MgY29udGVudFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5jaGVja0lmTmVlZHNGb2N1cyk7XG5cbiAgICB0aGlzLnRyaWdnZXJzLmZvckVhY2goKHRyaWdnZXIpID0+IHtcbiAgICAgIHRyaWdnZXIuYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmICghdGhpcy50b3VjaFdhc1VzZWQpIHtcbiAgICAgICAgICB0aGlzLnBsYXlBbmltYXRpb24odHJpZ2dlcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0cmlnZ2VyLmJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMucGxheUFuaW1hdGlvbi5iaW5kKHRoaXMsIHRyaWdnZXIpKTtcblxuICAgICAgdHJpZ2dlci5idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIHRoaXMucGxheUhvdmVyQW5pbWF0aW9uLmJpbmQodGhpcywgdHJpZ2dlcikpO1xuICAgICAgdHJpZ2dlci5idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuc3RvcEhvdmVyQW5pbWF0aW9uLmJpbmQodGhpcywgdHJpZ2dlcikpO1xuICAgIH0pO1xuXG4gICAgLy8gQXZvaWQgYWxsb3dpbmcgbW9yZSB0aGFuIG9uZSBhbmltYXRpb24gYXQgYSB0aW1lIHRvIHRyeSBhbmQgcGxheSwgc28gbm90ZSB3aGVuIHBsYXlpbmcgb25lXG4gICAgLy8gaGFzIGNvbXBsZXRlZC5cbiAgICB0aGlzLmFuaW1hdGlvbi5hZGRFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIHRoaXMuc3RvcEFuaW1hdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lcnMgYW5kIHN0b3BzIGFsbCBhdWRpb1xuICAgKi9cbiAgdGVhckRvd24oKSB7XG4gICAgaWYgKCF0aGlzLnRyaWdnZXJzKSB7IHJldHVybjsgfVxuXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLnNldFRvdWNoV2FzVXNlZCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmNoZWNrSWZOZWVkc0ZvY3VzKTtcbiAgICB0aGlzLnRyaWdnZXJzLmZvckVhY2goKHRyaWdnZXIpID0+IHtcbiAgICAgIC8vIEJlY2F1c2Ugc29tZSBldmVudHMgd2VyZSBib3VuZCB3aXRoIGFub255bW91cyBmdW5jdGlvbnMsIHRoZSBsaXN0ZW5lcnMgY2Fubm90IGJlIHJlbW92ZWQuXG4gICAgICAvLyBCeSBjbG9uaW5nIGFuZCByZWNyZWF0aW5nIHRoZSBET00gbm9kZSwgdGhlIGV2ZW50IGxpc3RlbmVyIGdvZXMgYXdheS5cbiAgICAgIGlmICh0cmlnZ2VyLmJ1dHRvbiAmJiB0cmlnZ2VyLmJ1dHRvbi5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IG5ld0J1dHRvbiA9IHRyaWdnZXIuYnV0dG9uLmNsb25lTm9kZSgpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgICAgICB0cmlnZ2VyLmJ1dHRvbi5wYXJlbnRFbGVtZW50LnJlcGxhY2VDaGlsZChuZXdCdXR0b24sIHRyaWdnZXIuYnV0dG9uKTtcbiAgICAgICAgdHJpZ2dlci5idXR0b24gPSBuZXdCdXR0b247XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmlnZ2VyLmF1ZGlvUGxheWVyKSB7XG4gICAgICAgIHRyaWdnZXIuYXVkaW9QbGF5ZXIuc3RvcCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5hbmltYXRpb24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCB0aGlzLnN0b3BBbmltYXRpb24pO1xuXG4gICAgaWYgKHRoaXMuc2xpbmdzaG90KSB7XG4gICAgICB0aGlzLnNsaW5nc2hvdC50ZWFyRG93bigpO1xuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBzZXRUb3VjaFdhc1VzZWQoKSB7XG4gICAgdGhpcy50b3VjaFdhc1VzZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5zZXRUb3VjaFdhc1VzZWQpO1xuICB9XG5cbiAgaW5pdEFsbEF1ZGlvKCkge1xuICAgIGlmICghdGhpcy50cmlnZ2VycykgeyByZXR1cm47IH1cblxuICAgIHRoaXMudHJpZ2dlcnMuZm9yRWFjaCgodHJpZ2dlcikgPT4ge1xuICAgICAgaWYgKHRyaWdnZXIuYXVkaW9QbGF5ZXIpIHtcbiAgICAgICAgdHJpZ2dlci5hdWRpb1BsYXllci5sb2FkKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgY2hlY2tJZk5lZWRzRm9jdXMoZTogS2V5Ym9hcmRFdmVudCkge1xuICAgIGlmIChlLmtleSA9PT0gJ1RhYicpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuTkVFRFNfRk9DVVNfUklORyk7XG5cbiAgICAgIC8vIFdlIGRvbid0IG5lZWQgdGhlIGV2ZW50IGxpc3RlbmVyIGFmdGVyIGl0J3MgYmVlbiB0cmlnZ2VyZWQgb25jZSwgc28gcmVtb3ZlIGl0XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuY2hlY2tJZk5lZWRzRm9jdXMpO1xuICAgIH1cbiAgfVxuXG4gIHBsYXlBbmltYXRpb24odHJpZ2dlcjogSVRyaWdnZXIpIHtcbiAgICB0aGlzLmlzUGxheWluZyA9IHRydWU7XG4gICAgaWYgKHRoaXMuY3VycmVudFBsYXlpbmdUcmlnZ2VyICYmIHRoaXMuY3VycmVudFBsYXlpbmdUcmlnZ2VyLmF1ZGlvUGxheWVyKSB7XG4gICAgICB0aGlzLmN1cnJlbnRQbGF5aW5nVHJpZ2dlci5hdWRpb1BsYXllci5zdG9wKCk7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudFBsYXlpbmdUcmlnZ2VyID0gdHJpZ2dlcjtcbiAgICB0aGlzLmFuaW1hdGlvbi5wbGF5U2VnbWVudHMoW3RyaWdnZXIuc3RhcnRGcmFtZSwgdHJpZ2dlci5zdG9wRnJhbWVdLCB0cnVlKTtcblxuICAgIGxldCBsZXZlbCA9IERFRkFVTFRfQVVESU9fTEVWRUw7XG4gICAgaWYgKHRyaWdnZXIuYXVkaW9QbGF5ZXIpIHtcbiAgICAgIHRyaWdnZXIuYXVkaW9QbGF5ZXIuc3RhcnQoKTtcbiAgICAgIHN3aXRjaCAodHJpZ2dlci5idXR0b24uZGF0YXNldC5hbmltYXRpb24pIHtcbiAgICAgICAgY2FzZSAnc2F0ZWxsaXRlJzpcbiAgICAgICAgICBsZXZlbCA9IDAuNDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndm9sY2Fubyc6XG4gICAgICAgICAgbGV2ZWwgPSAwLjI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRyaWdnZXIuYXVkaW9QbGF5ZXIuc2V0Vm9sdW1lKGxldmVsKTtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgc3RvcEFuaW1hdGlvbigpIHtcbiAgICB0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuY3VycmVudFBsYXlpbmdUcmlnZ2VyKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50UGxheWluZ1RyaWdnZXIuYXVkaW9QbGF5ZXIpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50UGxheWluZ1RyaWdnZXIuYXVkaW9QbGF5ZXIuc3RvcCgpO1xuICAgICAgfVxuICAgICAgdGhpcy5jdXJyZW50UGxheWluZ1RyaWdnZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHBsYXlIb3ZlckFuaW1hdGlvbih0cmlnZ2VyOiBJVHJpZ2dlcikge1xuICAgIGlmICh0aGlzLmlzSG92ZXJpbmcgfHwgdGhpcy5pc1BsYXlpbmcpIHsgcmV0dXJuOyB9XG5cbiAgICB0aGlzLmlzSG92ZXJpbmcgPSB0cnVlO1xuICAgIHRoaXMuYW5pbWF0aW9uLnBsYXlTZWdtZW50cyhbdHJpZ2dlci5ob3ZlclN0YXJ0RnJhbWUsIHRyaWdnZXIuaG92ZXJTdG9wRnJhbWVdLCB0cnVlKTtcbiAgfVxuXG4gIHN0b3BIb3ZlckFuaW1hdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuaXNIb3ZlcmluZykgeyByZXR1cm47IH1cbiAgICB0aGlzLmlzSG92ZXJpbmcgPSBmYWxzZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICdjb3JlLWRlY29yYXRvcnMnO1xuaW1wb3J0IHsgbm9kZUxpc3RUb0FycmF5LCBBQ1RJT05fQ0xBU1NFUyB9IGZyb20gJy4uL3V0aWwnO1xuXG5kZWNsYXJlIHZhciBUd2Vlbk1heDogYW55O1xuZGVjbGFyZSB2YXIgUXVhZDogYW55O1xuXG5jb25zdCBJTklUSUFMX1NIT1dfQ09VTlQgPSAxMDtcbmNvbnN0IERFRkFVTFRfQU5JTUFUSU9OX1RJTUlORyA9IDAuNTtcblxuZXhwb3J0IGNsYXNzIExpc3RBY2NvcmRpb24ge1xuICBwYXJlbnQ6IEhUTUxFbGVtZW50O1xuICBpdGVtczogQXJyYXk8SFRNTEVsZW1lbnQ+O1xuICBidXR0b246IEhUTUxCdXR0b25FbGVtZW50O1xuICBpc0V4cGFuZGVkOiBib29sZWFuO1xuICBoYXNCZWVuRXhwYW5kZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IocGFyZW50U2VsZWN0b3I6IHN0cmluZywgYnV0dG9uU2VsZWN0b3I6IHN0cmluZykge1xuICAgIHRoaXMucGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihwYXJlbnRTZWxlY3RvcikgYXMgSFRNTEVsZW1lbnQ7XG4gICAgdGhpcy5pdGVtcyA9IG5vZGVMaXN0VG9BcnJheSh0aGlzLnBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaScpKTtcbiAgICB0aGlzLmJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYnV0dG9uU2VsZWN0b3IpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgIHRoaXMuaXNFeHBhbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuaGFzQmVlbkV4cGFuZGVkID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5wYXJlbnQgJiYgdGhpcy5pdGVtcyAmJiB0aGlzLmJ1dHRvbikge1xuICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQnV0dG9uQ2xpY2spO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplKTtcbiAgICB0aGlzLnBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uU2Nyb2xsKTtcbiAgICB0aGlzLmNvbGxhcHNlTGlzdCgpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUJ1dHRvbkNsaWNrKCkge1xuICAgIGlmICh0aGlzLmlzRXhwYW5kZWQpIHtcbiAgICAgIHRoaXMuY29sbGFwc2VMaXN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXhwYW5kTGlzdCgpO1xuICAgICAgdGhpcy5oYXNCZWVuRXhwYW5kZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBvblJlc2l6ZSgpIHtcbiAgICBpZiAodGhpcy5pc0V4cGFuZGVkKSB7XG4gICAgICB0aGlzLnBhcmVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnaGVpZ2h0Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlUmVzaXplKCkge1xuICAgIHRoaXMuY29sbGFwc2VMaXN0KCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgb25TY3JvbGwoKSB7XG4gICAgaWYgKHRoaXMuaGFzQmVlbkV4cGFuZGVkKSB7IHJldHVybjsgfVxuXG4gICAgaWYgKCF0aGlzLmlzRXhwYW5kZWQpIHtcbiAgICAgIHRoaXMuZXhwYW5kTGlzdCgpO1xuICAgICAgdGhpcy5oYXNCZWVuRXhwYW5kZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGZpbmRUYXJnZXRJdGVtKCk6IEhUTUxFbGVtZW50IHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGxldCB0YXJnZXRJdGVtO1xuICAgIGxldCBsYXN0VmlzaWJsZUl0ZW07XG5cbiAgICB0aGlzLml0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmIChpdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCA+IDApIHtcbiAgICAgICAgbGFzdFZpc2libGVJdGVtID0gaXRlbTtcbiAgICAgICAgY291bnQrKztcblxuICAgICAgICBpZiAoY291bnQgPT09IElOSVRJQUxfU0hPV19DT1VOVCkge1xuICAgICAgICAgIHRhcmdldEl0ZW0gPSBpdGVtO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoY291bnQgPCBJTklUSUFMX1NIT1dfQ09VTlQpIHtcbiAgICAgIHRhcmdldEl0ZW0gPSBsYXN0VmlzaWJsZUl0ZW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldEl0ZW0gfHwgdGhpcy5pdGVtc1tJTklUSUFMX1NIT1dfQ09VTlQgLSAxXTtcbiAgfVxuXG4gIGNvbGxhcHNlTGlzdCgpIHtcbiAgICB0aGlzLmlzRXhwYW5kZWQgPSBmYWxzZTtcbiAgICBjb25zdCB0YXJnZXRJdGVtID0gdGhpcy5maW5kVGFyZ2V0SXRlbSgpO1xuICAgIGNvbnN0IHRhcmdldEhlaWdodCA9IHRhcmdldEl0ZW0ub2Zmc2V0VG9wIC0gdGhpcy5wYXJlbnQub2Zmc2V0VG9wIC0gMTtcblxuICAgIFR3ZWVuTWF4LnRvKHRoaXMucGFyZW50LCBERUZBVUxUX0FOSU1BVElPTl9USU1JTkcsIHtcbiAgICAgIGhlaWdodDogdGFyZ2V0SGVpZ2h0LFxuICAgICAgZWFzZTogUXVhZC5lYXNlT3V0LFxuICAgIH0pO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGV4cGFuZExpc3QoKSB7XG4gICAgaWYgKHRoaXMuaGFzQmVlbkV4cGFuZGVkKSB7IHJldHVybjsgfVxuXG4gICAgdGhpcy5pc0V4cGFuZGVkID0gdHJ1ZTtcbiAgICB0aGlzLmJ1dHRvbi5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLklOQUNUSVZFKTtcbiAgICBsZXQgdGFyZ2V0SGVpZ2h0O1xuXG4gICAgVHdlZW5NYXguc2V0KHRoaXMucGFyZW50LCB7XG4gICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgIHRoaXMucGFyZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgdGhpcy5wYXJlbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2hlaWdodCcpO1xuICAgICAgICB0aGlzLnBhcmVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgncG9zaXRpb24nKTtcbiAgICAgICAgdGFyZ2V0SGVpZ2h0ID0gdGhpcy5wYXJlbnQub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgIFR3ZWVuTWF4LnRvKHRoaXMucGFyZW50LCBERUZBVUxUX0FOSU1BVElPTl9USU1JTkcsIHtcbiAgICAgICAgICBoZWlnaHQ6IHRhcmdldEhlaWdodCxcbiAgICAgICAgICBhdXRvQWxwaGE6IDEsXG4gICAgICAgICAgZWFzZTogUXVhZC5lYXNlT3V0LFxuICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdoZWlnaHQnKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cbiIsImRlY2xhcmUgY29uc3QgVHdlZW5NYXg6IGFueTtcblxuaW1wb3J0IENvcmUgZnJvbSAnLi4vQ29yZSc7XG5pbXBvcnQgeyBub2RlTGlzdFRvQXJyYXkgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJztcblxuY29uc3QgU0VMRUNUT1JTID0ge1xuICBIRVJDVUxFU19IRUFERVI6ICcuaGVyY3VsZXMtaGVhZGVyJyxcbiAgTkFWX0xJTktTOiAnLmpzLW5hdi1saW5rJyxcbiAgTkFWX0JBQ0tEUk9QOiAnI2gtanMtaGVhZGVyX19kcmF3ZXItYmFja2Ryb3AnLFxufTtcblxuY29uc3QgQ0xBU1NfTkFNRVMgPSB7XG4gIEFDVElWRTogJy1hY3RpdmUnLFxuICBIRVJDVUxFU19BQ1RJVkVfQ0xBU1M6ICdoLWlzLWFjdGl2ZScsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXZJblBhZ2Uge1xuICBjb3JlOiBDb3JlO1xuICBuYXZMaW5rczogSFRNTEFuY2hvckVsZW1lbnRbXTtcbiAgbmF2QmFja2Ryb3A6IEhUTUxCdXR0b25FbGVtZW50O1xuICBzZWN0aW9uRWxzPzogSFRNTEVsZW1lbnRbXTtcbiAgY3VycmVudFNlY3Rpb25JbmRleDogbnVtYmVyO1xuICBzZWN0aW9uVG9wczogbnVtYmVyW107XG4gIGhlcmN1bGVzSGVhZGVyOiBIVE1MRWxlbWVudDtcbiAgd2luZG93SGVpZ2h0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE5hdkluUGFnZSBjb25zdHJ1Y3RvclxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6IENvcmUpIHtcbiAgICB0aGlzLmNvcmUgPSBjb3JlO1xuICAgIHRoaXMud2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIHRoaXMubmF2TGlua3MgPSBub2RlTGlzdFRvQXJyYXkoXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SUy5OQVZfTElOS1MpLFxuICAgICkgYXMgSFRNTEFuY2hvckVsZW1lbnRbXTtcbiAgICB0aGlzLm5hdkJhY2tkcm9wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuTkFWX0JBQ0tEUk9QKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICB0aGlzLnNlY3Rpb25FbHMgPSB0aGlzLm5hdkxpbmtzLm1hcCgobGluaykgPT4ge1xuICAgICAgLy8gVE9ETzogZmluZCBhIG5pY2VyIHdheSB0byBlbmZvcmNlIHRoaXMuIElmIHRoZXJlIGlzIG5vICdsaW5rJyBpbiB0aGUgZGF0YXNldFxuICAgICAgLy8gICAgICAgd2Ugc2hvdWxkIGtpbGwgdGhlIGJlaGF2aW9ycyBvZiB0aGlzIGZpbGUgYW5kIGVtaXQgYSB3YXJuaW5nLlxuICAgICAgY29uc3QgbGlua0VsID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxpbmsuZGF0YXNldC5saW5rIHx8ICcnKSBhcyBIVE1MRWxlbWVudCk7XG4gICAgICByZXR1cm4gKGxpbmtFbC5xdWVyeVNlbGVjdG9yKCcuaC1jLWhlYWRsaW5lJykgYXMgSFRNTEVsZW1lbnQpO1xuICAgIH0pO1xuICAgIHRoaXMuY3VycmVudFNlY3Rpb25JbmRleCA9IDA7XG4gICAgdGhpcy5zZWN0aW9uVG9wcyA9IHRoaXMuc2VjdGlvbkVscy5tYXAoKGVsKSA9PiBlbCA/IGVsLm9mZnNldFRvcCA6IDApO1xuICAgIHRoaXMuaGVyY3VsZXNIZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5IRVJDVUxFU19IRUFERVIpIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEtpY2tzIG9mZiBoYW5kbGVycyBhbmQgc2V0dXBcbiAgICovXG4gIEBhdXRvYmluZFxuICBpbml0KCk6IHZvaWQge1xuICAgIHRoaXMuYXR0YWNoRXZlbnRzKCk7XG4gICAgdGhpcy5jaGVja0FuZFNldEN1cnJlbnRTZWN0aW9ucyh0aGlzLmdldERvY3VtZW50U2Nyb2xsKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgcmVxdWlyZWQgZXZlbnQgaGFuZGxlcnMgZm9yIE5hdlxuICAgKi9cbiAgYXR0YWNoRXZlbnRzKCk6IHZvaWQge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uU2Nyb2xsKTtcbiAgICB0aGlzLm5hdkxpbmtzLmZvckVhY2goKGxpbmssIGluZGV4KSA9PiB7XG4gICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zY3JvbGxUb1NlY3Rpb24uYmluZCh0aGlzLCBpbmRleCkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmVydGljYWwgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBkb2N1bWVudC5cbiAgICovXG4gIGdldERvY3VtZW50U2Nyb2xsKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHdpbmRvdy5zY3JvbGxZIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG4gIH1cblxuICAvKipcbiAgICogU2Nyb2xsIEV2ZW50XG4gICovXG4gIEBhdXRvYmluZFxuICBvblNjcm9sbCgpOiB2b2lkIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5oYW5kbGVkU2Nyb2xsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY3JvbGwgZXZlbnRzIHJ1biBvbiBhbmltYXRpb24gZnJhbWUuXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgaGFuZGxlZFNjcm9sbCgpOiB2b2lkIHtcbiAgICBjb25zdCBjdXJyZW50U2Nyb2xsID0gdGhpcy5nZXREb2N1bWVudFNjcm9sbCgpO1xuICAgIHRoaXMuY2hlY2tBbmRTZXRDdXJyZW50U2VjdGlvbnMoY3VycmVudFNjcm9sbCk7XG4gIH1cblxuICAvKipcbiAgICogRmluZHMgc2VjdGlvbiB0aGF0IGlzIGNsb3Nlc3QgdG8gc2Nyb2xsVG9wIGFuZCBzZXRzIGl0IGFzIGN1cnJlbnQuXG4gICAqIEBwYXJhbSBjdXJyZW50U2Nyb2xsIC0gY3VycmVudCBzaXRlIHNjcm9sbCBwb3NpdGlvbi5cbiAgICovXG4gIGNoZWNrQW5kU2V0Q3VycmVudFNlY3Rpb25zKGN1cnJlbnRTY3JvbGw6IG51bWJlcikge1xuICAgIGxldCBjbG9zZXN0ID0gMDtcblxuICAgIGlmIChjdXJyZW50U2Nyb2xsIDwgdGhpcy5zZWN0aW9uVG9wc1sxXSAtIHRoaXMud2luZG93SGVpZ2h0KSB7XG4gICAgICBjbG9zZXN0ID0gMDtcbiAgICB9IGVsc2UgaWYgKChjdXJyZW50U2Nyb2xsID4gdGhpcy5zZWN0aW9uVG9wc1sxXSAtIHRoaXMud2luZG93SGVpZ2h0KSAmJlxuICAgIChjdXJyZW50U2Nyb2xsIDwgdGhpcy5zZWN0aW9uVG9wc1syXSAtIHRoaXMud2luZG93SGVpZ2h0IC0gdGhpcy5oZXJjdWxlc0hlYWRlci5vZmZzZXRIZWlnaHQpKSB7XG4gICAgICBjbG9zZXN0ID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvc2VzdCA9IDI7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY3VycmVudFNlY3Rpb25JbmRleCAhPT0gY2xvc2VzdCkge1xuICAgICAgdGhpcy5jdXJyZW50U2VjdGlvbkluZGV4ID0gY2xvc2VzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuYWN0aXZhdGVTZWN0aW9uKCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBjdXJyZW50U2VjdGlvbiB0byBpdHMgYWN0aXZlIHN0YXRlLlxuICAgKi9cbiAgYWN0aXZhdGVTZWN0aW9uKCk6IHZvaWQge1xuICAgIHRoaXMuZGVhY3RpdmF0ZVNlY3Rpb25zKCk7XG4gICAgdGhpcy5uYXZMaW5rc1t0aGlzLmN1cnJlbnRTZWN0aW9uSW5kZXhdLmNsYXNzTGlzdC5hZGQoXG4gICAgICAgIENMQVNTX05BTUVTLkhFUkNVTEVTX0FDVElWRV9DTEFTUyk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBzZWN0aW9ucyB0aGF0IGFyZW4ndCBjdXJyZW50U2VjdGlvbiB0byBkZWFjdGl2ZSBzdGF0ZS5cbiAgICovXG4gIGRlYWN0aXZhdGVTZWN0aW9ucygpOiB2b2lkIHtcbiAgICB0aGlzLm5hdkxpbmtzLmZvckVhY2goKGxpbmssIGluZGV4KSA9PiB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50U2VjdGlvbkluZGV4ICE9PSBpbmRleCkge1xuICAgICAgICBsaW5rLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICAgICAgICBDTEFTU19OQU1FUy5IRVJDVUxFU19BQ1RJVkVfQ0xBU1MpO1xuICAgICAgICBsaW5rLmJsdXIoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY3JvbGxzIHBhZ2UgdG8gdGhlIGlucHV0IHNlY3Rpb24sIGFkanVzdGluZyBmb3IgaGVhZGVyIGhlaWdodCBpZiBpbiB2aWV3LlxuICAgKiBAcGFyYW0gc2VjdGlvbiAtIGlucHV0IHNlY3Rpb24gb2JqZWN0IHRvIHNjcm9sbCB0b1xuICAgKi9cbiAgcHJpdmF0ZSBzY3JvbGxUb1NlY3Rpb24oc2VjdGlvbkluZGV4OiBudW1iZXIsIGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5uYXZCYWNrZHJvcC5jbGljaygpO1xuICAgIGlmICghdGhpcy5zZWN0aW9uRWxzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2VjdGlvbkVsc1tzZWN0aW9uSW5kZXhdLm9mZnNldFRvcDtcbiAgICBjb25zdCBkZXN0aW5hdGlvbiA9XG4gICAgICAgIHRoaXMuZ2V0RG9jdW1lbnRTY3JvbGwoKSA+IHRhcmdldFxuICAgICAgICAgICAgPyB0YXJnZXQgLSB0aGlzLmhlcmN1bGVzSGVhZGVyLm9mZnNldEhlaWdodFxuICAgICAgICAgICAgOiB0YXJnZXQ7XG5cbiAgICBUd2Vlbk1heC50byh3aW5kb3csIDEsIHtcbiAgICAgIHNjcm9sbFRvOiB7XG4gICAgICAgIHk6IGRlc3RpbmF0aW9uIC0gNjAsXG4gICAgICAgIGF1dG9LaWxsOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICB9XG59XG4iLCJpbXBvcnQgeyBub2RlTGlzdFRvQXJyYXksIEFDVElPTl9DTEFTU0VTIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycyc7XG5kZWNsYXJlIHZhciBUd2Vlbk1heDoge1xuICB0bzogKFxuICAgIGFyZzA6IEhUTUxFbGVtZW50LFxuICAgIGFyZzE6IG51bWJlcixcbiAgICBhcmcyOiB7XG4gICAgICBzY3JvbGxUbzogeyB4OiBudW1iZXI7IGF1dG9LaWxsOiBib29sZWFuOyB9O1xuICAgIH0sXG4gICkgPT4gdm9pZDtcbn07XG5cbmNvbnN0IFNFTEVDVE9SUyA9IHtcbiAgTkFWX0NPTlRBSU5FUjogJy5qcy1yZXNvdXJjZS1uYXYnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzb3VyY2VOYXYge1xuICBuYXZDb250YWluZXI6IEhUTUxFbGVtZW50O1xuICBuYXZMaXN0SXRlbXM/OiBBcnJheTxIVE1MRWxlbWVudD47XG4gIGFjdGl2ZUxpc3RJdGVtPzogSFRNTEVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIEFsZXJ0IGNvbnN0cnVjdG9yXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5uYXZDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5OQVZfQ09OVEFJTkVSKSBhcyBIVE1MRWxlbWVudDtcbiAgICBpZiAodGhpcy5uYXZDb250YWluZXIpIHtcbiAgICAgIHRoaXMubmF2TGlzdEl0ZW1zID0gbm9kZUxpc3RUb0FycmF5KHRoaXMubmF2Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpIGEnKSk7XG4gICAgICB0aGlzLmFjdGl2ZUxpc3RJdGVtID0gdGhpcy5uYXZMaXN0SXRlbXMuZmluZCgoaXRlbSkgPT5cbiAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5jb250YWlucyhBQ1RJT05fQ0xBU1NFUy5BQ1RJVkUpKTtcbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBpbml0KCk6IHZvaWQge1xuICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gdGhpcy5hY3RpdmVMaXN0SXRlbVxuICAgICAgICAmJiB0aGlzLmFjdGl2ZUxpc3RJdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgfHwgMDtcbiAgICBUd2Vlbk1heC50byh0aGlzLm5hdkNvbnRhaW5lciwgMSwge1xuICAgICAgc2Nyb2xsVG86IHtcbiAgICAgICAgeDogZGVzdGluYXRpb24gLSAxNixcbiAgICAgICAgYXV0b0tpbGw6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuIiwiLyoqXG4gKiBUaGlzIGlzIGEgZ2VuZXJpYyBjb250cm9sbGVyIHRoYXQgZ2V0cyBhbGwgc2Nyb2xsdG8gbGlua3Mgb24gYSBwYWdlLCBhbmQgYW5pbWF0ZXMgc2Nyb2xsIHBvc2l0aW9uXG4gKiB0byB0aGVpciB0YXJnZXQgZWxlbWVudC4gVGhlIGVsZW1lbnQgd2lsbCBhbHNvIGJlIHNldCBhY3RpdmUgb3IgaW5hY3RpdmUgZGVwZW5kaW5nIGlmIGl0cyB0YXJnZXRcbiAqIGVsZW1lbnQgaXMgaW4gdmlld1xuICovXG5cbmRlY2xhcmUgdmFyIFR3ZWVuTWF4OiBhbnk7XG5kZWNsYXJlIHZhciBFeHBvOiBhbnk7XG5cbmltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJztcbmltcG9ydCB7IG5vZGVMaXN0VG9BcnJheSwgQUNUSU9OX0NMQVNTRVMsIE1FRElBX1FVRVJJRVMgfSBmcm9tICcuLi91dGlsJztcblxuaW50ZXJmYWNlIElTZWN0aW9uIHtcbiAgbGluaz86IEhUTUxBbmNob3JFbGVtZW50O1xuICBlbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGw7XG4gIGhhc2g6IHN0cmluZztcbiAgc2hvdWxkVHJhY2s6IGJvb2xlYW47XG4gIGlzVXJsPzogYm9vbGVhbjtcbn1cblxuY29uc3QgTElOS19TRUxFQ1RPUiA9ICcuanMtc2Nyb2xsdG8tbGluayc7XG5jb25zdCBUUkFDS0VSX1NFTEVDVE9SID0gJy5qcy1zY3JvbGx0by10cmFja2VyJztcbmNvbnN0IFNFTEVDVF9NRU5VX1NFTEVDVE9SID0gJy5qcy1zY3JvbGx0by1zZWxlY3QnO1xuY29uc3QgU0NST0xMX1RJTUlORyA9IDAuNzU7XG5jb25zdCBXSU5ET1dfT0ZGU0VUID0gd2luZG93LmlubmVySGVpZ2h0ICogMC41O1xuXG5leHBvcnQgY2xhc3MgU2Nyb2xsVG8ge1xuICBhbGxTZWN0aW9uczogQXJyYXk8SVNlY3Rpb24+O1xuICBhbGxPcHRpb25zOiBBcnJheTxJU2VjdGlvbj47XG4gIGFjdGl2ZVNlY3Rpb246IElTZWN0aW9uO1xuICBzZWxlY3RNZW51OiBIVE1MU2VsZWN0RWxlbWVudDtcbiAgbGFzdFNjcm9sbDogbnVtYmVyO1xuICB0cmFja2VyOiBIVE1MRWxlbWVudDtcbiAgdHJhY2tlclR3ZWVuOiBhbnk7XG4gIGlzVHdlZW5pbmc6IGJvb2xlYW47XG4gIGlzU21hbGxTY3JlZW46IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgYWxsTGlua3MgPVxuICAgICAgICBub2RlTGlzdFRvQXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChMSU5LX1NFTEVDVE9SKSkgYXMgQXJyYXk8SFRNTEFuY2hvckVsZW1lbnQ+O1xuXG4gICAgdGhpcy5hbGxTZWN0aW9ucyA9IGFsbExpbmtzLm1hcCgobGluaykgPT4ge1xuICAgICAgY29uc3QgbGlua2hyZWYgPSBsaW5rLmdldEF0dHJpYnV0ZSgnaHJlZicpIHx8ICdib2R5JztcbiAgICAgIGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobGlua2hyZWYpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluazogbGluayxcbiAgICAgICAgZWxlbWVudDogdGFyZ2V0IGFzIEhUTUxFbGVtZW50LFxuICAgICAgICBoYXNoOiBsaW5raHJlZixcbiAgICAgICAgc2hvdWxkVHJhY2s6IGxpbmsuZGF0YXNldC5uYXZUcmFjayA9PT0gJ3RydWUnLFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2VsZWN0TWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUX01FTlVfU0VMRUNUT1IpIGFzIEhUTUxTZWxlY3RFbGVtZW50O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnNlbGVjdE1lbnUgJiZcbiAgICAgICAgbm9kZUxpc3RUb0FycmF5KHRoaXMuc2VsZWN0TWVudS5xdWVyeVNlbGVjdG9yQWxsKCdvcHRpb24nKSkgYXMgQXJyYXk8SFRNTE9wdGlvbkVsZW1lbnQ+O1xuXG4gICAgdGhpcy5hbGxPcHRpb25zID0gb3B0aW9ucyAmJiBvcHRpb25zLm1hcCgob3B0aW9uKSA9PiB7XG4gICAgICBjb25zdCBpc1VybCA9IG9wdGlvbi5kYXRhc2V0LnVybCA9PT0gJ3RydWUnO1xuICAgICAgY29uc3QgbGlua2hyZWYgPSBvcHRpb24uZ2V0QXR0cmlidXRlKCd2YWx1ZScpIHx8ICdib2R5JztcbiAgICAgIGNvbnN0IHRhcmdldCA9ICFpc1VybCA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobGlua2hyZWYpIDogbnVsbDtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWxlbWVudDogdGFyZ2V0IGFzIEhUTUxFbGVtZW50LFxuICAgICAgICBoYXNoOiBsaW5raHJlZixcbiAgICAgICAgc2hvdWxkVHJhY2s6IGZhbHNlLFxuICAgICAgICBpc1VybDogaXNVcmwsXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgdGhpcy50cmFja2VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihUUkFDS0VSX1NFTEVDVE9SKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLmxhc3RTY3JvbGwgPSB0aGlzLmdldFNjcm9sbCgpO1xuICAgIHRoaXMuaXNUd2VlbmluZyA9IGZhbHNlO1xuXG4gICAgdGhpcy5pc1NtYWxsU2NyZWVuID0gIXdpbmRvdy5tYXRjaE1lZGlhKE1FRElBX1FVRVJJRVMuU01BTEwpLm1hdGNoZXM7XG4gICAgdGhpcy5hY3RpdmVTZWN0aW9uID0gdGhpcy5hbGxTZWN0aW9uc1swXTtcblxuICAgIGlmICghdGhpcy5hbGxTZWN0aW9ucykgeyByZXR1cm47IH1cblxuICAgIHRoaXMuYWN0aXZhdGVTZWN0aW9uKHRoaXMuYWxsU2VjdGlvbnNbMF0pO1xuICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgIHRoaXMub25TY3JvbGwoKTtcbiAgfVxuXG4gIGJpbmRFdmVudHMoKSB7XG4gICAgdGhpcy5hbGxTZWN0aW9ucy5mb3JFYWNoKChzZWN0aW9uKSA9PiB7XG4gICAgICBpZiAoc2VjdGlvbi5saW5rKSB7XG4gICAgICAgIHNlY3Rpb24ubGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlOiBFdmVudCkgPT4ge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aGlzLmhhbmRsZU5hdkNsaWNrKHNlY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICh0aGlzLnNlbGVjdE1lbnUpIHtcbiAgICAgIHRoaXMuc2VsZWN0TWVudS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZVNlbGVjdENoYW5nZSk7XG4gICAgfVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVOYXZDbGljayhzZWN0aW9uOiBJU2VjdGlvbikge1xuICAgIGlmICghc2VjdGlvbi5lbGVtZW50KSB7IHJldHVybjsgfVxuICAgIHRoaXMuc2Nyb2xsVG9TZWN0aW9uKHNlY3Rpb24uZWxlbWVudCk7XG4gICAgdGhpcy5hY3RpdmF0ZVNlY3Rpb24oc2VjdGlvbik7XG4gICAgdGhpcy5tb3ZlVHJhY2tlcihzZWN0aW9uKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVTZWxlY3RDaGFuZ2UoZTogRXZlbnQpIHtcbiAgICBjb25zdCBtZW51ID0gZS50YXJnZXQgYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XG4gICAgY29uc3QgaXNVcmwgPSBtZW51LnNlbGVjdGVkT3B0aW9uc1swXS5kYXRhc2V0LnVybCA9PT0gJ3RydWUnO1xuICAgIGNvbnN0IGhhc2ggPSBtZW51LnNlbGVjdGVkT3B0aW9uc1swXS52YWx1ZTtcblxuICAgIGlmIChpc1VybCkge1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBoYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFsbE9wdGlvbnMuZm9yRWFjaCgoc2VjdGlvbikgPT4ge1xuICAgICAgICBpZiAoaGFzaCA9PT0gc2VjdGlvbi5oYXNoICYmIHNlY3Rpb24uZWxlbWVudCkge1xuICAgICAgICAgIHRoaXMuc2Nyb2xsVG9TZWN0aW9uKHNlY3Rpb24uZWxlbWVudCk7XG4gICAgICAgICAgdGhpcy5hY3RpdmF0ZVNlY3Rpb24oc2VjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHNjcm9sbFRvU2VjdGlvbih0YXJnZXQ6IEhUTUxFbGVtZW50KSB7XG4gICAgVHdlZW5NYXgudG8od2luZG93LCBTQ1JPTExfVElNSU5HLCB7XG4gICAgICBzY3JvbGxUbzoge1xuICAgICAgICB5OiB0YXJnZXQub2Zmc2V0VG9wIC0gKHdpbmRvdy5pbm5lckhlaWdodCAqIDAuMSksXG4gICAgICAgIGF1dG9LaWxsOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBvblN0YXJ0OiAoKSA9PiB7XG4gICAgICAgIHRoaXMuaXNUd2VlbmluZyA9IHRydWU7XG4gICAgICB9LFxuICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmlzVHdlZW5pbmcgPSBmYWxzZTtcbiAgICAgICAgfSwgMTAwKTtcbiAgICAgIH0sXG4gICAgICBlYXNlOiBFeHBvLmVhc2VPdXQsXG4gICAgfSk7XG4gIH1cblxuICBnZXRTY3JvbGwoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gd2luZG93LnNjcm9sbFkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBvblNjcm9sbCgpIHtcbiAgICAvLyBPbmx5IG5lZWQgc2Nyb2xsaW5nIGJlaGF2aW9yIG9uIGRlc2t0b3BcbiAgICBpZiAodGhpcy5pc1NtYWxsU2NyZWVuKSB7IHJldHVybjsgfVxuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuaGFuZGxlU2Nyb2xsKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVTY3JvbGwoKSB7XG4gICAgaWYgKHRoaXMuaXNUd2VlbmluZykgeyByZXR1cm47IH1cblxuICAgIGNvbnN0IGN1cnJlbnRTY3JvbGwgPSB0aGlzLmdldFNjcm9sbCgpO1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGN1cnJlbnRTY3JvbGwgPiB0aGlzLmxhc3RTY3JvbGwgPyAxIDogLTE7XG4gICAgbGV0IHNlY3Rpb247XG5cbiAgICBjb25zdCBpc0FjdGl2ZVNlY3Rpb25JblZpZXcgPSB0aGlzLmNoZWNrSWZTZWN0aW9uSXNJblZpZXcodGhpcy5hY3RpdmVTZWN0aW9uLCBkaXJlY3Rpb24pO1xuXG4gICAgaWYgKGlzQWN0aXZlU2VjdGlvbkluVmlldykgeyByZXR1cm47IH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hbGxTZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgc2VjdGlvbiA9IHRoaXMuYWxsU2VjdGlvbnNbaV07XG4gICAgICBpZiAodGhpcy5jaGVja0lmU2VjdGlvbklzSW5WaWV3KHNlY3Rpb24sIGRpcmVjdGlvbikpIHtcbiAgICAgICAgdGhpcy5hY3RpdmF0ZVNlY3Rpb24oc2VjdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxhc3RTY3JvbGwgPSBjdXJyZW50U2Nyb2xsO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIG9uUmVzaXplKCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlUmVzaXplKCkge1xuICAgIHRoaXMuaXNTbWFsbFNjcmVlbiA9ICF3aW5kb3cubWF0Y2hNZWRpYShNRURJQV9RVUVSSUVTLlNNQUxMKS5tYXRjaGVzO1xuICB9XG5cbiAgY2hlY2tJZlNlY3Rpb25Jc0luVmlldyhzZWN0aW9uOiBJU2VjdGlvbiB8IG51bGwsIGRpcmVjdGlvbiA9IDEpOiBib29sZWFuIHtcbiAgICBpZiAoIXNlY3Rpb24gfHwgIXNlY3Rpb24uZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGJvdW5kcyA9IHNlY3Rpb24uZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBsZXQgaXNJblZpZXcgPSBmYWxzZTtcblxuICAgIGlmIChkaXJlY3Rpb24gPiAwKSB7XG4gICAgICBpc0luVmlldyA9IGJvdW5kcy50b3AgPD0gV0lORE9XX09GRlNFVCAmJiBib3VuZHMuYm90dG9tID4gV0lORE9XX09GRlNFVCAqIDAuNTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA8IDApIHtcbiAgICAgIGlzSW5WaWV3ID0gYm91bmRzLmJvdHRvbSA+IFdJTkRPV19PRkZTRVQgKiAwLjUgJiYgYm91bmRzLnRvcCA8PSBXSU5ET1dfT0ZGU0VUO1xuICAgIH1cblxuICAgIHJldHVybiBpc0luVmlldztcbiAgfVxuXG4gIG1vdmVUcmFja2VyKHNlY3Rpb246IElTZWN0aW9uKSB7XG4gICAgaWYgKCF0aGlzLnRyYWNrZXIgfHwgIXNlY3Rpb24ubGluaykgeyByZXR1cm47IH1cblxuICAgIGlmIChzZWN0aW9uLnNob3VsZFRyYWNrKSB7XG4gICAgICBpZiAodGhpcy50cmFja2VyVHdlZW4pIHtcbiAgICAgICAgdGhpcy50cmFja2VyVHdlZW4ua2lsbCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRyYWNrZXJUd2VlbiA9IFR3ZWVuTWF4LnRvKHRoaXMudHJhY2tlciwgU0NST0xMX1RJTUlORywge1xuICAgICAgICB5OiBzZWN0aW9uLmxpbmsub2Zmc2V0VG9wLFxuICAgICAgICBoZWlnaHQ6IHNlY3Rpb24ubGluay5vZmZzZXRIZWlnaHQsXG4gICAgICAgIG9uU3RhcnQ6ICgpID0+IHtcbiAgICAgICAgICB0aGlzLnRyYWNrZXIuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5BQ1RJVkUpO1xuICAgICAgICB9LFxuICAgICAgICBlYXNlOiBFeHBvLmVhc2VPdXQsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50cmFja2VyLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuQUNUSVZFKTtcbiAgICB9XG4gIH1cblxuICBhY3RpdmF0ZVNlY3Rpb24oc2VjdGlvbjogSVNlY3Rpb24pIHtcbiAgICBpZiAoIXNlY3Rpb24gfHwgIXNlY3Rpb24uZWxlbWVudCkgeyByZXR1cm47IH1cblxuICAgIGlmICh0aGlzLmFjdGl2ZVNlY3Rpb24pIHtcbiAgICAgIHRoaXMuZGVhY3RpdmF0ZVNlY3Rpb24odGhpcy5hY3RpdmVTZWN0aW9uKTtcbiAgICB9XG5cbiAgICB0aGlzLmFjdGl2ZVNlY3Rpb24gPSBzZWN0aW9uO1xuICAgIHNlY3Rpb24uZWxlbWVudC5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkFDVElWRSk7XG4gICAgaWYgKHNlY3Rpb24ubGluaykge1xuICAgICAgc2VjdGlvbi5saW5rLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuQUNUSVZFKTtcbiAgICB9XG5cbiAgICB0aGlzLm1vdmVUcmFja2VyKHNlY3Rpb24pO1xuICB9XG5cbiAgZGVhY3RpdmF0ZVNlY3Rpb24oc2VjdGlvbjogSVNlY3Rpb24pIHtcbiAgICBpZiAoIXNlY3Rpb24gfHwgIXNlY3Rpb24uZWxlbWVudCkgeyByZXR1cm47IH1cblxuICAgIHNlY3Rpb24uZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLkFDVElWRSk7XG4gICAgaWYgKHNlY3Rpb24ubGluaykge1xuICAgICAgc2VjdGlvbi5saW5rLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuQUNUSVZFKTtcbiAgICB9XG4gIH1cbn1cbiIsImRlY2xhcmUgdmFyIFR3ZWVuTWF4OiBhbnk7XG5kZWNsYXJlIHZhciBFeHBvOiBhbnk7XG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycyc7XG5pbXBvcnQge1xuICBub2RlTGlzdFRvQXJyYXksXG4gIEFDVElPTl9DTEFTU0VTLFxuICBERUZBVUxUX0FVRElPX0xFVkVMLFxufSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IEF1ZGlvUGxheWVyIH0gZnJvbSAnLi4vY29tcG9uZW50cyc7XG5cbmNvbnN0IElURU1fU0VMRUNUT1IgPSAnLmpzLXNsaW5nc2hvdC1pdGVtJztcbmNvbnN0IENBTlZBU19TRUxFQ1RPUiA9ICcuanMtc2xpbmdzaG90LWNhbnZhcyc7XG5jb25zdCBQSVhFTF9ERU5TSVRZID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gPiAxID8gd2luZG93LmRldmljZVBpeGVsUmF0aW8gOiAxO1xuXG5jb25zdCBBTklNQVRJT05fVElNRSA9IDE7XG5jb25zdCBSRVRVUk5fVE9fT1JJR0lOX1RJTUVPVVQgPSAxNTAwO1xuY29uc3QgVEhST1RUTEVfVElNRU9VVCA9IDI1MDtcbmNvbnN0IERJQUdSQU1fTElORV9DT0xPUiA9ICcjZGFkY2UwJztcbmNvbnN0IERJQUdSQU1fTElORV9XSURUSCA9IDEgKiBQSVhFTF9ERU5TSVRZO1xuY29uc3QgRElBR1JBTV9EQVNIX1BBVFRFUk4gPSBbNiAqIFBJWEVMX0RFTlNJVFksIDYgKiBQSVhFTF9ERU5TSVRZXTtcbmNvbnN0IERJQUdSQU1fQ0lSQ0xFX1JBRElVUyA9IDM0O1xuY29uc3QgRElBR1JBTV9URVhUX0NPTE9SID0gJyNiZGMxYzYnO1xuY29uc3QgRElBR1JBTV9GT05UID0gYCR7MTIgKiBQSVhFTF9ERU5TSVRZfXB4IEdvb2dsZSBTYW5zYDtcblxuLy8gNi42NzI1OWUtMTEgaXMgcmVhbCBncmF2aXR5XG5jb25zdCBJTklUSUFMX01BU1MgPSAxMDA7XG5jb25zdCBNQVNTX01VTFRJUExJRVIgPSAxMDAwMDtcbmNvbnN0IEdSQVZJVFlfQ09OU1RBTlQgPSAxMDtcblxuLy8gVGhpcyBhbGxvd3MgYWRqdXN0aW5nIGhvdyBxdWlja2x5IHRoZSBzaW11bGF0aW9uIHVwZGF0ZXMuIEZvciBleGFtcGxlLCBpZiBzaW11bGF0aW5nIHRoZSBzb2xhclxuLy8gc3lzdGVtLCB5b3Ugd291bGQgYmUgYWJsZSB0byB2aXN1YWxseSBzaW11bGF0ZSBFYXJ0aCdzIG9yYml0IG92ZXIgdGhlIGNvdXJzZSBvZiAxIG1pbnV0ZSBpbnN0ZWFkXG4vLyBvZiByZWFsIHRpbWUuIEhpZ2hlciBudW1iZXJzIHJ1biB0aGUgc2ltdWxhdGlvbiBtb3JlIHF1aWNrbHkuXG5jb25zdCBUSU1FU1RFUCA9IDE7XG5cbmNvbnN0IFZFTE9DSVRZX0RFR1JBREFUSU9OX1JBVEUgPSAwLjk5OyAvLyBMb3dlciBudW1iZXJzIGRlZ3JhZGUgdmVsb2NpdHkgZmFzdGVyXG5jb25zdCBWRUxPQ0lUWV9JTlRFUkFDVElPTl9NT0RJRklFUiA9IDEwOyAvLyBIaWdoZXIgbnVtYmVycyByZWR1Y2UgdGhlIHZlbG9jaXR5IHNldCBvbiBpbnRlcmFjdGlvblxuXG4vLyBUaGUgZGlzdGFuY2UgdG8gcHVsbCBhIHNoYXBlIGF3YXkgZnJvbSBpdHMgWCBvcmlnaW4gcG9pbnQgd2hlbiBhdXRvIHRocm93aW5nIGluY3JlYXNlcyB3aXRoIGFcbi8vIGhpZ2hlciBtdWx0aXBsaWVyXG5jb25zdCBBVVRPVEhST1dfTVVMVElQTElFUiA9IDI7XG5cbmludGVyZmFjZSBJUG9pbnQge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIElQaHlzaWNzQm9keU9wdGlvbnMge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgbWFzczogbnVtYmVyO1xuICByYWRpdXM/OiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBJUGh5c2ljc0JvZHkge1xuICBmb3JjZVg6IG51bWJlcjtcbiAgZm9yY2VZOiBudW1iZXI7XG4gIHBvaW50WDogbnVtYmVyO1xuICBwb2ludFk6IG51bWJlcjtcbiAgdmVsb2NpdHlYOiBudW1iZXI7XG4gIHZlbG9jaXR5WTogbnVtYmVyO1xuICBtYXNzOiBudW1iZXI7XG4gIHJhZGl1czogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgSVNoYXBlV2l0aEJvZHkge1xuICBidXR0b246IEhUTUxCdXR0b25FbGVtZW50O1xuICBvcmlnaW46IElQb2ludDtcbiAgYm9keTogSVBoeXNpY3NCb2R5O1xuICBhbmNob3I6IElQaHlzaWNzQm9keTtcbiAgaXNUd2VlbmluZzogYm9vbGVhbjtcbiAgaXNMb2NrZWQ6IGJvb2xlYW47XG4gIG5lZWRzRGlhZ3JhbTogYm9vbGVhbjtcbiAgYXVkaW9QbGF5ZXI/OiBBdWRpb1BsYXllciB8IG51bGw7XG59XG5cbi8qKlxuICogVGhpcyBtYW5hZ2VzIGFsbCBzbGluZ3Nob3QgaXRlbXMuIFRoZXkgYXJlIGRyYWdnYWJsZSBhbmQgYmFzaWMgZ3Jhdml0eS1iYXNlZCBwaHlzaWNzIG1vdmVzIHRoZW1cbiAqIGFyb3VuZCB1bnRpbCB0aGV5IHJldHVybiB0byB0aGVpciBvcmlnaW5hbCBwb3NpdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFNsaW5nc2hvdCB7XG4gIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG4gIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIHwgbnVsbDtcbiAgYWxsU2hhcGVzOiBBcnJheTxJU2hhcGVXaXRoQm9keT47XG4gIG1vdXNlSXNEb3duID0gZmFsc2U7XG4gIGxhc3RNb3VzZVggPSAwO1xuICBsYXN0TW91c2VZID0gMDtcbiAgbW91c2VYID0gMDtcbiAgbW91c2VZID0gMDtcbiAgbW91c2VPZmZzZXRYID0gMDtcbiAgbW91c2VPZmZzZXRZID0gMDtcbiAgYWN0aXZlU2hhcGU/OiBJU2hhcGVXaXRoQm9keSB8IG51bGw7XG4gIHNoYXBlVHdlZW5UaW1lb3V0PzogbnVtYmVyO1xuICB0aHJvdHRsZVRpbWVvdXQ/OiBudW1iZXI7XG4gIGNhbnZhc0lzVmlzaWJsZSA9IGZhbHNlO1xuICBjb250YWluZXJJc0luVmlldzogYm9vbGVhbjtcblxuICAvKipcbiAgICogT25seSBuZWVkcyBhIHBhcmVudCBlbGVtZW50IHRvIHNlYXJjaCBmb3IgYnV0dG9ucyBhbmQgYSBjYW52YXMgZWxlbWVudCB3aXRoaW5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIGNvbnRhaW5lciBlbGVtZW50IG11c3QgYmUgcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLmNvbnRhaW5lcklzSW5WaWV3ID0gdGhpcy5nZXRJc0NvbnRhaW5lckluVmlldygpO1xuXG4gICAgdGhpcy5jYW52YXMgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKENBTlZBU19TRUxFQ1RPUikgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG5cbiAgICBpZiAoIXRoaXMuY2FudmFzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGNhbnZhcyBlbGVtZW50IGZvdW5kJyk7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVDYW52YXNEaW1lbnNpb25zKCk7XG4gICAgdGhpcy5jdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgLy8gRmluZCBhbGwgYnV0dG9uIGVsZW1lbnRzIGFuZCBjcmVhdGUgYWxsIGluaXRpYWwgcGh5c2ljcyBib2RpZXMgdG8gYXNzb2NpYXRlZCB3aXRoIHRoZW1cbiAgICBjb25zdCBidXR0b25zID1cbiAgICAgICAgbm9kZUxpc3RUb0FycmF5KHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoSVRFTV9TRUxFQ1RPUikpIGFzIEFycmF5PEhUTUxCdXR0b25FbGVtZW50PjtcblxuICAgIHRoaXMuYWxsU2hhcGVzID0gYnV0dG9ucy5tYXAoKGl0ZW06IEhUTUxCdXR0b25FbGVtZW50KSA9PiB7XG4gICAgICAvLyBUaGlzIGlzIHRoZSBib2R5IHRoYXQgaXMgcmVwcmVzZW50ZWQgdmlzdWFsbHlcbiAgICAgIGNvbnN0IGJvZHkgPSB0aGlzLmNyZWF0ZVBoeXNpY3NCb2R5KHtcbiAgICAgICAgICB4OiBpdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQsXG4gICAgICAgICAgeTogaXRlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AsXG4gICAgICAgICAgbWFzczogSU5JVElBTF9NQVNTLFxuICAgICAgICAgIHJhZGl1czogaXRlbS5vZmZzZXRXaWR0aCAvIDIsXG4gICAgICB9KTtcblxuICAgICAgLy8gVGhpcyBhbmNob3IgYm9keSBkb2VzIG5vdCBtb3ZlLCBidXQgaXRzIG1hc3MgcHVsbHMgdGhlIGFzc29jaWF0ZWQgYm9keSBiYWNrIHRvd2FyZCBpdCB3aXRoXG4gICAgICAvLyBzaW11bGF0ZWQgZ3Jhdml0eVxuICAgICAgY29uc3QgYW5jaG9yID0gdGhpcy5jcmVhdGVQaHlzaWNzQm9keSh7XG4gICAgICAgICAgeDogaXRlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0LFxuICAgICAgICAgIHk6IGl0ZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wLFxuICAgICAgICAgIG1hc3M6IElOSVRJQUxfTUFTUyAqIE1BU1NfTVVMVElQTElFUixcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgYXVkaW9GaWxlO1xuICAgICAgc3dpdGNoIChpdGVtLmRhdGFzZXQuYXVkaW8pIHtcbiAgICAgICAgY2FzZSAnZSc6XG4gICAgICAgICAgYXVkaW9GaWxlID0gJy9zdGF0aWMvYXVkaW8vZ3NmLWJsb29wcy1FRS5tcDMnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICduJzpcbiAgICAgICAgICBhdWRpb0ZpbGUgPSAnL3N0YXRpYy9hdWRpby9nc2YtYmxvb3BzLU4ubXAzJztcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYnV0dG9uOiBpdGVtLFxuICAgICAgICBvcmlnaW46IHtcbiAgICAgICAgICB4OiBpdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQsXG4gICAgICAgICAgeTogaXRlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgIGFuY2hvcjogYW5jaG9yLFxuICAgICAgICBpc1R3ZWVuaW5nOiBmYWxzZSxcbiAgICAgICAgaXNMb2NrZWQ6IHRydWUsXG4gICAgICAgIG5lZWRzRGlhZ3JhbTogaXRlbS5kYXRhc2V0LmRpYWdyYW0gPT09ICd0cnVlJyxcbiAgICAgICAgYXVkaW9QbGF5ZXI6IGF1ZGlvRmlsZSA/IG5ldyBBdWRpb1BsYXllcihhdWRpb0ZpbGUpIDogbnVsbCxcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIGlmICghdGhpcy5jb250YWluZXIpIHsgcmV0dXJuOyB9XG5cbiAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuXG4gICAgdGhpcy5hbGxTaGFwZXMuZm9yRWFjaCgoc2hhcGUpID0+IHtcbiAgICAgIC8vIFdoZW4gZmlyc3Qgc3RhcnRpbmcgdXAsIGF1dG8tdGhyb3cgdGhlIGZpcnN0IGl0ZW0gZm91bmQgdGhhdCBoYXMgYW4gYXR0cmFjdCBrZXkgb24gaXRzXG4gICAgICAvLyBlbGVtZW50IGFzIGEgd2F5IHRvIGF0dHJhY3QgYW5kIGVuY291cmFnZSBpbnRlcmFjdGlvblxuICAgICAgaWYgKHNoYXBlLmJ1dHRvbi5kYXRhc2V0LmF0dHJhY3QgPT09ICd0cnVlJykge1xuICAgICAgICB0aGlzLmF1dG9EcmFnQW5kVGhyb3dJdGVtKHNoYXBlKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSBzaGFwZSBoYXMgYW4gYXVkaW8gcGxheWVyIGF0dGFjaGVkIHRvIGl0LCBsb2FkIGl0XG4gICAgICBpZiAoc2hhcGUuYXVkaW9QbGF5ZXIpIHtcbiAgICAgICAgc2hhcGUuYXVkaW9QbGF5ZXIubG9hZCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYmluZEV2ZW50cygpIHtcbiAgICAvLyBTb21lIG9mIHRoZXNlIGV2ZW50cyBoYXZlIGlzc3VlcyB3aXRoIHRoZSBUeXBlc2NyaXB0IGxpbnRpbmcgb24gZGVwbG95IGlmIHRoZSBldmVudHMgYXJlbid0XG4gICAgLy8gdHlwZWQgdGhpcyB3YXkgYW5kIHBhc3NlZCBpbiB3aXRoIGEgd3JhcHBpbmcgZnVuY3Rpb24uIEl0J3MgYSBsaXR0bGUgbWVzc3ksIGJ1dCBpZiBub3QgZG9uZVxuICAgIC8vIHRoaXMgd2F5IHRoZW4gZGVwbG95cyBmYWlsIHRvIGJ1aWxkIGJlY2F1c2UgVHlwZXNjcmlwdCBjYW4ndCBzZWVtIHRvIGNvbnNpc3RlbnRseSBpZGVuaXR5XG4gICAgLy8gdHlwaW5ncyBvbiBjZXJ0YWluIGV2ZW50cy5cbiAgICB0aGlzLmFsbFNoYXBlcy5mb3JFYWNoKChzaGFwZSkgPT4ge1xuICAgICAgc2hhcGUuYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChlOiBFdmVudCkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuaGFuZGxlTW91c2VEb3duKGUgYXMgTW91c2VFdmVudCwgc2hhcGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHNoYXBlLmJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5oYW5kbGVUb3VjaFN0YXJ0KGUgYXMgVG91Y2hFdmVudCwgc2hhcGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHNoYXBlLmJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGtleUV2ZW50ID0gZSBhcyBLZXlib2FyZEV2ZW50O1xuICAgICAgICBpZiAoa2V5RXZlbnQuY29kZSA9PT0gJ0VudGVyJyB8fCBrZXlFdmVudC5jb2RlID09PSAnU3BhY2UnKSB7XG4gICAgICAgICAgaWYgKHNoYXBlLmF1ZGlvUGxheWVyKSB7XG4gICAgICAgICAgICBzaGFwZS5hdWRpb1BsYXllci5zdGFydCgpO1xuICAgICAgICAgICAgc2hhcGUuYXVkaW9QbGF5ZXIuc2V0Vm9sdW1lKERFRkFVTFRfQVVESU9fTEVWRUwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmF1dG9EcmFnQW5kVGhyb3dJdGVtKHNoYXBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVNb3VzZVVwKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLmhhbmRsZVRvdWNoTW92ZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVUb3VjaEVuZCk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzLCBzdG9wcyBhdWRpbywgYW5kIHNpZ25hbHMgcmVuZGVyIGxvb3AgdG8gc3RvcFxuICAgKi9cbiAgdGVhckRvd24oKSB7XG4gICAgdGhpcy5hbGxTaGFwZXMuZm9yRWFjaCgoc2hhcGUpID0+IHtcbiAgICAgIC8vIEJlY2F1c2Ugc29tZSBldmVudHMgd2VyZSBib3VuZCB3aXRoIGFub255bW91cyBmdW5jdGlvbnMsIHRoZSBsaXN0ZW5lcnMgY2Fubm90IGJlIHJlbW92ZWQuXG4gICAgICAvLyBCeSBjbG9uaW5nIGFuZCByZWNyZWF0aW5nIHRoZSBET00gbm9kZSwgdGhlIGV2ZW50IGxpc3RlbmVyIGdvZXMgYXdheS5cbiAgICAgIGlmIChzaGFwZS5idXR0b24gJiYgc2hhcGUuYnV0dG9uLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgbmV3RWxlbWVudCA9IHNoYXBlLmJ1dHRvbi5jbG9uZU5vZGUoKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICAgICAgc2hhcGUuYnV0dG9uLnBhcmVudEVsZW1lbnQucmVwbGFjZUNoaWxkKG5ld0VsZW1lbnQsIHNoYXBlLmJ1dHRvbik7XG4gICAgICAgIHNoYXBlLmJ1dHRvbiA9IG5ld0VsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGFwZS5hdWRpb1BsYXllcikge1xuICAgICAgICBzaGFwZS5hdWRpb1BsYXllci5zdG9wKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVNb3VzZVVwKTtcblxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLmhhbmRsZVRvdWNoTW92ZSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVUb3VjaEVuZCk7XG5cbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwpO1xuXG4gICAgdGhpcy5jb250YWluZXJJc0luVmlldyA9IGZhbHNlO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZU1vdXNlRG93bihlOiBNb3VzZUV2ZW50LCBzaGFwZTogSVNoYXBlV2l0aEJvZHkpIHtcbiAgICAvLyBEb24ndCBhbGxvdyBpbnRlcmFjdGlvbiB0byBoYXBwZW4gd2hlbiBub3QgdXNpbmcgdGhlIHByaW1hcnkgbW91c2UgY2xpY2ssIHRvIHByZXZlbnQgZ2V0dGluZ1xuICAgIC8vIHN0dWNrIGluIHdlaXJkIHN0YXRlc1xuICAgIGlmIChlLmJ1dHRvbiAhPT0gMCkgeyByZXR1cm47IH1cbiAgICB0aGlzLmhhbmRsZVBvaW50ZXJEb3duKGUuY2xpZW50WCwgZS5jbGllbnRZLCBzaGFwZSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlVG91Y2hTdGFydChlOiBUb3VjaEV2ZW50LCBzaGFwZTogSVNoYXBlV2l0aEJvZHkpIHtcbiAgICB0aGlzLmhhbmRsZVBvaW50ZXJEb3duKGUudG91Y2hlc1swXS5jbGllbnRYLCBlLnRvdWNoZXNbMF0uY2xpZW50WSwgc2hhcGUpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVBvaW50ZXJEb3duKHBvaW50WDogbnVtYmVyLCBwb2ludFk6IG51bWJlciwgc2hhcGU6IElTaGFwZVdpdGhCb2R5KSB7XG4gICAgaWYgKHNoYXBlLmlzVHdlZW5pbmcpIHsgcmV0dXJuOyB9XG4gICAgLy8gV2hlbiBhbiBpdGVtIGlzIGNsaWNrZWQsIGxvY2sgaXQgdG8gdGhlIG1vdXNlIGFuZCBub3RlIGl0J3MgdGhlIGN1cnJlbnQgYWN0aXZlIHNoYXBlLCB3aGljaFxuICAgIC8vIHdpbGwgcHJldmVudCBpdCBmcm9tIGJlaW5nIGluY2x1ZGVkIGluIHBoeXNpY3MgdXBkYXRlc1xuICAgIHRoaXMuY2FjaGVQb2ludGVyQ29vcmRzKHBvaW50WCwgcG9pbnRZKTtcbiAgICB0aGlzLm1vdXNlSXNEb3duID0gdHJ1ZTtcbiAgICB0aGlzLm1vdXNlT2Zmc2V0WCA9IHBvaW50WCAtIHNoYXBlLmJvZHkucG9pbnRYO1xuICAgIHRoaXMubW91c2VPZmZzZXRZID0gcG9pbnRZIC0gc2hhcGUuYm9keS5wb2ludFk7XG4gICAgc2hhcGUuaXNMb2NrZWQgPSB0cnVlO1xuICAgIHRoaXMuYWN0aXZlU2hhcGUgPSBzaGFwZTtcbiAgICB0aGlzLmFjdGl2ZVNoYXBlLmJ1dHRvbi5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkFDVElWRSk7XG4gICAgdGhpcy51cGRhdGVQb2ludGVyQ29vcmRzKHBvaW50WCwgcG9pbnRZKTtcblxuICAgIC8vIElmIGEgdGltZW91dCB3YXMgY3JlYXRlZCB0byB0d2VlbiB0aGUgc2hhcGUgYmFjayB0byBpdHMgb3JpZ2luLCBjbGVhciBpdFxuICAgIGlmICh0aGlzLnNoYXBlVHdlZW5UaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5zaGFwZVR3ZWVuVGltZW91dCk7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZU1vdXNlVXAoZTogTW91c2VFdmVudCkge1xuICAgIHRoaXMuaGFuZGxlUG9pbnRlclVwKGUuY2xpZW50WCwgZS5jbGllbnRZKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVUb3VjaEVuZChlOiBFdmVudCkge1xuICAgIGNvbnN0IHRvdWNoRXZlbnQgPSBlIGFzIFRvdWNoRXZlbnQ7XG5cbiAgICB0aGlzLmhhbmRsZVBvaW50ZXJVcChcbiAgICAgICAgdG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYLFxuICAgICAgICB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFksXG4gICAgKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVQb2ludGVyVXAocG9pbnRlclg6IG51bWJlciwgcG9pbnRlclk6IG51bWJlcikge1xuICAgIGlmICghdGhpcy5tb3VzZUlzRG93bikgeyByZXR1cm47IH1cblxuICAgIC8vIERldGVybWluZSBob3cgZmFyIHRoZSBwb2ludGVyIHdhcyBjbGlja2VkL2RyYWdnZWQgYW5kIHNldCB0aGUgYWN0aXZlIHNoYXBlJ3MgdmVsb2NpdHkgYmFzZWRcbiAgICAvLyBvbiB0aGUgZGlzdGFuY2UuXG4gICAgY29uc3QgcG9pbnREaXN0ID1cbiAgICAgICAgdGhpcy5nZXREaXN0YW5jZUFzVHdvUG9pbnRzKFxuICAgICAgICAgICAgdGhpcy5sYXN0TW91c2VYLFxuICAgICAgICAgICAgdGhpcy5sYXN0TW91c2VZLFxuICAgICAgICAgICAgcG9pbnRlclgsXG4gICAgICAgICAgICBwb2ludGVyWSxcbiAgICAgICAgKTtcblxuICAgIGlmICh0aGlzLmFjdGl2ZVNoYXBlKSB7XG4gICAgICBpZiAodGhpcy5hY3RpdmVTaGFwZS5hdWRpb1BsYXllcikge1xuICAgICAgICB0aGlzLmFjdGl2ZVNoYXBlLmF1ZGlvUGxheWVyLnN0YXJ0KCk7XG4gICAgICAgIHRoaXMuYWN0aXZlU2hhcGUuYXVkaW9QbGF5ZXIuc2V0Vm9sdW1lKERFRkFVTFRfQVVESU9fTEVWRUwpO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGlzIHNldHMgdGhlIGFjdGl2ZSBzaGFwZSdzIGJvZHkgdmVsb2NpdHkgYmFzZWQgb24gZGlzdGFuY2UgZnJvbSBpdHMgb3JpZ2luLlxuICAgICAgLy8gUHVsbGluZyBhIHNoYXBlIGZ1cnRoZXIgYXdheSB3aWxsIGNhdXNlIGl0IHRvIGxhdW5jaCBiYWNrIHRvd2FyZCBpdHMgb3JpZ2luIG1vcmUgcXVpY2tseS5cbiAgICAgIHRoaXMuYWN0aXZlU2hhcGUuYm9keS52ZWxvY2l0eVggPSBwb2ludERpc3QueCAvIFZFTE9DSVRZX0lOVEVSQUNUSU9OX01PRElGSUVSO1xuICAgICAgdGhpcy5hY3RpdmVTaGFwZS5ib2R5LnZlbG9jaXR5WSA9IHBvaW50RGlzdC55IC8gVkVMT0NJVFlfSU5URVJBQ1RJT05fTU9ESUZJRVI7XG5cbiAgICAgIHRoaXMuYWN0aXZlU2hhcGUuaXNMb2NrZWQgPSB0aGlzLmFjdGl2ZVNoYXBlLmlzVHdlZW5pbmcgPT09IHRydWU7XG4gICAgICB0aGlzLmFjdGl2ZVNoYXBlLmJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLkFDVElWRSk7XG4gICAgICB0aGlzLmFjdGl2ZVNoYXBlID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBUaGlzIHRpbWVvdXQgcmV0dXJucyB0aGUgc2hhcGUgdG8gaXRzIG9yaWdpbiBwb2ludCBhZnRlciBhIGZpeGVkIHBlcmlvZCBvZiB0aW1lLCB0byBwcmV2ZW50XG4gICAgLy8gc2hhcGVzIGZyb20gc2xpbmdzaG90dGluZyBhcm91bmQgZm9yIHRvbyBsb25nLlxuICAgIHRoaXMuc2hhcGVUd2VlblRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMucmV0dXJuQWxsQm9kaWVzVG9PcmlnaW4sIFJFVFVSTl9UT19PUklHSU5fVElNRU9VVCk7XG5cbiAgICB0aGlzLmhpZGVDYW52YXMoKTtcbiAgICB0aGlzLm1vdXNlSXNEb3duID0gZmFsc2U7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgb25SZXNpemUoKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVSZXNpemUoKSB7XG4gICAgaWYgKHRoaXMudGhyb3R0bGVUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aHJvdHRsZVRpbWVvdXQpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0aW5nIHNoYXBlIHBvc2l0aW9ucyBjYW4gYmUgYSBiaXQgcGVyZm9ybWFuY2UgZXhwZW5zaXZlLCBzbyB0aHJvdHRsaW5nIGhlbHBzLlxuICAgIHRoaXMudGhyb3R0bGVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZVNoYXBlQ29vcmRzKCk7XG4gICAgICB0aGlzLnVwZGF0ZUNhbnZhc0RpbWVuc2lvbnMoKTtcbiAgICB9LCBUSFJPVFRMRV9USU1FT1VUKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBvblNjcm9sbCgpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5oYW5kbGVTY3JvbGwpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVNjcm9sbCgpIHtcbiAgICBpZiAodGhpcy50aHJvdHRsZVRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRocm90dGxlVGltZW91dCk7XG4gICAgfVxuXG4gICAgLy8gU29tZSBjb29yZGluYXRlcyBhcmUgZGVwZW5kZW50IG9uIHJlbGF0aXZlIHNjcmVlbiBwb3NpdGlvbiByYXRoZXIgdGhhbiBhYnNvbHV0ZSBkb2N1bWVudFxuICAgIC8vIHBvc2l0aW9uLiBUbyBrZWVwIG1hdGggYWNjdXJhdGUsIHdlIG5lZWQgdG8gYWxzbyB1cGRhdGUgY29vcmRpbmF0ZXMgb24gc2Nyb2xsLiBUaGlzIG1heSBiZVxuICAgIC8vIGV4cGVuc2l2ZSBmb3IgcGVyZm9ybWFuY2UsIHNvIHRocm90dGxpbmcgaGVscHMuXG4gICAgdGhpcy50aHJvdHRsZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlU2hhcGVDb29yZHMoKTtcblxuICAgICAgLy8gUmVuZGVyaW5nIHdpbGwgc3RvcCB3aGVuIHRoZSBjb250YWluZXIgaXNuJ3QgaW4gdmlldyB0byBzYXZlIG9uIHBlcmZvcm1hbmNlLlxuICAgICAgLy8gSWYgdGhlIGNvbnRhaW5lciB3YXMgbm90IGluIHZpZXcgYW5kIGNvbWVzIGJhY2sgaW50byB2aWV3IGFnYWluLCByZXN0YXJ0IHRoZSByZW5kZXIgbG9vcC5cbiAgICAgIGNvbnN0IHdhc0luVmlldyA9IHRoaXMuY29udGFpbmVySXNJblZpZXc7XG4gICAgICB0aGlzLmNvbnRhaW5lcklzSW5WaWV3ID0gdGhpcy5nZXRJc0NvbnRhaW5lckluVmlldygpO1xuXG4gICAgICBpZiAoIXdhc0luVmlldyAmJiB0aGlzLmNvbnRhaW5lcklzSW5WaWV3KSB7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB9XG4gICAgfSwgVEhST1RUTEVfVElNRU9VVCk7XG4gIH1cblxuICBnZXRJc0NvbnRhaW5lckluVmlldygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIDwgd2luZG93LmlubmVySGVpZ2h0ICYmXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSA+IDA7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgY2FjaGVQb2ludGVyQ29vcmRzKHBvaW50WDogbnVtYmVyLCBwb2ludFk6IG51bWJlcikge1xuICAgIHRoaXMubGFzdE1vdXNlWCA9IHBvaW50WDtcbiAgICB0aGlzLmxhc3RNb3VzZVkgPSBwb2ludFk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlTW91c2VNb3ZlKGU6IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLnVwZGF0ZVBvaW50ZXJDb29yZHMoZS5jbGllbnRYLCBlLmNsaWVudFkpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVRvdWNoTW92ZShlOiBFdmVudCkge1xuICAgIGNvbnN0IHRvdWNoRXZlbnQgPSBlIGFzIFRvdWNoRXZlbnQ7XG4gICAgdGhpcy51cGRhdGVQb2ludGVyQ29vcmRzKHRvdWNoRXZlbnQudG91Y2hlc1swXS5jbGllbnRYLCB0b3VjaEV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgdXBkYXRlUG9pbnRlckNvb3Jkcyhwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpIHtcbiAgICBpZiAoIXRoaXMubW91c2VJc0Rvd24pIHsgcmV0dXJuOyB9XG5cbiAgICB0aGlzLm1vdXNlWCA9IHBvaW50WDtcbiAgICB0aGlzLm1vdXNlWSA9IHBvaW50WTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICB1cGRhdGVTaGFwZUNvb3JkcygpIHtcbiAgICB0aGlzLmFsbFNoYXBlcy5mb3JFYWNoKChzaGFwZSkgPT4ge1xuICAgICAgY29uc3QgeCA9IHNoYXBlLmJ1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgICAgY29uc3QgeSA9IHNoYXBlLmJ1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICBzaGFwZS5ib2R5LnBvaW50WCA9IHg7XG4gICAgICBzaGFwZS5ib2R5LnBvaW50WSA9IHk7XG4gICAgICBzaGFwZS5hbmNob3IucG9pbnRYID0geDtcbiAgICAgIHNoYXBlLmFuY2hvci5wb2ludFkgPSB5O1xuICAgICAgc2hhcGUub3JpZ2luLnggPSB4O1xuICAgICAgc2hhcGUub3JpZ2luLnkgPSB5O1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlQ2FudmFzRGltZW5zaW9ucygpIHtcbiAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMuY29udGFpbmVyLm9mZnNldFdpZHRoICogUElYRUxfREVOU0lUWTtcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSB0aGlzLmNvbnRhaW5lci5vZmZzZXRIZWlnaHQgKiBQSVhFTF9ERU5TSVRZO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIHJldHVybkFsbEJvZGllc1RvT3JpZ2luKCkge1xuICAgIHRoaXMuYWxsU2hhcGVzLmZvckVhY2goKHNoYXBlKSA9PiB7XG4gICAgICB0aGlzLnJldHVybkJvZHlUb09yaWdpbihzaGFwZSk7XG4gICAgfSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgLyoqXG4gICAqIFRoaXMgd2lsbCBjYW5jZWwgcGh5c2ljcyBpbnRlcmFjdGlvbnMgZm9yIGEgYm9keSBhbmQgdHdlZW4gaXQgYmFjayB0byBpdHMgb3JpZ2luLlxuICAgKi9cbiAgcmV0dXJuQm9keVRvT3JpZ2luKHNoYXBlOiBJU2hhcGVXaXRoQm9keSkge1xuICAgIGlmIChzaGFwZS5pc1R3ZWVuaW5nIHx8IHNoYXBlLmlzTG9ja2VkKSB7IHJldHVybjsgfVxuICAgIHNoYXBlLmlzTG9ja2VkID0gdHJ1ZTtcblxuICAgIFR3ZWVuTWF4LnRvKHNoYXBlLmJvZHksIEFOSU1BVElPTl9USU1FLCB7XG4gICAgICBwb2ludFg6IHNoYXBlLmFuY2hvci5wb2ludFgsXG4gICAgICBwb2ludFk6IHNoYXBlLmFuY2hvci5wb2ludFksXG4gICAgICBvblN0YXJ0OiAoKSA9PiB7XG4gICAgICAgIHNoYXBlLmlzVHdlZW5pbmcgPSB0cnVlO1xuICAgICAgICBzaGFwZS5idXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICB9LFxuICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICBzaGFwZS5pc1R3ZWVuaW5nID0gZmFsc2U7XG4gICAgICAgIHNoYXBlLmJvZHkucG9pbnRYID0gc2hhcGUuYW5jaG9yLnBvaW50WDtcbiAgICAgICAgc2hhcGUuYm9keS5wb2ludFkgPSBzaGFwZS5hbmNob3IucG9pbnRZO1xuICAgICAgICBzaGFwZS5idXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgICAgICBpZiAoc2hhcGUuYXVkaW9QbGF5ZXIpIHtcbiAgICAgICAgICBzaGFwZS5hdWRpb1BsYXllci5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlYXNlOiBFeHBvLmVhc2VPdXQsXG4gICAgfSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgLyoqXG4gICAqIFRoaXMgdHdlZW5zIHRoZSBwb3NpdGlvbiBvZiBhIGJvZHkgdG8gYSBzZXQgcG9zaXRpb24gYW5kIHJlbGVhc2VzIGl0IGFuZCBsZXRzIHBoeXNpY3MgdGFrZSBvdmVyXG4gICAqIFRoaXMgaXMgdXNlZCBhcyBib3RoIGFuIGF0dHJhY3QgbWV0aG9kIGFuZCBhbGxvd2luZyBrZXlib2FyZCB1c2VycyB0byBleHBlcmllbmNlIGludGVyYWN0aW9uXG4gICAqL1xuICBhdXRvRHJhZ0FuZFRocm93SXRlbShzaGFwZTogSVNoYXBlV2l0aEJvZHkpIHtcbiAgICBpZiAoc2hhcGUuaXNUd2VlbmluZykgeyByZXR1cm47IH1cbiAgICBzaGFwZS5pc0xvY2tlZCA9IHRydWU7XG5cbiAgICAvLyBUaGUgdHdlZW4gd2lsbCBtb3ZlIHRoZSBnaXZlbiBzaGFwZSBkb3duIGFuZCB0byB0aGUgbGVmdCBvZiBpdHMgc3RhcnRpbmcgcG9zaXRpb25cbiAgICBjb25zdCB0YXJnZXRYID0gc2hhcGUuYW5jaG9yLnBvaW50WCAtIHNoYXBlLmJ1dHRvbi5vZmZzZXRXaWR0aCAqIEFVVE9USFJPV19NVUxUSVBMSUVSO1xuICAgIGNvbnN0IHRhcmdldFkgPSBzaGFwZS5hbmNob3IucG9pbnRZICsgc2hhcGUuYnV0dG9uLm9mZnNldEhlaWdodDtcblxuICAgIFR3ZWVuTWF4LnRvKHNoYXBlLmJvZHksIEFOSU1BVElPTl9USU1FLCB7XG4gICAgICBwb2ludFg6IHRhcmdldFgsXG4gICAgICBwb2ludFk6IHRhcmdldFksXG4gICAgICBvblN0YXJ0OiAoKSA9PiB7XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gZW11bGF0ZSBzb21lIG9mIHdoYXQgaGFwcGVucyB3aGVuIGEgbW91c2UvdG91Y2ggaW50ZXJhY3RzIHdpdGggYSBzaGFwZSBhbmRcbiAgICAgICAgLy8gc2V0IHRoZXNlIHZhcmlhYmxlcyB0byBtYXRjaCB0aGF0XG4gICAgICAgIHRoaXMubW91c2VPZmZzZXRYID0gMDtcbiAgICAgICAgdGhpcy5tb3VzZU9mZnNldFkgPSAwO1xuICAgICAgICB0aGlzLmxhc3RNb3VzZVggPSBzaGFwZS5ib2R5LnBvaW50WDtcbiAgICAgICAgdGhpcy5sYXN0TW91c2VZID0gc2hhcGUuYm9keS5wb2ludFk7XG4gICAgICAgIHRoaXMuYWN0aXZlU2hhcGUgPSBzaGFwZTtcbiAgICAgICAgdGhpcy5hY3RpdmVTaGFwZS5idXR0b24uY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5BQ1RJVkUpO1xuICAgICAgICBzaGFwZS5pc1R3ZWVuaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5tb3VzZUlzRG93biA9IHRydWU7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6ICgpID0+IHtcbiAgICAgICAgLy8gTW92ZSB0aGUgc2hhcGUgdG8gdGhlIGN1cnJlbnQgcG9zaXRpb24gaW4gdGhlIHR3ZWVuXG4gICAgICAgIHRoaXMubW91c2VYID0gc2hhcGUuYm9keS5wb2ludFg7XG4gICAgICAgIHRoaXMubW91c2VZID0gc2hhcGUuYm9keS5wb2ludFk7XG4gICAgICB9LFxuICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAvLyBBcyBhIGNhdGNoLWFsbCwgcmV0dXJuIGFsbCBib2RpZXMgdG8gdGhlaXIgb3JpZ2luIHdoZW4gdGhpcyB0d2VlbiBmaW5pc2hlcyB0byBwcmV2ZW50IG9kZFxuICAgICAgICAvLyB2aXN1YWwgYmVoYXZpb3IuXG4gICAgICAgIHRoaXMuc2hhcGVUd2VlblRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMucmV0dXJuQWxsQm9kaWVzVG9PcmlnaW4sIFJFVFVSTl9UT19PUklHSU5fVElNRU9VVCk7XG5cbiAgICAgICAgLy8gRW11bGF0ZSB0aGUgYmVoYXZpb3Igb2Ygd2hhdCBoYXBwZW5zIHdoZW4gYSBtb3VzZS90b3VjaCBpbnRlcmFjdGlvbiBlbmRzLCBzbyBwcm92aWRlXG4gICAgICAgIC8vIHZlbG9jaXR5IHRvIHRoZSBzaGFwZSBhbmQgdW5sb2NrIGl0IHRvIGFsbG93IHBoeXNpY3MgdG8gdGFrZSBvdmVyXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZVNoYXBlKSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVTaGFwZS5idXR0b24uY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5BQ1RJVkUpO1xuICAgICAgICAgIHRoaXMuYWN0aXZlU2hhcGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBvaW50RGlzdCA9XG4gICAgICAgICAgICB0aGlzLmdldERpc3RhbmNlQXNUd29Qb2ludHMoXG4gICAgICAgICAgICAgICAgc2hhcGUuYW5jaG9yLnBvaW50WCxcbiAgICAgICAgICAgICAgICBzaGFwZS5hbmNob3IucG9pbnRZLFxuICAgICAgICAgICAgICAgIHRhcmdldFgsXG4gICAgICAgICAgICAgICAgdGFyZ2V0WSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIHNoYXBlLmlzVHdlZW5pbmcgPSBmYWxzZTtcbiAgICAgICAgc2hhcGUuaXNMb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5tb3VzZUlzRG93biA9IGZhbHNlO1xuICAgICAgICBzaGFwZS5ib2R5LnBvaW50WCA9IHRhcmdldFg7XG4gICAgICAgIHNoYXBlLmJvZHkucG9pbnRZID0gdGFyZ2V0WTtcbiAgICAgICAgc2hhcGUuYm9keS52ZWxvY2l0eVggPSBwb2ludERpc3QueCAvIFZFTE9DSVRZX0lOVEVSQUNUSU9OX01PRElGSUVSO1xuICAgICAgICBzaGFwZS5ib2R5LnZlbG9jaXR5WSA9IHBvaW50RGlzdC55IC8gVkVMT0NJVFlfSU5URVJBQ1RJT05fTU9ESUZJRVI7XG4gICAgICB9LFxuICAgICAgZWFzZTogRXhwby5lYXNlT3V0LFxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlUGh5c2ljc0JvZHkob3B0aW9uczogSVBoeXNpY3NCb2R5T3B0aW9ucyk6IElQaHlzaWNzQm9keSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcmNlWDogMCxcbiAgICAgIGZvcmNlWTogMCxcbiAgICAgIHBvaW50WDogb3B0aW9ucy54LFxuICAgICAgcG9pbnRZOiBvcHRpb25zLnksXG4gICAgICB2ZWxvY2l0eVg6IDEsXG4gICAgICB2ZWxvY2l0eVk6IDEsXG4gICAgICBtYXNzOiBvcHRpb25zLm1hc3MsXG4gICAgICByYWRpdXM6IG9wdGlvbnMucmFkaXVzIHx8IDEsXG4gICAgfTtcbiAgfVxuXG4gIGdldERpc3RhbmNlQXNUd29Qb2ludHMoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcik6IElQb2ludCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHgxIC0geDIsXG4gICAgICB5OiB5MSAtIHkyLFxuICAgIH07XG4gIH1cblxuICBnZXRQb2ludERpc3RhbmNlKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coeDEgLSB4MiwgMikgKyBNYXRoLnBvdyh5MSAtIHkyLCAyKSk7XG4gIH1cblxuICBnZXRBbmdsZSh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5hdGFuMih4MiAtIHgxLCB5MiAtIHkxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbWFpbiBwaHlzaWNzIGNhbGN1bGF0aW9ucy4gVGhpcyBjb21wYXJlcyB0aGUgZGlzdGFuY2UgYW5kIG1hc3Mgb2YgdHdvIGJvZGllcyBhbmQgbW9kaWZpZXNcbiAgICogdGhlaXIgZm9yY2VzIGJhc2VkIG9uIHRoZSBzZXQgZ3Jhdml0YXRpb25hbCBjb25zdGFudC5cbiAgICovXG4gIHBhaXJ3aXNlUGh5c2ljcyhhOiBJUGh5c2ljc0JvZHksIGI6IElQaHlzaWNzQm9keSkge1xuICAgIC8vIENhbGN1bGF0ZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28gb2JqZWN0cyBpbiBxdWVzdGlvbi5cbiAgICBjb25zdCBwb2ludERpc3QgPSB0aGlzLmdldERpc3RhbmNlQXNUd29Qb2ludHMoYS5wb2ludFgsIGEucG9pbnRZLCBiLnBvaW50WCwgYi5wb2ludFkpO1xuICAgIGxldCBkaXN0WCA9IHBvaW50RGlzdC54O1xuICAgIGxldCBkaXN0WSA9IHBvaW50RGlzdC55O1xuXG4gICAgY29uc3QgZG90UHJvZHVjdCA9IGRpc3RYICogZGlzdFggKyBkaXN0WSAqIGRpc3RZO1xuXG4gICAgLy8gSWYgZG90UHJvZHVjdCBpcyAwLCBpdCBtZWFucyB0aGUgdHdvIG9iamVjdHMgYXJlIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICAgIC8vIENhbmNlbCBmdXRoZXIgY2FsY3VsYXRpb25zIHRvIHByZXZlbnQgdGhpbmdzIGxpa2UgZGl2aWRpbmcgYnkgemVyby5cbiAgICBpZiAoZG90UHJvZHVjdCA9PT0gMCkgeyByZXR1cm47IH1cblxuICAgIC8vIFNxdWFyZSByb290IG9mIHRoZSBkb3QgcHJvZHVjdCBpcyB0aGUgbmV3IHZlY3RvclxuICAgIGNvbnN0IHIgPSBNYXRoLnNxcnQoZG90UHJvZHVjdCk7XG4gICAgZGlzdFggLz0gcjtcbiAgICBkaXN0WSAvPSByO1xuXG4gICAgLy8gQ2FsY3VsYXRlIGZvcmNlIGJldHdlZW4gb2JqZWN0cy5cbiAgICBjb25zdCBmb3JjZU1hZ25pdHVkZSA9IE1hdGgubWluKEdSQVZJVFlfQ09OU1RBTlQgKiBhLm1hc3MgKiBiLm1hc3MgLyBkb3RQcm9kdWN0LCAxMDApO1xuICAgIGNvbnN0IGZvcmNlWCA9IGRpc3RYICogZm9yY2VNYWduaXR1ZGU7XG4gICAgY29uc3QgZm9yY2VZID0gZGlzdFkgKiBmb3JjZU1hZ25pdHVkZTtcblxuICAgIC8vIFVwZGF0ZSB4IGFuZCB5IGZvcmNlcyBvZiBvdXIgb2JqZWN0cyBiYXNlZCBvbiBvdXIgcHJldmlvdXMgZXF1YXRpb25zLlxuICAgIGEuZm9yY2VYIC09IGZvcmNlWDtcbiAgICBhLmZvcmNlWSAtPSBmb3JjZVk7XG4gICAgYi5mb3JjZVggKz0gZm9yY2VYO1xuICAgIGIuZm9yY2VZICs9IGZvcmNlWTtcbiAgfVxuXG4gIHJlc2V0Rm9yY2UoYm9keTogSVBoeXNpY3NCb2R5KSB7XG4gICAgYm9keS5mb3JjZVggPSAwO1xuICAgIGJvZHkuZm9yY2VZID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGNhbGN1bGF0ZXMgYSBuZXcgdmVsb2NpdHkgZm9yIGEgZ2l2ZW4gYm9keSBiYXNlZCB0aGUgZm9yY2VzIGN1cnJlbnRseSBhY3Rpbmcgb24gaXQgYW5kIGl0c1xuICAgKiBtYXNzLCBhbmQgdXNlcyB0aGUgcmVzdWx0IHRvIHVwZGF0ZSBpdHMgcG9zaXRpb24uIFRoaXMgaXMgbW9kaWZpZWQgYnkgYSB0aW1lIGNvbnN0YW50LlxuICAgKi9cbiAgbW92ZUJvZHkoYm9keTogSVBoeXNpY3NCb2R5KSB7XG4gICAgYm9keS52ZWxvY2l0eVggKz0gYm9keS5mb3JjZVggKiBUSU1FU1RFUCAvIGJvZHkubWFzcztcbiAgICBib2R5LnZlbG9jaXR5WSArPSBib2R5LmZvcmNlWSAqIFRJTUVTVEVQIC8gYm9keS5tYXNzO1xuXG4gICAgYm9keS5wb2ludFggKz0gYm9keS52ZWxvY2l0eVggKiBUSU1FU1RFUDtcbiAgICBib2R5LnBvaW50WSArPSBib2R5LnZlbG9jaXR5WSAqIFRJTUVTVEVQO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMganVzdCBhcmJpdHJhcmlseSByZWR1Y2VzIHRoZSB2ZWxvY2l0eSBvZiBhIGJvZHkgb3ZlciB0aW1lLiBVc2VkIGZvciBoZWxwaW5nIHRvIHJlZHVjZVxuICAgKiB0aW1lIGEgYm9keSBzcGVuZHMgaW4gJ29yYml0JyBmb3IgZGVzaWduIHJlYXNvbnMuXG4gICAqL1xuICBkZWdyYWRlVmVsb2NpdHkoYm9keTogSVBoeXNpY3NCb2R5KSB7XG4gICAgYm9keS52ZWxvY2l0eVggKj0gVkVMT0NJVFlfREVHUkFEQVRJT05fUkFURTtcbiAgICBib2R5LnZlbG9jaXR5WSAqPSBWRUxPQ0lUWV9ERUdSQURBVElPTl9SQVRFO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbG9ja3MgdGhlIGN1cnJlbnRseSBhY3RpdmUgc2hhcGUgdG8gdGhlIG1vdXNlIHNvIHRoYXQgYSBkaWFncmFtIG9mIGRpc3RhbmNlIGFuZCBhbmdsZVxuICAgKiBjYW4gYmUgYWNjdXJhdGVseSBkcmF3biBmcm9tIHRoZSBvYmplY3QgYmFjayB0byBpdHMgb3JpZ2luIHBvaW50XG4gICAqL1xuICBsb2NrQWN0aXZlU2hhcGVUb01vdXNlKCkge1xuICAgIGlmICghdGhpcy5hY3RpdmVTaGFwZSkgeyByZXR1cm47IH1cblxuICAgIGlmICghdGhpcy5hY3RpdmVTaGFwZS5pc1R3ZWVuaW5nKSB7XG4gICAgICAvLyBUaGlzIGNvZGUgY2hlY2tzIHRvIHNlZSBpZiB0aGUgcG9pbnRlciBpcyBzdGlsbCB3aXRoaW4gdGhlIGJvdW5kcyBvZiB0aGUgbG9nbyBhcmVhLlxuICAgICAgLy8gSWYgdGhlIHBvaW50ZXIgbGVhdmVzIHRoaXMgYXJlYSwgdGhlbiB0aGUgY3VycmVudGx5IGFjdGl2ZSBzaGFwZSdzIHBvc2l0aW9uIHdpbGwgYmUgY2FwcGVkXG4gICAgICAvLyBhdCB0aGUgbWF4IGJvdW5kcy5cbiAgICAgIGNvbnN0IGNvbnRhaW5lckxlZnQgPSB0aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgICAgY29uc3QgY29udGFpbmVyVG9wID0gdGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuXG4gICAgICBjb25zdCBpbkJvdW5kc1ggPSB0aGlzLm1vdXNlWCA+IGNvbnRhaW5lckxlZnQgJiZcbiAgICAgICAgICB0aGlzLm1vdXNlWCA8IHRoaXMuY29udGFpbmVyLm9mZnNldFdpZHRoICsgY29udGFpbmVyTGVmdDtcblxuICAgICAgY29uc3QgaW5Cb3VuZHNZID0gdGhpcy5tb3VzZVkgPiBjb250YWluZXJUb3AgJiZcbiAgICAgICAgICB0aGlzLm1vdXNlWSA8IHRoaXMuY29udGFpbmVyLm9mZnNldEhlaWdodCArIGNvbnRhaW5lclRvcDtcblxuICAgICAgY29uc3Qgb2Zmc2V0WCA9IHRoaXMubW91c2VYIC0gdGhpcy5tb3VzZU9mZnNldFg7XG4gICAgICBjb25zdCBvZmZzZXRZID0gdGhpcy5tb3VzZVkgLSB0aGlzLm1vdXNlT2Zmc2V0WTtcblxuICAgICAgaWYgKGluQm91bmRzWCkge1xuICAgICAgICB0aGlzLmFjdGl2ZVNoYXBlLmJvZHkucG9pbnRYID0gb2Zmc2V0WDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5tb3VzZVggKyB0aGlzLm1vdXNlT2Zmc2V0WCA8IGNvbnRhaW5lckxlZnQpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVTaGFwZS5ib2R5LnBvaW50WCA9IGNvbnRhaW5lckxlZnQgLSB0aGlzLm1vdXNlT2Zmc2V0WDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5tb3VzZVggLSB0aGlzLm1vdXNlT2Zmc2V0WCA+IHRoaXMuY29udGFpbmVyLm9mZnNldFdpZHRoICsgY29udGFpbmVyTGVmdCkge1xuICAgICAgICB0aGlzLmFjdGl2ZVNoYXBlLmJvZHkucG9pbnRYID1cbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLm9mZnNldFdpZHRoICsgY29udGFpbmVyTGVmdCAtIHRoaXMubW91c2VPZmZzZXRYO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5Cb3VuZHNZKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlU2hhcGUuYm9keS5wb2ludFkgPSBvZmZzZXRZO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLm1vdXNlWSArIHRoaXMubW91c2VPZmZzZXRZIDwgY29udGFpbmVyVG9wKSB7XG4gICAgICAgIHRoaXMubW91c2VZID0gY29udGFpbmVyVG9wIC0gdGhpcy5tb3VzZU9mZnNldFk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubW91c2VZICsgdGhpcy5tb3VzZU9mZnNldFkgPiB0aGlzLmNvbnRhaW5lci5vZmZzZXRIZWlnaHQgKyBjb250YWluZXJUb3ApIHtcbiAgICAgICAgdGhpcy5tb3VzZVkgPSB0aGlzLmNvbnRhaW5lci5vZmZzZXRIZWlnaHQgKyBjb250YWluZXJUb3AgKyB0aGlzLm1vdXNlT2Zmc2V0WTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPbmx5IHJ1biB0aGUgZGlhZ3JhbSBkcmF3aW5nIGNvZGUgaWYgYW4gZWxlbWVudCB3YXMgdGFnZ2VkIHRvIG5lZWQgZGlhZ3JhbSBkcmF3aW5nIHdpdGggdGhlXG4gICAgLy8gZGlhZ3JhbSBkYXRhIGtleS4gVGhpcyBpcyBjYWNoZWQgb24gcGFnZSBsb2FkLlxuICAgIGlmICghdGhpcy5hY3RpdmVTaGFwZS5uZWVkc0RpYWdyYW0pIHsgcmV0dXJuOyB9XG5cbiAgICBjb25zdCBwb2ludERpc3QgPVxuICAgICAgICB0aGlzLmdldFBvaW50RGlzdGFuY2UoXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVNoYXBlLmJvZHkucG9pbnRYLFxuICAgICAgICAgICAgdGhpcy5hY3RpdmVTaGFwZS5ib2R5LnBvaW50WSxcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlU2hhcGUuYW5jaG9yLnBvaW50WCxcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlU2hhcGUuYW5jaG9yLnBvaW50WSxcbiAgICAgICAgKTtcblxuICAgIC8vIFNpbmNlIHdlIGFyZSBwbGFubmluZyB0byBkcmF3IHRoZSBkaWFncmFtIHN0YXJ0aW5nIGF0IHRoZSBiYXNlbGluZSBvZiB0aGUgc2hhcGUsIHdlIHdhbnQgdG9cbiAgICAvLyBzdGFydCBkcmF3aW5nIGFmdGVyIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBzaGFwZSBhbmQgdGhlIG9yaWdpbiBpcyBmYWlybHkgc21hbGwuIFJhZGl1c1xuICAgIC8vIGRpdmlkZWQgYnkgMiB3b3JrcyB3ZWxsIGZvciB0aGlzIHZhbHVlLlxuICAgIGNvbnN0IGlzQWJvdmUgPVxuICAgICAgICBNYXRoLmFicyhwb2ludERpc3QpID4gdGhpcy5hY3RpdmVTaGFwZS5ib2R5LnJhZGl1cyAvIDIgJiZcbiAgICAgICAgdGhpcy5hY3RpdmVTaGFwZS5ib2R5LnBvaW50WSA8IHRoaXMuYWN0aXZlU2hhcGUuYW5jaG9yLnBvaW50WTtcblxuICAgIC8vIFJhZGl1cyAqIDIgaXMgdGhlIGRpYW1ldGVyIG9mIGFueSBvYmplY3QsIHdoaWNoIHdvcmtzIHdlbGwgYXMgYSByZWFzb25hYmxlIGRpc3RhbmNlIHRvIGNoZWNrXG4gICAgLy8gYWdhaW5zdCBmb3IgYW4gb2JqZWN0J3MgeCBvciB5IGNvb3JkIGJlaW5nIHBvc2l0aW9uZWQgcmVhc29uYWJseSBmYXIgZnJvbSBpdHMgcmVzcGVjdGl2ZVxuICAgIC8vIG9yaWdpbi5cbiAgICBjb25zdCBpc0JlbG93ID1cbiAgICAgICAgTWF0aC5hYnMocG9pbnREaXN0KSA+IHRoaXMuYWN0aXZlU2hhcGUuYm9keS5yYWRpdXMgKiAyICYmXG4gICAgICAgIHRoaXMuYWN0aXZlU2hhcGUuYm9keS5wb2ludFkgPiB0aGlzLmFjdGl2ZVNoYXBlLmFuY2hvci5wb2ludFk7XG5cbiAgICAvLyBDb25zaWRlciBkb3VibGUgdGhlIGRpYW1ldGVyICg0eCByYWRpdXMpIHRvIGJlIGZhclxuICAgIGNvbnN0IGlzRmFyID0gTWF0aC5hYnMocG9pbnREaXN0KSA+IHRoaXMuYWN0aXZlU2hhcGUuYm9keS5yYWRpdXMgKiA0O1xuXG4gICAgLy8gSWYgcmVhc29uYWJseSBhYm92ZSwgYmVsb3csIG9yIGZhciBmcm9tIGFuIG9iamVjdCdzIG9yaWdpbiwgZHJhdyBhIGRpYWdyYW0gZm9yIGl0XG4gICAgaWYgKGlzQWJvdmUgfHwgaXNCZWxvdyB8fCBpc0Zhcikge1xuICAgICAgdGhpcy5kcmF3RGlhZ3JhbSgpO1xuICAgICAgdGhpcy5zaG93Q2FudmFzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZUNhbnZhcygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZ29hbCBpcyB0byBoYXZlIHRoZSBkcmF3aW5nIG9mIHRoZSBkaWFncmFtIG9uIHRoZSBjYW52YXMgZmFkZSBpbiBhbmQgb3V0IHdoZW4gbmVlZGVkLFxuICAgKiB3aGljaCBsb29rcyBtdWNoIG5pY2VyIHRoYW4gc25hcHBpbmcgaW50byBleGlzdGVuY2UuIFRoaXMgYXBwbGllcyBhIGNzcyBzZWxlY3RvciBhbmQgdGhlIHZpc3VhbFxuICAgKiBlZmZlY3QgaXMgcmVuZGVyZWQgd2l0aCBjc3MuXG4gICAqL1xuICBzaG93Q2FudmFzKCkge1xuICAgIGlmICh0aGlzLmNhbnZhc0lzVmlzaWJsZSkgeyByZXR1cm47IH1cbiAgICB0aGlzLmNhbnZhc0lzVmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5jYW52YXMuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5BQ1RJVkUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgcmVtb3ZlcyB0aGUgcmVsZXZhbnQgY3NzIHNlbGVjdG9yIGZyb20gdGhlIGNhbnZhcyBzbyBpdCBjYW4gdHJhbnNpdGlvbiBvdXQgb2YgdmlzaWJpbGl0eVxuICAgKiBzbW9vdGhseS5cbiAgICovXG4gIGhpZGVDYW52YXMoKSB7XG4gICAgaWYgKCF0aGlzLmNhbnZhc0lzVmlzaWJsZSkgeyByZXR1cm47IH1cbiAgICB0aGlzLmNhbnZhc0lzVmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuY2FudmFzLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuQUNUSVZFKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGhhbmRsZXMgdGhlIGFjdHVhbCBjYW52YXMgZHJhd2luZyBvZiB0aGUgZGlzdGFuY2UgYW5kIGFuZ2xlIGRpYWdyYW0gZm9yIGFuIG9iamVjdFxuICAgKi9cbiAgZHJhd0RpYWdyYW0oKSB7XG4gICAgaWYgKCF0aGlzLmN0eCB8fCAhdGhpcy5hY3RpdmVTaGFwZSkgeyByZXR1cm47IH1cblxuICAgIGNvbnN0IGNvbnRhaW5lckxlZnQgPSB0aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgIGNvbnN0IGNvbnRhaW5lclRvcCA9IHRoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcblxuICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IERJQUdSQU1fVEVYVF9DT0xPUjtcbiAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IERJQUdSQU1fTElORV9DT0xPUjtcbiAgICB0aGlzLmN0eC5zZXRMaW5lRGFzaChESUFHUkFNX0RBU0hfUEFUVEVSTik7XG4gICAgdGhpcy5jdHgubGluZVdpZHRoID0gRElBR1JBTV9MSU5FX1dJRFRIO1xuXG4gICAgLy8gRHJhdyBsaW5lIHRvIHNoYXBlIGZyb20gb3JpZ2luXG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgdGhpcy5jdHgubW92ZVRvKFxuICAgICAgICB0aGlzLmFjdGl2ZVNoYXBlLmJ1dHRvbi5vZmZzZXRMZWZ0ICogUElYRUxfREVOU0lUWSxcbiAgICAgICAgKHRoaXMuYWN0aXZlU2hhcGUuYnV0dG9uLm9mZnNldFRvcCArIHRoaXMuYWN0aXZlU2hhcGUuYnV0dG9uLm9mZnNldEhlaWdodCkgKiBQSVhFTF9ERU5TSVRZLFxuICAgICk7XG4gICAgdGhpcy5jdHgubGluZVRvKFxuICAgICAgICAodGhpcy5hY3RpdmVTaGFwZS5ib2R5LnBvaW50WCAtIGNvbnRhaW5lckxlZnQgKyAodGhpcy5hY3RpdmVTaGFwZS5idXR0b24ub2Zmc2V0V2lkdGggLyAyKSkgKlxuICAgICAgICAgICAgUElYRUxfREVOU0lUWSxcbiAgICAgICAgKHRoaXMuYWN0aXZlU2hhcGUuYm9keS5wb2ludFkgLSBjb250YWluZXJUb3AgKyAodGhpcy5hY3RpdmVTaGFwZS5idXR0b24ub2Zmc2V0SGVpZ2h0IC8gMikpICpcbiAgICAgICAgICAgIFBJWEVMX0RFTlNJVFksXG4gICAgKTtcbiAgICB0aGlzLmN0eC5zdHJva2UoKTtcbiAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKTtcblxuICAgIC8vIERyYXcgYmFzZWxpbmUgb2Ygc2hhcGVcbiAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcbiAgICB0aGlzLmN0eC5tb3ZlVG8oXG4gICAgICAgIHRoaXMuYWN0aXZlU2hhcGUuYnV0dG9uLm9mZnNldExlZnQgKiBQSVhFTF9ERU5TSVRZLFxuICAgICAgICAodGhpcy5hY3RpdmVTaGFwZS5idXR0b24ub2Zmc2V0VG9wICsgdGhpcy5hY3RpdmVTaGFwZS5idXR0b24ub2Zmc2V0SGVpZ2h0KSAqIFBJWEVMX0RFTlNJVFksXG4gICAgKTtcbiAgICB0aGlzLmN0eC5saW5lVG8oXG4gICAgICAgICh0aGlzLmFjdGl2ZVNoYXBlLmJ1dHRvbi5vZmZzZXRMZWZ0ICsgdGhpcy5hY3RpdmVTaGFwZS5idXR0b24ub2Zmc2V0V2lkdGgpICogUElYRUxfREVOU0lUWSxcbiAgICAgICAgKHRoaXMuYWN0aXZlU2hhcGUuYnV0dG9uLm9mZnNldFRvcCArIHRoaXMuYWN0aXZlU2hhcGUuYnV0dG9uLm9mZnNldEhlaWdodCkgKiBQSVhFTF9ERU5TSVRZLFxuICAgICk7XG4gICAgdGhpcy5jdHguc3Ryb2tlKCk7XG4gICAgdGhpcy5jdHguY2xvc2VQYXRoKCk7XG5cbiAgICAvLyBUaGlzIGlzIHRoZSBhbmdsZSBpbiByYWRpYW5zIGZyb20gdGhlIHNoYXBlJ3MgYm90dG9tIGxlZnQgb3JpZ2luIHBvaW50IHRvIGl0cyBjdXJyZW50XG4gICAgLy8gcG9zaXRpb25cbiAgICBjb25zdCBhbmdsZSA9IHRoaXMuZ2V0QW5nbGUoXG4gICAgICB0aGlzLmFjdGl2ZVNoYXBlLmFuY2hvci5wb2ludFggLSAodGhpcy5hY3RpdmVTaGFwZS5idXR0b24ub2Zmc2V0V2lkdGggLyAyKSxcbiAgICAgIHRoaXMuYWN0aXZlU2hhcGUuYW5jaG9yLnBvaW50WSArICh0aGlzLmFjdGl2ZVNoYXBlLmJ1dHRvbi5vZmZzZXRIZWlnaHQgLyAyKSxcbiAgICAgIHRoaXMuYWN0aXZlU2hhcGUuYm9keS5wb2ludFgsXG4gICAgICB0aGlzLmFjdGl2ZVNoYXBlLmJvZHkucG9pbnRZLFxuICAgICk7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGFuZ2xlIGluIGRlZ3JlZXMgZm9yIGRpc3BsYXkgcHVycG9zZXNcbiAgICBsZXQgYW5nbGVJbkRlZyA9IE1hdGgucm91bmQoLWFuZ2xlICogKDE4MCAvIE1hdGguUEkpKSArIDkwO1xuXG4gICAgaWYgKGFuZ2xlSW5EZWcgPCAwKSB7XG4gICAgICBhbmdsZUluRGVnID0gMzYwICsgYW5nbGVJbkRlZztcbiAgICB9XG5cbiAgICAvLyBEcmF3IGEgcGFydGlhbCBjaXJjbGUgYXJvdW5kIHRoZSBjdXJyZW50IGFuZ2xlLiBCYXNlZCBvbiB0aGUgYW5nbGUsIGRldGVybWluZSB3aGVyZSBpdCBzdGFydHNcbiAgICAvLyBkcmF3aW5nIGZyb20gYW5kIHRvLlxuICAgIHRoaXMuY3R4LnNldExpbmVEYXNoKFswXSk7XG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgdGhpcy5jdHguYXJjKFxuICAgICAgdGhpcy5hY3RpdmVTaGFwZS5idXR0b24ub2Zmc2V0TGVmdCAqIFBJWEVMX0RFTlNJVFksXG4gICAgICAodGhpcy5hY3RpdmVTaGFwZS5idXR0b24ub2Zmc2V0VG9wICsgdGhpcy5hY3RpdmVTaGFwZS5idXR0b24ub2Zmc2V0SGVpZ2h0KSAqIFBJWEVMX0RFTlNJVFksXG4gICAgICBESUFHUkFNX0NJUkNMRV9SQURJVVMgKiBQSVhFTF9ERU5TSVRZLFxuICAgICAgYW5nbGVJbkRlZyA8IDM0MCA/IC0xMCAqIChNYXRoLlBJIC8gMTgwKSA6IDAsXG4gICAgICBhbmdsZUluRGVnIDwgMzQwID8gLWFuZ2xlICsgKDEwMCAqIChNYXRoLlBJIC8gMTgwKSkgOiAtYW5nbGUgKyAoOTAgKiAoTWF0aC5QSSAvIDE4MCkpLFxuICAgICk7XG4gICAgdGhpcy5jdHguc3Ryb2tlKCk7XG4gICAgdGhpcy5jdHguY2xvc2VQYXRoKCk7XG5cbiAgICAvLyBSZW5kZXIgdGhlIGN1cnJlbnQgYW5nbGUgaW4gZGVncmVlcyBhcyB0ZXh0IHRvIHRoZSBjYW52YXNcbiAgICBjb25zdCBhbmdsZVRleHQgPSBgJHthbmdsZUluRGVnfcKwYDtcbiAgICB0aGlzLmN0eC50ZXh0QWxpZ24gPSAncmlnaHQnO1xuXG4gICAgLy8gVGhlIG5vbi1jb25zdGFudCBudW1iZXJzIHVzZWQgaGVyZSBhcmUgbWFnaWMgbnVtYmVycyB0byBtYXRjaCBkZXNpZ24gcHJlZmVyZW5jZXMuXG4gICAgdGhpcy5jdHguZm9udCA9IERJQUdSQU1fRk9OVDtcbiAgICB0aGlzLmN0eC5maWxsVGV4dChcbiAgICAgICAgYW5nbGVUZXh0LFxuICAgICAgICAodGhpcy5hY3RpdmVTaGFwZS5idXR0b24ub2Zmc2V0TGVmdCArIDIyKSAqIFBJWEVMX0RFTlNJVFksXG4gICAgICAgICh0aGlzLmFjdGl2ZVNoYXBlLmJ1dHRvbi5vZmZzZXRUb3AgKyB0aGlzLmFjdGl2ZVNoYXBlLmJ1dHRvbi5vZmZzZXRIZWlnaHQgKyAxOCkgKlxuICAgICAgICAgICAgUElYRUxfREVOU0lUWSxcbiAgICApO1xuXG4gICAgLy8gUmVuZGVyIHRoZSBwcm9qZWN0ZWQgZXN0aW1hdGVkIHZlbG9jaXR5IGEgYm9keSB3aWxsIGhhdmUgd2hlbiByZWxlYXNlZCBhcyB0ZXh0IHRvIHRoZSBjYW52YXNcbiAgICBjb25zdCBwb2ludERpc3QgPSB0aGlzLmdldERpc3RhbmNlQXNUd29Qb2ludHMoXG4gICAgICAgIHRoaXMubGFzdE1vdXNlWCAtIHRoaXMubW91c2VPZmZzZXRYIC0gY29udGFpbmVyTGVmdCxcbiAgICAgICAgdGhpcy5sYXN0TW91c2VZIC0gdGhpcy5tb3VzZU9mZnNldFkgLSBjb250YWluZXJUb3AsXG4gICAgICAgIHRoaXMuYWN0aXZlU2hhcGUuYm9keS5wb2ludFggLSBjb250YWluZXJMZWZ0LFxuICAgICAgICB0aGlzLmFjdGl2ZVNoYXBlLmJvZHkucG9pbnRZIC0gY29udGFpbmVyVG9wLFxuICAgICk7XG5cbiAgICBjb25zdCB2ZWxvY2l0eSA9IE1hdGguYWJzKHBvaW50RGlzdC54IC8gVkVMT0NJVFlfSU5URVJBQ1RJT05fTU9ESUZJRVIpICtcbiAgICAgICAgTWF0aC5hYnMocG9pbnREaXN0LnkgLyBWRUxPQ0lUWV9JTlRFUkFDVElPTl9NT0RJRklFUik7XG5cbiAgICBjb25zdCBsZW5ndGhUZXh0ID0gYCR7TWF0aC5yb3VuZCh2ZWxvY2l0eSl9dmA7XG4gICAgLy8gVGhlIG5vbi1jb25zdGFudCBudW1iZXJzIHVzZWQgaGVyZSBhcmUgbWFnaWMgbnVtYmVycyB0byBtYXRjaCBkZXNpZ24gcHJlZmVyZW5jZXMuXG4gICAgdGhpcy5jdHguZmlsbFRleHQoXG4gICAgICAgIGxlbmd0aFRleHQsXG4gICAgICAgICh0aGlzLmFjdGl2ZVNoYXBlLmJ1dHRvbi5vZmZzZXRMZWZ0ICsgMjUpICogUElYRUxfREVOU0lUWSxcbiAgICAgICAgKHRoaXMuYWN0aXZlU2hhcGUuYnV0dG9uLm9mZnNldFRvcCArIHRoaXMuYWN0aXZlU2hhcGUuYnV0dG9uLm9mZnNldEhlaWdodCAtIDEwKSAqXG4gICAgICAgICAgICBQSVhFTF9ERU5TSVRZLFxuICAgICk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5jb250YWluZXJJc0luVmlldykgeyByZXR1cm47IH1cblxuICAgIGlmICh0aGlzLmN0eCkge1xuICAgICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgIH1cblxuICAgIC8vIEV2ZXJ5IGZyYW1lIHdlIG5lZWQgdG8gcmVzZXQgdGhlIGZvcmNlcyBvbiBhbGwgYm9kaWVzIHNvIHRoZXkgY2FuIGJlIHJlY2FsY3VsYXRlZFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hbGxTaGFwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHNoYXBlID0gdGhpcy5hbGxTaGFwZXNbaV07XG4gICAgICB0aGlzLnJlc2V0Rm9yY2Uoc2hhcGUuYm9keSk7XG4gICAgICB0aGlzLnJlc2V0Rm9yY2Uoc2hhcGUuYW5jaG9yKTtcblxuICAgICAgY29uc3QgcG9pbnREaXN0ID1cbiAgICAgICAgICB0aGlzLmdldFBvaW50RGlzdGFuY2UoXG4gICAgICAgICAgICAgIHNoYXBlLmJvZHkucG9pbnRYLFxuICAgICAgICAgICAgICBzaGFwZS5ib2R5LnBvaW50WSxcbiAgICAgICAgICAgICAgc2hhcGUuYW5jaG9yLnBvaW50WCxcbiAgICAgICAgICAgICAgc2hhcGUuYW5jaG9yLnBvaW50WSxcbiAgICAgICAgICApO1xuXG4gICAgICBjb25zdCBib2RpZXNBcmVDbG9zZSA9IE1hdGguYWJzKHBvaW50RGlzdCkgPCBzaGFwZS5hbmNob3IucmFkaXVzO1xuXG4gICAgICAvLyBJZiBhIHNoYXBlIGlzIGN1cnJlbnRseSBiZWluZyB0d2VlbmVkIG9yIGlzIGNsb3NlIHRvIGl0cyBhbmNob3IgcG9pbnQsIGRvIG5vdCBjYWxjdWxhdGVkXG4gICAgICAvLyBwaHlzaWNzIGZvciBpdFxuICAgICAgaWYgKCFib2RpZXNBcmVDbG9zZSAmJiAhc2hhcGUuaXNUd2VlbmluZykge1xuICAgICAgICAvLyBSdW4gdGhlIHBoeXNpY3MgY2FsY3VsYXRpb25zIGNvbXBhcmluZyBldmVyeSBzaGFwZSB0byBldmVyeSBvdGhlciBzaGFwZVxuICAgICAgICBmb3IgKGxldCBpaSA9IGkgKyAxOyBpaSA8IHRoaXMuYWxsU2hhcGVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICAgIGNvbnN0IHNoYXBlMiA9IHRoaXMuYWxsU2hhcGVzW2lpXTtcbiAgICAgICAgICBpZiAoc2hhcGUyICYmICFzaGFwZTIuaXNMb2NrZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGFpcndpc2VQaHlzaWNzKHNoYXBlLmJvZHksIHNoYXBlMi5ib2R5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPbmx5IHJ1biBwaHlzaWNzIG9mIGEgc2hhcGUgYWdhaW5zdCBpdHMgb3duIGFuY2hvciwgYW5kIG5vIG90aGVyIHNoYXBlJ3MgYW5jaG9yIHNvIHRoYXRcbiAgICAgICAgLy8gaXQgd2lsbCBiZSBwdWxsZWQgdG93YXJkIGl0cyBvcmlnaW4gcG9pbnQgYW5kIG5vdCBhbm90aGVyIHNoYXBlJ3Mgb3JpZ2luLlxuICAgICAgICB0aGlzLnBhaXJ3aXNlUGh5c2ljcyhzaGFwZS5ib2R5LCBzaGFwZS5hbmNob3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1vdmVtZW50IG9mIGJvZGllcyBoYXMgdG8gYmUgaW4gYSBzZXBhcmF0ZSBsb29wLCBiZWNhdXNlIGFsbCBmb3JjZXMgYmV0d2VlbiBib2RpZXMgbmVlZCB0b1xuICAgIC8vIGJlIGNhbGN1bGF0ZWQgYmVmb3JlIGFueSBvZiB0aGVtIGNhbiBiZSBtb3ZlZC4gSWYgYSBib2R5J3MgcG9zaXRpb24gYW5kIHZlbG9jaXR5IGFyZSB1cGRhdGVkXG4gICAgLy8gYXQgdGhlIHNhbWUgdGltZSBhcyBpdHMgaW50ZXJuYWwgZm9yY2UsIGl0IHdvbid0IGJlIGFjY3VyYXRlIGFzIGl0IHdpbGwgYWZmZWN0IG90aGVyIGJvZGllc1xuICAgIC8vIGJlZm9yZSB0aGVpciBmb3JjZXMgYXJlIGFjY3VyYXRlbHkgY2FsY3VsYXRlZC5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYWxsU2hhcGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzaGFwZSA9IHRoaXMuYWxsU2hhcGVzW2ldO1xuXG4gICAgICBjb25zdCBwb2ludERpc3QgPVxuICAgICAgICAgIHRoaXMuZ2V0UG9pbnREaXN0YW5jZShcbiAgICAgICAgICAgICAgc2hhcGUuYm9keS5wb2ludFgsXG4gICAgICAgICAgICAgIHNoYXBlLmJvZHkucG9pbnRZLFxuICAgICAgICAgICAgICBzaGFwZS5hbmNob3IucG9pbnRYLFxuICAgICAgICAgICAgICBzaGFwZS5hbmNob3IucG9pbnRZLFxuICAgICAgICAgICk7XG5cbiAgICAgIGNvbnN0IGJvZGllc0FyZUNsb3NlID0gTWF0aC5hYnMocG9pbnREaXN0KSA8IHNoYXBlLmFuY2hvci5yYWRpdXM7XG5cbiAgICAgIC8vIEFnYWluLCBkbyBub3QgbW92ZSBhIGJvZHkgaWYgaXQncyBjbG9zZSB0byBpdHMgYW5jaG9yIHBvaW50LiBJdCBoYXMgdG8gYmUgY2hlY2tlZCBhZ2FpblxuICAgICAgLy8gYmVjYXVzZSBpZiB0aGUgcGh5c2ljcyB1cGRhdGUgaGFzIG1vdmVkIGl0IHRvbyBjbG9zZSB0byBpdHMgYW5jaG9yLCBpdCBuZWVkcyB0byBiZSByZXR1cm5lZFxuICAgICAgLy8gdG8gaXRzIGFuY2hvciBpbnN0ZWFkIG9mIGNvbnRpbnVpbmcgdG8gbW92ZSBmcmVlbHlcbiAgICAgIGlmICghYm9kaWVzQXJlQ2xvc2UgJiYgIXNoYXBlLmlzVHdlZW5pbmcgJiYgc2hhcGUgIT09IHRoaXMuYWN0aXZlU2hhcGUpIHtcbiAgICAgICAgdGhpcy5tb3ZlQm9keShzaGFwZS5ib2R5KTtcblxuICAgICAgICAvLyBGb3IgZGVzaWduIGFlc3RoZXRpYyByZWFzb25zLCBicmVhayB0aGUgcnVsZXMgYSBiaXQgYW5kIGFydGlmaWNpYWxseSBhbmQgYXJiaXRyYXJpbHlcbiAgICAgICAgLy8gZGVncmFkZSB0aGUgYm9keSdzIHZlbG9jaXR5IG92ZXIgdGltZVxuICAgICAgICB0aGlzLmRlZ3JhZGVWZWxvY2l0eShzaGFwZS5ib2R5KTtcbiAgICAgIH0gZWxzZSBpZiAoYm9kaWVzQXJlQ2xvc2UgJiYgIXNoYXBlLmlzVHdlZW5pbmcpIHtcbiAgICAgICAgdGhpcy5yZXR1cm5Cb2R5VG9PcmlnaW4oc2hhcGUpO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgcG9pbnRlciBpcyBiZWluZyBoZWxkIGRvd24sIHJ1biBhbGwgY29kZSByZWxldmFudCB0byBsb2NraW5nIHRoZSBjdXJyZW50IGFjdGl2ZVxuICAgICAgLy8gc2hhcGUgdG8gdGhlIHBvaW50ZXIgcG9zaXRpb25cbiAgICAgIGlmICh0aGlzLm1vdXNlSXNEb3duKSB7XG4gICAgICAgIHRoaXMubG9ja0FjdGl2ZVNoYXBlVG9Nb3VzZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBUYWtlIHRoZSBjYWxjdWxhdGVkIHBvc2l0aW9uIG9mIHRoZSBib2R5IGFuZCBhcHBseSB0aGF0IHRvIHRoZSBzaGFwZS9lbGVtZW50J3MgdHJhbnNsYXRlZFxuICAgICAgLy8gcG9zaXRpb24gb24gc2NyZWVuLlxuICAgICAgY29uc3Qgc2hhcGVMZWZ0ID0gYCR7c2hhcGUuYm9keS5wb2ludFggLSBzaGFwZS5vcmlnaW4ueH1weGA7XG4gICAgICBjb25zdCBzaGFwZVRvcCA9IGAke3NoYXBlLmJvZHkucG9pbnRZIC0gc2hhcGUub3JpZ2luLnl9cHhgO1xuICAgICAgc2hhcGUuYnV0dG9uLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3NoYXBlTGVmdH0sICR7c2hhcGVUb3B9LCAwKWA7XG4gICAgfVxuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMucmVuZGVyKTtcbiAgfVxufVxuIiwiaW1wb3J0IENvcmUgZnJvbSAnLi4vQ29yZSc7XG5pbXBvcnQgeyBNRENTbmFja2JhciB9IGZyb20gJ0BtYXRlcmlhbC9zbmFja2Jhcic7XG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycyc7XG5cbmNvbnN0IFNFTEVDVE9SUyA9IHtcbiAgU05BQ0tCQVJfRUw6ICcubWRjLXNuYWNrYmFyJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNuYWNrQmFyIHtcbiAgY29yZTogQ29yZTtcbiAgc25hY2tCYXJFbDogSFRNTEVsZW1lbnQ7XG4gIHNuYWNrQmFyOiBNRENTbmFja2JhcjtcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBhY3Rpb25UZXh0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNuYWNrQmFyIGNvbnN0cnVjdG9yXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoY29yZTogQ29yZSwgc25hY2tCYXJFbD86IEhUTUxFbGVtZW50KSB7XG4gICAgdGhpcy5jb3JlID0gY29yZTtcbiAgICB0aGlzLnNuYWNrQmFyRWwgPSBzbmFja0JhckVsIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlNOQUNLQkFSX0VMKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLnNuYWNrQmFyID0gbmV3IE1EQ1NuYWNrYmFyKHRoaXMuc25hY2tCYXJFbCk7XG4gICAgdGhpcy5tZXNzYWdlID0gKHRoaXMuc25hY2tCYXJFbC5xdWVyeVNlbGVjdG9yKCcubWRjLXNuYWNrYmFyX190ZXh0JykgYXMgSFRNTEVsZW1lbnQpLmlubmVySFRNTDtcbiAgICB0aGlzLmFjdGlvblRleHQgPSAodGhpcy5zbmFja0JhckVsXG4gICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5tZGMtc25hY2tiYXJfX2FjdGlvbi1idXR0b24nKSBhcyBIVE1MRWxlbWVudCkuaW5uZXJIVE1MO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGRlZmF1bHRIYW5kbGVyKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBzbmFja0JhclRyaWdnZXIobWVzc2FnZT86IHN0cmluZywgYWN0aW9uVGV4dD86IHN0cmluZywgY2FsbGJhY2s/OiAoKSA9PiB2b2lkLCB0aW1lb3V0PzogbnVtYmVyKSB7XG4gICAgdGhpcy5zbmFja0Jhci5zaG93KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UgfHwgdGhpcy5tZXNzYWdlLFxuICAgICAgYWN0aW9uVGV4dDogYWN0aW9uVGV4dCB8fCB0aGlzLmFjdGlvblRleHQsXG4gICAgICBhY3Rpb25IYW5kbGVyOiBjYWxsYmFjayB8fCB0aGlzLmRlZmF1bHRIYW5kbGVyLFxuICAgICAgdGltZW91dDogdGltZW91dCxcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IENvcmUgZnJvbSAnLi4vQ29yZSc7XG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycyc7XG5pbXBvcnQgeyBNRENNZW51IH0gZnJvbSAnQG1hdGVyaWFsL21lbnUnO1xuXG5jb25zdCBTRUxFQ1RPUlMgPSB7XG4gIE1EQ19OQVY6ICcuanMtbWRjLXNlbGVjdC1uYXYnLFxuICBNRENfTkFWX1RPR0dMRTogJy5qcy1tZGMtbmF2LXRvZ2dsZScsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGVwTmF2IHtcbiAgY29yZTogQ29yZTtcbiAgbWRjU2VsZWN0OiBIVE1MRWxlbWVudDtcbiAgbWVudVRvZ2dsZT86IEhUTUxCdXR0b25FbGVtZW50O1xuICBtZW51OiBhbnk7XG5cbiAgLyoqXG4gICAqIFN0ZXBOYXYgY29uc3RydWN0b3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBDb3JlLCBzbmFja0JhckVsPzogSFRNTEVsZW1lbnQpIHtcbiAgICB0aGlzLmNvcmUgPSBjb3JlO1xuICAgIHRoaXMubWRjU2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuTURDX05BVikgYXMgSFRNTEVsZW1lbnQ7XG5cbiAgICBpZiAodGhpcy5tZGNTZWxlY3QpIHtcbiAgICAgIHRoaXMubWVudSA9IG5ldyBNRENNZW51KHRoaXMubWRjU2VsZWN0KTtcbiAgICAgIHRoaXMubWVudVRvZ2dsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLk1EQ19OQVZfVE9HR0xFKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICB9XG5cbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgaWYgKCF0aGlzLm1lbnUgfHwgIXRoaXMubWVudVRvZ2dsZSkgeyByZXR1cm47IH1cbiAgICB0aGlzLm1lbnVUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU1lbnVUb2dnbGUpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZU1lbnVUb2dnbGUoZTogRXZlbnQpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5tZW51Lm9wZW4gPSAhdGhpcy5tZW51Lm9wZW47XG4gIH1cbn1cbiIsImltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJztcbmltcG9ydCB7IEFDVElPTl9DTEFTU0VTLCBub2RlTGlzdFRvQXJyYXkgfSBmcm9tICcuLi91dGlsJztcblxuY29uc3QgU1RJQ0tZX0JBUl9TRUxFQ1RPUiA9ICcuanMtc3RpY2t5LWJhcic7XG5jb25zdCBTVElDS1lfQkFSX0NISUxEX1NFTEVDVE9SID0gJy5qcy1zdGlja3ktYmFyLWNoaWxkJztcblxuaW50ZXJmYWNlIElTdGlja3lFbGVtZW50IHtcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIGNoaWxkOiBIVE1MRWxlbWVudDtcbiAgaXNTdHVjazogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBUaGlzIHdpbGwgY2hlY2sgZm9yIHdoZW4gdGhlIGVsZW1lbnRzIGxlYXZlIHRoZSB0b3Agb2YgdGhlIHZpZXdwb3J0IGJ5IGRlZmF1bHQuXG4gKiBQYXNzIGluIGEgYm9vbGVhbiBmb3IgdGhlIGZpcnN0IGFyZyBvZiB0aGUgY29uc3RydWN0b3IgdG8gY2hlY2sgZm9yIHdoZW4gaXQncyBvdXQgb2YgdGhlIGJvdHRvbVxuICogb2YgdGhlIHZpZXdwb3J0LlxuICovXG5leHBvcnQgY2xhc3MgU3RpY2t5QmFyIHtcbiAgc3RpY2tpZXM6IEFycmF5PElTdGlja3lFbGVtZW50PjtcbiAgc3RpY2tUb0JvdHRvbSA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHN0aWNrVG9Cb3R0b20gPSBmYWxzZSwgc2VsZWN0b3IgPSBTVElDS1lfQkFSX1NFTEVDVE9SKSB7XG4gICAgY29uc3QgZWxlbWVudHMgPVxuICAgICAgICBub2RlTGlzdFRvQXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpIGFzIEFycmF5PEhUTUxFbGVtZW50PjtcblxuICAgIHRoaXMuc3RpY2tpZXMgPSBlbGVtZW50cy5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IGNoaWxkID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNUSUNLWV9CQVJfQ0hJTERfU0VMRUNUT1IpIGFzIEhUTUxFbGVtZW50O1xuICAgICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IGAke2NoaWxkLm9mZnNldEhlaWdodH1weGA7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIGNoaWxkOiBjaGlsZCxcbiAgICAgICAgaXNTdHVjazogZmFsc2UsXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgdGhpcy5zdGlja1RvQm90dG9tID0gc3RpY2tUb0JvdHRvbTtcblxuICAgIGlmICh0aGlzLnN0aWNraWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwpO1xuXG4gICAgdGhpcy5vblNjcm9sbCgpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIG9uU2Nyb2xsKCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmhhbmRsZVNjcm9sbCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlU2Nyb2xsKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGlja2llcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zdGlja2llc1tpXTtcblxuICAgICAgaWYgKCF0YXJnZXQuY2hpbGQpIHsgcmV0dXJuOyB9XG5cbiAgICAgIGNvbnN0IGJvdW5kcyA9IHRhcmdldC5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgaXNJblZpZXcgPSB0aGlzLnN0aWNrVG9Cb3R0b20gPyBib3VuZHMuYm90dG9tIDwgd2luZG93LmlubmVySGVpZ2h0IDogYm91bmRzLnRvcCA+IDA7XG5cbiAgICAgIGlmICghdGFyZ2V0LmlzU3R1Y2sgJiYgIWlzSW5WaWV3KSB7XG4gICAgICAgIHRhcmdldC5jaGlsZC5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkFDVElWRSk7XG4gICAgICAgIHRhcmdldC5pc1N0dWNrID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmlzU3R1Y2sgJiYgaXNJblZpZXcpIHtcbiAgICAgICAgdGFyZ2V0LmNoaWxkLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuQUNUSVZFKTtcbiAgICAgICAgdGFyZ2V0LmlzU3R1Y2sgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJztcbmltcG9ydCB7IEFDVElPTl9DTEFTU0VTLCBub2RlTGlzdFRvQXJyYXkgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBDb3JlIGZyb20gJy4uL0NvcmUnO1xuXG5jb25zdCBUSE9VR0hUX1NUQVJURVJfU0VMRUNUT1IgPSAnLmpzLXRob3VnaHQtc3RhcnRlcic7XG5jb25zdCBUSE9VR0hUX1NUQVJURVJfSVRFTV9TRUxFQ1RPUiA9ICcuanMtdGhvdWdodC1zdGFydGVyLWl0ZW0nO1xuY29uc3QgVEhPVUdIVF9TVEFSVEVSX1RPT0xUSVBfU0VMRUNUT1IgPSAnLmpzLXRob3VnaHQtc3RhcnRlci10b29sdGlwJztcblxuY29uc3QgVEhPVUdIVF9TVEFSVEVSX0lDT05fREVMQVkgPSA1MDA7XG5jb25zdCBUSE9VR0hUX1NUQVJURVJfSUNPTl9PRkZTRVRfREVMQVkgPSAyMDtcbmNvbnN0IEFDVElWQVRJT05fREVMQVkgPSAzNjA7XG5cbmludGVyZmFjZSBJVGhvdWdodFN0YXJ0ZXJJdGVtIHtcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIHRvb2x0aXA6IEhUTUxFbGVtZW50O1xuICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgaG92ZXJUaW1lb3V0OiBhbnk7XG4gIGFjdGl2YXRlVGltZW91dDogYW55O1xufVxuXG5leHBvcnQgY2xhc3MgVGhvdWdodFN0YXJ0ZXIge1xuICBhY3RpdmF0aW9uRGVsYXk6IG51bWJlcjtcbiAgcGFyZW50OiBIVE1MRWxlbWVudDtcbiAgaXRlbXM6IEFycmF5PElUaG91Z2h0U3RhcnRlckl0ZW0+O1xuICBoYXNBY3RpdmF0ZWQgPSBmYWxzZTtcbiAgdG91Y2htb3ZlVGltZW91dDogYW55O1xuICByZWFkeUZvclRvdWNoSW50ZXJhY3Rpb24gPSB0cnVlO1xuICBjb3JlPzogQ29yZTtcblxuICBjb25zdHJ1Y3Rvcihjb3JlPzogQ29yZSkge1xuICAgIHRoaXMuY29yZSA9IGNvcmU7XG4gICAgdGhpcy5hY3RpdmF0aW9uRGVsYXkgPSB0aGlzLmNvcmUgJiYgdGhpcy5jb3JlLnByZWZlcnNSZWR1Y2VkTW90aW9uID8gMCA6IEFDVElWQVRJT05fREVMQVk7XG4gICAgdGhpcy5wYXJlbnQgPVxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFRIT1VHSFRfU1RBUlRFUl9TRUxFQ1RPUikgYXMgSFRNTEVsZW1lbnQ7XG5cbiAgICBjb25zdCB0aG91Z2h0U3RhcnRlckl0ZW1FbGVtZW50cyA9XG4gICAgICAgIG5vZGVMaXN0VG9BcnJheSh0aGlzLnBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKFRIT1VHSFRfU1RBUlRFUl9JVEVNX1NFTEVDVE9SKSk7XG5cbiAgICB0aGlzLml0ZW1zID0gdGhvdWdodFN0YXJ0ZXJJdGVtRWxlbWVudHMubWFwKChpdGVtKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVtZW50OiBpdGVtLFxuICAgICAgICB0b29sdGlwOiBpdGVtLnF1ZXJ5U2VsZWN0b3IoVEhPVUdIVF9TVEFSVEVSX1RPT0xUSVBfU0VMRUNUT1IpIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICBpc0FjdGl2ZTogZmFsc2UsXG4gICAgICAgIGhvdmVyVGltZW91dDogbnVsbCxcbiAgICAgICAgYWN0aXZhdGVUaW1lb3V0OiBudWxsLFxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldElzSW5WaWV3KCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGJvdW5kcyA9IHRoaXMucGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiBib3VuZHMudG9wIDwgKHdpbmRvdy5pbm5lckhlaWdodCAqIDAuMjUpO1xuICB9XG5cbiAgYWN0aXZhdGUoKSB7XG4gICAgaWYgKHRoaXMuaGFzQWN0aXZhdGVkKSB7IHJldHVybjsgfVxuICAgIHRoaXMuaGFzQWN0aXZhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgICBpZiAodGhpcy5jb3JlICYmIHRoaXMuY29yZS5wcmVmZXJzUmVkdWNlZE1vdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW1zW2ldO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGl0ZW0uZWxlbWVudC5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkFDVElWRSk7XG4gICAgICB9LCAoaSAqIFRIT1VHSFRfU1RBUlRFUl9JQ09OX09GRlNFVF9ERUxBWSkpO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaXRlbS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuQUNUSVZFKTtcbiAgICAgIH0sIFRIT1VHSFRfU1RBUlRFUl9JQ09OX0RFTEFZICsgKGkgKiBUSE9VR0hUX1NUQVJURVJfSUNPTl9PRkZTRVRfREVMQVkpKTtcbiAgICB9XG4gIH1cblxuICBiaW5kRXZlbnRzKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlKTtcblxuICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaXRlbS5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICB0aGlzLmFjdGl2YXRlSXRlbShpdGVtKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdGVtLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcbiAgICAgICAgdGhpcy5kZWFjdGl2YXRlSXRlbShpdGVtKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdGVtLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCAoZSkgPT4ge1xuICAgICAgICB0aGlzLmhhbmRsZUl0ZW1Ub3VjaChlLCBpdGVtKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIG9uVG91Y2hNb3ZlKCkge1xuICAgIGlmICh0aGlzLnRvdWNobW92ZVRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRvdWNobW92ZVRpbWVvdXQpO1xuICAgIH1cblxuICAgIHRoaXMucmVhZHlGb3JUb3VjaEludGVyYWN0aW9uID0gZmFsc2U7XG4gICAgdGhpcy50b3VjaG1vdmVUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLnNldFJlYWR5Rm9yVG91Y2hJbnRlcmFjdGlvbiwgdGhpcy5hY3RpdmF0aW9uRGVsYXkpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIHNldFJlYWR5Rm9yVG91Y2hJbnRlcmFjdGlvbigpIHtcbiAgICB0aGlzLnJlYWR5Rm9yVG91Y2hJbnRlcmFjdGlvbiA9IHRydWU7XG4gICAgdGhpcy5kZWFjdGl2YXRlQWxsSXRlbXMoKTtcbiAgfVxuXG4gIGhhbmRsZUl0ZW1Ub3VjaChlOiBUb3VjaEV2ZW50LCBpdGVtOiBJVGhvdWdodFN0YXJ0ZXJJdGVtKSB7XG4gICAgaWYgKCF0aGlzLnJlYWR5Rm9yVG91Y2hJbnRlcmFjdGlvbiB8fCAhaXRlbS5pc0FjdGl2ZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmICghaXRlbS5pc0FjdGl2ZSAmJiB0aGlzLnJlYWR5Rm9yVG91Y2hJbnRlcmFjdGlvbikge1xuICAgICAgdGhpcy5kZWFjdGl2YXRlQWxsSXRlbXMoKTtcbiAgICAgIHRoaXMuYWN0aXZhdGVJdGVtKGl0ZW0pO1xuICAgIH0gZWxzZSBpZiAoaXRlbS5pc0FjdGl2ZSkge1xuICAgICAgdGhpcy5kZWFjdGl2YXRlSXRlbShpdGVtKTtcbiAgICB9XG4gIH1cblxuICBhY3RpdmF0ZUl0ZW0oaXRlbTogSVRob3VnaHRTdGFydGVySXRlbSkge1xuICAgIGlmIChpdGVtLmlzQWN0aXZlKSB7IHJldHVybjsgfVxuICAgIGl0ZW0uaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgaWYgKGl0ZW0uaG92ZXJUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQoaXRlbS5ob3ZlclRpbWVvdXQpO1xuICAgICAgaXRlbS5ob3ZlclRpbWVvdXQgPSBudWxsO1xuICAgIH1cblxuICAgIHRoaXMuYWRkSG92ZXJlZFN0YXRlKGl0ZW0pO1xuICAgIGl0ZW0uYWN0aXZhdGVUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLmFkZEFjdGl2YXRlZFN0YXRlLmJpbmQodGhpcywgaXRlbSksXG4gICAgICAgIHRoaXMuYWN0aXZhdGlvbkRlbGF5KTtcbiAgfVxuXG4gIGRlYWN0aXZhdGVJdGVtKGl0ZW06IElUaG91Z2h0U3RhcnRlckl0ZW0pIHtcbiAgICBpZiAoIWl0ZW0uaXNBY3RpdmUpIHsgcmV0dXJuOyB9XG4gICAgaXRlbS5pc0FjdGl2ZSA9IGZhbHNlO1xuXG4gICAgaWYgKGl0ZW0uYWN0aXZhdGVUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQoaXRlbS5hY3RpdmF0ZVRpbWVvdXQpO1xuICAgICAgaXRlbS5hY3RpdmF0ZVRpbWVvdXQgPSBudWxsO1xuICAgIH1cblxuICAgIHRoaXMucmVtb3ZlQWN0aXZhdGVkU3RhdGUoaXRlbSk7XG4gICAgaXRlbS5lbGVtZW50LmJsdXIoKTtcbiAgICBpdGVtLmhvdmVyVGltZW91dCA9XG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5yZW1vdmVIb3ZlcmVkU3RhdGUuYmluZCh0aGlzLCBpdGVtKSwgdGhpcy5hY3RpdmF0aW9uRGVsYXkgKiAwLjc1KTtcbiAgfVxuXG4gIGRlYWN0aXZhdGVBbGxJdGVtcygpIHtcbiAgICB0aGlzLml0ZW1zLmZvckVhY2goaXRlbSA9PiB0aGlzLmRlYWN0aXZhdGVJdGVtKGl0ZW0pKTtcbiAgfVxuXG4gIGFkZEhvdmVyZWRTdGF0ZShpdGVtOiBJVGhvdWdodFN0YXJ0ZXJJdGVtKSB7XG4gICAgaXRlbS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSE9WRVJFRCk7XG4gICAgaXRlbS5lbGVtZW50LnN0eWxlLnpJbmRleCA9ICc5OSc7XG4gICAgaXRlbS5ob3ZlclRpbWVvdXQgPSBudWxsO1xuICB9XG5cbiAgcmVtb3ZlSG92ZXJlZFN0YXRlKGl0ZW06IElUaG91Z2h0U3RhcnRlckl0ZW0pIHtcbiAgICBpdGVtLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5IT1ZFUkVEKTtcbiAgICBpdGVtLmVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3otaW5kZXgnKTtcbiAgICBpdGVtLmhvdmVyVGltZW91dCA9IG51bGw7XG4gIH1cblxuICBhZGRBY3RpdmF0ZWRTdGF0ZShpdGVtOiBJVGhvdWdodFN0YXJ0ZXJJdGVtKSB7XG4gICAgaXRlbS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuRU5BQkxFRCk7XG4gICAgaXRlbS5hY3RpdmF0ZVRpbWVvdXQgPSBudWxsO1xuICB9XG5cbiAgcmVtb3ZlQWN0aXZhdGVkU3RhdGUoaXRlbTogSVRob3VnaHRTdGFydGVySXRlbSkge1xuICAgIGl0ZW0uZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLkVOQUJMRUQpO1xuICAgIGl0ZW0uYWN0aXZhdGVUaW1lb3V0ID0gbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IENvcmUgZnJvbSAnLi4vQ29yZSc7XG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycyc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBUT09MX1RJUF9TRUxFQ1RPUiA9ICcuanMtdG9vbC10aXAnO1xuY29uc3QgVE9PTF9USVBfT0ZGX0NMQVNTID0gJ3Rvb2wtdGlwLW9mZic7XG5jb25zdCBHVVRURVJfV0lEVEggPSA0ODtcblxuaW50ZXJmYWNlIElUb29sVGlwQ29vcmRzIHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBDb3JlVG9vbFRpcCB7XG4gIGNvcmU6IENvcmU7XG4gIGNvbnRhaW5lckVsZW06IEhUTUxFbGVtZW50O1xuICBjb29yZHM6IElUb29sVGlwQ29vcmRzID0ge3g6IDAsIHk6IDB9O1xuICB0ZXh0OiBzdHJpbmc7XG4gIGlzT3BlbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKGNvcmU6IENvcmUsIHJvb3RFbGVtOiBIVE1MRWxlbWVudCkge1xuICAgIHRoaXMuY29yZSA9IGNvcmU7XG4gICAgdGhpcy50ZXh0ID0gJyc7XG4gICAgdGhpcy5jb250YWluZXJFbGVtID0gcm9vdEVsZW0ucXVlcnlTZWxlY3RvcihUT09MX1RJUF9TRUxFQ1RPUikgYXMgSFRNTEVsZW1lbnQ7XG4gIH1cblxuICBzZXRQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuY29vcmRzLnggPSB4O1xuICAgIHRoaXMuY29vcmRzLnkgPSB5O1xuICAgIHRoaXMuY29udGFpbmVyRWxlbS5zdHlsZS5sZWZ0ID0gdGhpcy5jb29yZHMueCArICdweCc7XG4gICAgdGhpcy5jb250YWluZXJFbGVtLnN0eWxlLnRvcCA9IHRoaXMuY29vcmRzLnkgKyAncHgnO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIHNob3coKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNPcGVuKSB7IHJldHVybjsgfVxuICAgIHRoaXMuY29udGFpbmVyRWxlbS5jbGFzc0xpc3QucmVtb3ZlKFRPT0xfVElQX09GRl9DTEFTUyk7XG4gICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhpZGUoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzT3BlbikgeyByZXR1cm47IH1cbiAgICB0aGlzLmNvbnRhaW5lckVsZW0uY2xhc3NMaXN0LmFkZChUT09MX1RJUF9PRkZfQ0xBU1MpO1xuICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRvb2xUaXAgZXh0ZW5kcyBDb3JlVG9vbFRpcCB7XG4gIHJvb3RFbGVtOiBIVE1MRWxlbWVudDtcblxuICBjb25zdHJ1Y3Rvcihjb3JlOiBDb3JlLCByb290RWxlbTogSFRNTEVsZW1lbnQpIHtcbiAgICBzdXBlcihjb3JlLCByb290RWxlbSk7XG4gICAgdGhpcy5yb290RWxlbSA9IHJvb3RFbGVtO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGRvbVNob3coKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNPcGVuKSB7IHJldHVybjsgfVxuICAgIGNvbnN0IGNvb3JkcyA9IHRoaXMuZ2V0UG9zaXRpb24odGhpcy5yb290RWxlbSk7XG4gICAgdGhpcy5zZXRQb3NpdGlvbihjb29yZHMueCwgY29vcmRzLnkpO1xuICAgIHRoaXMuY29udGFpbmVyRWxlbS5jbGFzc0xpc3QucmVtb3ZlKFRPT0xfVElQX09GRl9DTEFTUyk7XG4gICAgdGhpcy5jb250YWluZXJFbGVtLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgdGhpcy5jb250YWluZXJFbGVtLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcbiAgICB0aGlzLnJvb3RFbGVtLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgJ3RydWUnKTtcbiAgICB0aGlzLmlzT3BlbiA9IHRydWU7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgZG9tSGlkZSgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaXNPcGVuKSB7IHJldHVybjsgfVxuICAgIHRoaXMuY29udGFpbmVyRWxlbS5jbGFzc0xpc3QuYWRkKFRPT0xfVElQX09GRl9DTEFTUyk7XG4gICAgdGhpcy5jb250YWluZXJFbGVtLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICB0aGlzLmNvbnRhaW5lckVsZW0uc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgdGhpcy5yb290RWxlbS5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsICdmYWxzZScpO1xuICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgcHJpdmF0ZSBnZXRQb3NpdGlvbihidXR0b246IEhUTUxFbGVtZW50KTogUG9pbnQge1xuICAgIC8vIGdldCBzaXplcyBvZiB3aW5kb3csIGJ1dHRvbiwgYW5kIHRvb2x0aXBcbiAgICBsZXQgd2luZG93VyA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGxldCB3aW5kb3dIID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIGxldCB0b29sVGlwQnV0dG9uUmVjdCA9IGJ1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBsZXQgY29udGFpbmVyUmVjdCA9IHRoaXMuY29udGFpbmVyRWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBzbWFsbFNjcmVlbiA9IHdpbmRvdy5pbm5lcldpZHRoIDwgY29udGFpbmVyUmVjdC53aWR0aCAqIDI7XG5cbiAgICAvLyBzZXQgZGVmYXVsdCBwb3NpdGlvbiAodW5kZXIgYnV0dG9uKVxuICAgIGxldCB0b3AgPSAodG9vbFRpcEJ1dHRvblJlY3QudG9wIDwgd2luZG93SCAvIDIpID9cbiAgICAgICAgdG9vbFRpcEJ1dHRvblJlY3QudG9wICsgNDAgOiB0b29sVGlwQnV0dG9uUmVjdC50b3AgLSA0MDtcbiAgICBsZXQgbGVmdCA9IHRvb2xUaXBCdXR0b25SZWN0LmxlZnQgKyB0b29sVGlwQnV0dG9uUmVjdC53aWR0aCAvIDI7XG4gICAgY29uc3QgY29udGFpbmVyT2Zmc2V0SGVpZ2h0ID0gY29udGFpbmVyUmVjdC5oZWlnaHQ7XG4gICAgLy8gbm93IGZpbmQgdGhlIHJlYWwgcG9zaXRpb25cbiAgICBpZiAodG9vbFRpcEJ1dHRvblJlY3QudG9wIDwgY29udGFpbmVyT2Zmc2V0SGVpZ2h0KSB7XG4gICAgICB0b3AgPSB0b29sVGlwQnV0dG9uUmVjdC5ib3R0b207XG4gICAgICBsZWZ0ID0gdG9vbFRpcEJ1dHRvblJlY3QubGVmdCArIHRvb2xUaXBCdXR0b25SZWN0LndpZHRoIC8gMiAtIGNvbnRhaW5lclJlY3Qud2lkdGggLyAyO1xuICAgIH0gZWxzZSBpZiAodG9vbFRpcEJ1dHRvblJlY3QubGVmdCA8IHdpbmRvd1cgLyAyKSB7XG4gICAgICB0b3AgPSB0b29sVGlwQnV0dG9uUmVjdC50b3AgLSBjb250YWluZXJPZmZzZXRIZWlnaHQ7XG4gICAgICBsZWZ0ID0gdG9vbFRpcEJ1dHRvblJlY3QubGVmdDtcbiAgICB9IGVsc2UgaWYgKHRvb2xUaXBCdXR0b25SZWN0LmxlZnQgPiB3aW5kb3dXIC8gMikge1xuICAgICAgdG9wID0gdG9vbFRpcEJ1dHRvblJlY3QudG9wIC0gY29udGFpbmVyT2Zmc2V0SGVpZ2h0O1xuICAgICAgbGVmdCA9IHRvb2xUaXBCdXR0b25SZWN0LmxlZnQ7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgdG8gbWFrZSBzdXJlIHRoZSB0aXAgaXNuJ3QgaGFuZ2luZyBvdmVyIGxlZnQgZWRnZVxuICAgIGlmICgobGVmdCkgPCBHVVRURVJfV0lEVEgpIHtcbiAgICAgIGxlZnQgPSB0b29sVGlwQnV0dG9uUmVjdC5sZWZ0O1xuICAgIH1cbiAgICAvLyBDaGVjayB0byBtYWtlIHN1cmUgdGhlIHRpcCBpc24ndCBoYW5naW5nIG92ZXIgdGhlIHJpZ2h0IGVkZ2VcbiAgICBpZiAoKGxlZnQgKyBjb250YWluZXJSZWN0LndpZHRoKSA+ICh3aW5kb3dXIC0gR1VUVEVSX1dJRFRIKSkge1xuICAgICAgbGVmdCA9IHdpbmRvd1cgLSBjb250YWluZXJSZWN0LndpZHRoIC0gR1VUVEVSX1dJRFRIO1xuICAgIH1cblxuICAgIGlmIChzbWFsbFNjcmVlbikge1xuICAgICAgbGVmdCA9ICh3aW5kb3dXIC0gY29udGFpbmVyUmVjdC53aWR0aCkgLyAyO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUG9pbnQobGVmdCwgdG9wKTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycyc7XG5cbmNvbnN0IFZJREVPX1NFTEVDVE9SID0gJy5qcy12aWRlby1wbGF5ZXInO1xuXG5kZWNsYXJlIHZhciB3aW5kb3c6IGFueTtcblxuZXhwb3J0IGNsYXNzIFZpZGVvUGxheWVyIHtcbiAgaXNSZWFkeTogYm9vbGVhbjtcbiAgcGxheWVyOiBhbnk7IC8vIFRoZSB5b3V0dWJlIHBsYXllclxuICBoYXNCZWVuUGxheWVkOiBib29sZWFuO1xuICB2aWRlb0RpdjogSFRNTEVsZW1lbnQ7XG4gIHNob3VsZExvb3A6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3Ioc2hvdWxkTG9vcD86IGJvb2xlYW4pIHtcbiAgICB0aGlzLmlzUmVhZHkgPSBmYWxzZTtcbiAgICB0aGlzLnBsYXllciA9IG51bGw7XG4gICAgdGhpcy5oYXNCZWVuUGxheWVkID0gZmFsc2U7XG4gICAgdGhpcy5zaG91bGRMb29wID0gc2hvdWxkTG9vcCB8fCB0cnVlO1xuXG4gICAgdGhpcy52aWRlb0RpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoVklERU9fU0VMRUNUT1IpIGFzIEhUTUxFbGVtZW50O1xuICB9XG5cbiAgbG9hZEFQSSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgd2luZG93Lm9uWW91VHViZUlmcmFtZUFQSVJlYWR5ID0gcmVzb2x2ZTtcblxuICAgICAgY29uc3QgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICB0YWcuc3JjID0gJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGknO1xuICAgICAgY29uc3QgZmlyc3RTY3JpcHRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07XG5cbiAgICAgIGlmIChmaXJzdFNjcmlwdFRhZyAmJiBmaXJzdFNjcmlwdFRhZy5wYXJlbnROb2RlKSB7XG4gICAgICAgIGZpcnN0U2NyaXB0VGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRhZywgZmlyc3RTY3JpcHRUYWcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGluaXRpYWxpemVWaWRlbygpIHtcbiAgICBpZiAodGhpcy5pc1JlYWR5IHx8ICF0aGlzLnZpZGVvRGl2KSB7IHJldHVybjsgfVxuXG4gICAgdGhpcy5wbGF5ZXIgPSBuZXcgd2luZG93LllULlBsYXllcih0aGlzLnZpZGVvRGl2LCB7XG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICB2aWRlb0lkOiB0aGlzLnZpZGVvRGl2LmRhdGFzZXQuc3JjLFxuICAgICAgcGxheWVyVmFyczoge1xuICAgICAgICByZWw6IDAsXG4gICAgICAgIHNob3dpbmZvOiAwLFxuICAgICAgICBtb2Rlc3RicmFuZGluZzogMSxcbiAgICAgICAgcGxheXNpbmxpbmU6IDEsXG4gICAgICAgIGVuZDogNyxcbiAgICAgICAgY2NfbGFuZ19wcmVmOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgfVxuXG4gIGJpbmRFdmVudHMoKSB7XG4gICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignb25SZWFkeScsIHRoaXMub25QbGF5ZXJSZWFkeSk7XG4gICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignb25TdGF0ZUNoYW5nZScsIHRoaXMub25QbGF5ZXJTdGF0ZUNoYW5nZSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgb25QbGF5ZXJSZWFkeSgpIHtcbiAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIG9uUGxheWVyU3RhdGVDaGFuZ2UoZTogYW55KSB7XG4gICAgaWYgKGUuZGF0YSA9PT0gMCAmJiB0aGlzLnNob3VsZExvb3ApIHtcbiAgICAgIHRoaXMucGxheWVyLnBsYXlWaWRlbygpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQWNjb3JkaW9uIH0gZnJvbSAnLi9BY2NvcmRpb24nO1xuaW1wb3J0IHsgQXVkaW9QbGF5ZXIgfSBmcm9tICcuL0F1ZGlvUGxheWVyJztcbmltcG9ydCBDYXJkU3RhY2sgZnJvbSAnLi9DYXJkU3RhY2snO1xuaW1wb3J0IHsgQ2F0ZWdvcnlGaWx0ZXIgfSBmcm9tICcuL0NhdGVnb3J5RmlsdGVyJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi9Gb290ZXInO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL0hlYWRlcic7XG5pbXBvcnQgeyBJbnRlcmFjdGl2ZUxvZ28gfSBmcm9tICcuL0ludGVyYWN0aXZlTG9nbyc7XG5pbXBvcnQgTmF2SW5QYWdlIGZyb20gJy4vTmF2SW5QYWdlJztcbmltcG9ydCB7IFNjcm9sbFRvIH0gZnJvbSAnLi9TY3JvbGxUbyc7XG5pbXBvcnQgeyBTbGluZ3Nob3QgfSBmcm9tICcuL1NsaW5nc2hvdCc7XG5pbXBvcnQgU25hY2tCYXIgZnJvbSAnLi9TbmFja0Jhcic7XG5pbXBvcnQgQWpheE1vZGFsIGZyb20gJy4vQWpheE1vZGFsJztcbmltcG9ydCB7IExpc3RBY2NvcmRpb24gfSBmcm9tICcuL0xpc3RBY2NvcmRpb24nO1xuaW1wb3J0IEFsZXJ0IGZyb20gJy4vQWxlcnQnO1xuaW1wb3J0IHsgVmlkZW9QbGF5ZXIgfSBmcm9tICcuL1ZpZGVvUGxheWVyJztcbmltcG9ydCB7IENLRWRpdCB9IGZyb20gJy4vQ0tFZGl0JztcbmltcG9ydCB7IFRob3VnaHRTdGFydGVyIH0gZnJvbSAnLi9UaG91Z2h0U3RhcnRlcic7XG5pbXBvcnQgeyBUb29sVGlwIH0gZnJvbSAnLi9Ub29sVGlwJztcbmltcG9ydCBTdGVwTmF2IGZyb20gJy4vU3RlcE5hdic7XG5pbXBvcnQgeyBTdGlja3lCYXIgfSBmcm9tICcuL1N0aWNreUJhcic7XG5pbXBvcnQgUmVzb3VyY2VOYXYgZnJvbSAnLi9SZXNvdXJjZU5hdic7XG5pbXBvcnQgQW5pbWF0ZVNoYXBlcyBmcm9tICcuL0FuaW1hdGVTaGFwZXMnO1xuaW1wb3J0IEhvbWVDb25jbHVzaW9uU2hhcGVzIGZyb20gJy4vSG9tZUNvbmNsdXNpb25TaGFwZXMnO1xuaW1wb3J0IEhvbWVOdW1iZXJBbmltYXRpb24gZnJvbSAnLi9Ib21lTnVtYmVyQW5pbWF0aW9uJztcbmltcG9ydCBIb21lVGhvdWdodFN0YXJ0ZXIgZnJvbSAnLi9Ib21lVGhvdWdodFN0YXJ0ZXInO1xuaW1wb3J0IEhvbWVWaWRlb1BsYXllciBmcm9tICcuL0hvbWVWaWRlb1BsYXllcic7XG5cbmV4cG9ydCB7XG4gIEFjY29yZGlvbixcbiAgQWpheE1vZGFsLFxuICBBbGVydCxcbiAgQW5pbWF0ZVNoYXBlcyxcbiAgQXVkaW9QbGF5ZXIsXG4gIENhcmRTdGFjayxcbiAgQ2F0ZWdvcnlGaWx0ZXIsXG4gIENLRWRpdCxcbiAgRm9vdGVyLFxuICBIZWFkZXIsXG4gIEhvbWVDb25jbHVzaW9uU2hhcGVzLFxuICBIb21lTnVtYmVyQW5pbWF0aW9uLFxuICBIb21lVGhvdWdodFN0YXJ0ZXIsXG4gIEhvbWVWaWRlb1BsYXllcixcbiAgSW50ZXJhY3RpdmVMb2dvLFxuICBMaXN0QWNjb3JkaW9uLFxuICBOYXZJblBhZ2UsXG4gIFJlc291cmNlTmF2LFxuICBTY3JvbGxUbyxcbiAgU2xpbmdzaG90LFxuICBTbmFja0JhcixcbiAgU3RlcE5hdixcbiAgU3RpY2t5QmFyLFxuICBWaWRlb1BsYXllcixcbiAgVGhvdWdodFN0YXJ0ZXIsXG4gIFRvb2xUaXAsXG59O1xuIiwiaW1wb3J0IENvcmUgZnJvbSAnLi4vQ29yZSc7XG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycyc7XG5pbXBvcnQgeyBBQ1RJT05fQ0xBU1NFUywgbm9kZUxpc3RUb0FycmF5LCBheGlvc0luc3RhbmNlIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IFNFTEVDVE9SUyA9IHtcbiAgRk9STTogJy5qcy1mb3JtJyxcbiAgU1VCTUlUOiAnLmpzLXN1Ym1pdCcsXG59O1xuXG5jb25zdCBTVUJNSVRfVVJMID0gJy9hcGkvcHJvamVjdHMvc3VibWl0JztcbmNvbnN0IENPTVBMRVRFX1VSTCA9ICcveW91ci1wcm9qZWN0L3N1Ym1pdC9jb21wbGV0ZSc7XG5cbmV4cG9ydCBjbGFzcyBDaGVja0xpc3Qge1xuICBjb3JlOiBDb3JlO1xuICBmb3JtOiBIVE1MRWxlbWVudDtcbiAgaW5wdXRzPzogQXJyYXk8SFRNTEVsZW1lbnQ+O1xuICBzdWJtaXQ/OiBIVE1MQnV0dG9uRWxlbWVudDtcblxuICAvKipcbiAgICogQ2hlY2tMaXN0IGNvbnN0cnVjdG9yXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoY29yZTogQ29yZSkge1xuICAgIHRoaXMuY29yZSA9IGNvcmU7XG4gICAgdGhpcy5mb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuRk9STSkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgaWYgKHRoaXMuZm9ybSkge1xuICAgICAgdGhpcy5zdWJtaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TVUJNSVQpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgICAgdGhpcy5pbnB1dHMgPSBub2RlTGlzdFRvQXJyYXkodGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JykpO1xuICAgIH1cbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBpbml0KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5zdWJtaXQgfHwgIXRoaXMuaW5wdXRzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc3VibWl0LmRpc2FibGVkID0gdHJ1ZTtcbiAgICB0aGlzLnN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlU3VibWl0KTtcbiAgICB0aGlzLmlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVJbnB1dCk7XG4gICAgfSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlSW5wdXQoKSB7XG4gICAgaWYgKCF0aGlzLnN1Ym1pdCB8fCAhdGhpcy5pbnB1dHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5wdXRzLmZpbmQoKGlucHV0KSA9PiAoIShpbnB1dCBhcyBIVE1MSW5wdXRFbGVtZW50KS5jaGVja2VkKSkpIHtcbiAgICAgIHRoaXMuc3VibWl0LmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuc3VibWl0LmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuRElTQUJMRUQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN1Ym1pdC5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5zdWJtaXQuY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5ESVNBQkxFRCk7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVN1Ym1pdChlOiBNb3VzZUV2ZW50KSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGF4aW9zSW5zdGFuY2UucG9zdChTVUJNSVRfVVJMKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcnMpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkVSUk9SKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5mb3JtLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuU1VCTUlUVEVEKTtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gQ09NUExFVEVfVVJMO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChfZXJyb3IpID0+IHtcbiAgICAgICAgICB0aGlzLmZvcm0uY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5FUlJPUik7XG4gICAgICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgQ29yZSBmcm9tICcuLi9Db3JlJztcbmltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJztcbmltcG9ydCB7IFNuYWNrQmFyIH0gZnJvbSAnLi4vY29tcG9uZW50cyc7XG5pbXBvcnQgeyBheGlvc0luc3RhbmNlLCBBQ1RJT05fQ0xBU1NFUyB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBTRUxFQ1RPUlMgPSB7XG4gIEZPUk06ICcuanMtZm9ybScsXG4gIFBST0pFQ1RfSURfSU5QVVQ6ICcuanMtcHJvamVjdC1pZCcsXG4gIElOUFVUOiAnLmpzLWlucHV0JyxcbiAgU1VCTUlUOiAnLmpzLXN1Ym1pdC0tcGFyZW50YWwtY29uc2VudC1mb3JtJyxcbiAgRU1BSUxfQ09OVEFJTkVSOiAnLmpzLWVtYWlsLWNvbnRhaW5lcicsXG59O1xuXG5jb25zdCBGT1JNX1VSTCA9ICcvYXBpL21lbWJlcnMvc2F2ZV9jb25zZW50JztcblxuZXhwb3J0IGNsYXNzIENvbnNlbnRGb3JtIHtcbiAgY29yZTogQ29yZTtcbiAgZm9ybT86IEhUTUxGb3JtRWxlbWVudDtcbiAgaW5wdXQ/OiBIVE1MSW5wdXRFbGVtZW50O1xuICBzdWJtaXQ/OiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgc25hY2tCYXI6IFNuYWNrQmFyO1xuICBlbWFpbENvbnRhaW5lcj86IEhUTUxFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBDb25zZW50Rm9ybSBjb25zdHJ1Y3RvclxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6IENvcmUpIHtcbiAgICB0aGlzLmNvcmUgPSBjb3JlO1xuICAgIHRoaXMuZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkZPUk0pIGFzIEhUTUxGb3JtRWxlbWVudDtcbiAgICBpZiAodGhpcy5mb3JtKSB7XG4gICAgICB0aGlzLnN1Ym1pdCA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TVUJNSVQpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgICAgdGhpcy5lbWFpbENvbnRhaW5lciA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5FTUFJTF9DT05UQUlORVIpIGFzIEhUTUxFbGVtZW50O1xuICAgICAgdGhpcy5pbnB1dCA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5JTlBVVCkgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICB9XG4gICAgdGhpcy5zbmFja0JhciA9IG5ldyBTbmFja0Jhcih0aGlzLmNvcmUpO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGluaXQoKTogdm9pZCB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bik7XG4gICAgaWYgKCF0aGlzLnN1Ym1pdCB8fCAhdGhpcy5pbnB1dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlU3VibWl0KTtcbiAgICB0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5oYW5kbGVJbnB1dCk7XG4gICAgaWYgKHRoaXMuaW5wdXQudmFsdWUgPT09ICcnKSB7XG4gICAgICB0aGlzLnN1Ym1pdC5kaXNhYmxlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUtleURvd24oZTogS2V5Ym9hcmRFdmVudCkge1xuICAgIGNvbnN0IGtleU5hbWUgPSBlLmtleTtcbiAgICBpZiAoa2V5TmFtZSA9PT0gJ0VudGVyJyAmJiB0aGlzLnN1Ym1pdCAmJiAhdGhpcy5zdWJtaXQuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuaGFuZGxlU3VibWl0KCk7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUlucHV0KCkge1xuICAgIGlmICghdGhpcy5zdWJtaXQgfHwgIXRoaXMuaW5wdXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5wdXQuY2hlY2tWYWxpZGl0eSgpKSB7XG4gICAgICB0aGlzLnN1Ym1pdC5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN1Ym1pdC5kaXNhYmxlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVN1Ym1pdCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZm9ybSB8fCAhdGhpcy5zdWJtaXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdWJtaXQuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5TQVZJTkcpO1xuICAgIHRoaXMuZm9ybS5yZXBvcnRWYWxpZGl0eSgpO1xuICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgIGNvbnNlbnRfZW1haWw6IHRoaXMuaW5wdXQgJiYgdGhpcy5pbnB1dC52YWx1ZSxcbiAgICB9O1xuICAgIGF4aW9zSW5zdGFuY2UucG9zdChGT1JNX1VSTCwgSlNPTi5zdHJpbmdpZnkocGFyYW1zKSlcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgaWYgKCF0aGlzLmZvcm0gfHwgIXRoaXMuZW1haWxDb250YWluZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3JzKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm0uY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5FUlJPUik7XG4gICAgICAgICAgICB0aGlzLmVtYWlsQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuRVJST1IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNuYWNrQmFyLnNuYWNrQmFyVHJpZ2dlcigpO1xuICAgICAgICAgICAgdGhpcy5mb3JtLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuU1VCTUlUVEVEKTtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLkVSUk9SKTtcbiAgICAgICAgICAgIHRoaXMuZW1haWxDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5FUlJPUik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc3VibWl0ICYmIHRoaXMuc3VibWl0LmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuU0FWSU5HKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChfZXJyb3IpID0+IHtcbiAgICAgICAgICAvLyBJZiB0aGUgZXJyb3Igd2FzIHRoYXQgY29uc2VudCBoYXMgYWxyZWFkeSBiZWVuIGdyYW50ZWQsIHJlbG9hZCBwYWdlXG4gICAgICAgICAgaWYgKF9lcnJvci5yZXNwb25zZSAmJiBfZXJyb3IucmVzcG9uc2UuZGF0YSAmJlxuICAgICAgICAgICAgICBfZXJyb3IucmVzcG9uc2UuZGF0YS5lcnJvcnMgPT09ICdDb25zZW50IGhhcyBhbHJlYWR5IGJlZW4gZ3JhbnRlZCcpIHtcbiAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCF0aGlzLmZvcm0gfHwgIXRoaXMuZW1haWxDb250YWluZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5mb3JtLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuRVJST1IpO1xuICAgICAgICAgIHRoaXMuZW1haWxDb250YWluZXIuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5FUlJPUik7XG4gICAgICAgICAgdGhpcy5zdWJtaXQgJiYgdGhpcy5zdWJtaXQuY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5TQVZJTkcpO1xuICAgICAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgbm9kZUxpc3RUb0FycmF5LCBBQ1RJT05fQ0xBU1NFUyB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICdjb3JlLWRlY29yYXRvcnMnO1xuaW1wb3J0IENvcmUgZnJvbSAnLi4vQ29yZSc7XG5cbmNvbnN0IFNFTEVDVE9SUyA9IHtcbiAgSU5QVVRfU0VMRUNUT1I6ICcuZm9ybS0tdGV4dC1pbnB1dC13cmFwJyxcbiAgUkFESU9fR1JPVVA6ICcuanMtcmFkaW8tZ3JvdXAnLFxufTtcblxuaW50ZXJmYWNlIElJbnB1dFByb3BzIHtcbiAgd3JhcHBlcjogSFRNTEVsZW1lbnQ7XG4gIGlucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSYWRpb0dyb3VwUHJvcHMge1xuICB3cmFwcGVyOiBIVE1MRWxlbWVudDtcbiAgaW5wdXRzOiBBcnJheTxcbiAgICB7XG4gICAgICBpbnB1dDogSFRNTElucHV0RWxlbWVudDtcbiAgICAgIGxhYmVsOiBIVE1MTGFiZWxFbGVtZW50O1xuICAgIH1cbiAgPjtcbn1cblxuZXhwb3J0IGNsYXNzIEZvcm1zIHtcbiAgY29yZTogQ29yZTtcbiAgdGV4dElucHV0czogQXJyYXk8SUlucHV0UHJvcHM+O1xuICByYWRpb0dyb3VwPzogSVJhZGlvR3JvdXBQcm9wcztcblxuICAvKipcbiAgICogRm9ybXMgY29uc3RydWN0b3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBDb3JlKSB7XG4gICAgdGhpcy5jb3JlID0gY29yZTtcbiAgICBjb25zdCBpbnB1dHMgPSBub2RlTGlzdFRvQXJyYXkoXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SUy5JTlBVVF9TRUxFQ1RPUiksXG4gICAgICApIGFzIEFycmF5PEhUTUxFbGVtZW50PjtcbiAgICAvLyBjdXN0b20gaW5wdXRzIG9iamVjdFxuICAgIHRoaXMudGV4dElucHV0cyA9IGlucHV0cy5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyYXBwZXI6IGl0ZW0gYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgIGlucHV0OiBpdGVtLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykgYXMgSFRNTElucHV0RWxlbWVudCxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgcmFkaW9Hcm91cFdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5SQURJT19HUk9VUCkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgaWYgKHJhZGlvR3JvdXBXcmFwcGVyKSB7XG4gICAgICBjb25zdCByYWRpb0dyb3VwTGFiZWxzID0gbm9kZUxpc3RUb0FycmF5KHJhZGlvR3JvdXBXcmFwcGVyXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCdsYWJlbCcpKSBhcyBBcnJheTxIVE1MTGFiZWxFbGVtZW50PjtcbiAgICAgIHRoaXMucmFkaW9Hcm91cCA9IHtcbiAgICAgICAgd3JhcHBlcjogcmFkaW9Hcm91cFdyYXBwZXIsXG4gICAgICAgIGlucHV0czogcmFkaW9Hcm91cExhYmVscy5tYXAoKGxhYmVsOiBIVE1MTGFiZWxFbGVtZW50KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlucHV0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsYWJlbC5odG1sRm9yKSBhcyBIVE1MSW5wdXRFbGVtZW50LFxuICAgICAgICAgICAgbGFiZWwsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGluaXQoKTogdm9pZCB7XG4gICAgdGhpcy50ZXh0SW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICBpZiAoIWlucHV0LmlucHV0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlucHV0LmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5vbkZvY3VzKTtcbiAgICAgIGlucHV0LmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLm9uQmx1cik7XG4gICAgICBpZiAoaW5wdXQuaW5wdXQudmFsdWUgIT09ICcnKSB7XG4gICAgICAgIGlucHV0LndyYXBwZXIuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5GT0NVU0VEKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodGhpcy5yYWRpb0dyb3VwKSB7XG4gICAgICB0aGlzLnJhZGlvR3JvdXAuaW5wdXRzLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgICBncm91cC5pbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZVJhZGlvQ2hhbmdlXG4gICAgICAgICAgICAuYmluZChncm91cC5pbnB1dCwgZ3JvdXAubGFiZWwsIHRoaXMpKTtcbiAgICAgICAgZ3JvdXAuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLmhhbmRsZVJhZGlvRm9jdXNcbiAgICAgICAgICAgIC5iaW5kKGdyb3VwLmlucHV0LCBncm91cC5sYWJlbCwgdGhpcykpO1xuICAgICAgICBncm91cC5pbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgdGhpcy5oYW5kbGVSYWRpb0JsdXJcbiAgICAgICAgICAgIC5iaW5kKGdyb3VwLmlucHV0LCBncm91cC5sYWJlbCwgdGhpcykpO1xuXG4gICAgICAgIGdyb3VwLmlucHV0LmJsdXIoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBCbHVyIGV2ZW50LiBIYW5kbGVzIHRleHQgaW5wdXQgYmx1ci5cbiAgICovXG4gIEBhdXRvYmluZFxuICBvbkJsdXIoZTogRXZlbnQpIHtcbiAgICB0aGlzLmlucHV0Qmx1cihlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGZvY3VzZWQgY2xhc3MgaWYgaW5wdXQgaGFzIG5vIHZhbHVlLlxuICAgKi9cbiAgQGF1dG9iaW5kXG4gIGlucHV0Qmx1cihlbDogSFRNTElucHV0RWxlbWVudCkge1xuICAgIHRoaXMudGV4dElucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgaWYgKGlucHV0LmlucHV0ID09PSBlbCAmJiBlbC52YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgaW5wdXQud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLkZPQ1VTRUQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvY3VzIGV2ZW50LiBBZGRzIGZvY3VzZWQgY2xhc3MgdG8gaW5wdXQgYW5kIGNoZWNrcyBpc0V4cGFuZGVkIGJvb2xlYW4gYW5kXG4gICAqIGV4cGFuZHMgdGhlIGFjY29yZGlvbiBpZiBmYWxzZS5cbiAgICovXG4gIEBhdXRvYmluZFxuICBvbkZvY3VzKGU6IEV2ZW50KSB7XG4gICAgdGhpcy50ZXh0SW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICBpZiAoaW5wdXQuaW5wdXQgPT09IGUudGFyZ2V0KSB7XG4gICAgICAgIGlucHV0LndyYXBwZXIuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5GT0NVU0VEKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2UgZXZlbnQuXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgaGFuZGxlUmFkaW9DaGFuZ2UobGFiZWw6IEhUTUxMYWJlbEVsZW1lbnQsIGlucHV0OiBIVE1MSW5wdXRFbGVtZW50LCBlOiBFdmVudCkge1xuICAgIGlmICghdGhpcy5yYWRpb0dyb3VwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucmFkaW9Hcm91cC5pbnB1dHMuZm9yRWFjaChncm91cCA9PiB7XG4gICAgICBncm91cC5sYWJlbC5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLkFDVElWRSk7XG4gICAgfSk7XG4gICAgaWYgKChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS5jaGVja2VkKSB7XG4gICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkFDVElWRSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZvY3VzIGV2ZW50LiBBZGRzIGZvY3VzZWQgY2xhc3MgdG8gcmFkaW8gaW5wdXRzXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgaGFuZGxlUmFkaW9Gb2N1cyhsYWJlbDogSFRNTExhYmVsRWxlbWVudCwgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQsIGU6IEV2ZW50KSB7XG4gICAgbGFiZWwuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5GT0NVU0VEKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCbHVyIGV2ZW50LiBBZGRzIGZvY3VzZWQgY2xhc3MgdG8gcmFkaW8gaW5wdXRzXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgaGFuZGxlUmFkaW9CbHVyKGxhYmVsOiBIVE1MTGFiZWxFbGVtZW50LCBpbnB1dDogSFRNTElucHV0RWxlbWVudCwgZTogRXZlbnQpIHtcbiAgICBpZiAoIXRoaXMucmFkaW9Hcm91cCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJhZGlvR3JvdXAuaW5wdXRzLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgZ3JvdXAubGFiZWwuY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5GT0NVU0VEKTtcbiAgICB9KTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgQ29yZSBmcm9tICcuLi9Db3JlJztcbmltcG9ydCB7XG4gIGF4aW9zSW5zdGFuY2UsIEFDVElPTl9DTEFTU0VTLCBub2RlTGlzdFRvQXJyYXksXG59IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICdjb3JlLWRlY29yYXRvcnMnO1xuaW1wb3J0IHsgQ0tFZGl0LCBTbmFja0JhciB9IGZyb20gJy4uL2NvbXBvbmVudHMnO1xuXG5jb25zdCBTRUxFQ1RPUlMgPSB7XG4gIEZPUk06ICcuanMtZm9ybScsXG4gIFBST0pFQ1RfSURfSU5QVVQ6ICcuanMtcHJvamVjdC1pZCcsXG4gIFBST0pFQ1RfU0lURV9JRF9JTlBVVDogJy5qcy1wcm9qZWN0LXNpdGUtaWQnLFxuICBNQUlOX1RFWFRBUkVBOiAnLmpzLW1haW4tdGV4dGFyZWEnLFxuICBTQVZFX0JVVFRPTlM6ICcuanMtc3VibWl0JyxcbiAgU0FWRV9CVVRUT046ICcuanMtc2F2ZS1idXR0b24nLFxuICBVUERBVEVfQlVUVE9OOiAnLmpzLXVwZGF0ZS1idXR0b24nLFxufTtcblxuY29uc3QgRk9STV9VUkwgPSAnL2FwaS9tZW1iZXJzL3VwZGF0ZSc7XG5leHBvcnQgY2xhc3MgSW5zcGlyaW5nRWR1Y2F0b3Ige1xuICBjb3JlOiBDb3JlO1xuICBmb3JtOiBIVE1MRm9ybUVsZW1lbnQ7XG4gIHNhdmVCdXR0b25zOiBBcnJheTxIVE1MRWxlbWVudD47XG4gIGNrRWRpdDogQ0tFZGl0O1xuICBuYW1lID0gJyc7XG4gIG1haW5UZXh0QXJlYSA9ICcnO1xuICBzbmFja0JhcjogU25hY2tCYXI7XG4gIGhhc0VkaXRlZCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBGb3JtcyBjb25zdHJ1Y3RvclxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6IENvcmUpIHtcbiAgICB0aGlzLmNvcmUgPSBjb3JlO1xuICAgIHRoaXMuY2tFZGl0ID0gbmV3IENLRWRpdChjb3JlLCB0aGlzLmhhbmRsZUNLRWRpdENoYW5nZSk7XG4gICAgdGhpcy5mb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuRk9STSkgYXMgSFRNTEZvcm1FbGVtZW50O1xuICAgIHRoaXMuc2F2ZUJ1dHRvbnMgPSBub2RlTGlzdFRvQXJyYXkodGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1JTLlNBVkVfQlVUVE9OUykpO1xuICAgIHRoaXMuc25hY2tCYXIgPSBuZXcgU25hY2tCYXIodGhpcy5jb3JlKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBpbml0KCk6IHZvaWQge1xuICAgIHRoaXMubWFpblRleHRBcmVhID0gQ0tFRElUT1IuaW5zdGFuY2VzW3RoaXMubmFtZV0gJiYgQ0tFRElUT1IuaW5zdGFuY2VzW3RoaXMubmFtZV0uZ2V0RGF0YSgpO1xuICAgIHRoaXMuc2F2ZUJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZVN1Ym1pdCk7XG4gICAgfSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlQ0tFZGl0Q2hhbmdlKGU6IENLRURJVE9SLmV2ZW50SW5mbykge1xuICAgIHRoaXMubmFtZSA9IGUuZWRpdG9yLm5hbWU7XG4gICAgdGhpcy5tYWluVGV4dEFyZWEgPSBlLmVkaXRvci5nZXREYXRhKCk7XG4gICAgaWYgKCF0aGlzLmhhc0VkaXRlZCkge1xuICAgICAgdGhpcy5zYXZlQnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgICAgKGJ1dHRvbiBhcyBIVE1MQnV0dG9uRWxlbWVudCkuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmhhc0VkaXRlZCA9IHRydWU7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlU3VibWl0KGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLmZvcm0ucmVwb3J0VmFsaWRpdHkoKTtcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBlLmN1cnJlbnRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuU0FWSU5HKTtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBpbnNwaXJpbmdfZWR1Y2F0b3I6IHRoaXMubWFpblRleHRBcmVhLFxuICAgIH07XG4gICAgYXhpb3NJbnN0YW5jZS5wb3N0KEZPUk1fVVJMLCBKU09OLnN0cmluZ2lmeShwYXJhbXMpKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcnMpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QuYWRkKCctZXJyb3InKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zbmFja0Jhci5zbmFja0JhclRyaWdnZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuU0FWSU5HKTtcbiAgICAgICAgICAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuU0FWRV9CVVRUT04pIGFzIEhUTUxCdXR0b25FbGVtZW50KVxuICAgICAgICAgICAgICAuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgICAgICAgIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5VUERBVEVfQlVUVE9OKSBhcyBIVE1MQnV0dG9uRWxlbWVudClcbiAgICAgICAgICAgICAgLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QuYWRkKCctZXJyb3InKTtcbiAgICAgICAgICBzdWJtaXRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5TQVZJTkcpO1xuICAgICAgICAgIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TQVZFX0JVVFRPTikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpXG4gICAgICAgICAgICAgIC5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkhJRERFTik7XG4gICAgICAgICAgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlVQREFURV9CVVRUT04pIGFzIEhUTUxCdXR0b25FbGVtZW50KVxuICAgICAgICAgICAgICAuY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgfVxufVxuIiwiaW1wb3J0IENvcmUgZnJvbSAnLi4vQ29yZSc7XG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycyc7XG5pbXBvcnQgeyBheGlvc0luc3RhbmNlLCBBQ1RJT05fQ0xBU1NFUyB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBTRUxFQ1RPUlMgPSB7XG4gIEZPUk06ICcuanMtZm9ybScsXG4gIFNVQk1JVDogJy5qcy1zdWJtaXQtLXBhcmVudGFsLWNvbnNlbnQtZm9ybScsXG4gIENPREVfSU5QVVQ6ICcuanMtY29kZS1pbnB1dCcsXG4gIFNUVURFTlRfSU5QVVQ6ICcuanMtc3R1ZGVudC1pbnB1dCcsXG59O1xuXG5jb25zdCBDT05TRU5UX1VSTCA9ICcvZ3NmYXBpL21lbWJlcnMvZ3JhbnRfY29uc2VudCc7XG5cbmV4cG9ydCBjbGFzcyBQYXJlbnRhbENvbnNlbnQge1xuICBjb3JlOiBDb3JlO1xuICBmb3JtPzogSFRNTEZvcm1FbGVtZW50O1xuICBzdWJtaXQ/OiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgY29kZT86IEhUTUxJbnB1dEVsZW1lbnQ7XG4gIHN0dWRlbnQ/OiBIVE1MSW5wdXRFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBQYXJlbnRhbENvbnNlbnQgY29uc3RydWN0b3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBDb3JlKSB7XG4gICAgdGhpcy5jb3JlID0gY29yZTtcbiAgICB0aGlzLmZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5GT1JNKSBhcyBIVE1MRm9ybUVsZW1lbnQ7XG4gICAgaWYgKHRoaXMuZm9ybSkge1xuICAgICAgdGhpcy5zdWJtaXQgPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuU1VCTUlUKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICAgIHRoaXMuY29kZSA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5DT0RFX0lOUFVUKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgdGhpcy5zdHVkZW50ID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlNUVURFTlRfSU5QVVQpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgfVxuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnN1Ym1pdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlU3VibWl0KTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVTdWJtaXQoZTogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5mb3JtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBjb2RlOiB0aGlzLmNvZGUgJiYgdGhpcy5jb2RlLnZhbHVlLFxuICAgICAgc3R1ZGVudDogdGhpcy5zdHVkZW50ICYmIHRoaXMuc3R1ZGVudC52YWx1ZSxcbiAgICB9O1xuICAgIGF4aW9zSW5zdGFuY2UucG9zdChDT05TRU5UX1VSTCwgSlNPTi5zdHJpbmdpZnkocGFyYW1zKSlcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgaWYgKCF0aGlzLmZvcm0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3JzKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm0uY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5FUlJPUik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLlNVQk1JVFRFRCk7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvcGFyZW50YWwtY29uc2VudC9hcHByb3ZlJztcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoX2Vycm9yKSA9PiB7XG4gICAgICAgICAgaWYgKCF0aGlzLmZvcm0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5mb3JtLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuRVJST1IpO1xuICAgICAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IENvcmUgZnJvbSAnLi4vQ29yZSc7XG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycyc7XG5pbXBvcnQge1xuICBheGlvc0luc3RhbmNlLFxuICBBQ1RJT05fQ0xBU1NFUyxcbiAgbm9kZUxpc3RUb0FycmF5LFxufSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBBZ2VSYW5nZVJlc3RyaWN0aW9ucyBmcm9tICcuLi9jb21wb25lbnRzL0FnZVJhbmdlUmVzdHJpY3Rpb24nO1xuaW1wb3J0IHsgU25hY2tCYXIgfSBmcm9tICcuLi9jb21wb25lbnRzJztcblxuY29uc3QgU0VMRUNUT1JTID0ge1xuICBGT1JNOiAnLmpzLXByb2ZpbGUtZm9ybScsXG4gIEZPUk1fU1VCTUlUOiAnLmpzLWZvcm0tc3VibWl0JyxcbiAgRk9STV9URVhUX0lOUFVUOiAnLmZvcm0tLXRleHQtaW5wdXQnLFxuICBGT1JNX1JBRElPOiAnLmpzLXJhZGlvLWdyb3VwJyxcbiAgRk9STV9MRUdBTDogJy5qcy10ZXJtcy1jb250YWluZXInLFxuICBGT1JNX0ZJUlNUX05BTUU6ICcuanMtZmlyc3QtbmFtZS1jb250YWluZXInLFxuICBGT1JNX0xBU1RfTkFNRTogJy5qcy1sYXN0LW5hbWUtY29udGFpbmVyJyxcbiAgRk9STV9BR0VfUkFOR0U6ICcjYWdlLXJhbmdlJyxcbiAgRk9STV9BR0VfQ09OVEFJTkVSOiAnLmpzLWFnZS1yYW5nZS1jb250YWluZXInLFxuICBGT1JNX1NVQ0NFU1M6ICcuanMtZm9ybS1zdWNjZXNzJyxcbiAgRk9STV9DT1VOVFJZOiAnLmpzLWNvdW50cnktaW5wdXQnLFxuICBGT1JNX1NUQVRFOiAnLmpzLXN0YXRlLWlucHV0JyxcbiAgRk9STV9MQU5HVUFHRTogJy5qcy1sYW5ndWFnZS1pbnB1dCcsXG4gIEZPUk1fVEVBTV9DT0RFOiAnLmpzLXRlYW0taW5wdXQnLFxuICBGT1JNX1BIT05FX05VTUJFUjogJy5qcy1waG9uZS1udW1iZXInLFxuICBGT1JNX1NDSE9PTDogJy5qcy1zY2hvb2wtY29udGFpbmVyJyxcbiAgRk9STV9IT01FX1NDSE9PTEVEOiAnLmpzLWhvbWUtc2Nob29sZWQnLFxuICBGT1JNX1NDSE9PTF9DT05UQUlORVI6ICcuanMtc2Nob29sLWluZm8nLFxuICBGT1JNX1NDSE9PTF9OQU1FOiAnLmpzLXNjaG9vbC1uYW1lJyxcbiAgRk9STV9TQ0hPT0xfQUREUkVTUzogJy5qcy1zY2hvb2wtYWRkcmVzcycsXG4gIEZPUk1fU0NIT09MX1pJUDogJy5qcy1zY2hvb2wtemlwJyxcbiAgRk9STV9TQ0hPT0xfQ0lUWTogJy5qcy1zY2hvb2wtY2l0eScsXG4gIEZPUk1fU0NIT09MX1NUQVRFOiAnLmpzLXNjaG9vbC1zdGF0ZScsXG4gIEZPUk1fU0NIT09MX0NPVU5UUlk6ICcuanMtc2Nob29sLWNvdW50cnknLFxuICBERUxFVEVfQlVUVE9OOiAnLmpzLWRlbGV0ZS1hY2NvdW50JyxcbiAgUFJPRklMRV9XSURHRVRTOiAnLmpzLXByb2ZpbGUtd2lkZ2V0JyxcbiAgU1RBVFVTX0NPTVBMRVRFX0lORElDQVRPUjogJy5qcy1hY2NvdW50LXN0YXR1cy1jb21wbGV0ZS1pbmRpY2F0b3InLFxuICBTVEFUVVNfSU5DT01QTEVURV9JTkRJQ0FUT1I6ICcuanMtYWNjb3VudC1zdGF0dXMtaW5jb21wbGV0ZS1pbmRpY2F0b3InLFxufTtcblxuY29uc3QgUFJPRklMRV9GT1JNX1VSTCA9ICcvYXBpL21lbWJlcnMvdXBkYXRlJztcbmNvbnN0IERFTEVURV9BQ1RJT05fVVJMID0gJy9hcGkvbWVtYmVycy9kZWxldGVfbWUnO1xubGV0IExPR09VVF9VUkwgPSAnJztcblxuZXhwb3J0IGNsYXNzIFByb2ZpbGUge1xuICBjb3JlOiBDb3JlO1xuICBmb3JtOiBIVE1MRm9ybUVsZW1lbnQ7XG4gIGZvcm1TdWJtaXQ6IEhUTUxCdXR0b25FbGVtZW50O1xuICBmb3JtU3VjY2VzczogSFRNTEVsZW1lbnQ7XG4gIGNvdW50cnk6IEhUTUxTZWxlY3RFbGVtZW50O1xuICBmaXJzdE5hbWU6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gIGFnZVJhbmdlQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgYWdlUmFuZ2VSZXN0cmljdGlvbnM6IEFnZVJhbmdlUmVzdHJpY3Rpb25zO1xuICBzdGF0ZUNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gIHN0YXRlOiBIVE1MU2VsZWN0RWxlbWVudDtcbiAgc3VybmFtZTogSFRNTElucHV0RWxlbWVudDtcbiAgcGhvbmVOdW1iZXI6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gIGhvbWVTY2hvb2xlZDogSFRNTElucHV0RWxlbWVudDtcbiAgc2Nob29sRm9ybTogSFRNTEVsZW1lbnQ7XG4gIHNjaG9vbEluZm9Db250YWluZXI6IEhUTUxFbGVtZW50O1xuICBzY2hvb2xJbmZvSW5wdXRzOiBBcnJheTxIVE1MRWxlbWVudD47XG4gIHNjaG9vbE5hbWU6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gIHNjaG9vbEFkZHIxOiBIVE1MSW5wdXRFbGVtZW50O1xuICBzY2hvb2xQb3N0YWxDb2RlOiBIVE1MSW5wdXRFbGVtZW50O1xuICBzY2hvb2xDaXR5OiBIVE1MSW5wdXRFbGVtZW50O1xuICBzY2hvb2xTdGF0ZTogSFRNTElucHV0RWxlbWVudDtcbiAgc2Nob29sQ291bnRyeTogSFRNTElucHV0RWxlbWVudDtcbiAgZGVsZXRlVHJpZ2dlcjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gIHNuYWNrQmFyOiBTbmFja0JhcjtcbiAgc2Nob29sVmlzaWJsZTogYm9vbGVhbjtcbiAgcHJvZmlsZVdpZGdldHM6IEFycmF5PEhUTUxFbGVtZW50PjtcbiAgZXJyb3JzQ2xlYXJlZCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIFByb2ZpbGUgY29uc3RydWN0b3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBDb3JlKSB7XG4gICAgdGhpcy5jb3JlID0gY29yZTtcbiAgICB0aGlzLmZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5GT1JNKSBhcyBIVE1MRm9ybUVsZW1lbnQ7XG4gICAgdGhpcy5mb3JtU3VibWl0ID0gZG9jdW1lbnRcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkZPUk1fU1VCTUlUKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICB0aGlzLmZvcm1TdWNjZXNzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuRk9STV9TVUNDRVNTKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLmNvdW50cnkgPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihgJHtTRUxFQ1RPUlMuRk9STV9DT1VOVFJZfSBzZWxlY3RgKSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcbiAgICB0aGlzLnN0YXRlQ29udGFpbmVyID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkZPUk1fU1RBVEUpIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMuc3RhdGUgPSB0aGlzLnN0YXRlQ29udGFpbmVyXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKGAke1NFTEVDVE9SUy5GT1JNX1NUQVRFfSBzZWxlY3RgKSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcbiAgICB0aGlzLmZpcnN0TmFtZSA9IHRoaXMuZm9ybVxuICAgICAgICAucXVlcnlTZWxlY3RvcihgJHtTRUxFQ1RPUlMuRk9STV9GSVJTVF9OQU1FfSBpbnB1dGApIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgdGhpcy5zdXJuYW1lID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoYCR7U0VMRUNUT1JTLkZPUk1fTEFTVF9OQU1FfSBpbnB1dGApIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgdGhpcy5waG9uZU51bWJlciA9IHRoaXMuZm9ybVxuICAgICAgICAucXVlcnlTZWxlY3RvcihgJHtTRUxFQ1RPUlMuRk9STV9QSE9ORV9OVU1CRVJ9IGlucHV0YCkgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICB0aGlzLnNjaG9vbEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5GT1JNX1NDSE9PTCkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgdGhpcy5ob21lU2Nob29sZWQgPSAodGhpcy5mb3JtXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKGAke1NFTEVDVE9SUy5GT1JNX0hPTUVfU0NIT09MRUR9IGlucHV0YCkgYXMgSFRNTElucHV0RWxlbWVudCk7XG4gICAgdGhpcy5zY2hvb2xWaXNpYmxlID0gIXRoaXMuaG9tZVNjaG9vbGVkLmNoZWNrZWQ7XG4gICAgdGhpcy5zY2hvb2xJbmZvQ29udGFpbmVyID0gKHRoaXMuZm9ybVxuICAgICAgICAucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuRk9STV9TQ0hPT0xfQ09OVEFJTkVSKSBhcyBIVE1MRWxlbWVudCk7XG4gICAgdGhpcy5zY2hvb2xJbmZvSW5wdXRzID0gbm9kZUxpc3RUb0FycmF5KHRoaXMuc2Nob29sSW5mb0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpKTtcbiAgICB0aGlzLnNjaG9vbE5hbWUgPSB0aGlzLmZvcm1cbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoYCR7U0VMRUNUT1JTLkZPUk1fU0NIT09MX05BTUV9IGlucHV0YCkgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICB0aGlzLnNjaG9vbEFkZHIxID0gdGhpcy5mb3JtXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKGAke1NFTEVDVE9SUy5GT1JNX1NDSE9PTF9BRERSRVNTfSBpbnB1dGApIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgdGhpcy5zY2hvb2xQb3N0YWxDb2RlID0gdGhpcy5mb3JtXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKGAke1NFTEVDVE9SUy5GT1JNX1NDSE9PTF9aSVB9IGlucHV0YCkgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICB0aGlzLnNjaG9vbENpdHkgPSB0aGlzLmZvcm1cbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoYCR7U0VMRUNUT1JTLkZPUk1fU0NIT09MX0NJVFl9IGlucHV0YCkgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICB0aGlzLnNjaG9vbFN0YXRlID0gdGhpcy5mb3JtXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKGAke1NFTEVDVE9SUy5GT1JNX1NDSE9PTF9TVEFURX0gc2VsZWN0YCkgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICB0aGlzLnNjaG9vbENvdW50cnkgPSB0aGlzLmZvcm1cbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoYCR7U0VMRUNUT1JTLkZPUk1fU0NIT09MX0NPVU5UUll9IHNlbGVjdGApIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgdGhpcy5kZWxldGVUcmlnZ2VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuREVMRVRFX0JVVFRPTikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgdGhpcy5wcm9maWxlV2lkZ2V0cyA9IG5vZGVMaXN0VG9BcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SUy5QUk9GSUxFX1dJREdFVFMpKTtcbiAgICB0aGlzLmFnZVJhbmdlQ29udGFpbmVyID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkZPUk1fUkFESU8pIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMuYWdlUmFuZ2VSZXN0cmljdGlvbnMgPSBuZXcgQWdlUmFuZ2VSZXN0cmljdGlvbnMoXG4gICAgICB0aGlzLmNvdW50cnksXG4gICAgICB0aGlzLmFnZVJhbmdlQ29udGFpbmVyLFxuICAgICk7XG4gICAgdGhpcy5zbmFja0JhciA9IG5ldyBTbmFja0Jhcih0aGlzLmNvcmUpO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmZvcm1TdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZVN1Ym1pdCk7XG4gICAgTE9HT1VUX1VSTCA9IHRoaXMuZGVsZXRlVHJpZ2dlci5kYXRhc2V0LmxvZ291dFVybCBhcyBzdHJpbmc7XG4gICAgdGhpcy5kZWxldGVUcmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVEZWxldGUpO1xuICAgIHRoaXMuaGFuZGxlSG9tZVNjaG9vbENoYW5nZSgpO1xuICAgIHRoaXMuaG9tZVNjaG9vbGVkLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlSG9tZVNjaG9vbENoYW5nZSk7XG4gICAgdGhpcy5jb3VudHJ5LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlQ291bnRyeUNoYW5nZSk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKS5mb3JFYWNoKChpbnB1dCkgPT5cbiAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLmhhbmRsZU9uSW5wdXQpKTtcbiAgICB0aGlzLmhhbmRsZUNvdW50cnlDaGFuZ2UoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVPbklucHV0KCkge1xuICAgIGlmICghdGhpcy5lcnJvcnNDbGVhcmVkKSB7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuLWVycm9yJylcbiAgICAgICAgICAuZm9yRWFjaCgoZXJyb3JFbCkgPT4gZXJyb3JFbC5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLkVSUk9SKSk7XG4gICAgICB0aGlzLmVycm9yc0NsZWFyZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVDb3VudHJ5Q2hhbmdlKCkge1xuICAgIGlmICh0aGlzLmNvdW50cnkudmFsdWUgPT09ICdVUycpIHtcbiAgICAgIHRoaXMuc2Nob29sVmlzaWJsZSA9IHRydWU7XG4gICAgICB0aGlzLnN0YXRlQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zY2hvb2xWaXNpYmxlID0gZmFsc2U7XG4gICAgICB0aGlzLnN0YXRlQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB9XG4gICAgdGhpcy5zZXRTY2hvb2xWaXNpYmlsaXR5KCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgc2V0U2Nob29sVmlzaWJpbGl0eSgpIHtcbiAgICBpZiAodGhpcy5zY2hvb2xWaXNpYmxlKSB7XG4gICAgICB0aGlzLnNjaG9vbEZvcm0uY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgICAgdGhpcy5oYW5kbGVIb21lU2Nob29sQ2hhbmdlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2Nob29sRm9ybS5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkhJRERFTik7XG4gICAgICB0aGlzLmhhbmRsZUhvbWVTY2hvb2xDaGFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlSG9tZVNjaG9vbENoYW5nZSgpIHtcbiAgICBpZiAodGhpcy5ob21lU2Nob29sZWQuY2hlY2tlZCkge1xuICAgICAgdGhpcy5zY2hvb2xJbmZvQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zY2hvb2xJbmZvQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlU3VibWl0KGU/OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgZSAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5mb3JtLnJlcG9ydFZhbGlkaXR5KCk7XG4gICAgdGhpcy5mb3JtU3VibWl0LmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuU0FWSU5HKTtcbiAgICBpZiAodGhpcy5mb3JtLmNoZWNrVmFsaWRpdHkoKSkge1xuICAgICAgY29uc3Qgc2VuZFNjaG9vbCA9ICF0aGlzLmhvbWVTY2hvb2xlZC5jaGVja2VkICYmIHRoaXMuc2Nob29sVmlzaWJsZTtcbiAgICAgIGNvbnN0IHByb2ZpbGVQYXJhbXMgPSB7XG4gICAgICAgIGZpcnN0bmFtZTogdGhpcy5maXJzdE5hbWUudmFsdWUsXG4gICAgICAgIHN1cm5hbWU6IHRoaXMuc3VybmFtZS52YWx1ZSxcbiAgICAgICAgbG9jYWxlOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZyxcbiAgICAgICAgYWdlX3JhbmdlOiB0aGlzLmFnZVJhbmdlUmVzdHJpY3Rpb25zLmFnZVJhbmdlICE9PSAnJyA/XG4gICAgICAgICAgICB0aGlzLmFnZVJhbmdlUmVzdHJpY3Rpb25zLmFnZVJhbmdlIDogbnVsbCxcbiAgICAgICAgY291bnRyeTogdGhpcy5jb3VudHJ5LnZhbHVlLFxuICAgICAgICBob21lX3N0YXRlOiB0aGlzLmNvdW50cnkudmFsdWUgPT09ICdVUycgPyB0aGlzLnN0YXRlLnZhbHVlIDogbnVsbCxcbiAgICAgICAgcGhvbmVfbnVtYmVyOiB0aGlzLnBob25lTnVtYmVyLnZhbHVlLFxuICAgICAgICBob21lX3NjaG9vbGVkOiB0aGlzLnNjaG9vbFZpc2libGUgPyB0aGlzLmhvbWVTY2hvb2xlZC5jaGVja2VkIDogbnVsbCxcbiAgICAgICAgc2Nob29sX25hbWU6IHNlbmRTY2hvb2wgPyB0aGlzLnNjaG9vbE5hbWUudmFsdWUgOiBudWxsLFxuICAgICAgICBzY2hvb2xfYWRkcjE6IHNlbmRTY2hvb2wgPyB0aGlzLnNjaG9vbEFkZHIxLnZhbHVlIDogbnVsbCxcbiAgICAgICAgc2Nob29sX3Bvc3RhbF9jb2RlOiBzZW5kU2Nob29sID8gdGhpcy5zY2hvb2xQb3N0YWxDb2RlLnZhbHVlIDogbnVsbCxcbiAgICAgICAgc2Nob29sX2NpdHk6IHNlbmRTY2hvb2wgPyB0aGlzLnNjaG9vbENpdHkudmFsdWUgOiBudWxsLFxuICAgICAgICBzY2hvb2xfc3RhdGU6IHNlbmRTY2hvb2wgPyB0aGlzLnNjaG9vbFN0YXRlLnZhbHVlIDogbnVsbCxcbiAgICAgICAgc2Nob29sX2NvdW50cnk6IHNlbmRTY2hvb2wgPyB0aGlzLnNjaG9vbENvdW50cnkudmFsdWUgOiBudWxsLFxuICAgICAgfTtcbiAgICAgIGF4aW9zSW5zdGFuY2UucG9zdChQUk9GSUxFX0ZPUk1fVVJMLCBKU09OLnN0cmluZ2lmeShwcm9maWxlUGFyYW1zKSlcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgdGhpcy5mb3JtU3VibWl0LmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuU0FWSU5HKTtcbiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcnMpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkVSUk9SKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuaXNfcHJvZmlsZV9jb21wbGV0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICB0aGlzLnNldFByb2ZpbGVDb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSBlbHNlICB7XG4gICAgICAgICAgICAgIHRoaXMuc2V0UHJvZmlsZUluY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc25hY2tCYXIuc25hY2tCYXJUcmlnZ2VyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgdGhpcy5lcnJvcnNDbGVhcmVkID0gZmFsc2U7XG4gICAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlLmRhdGEuZXJyb3JzID09PSAnSW52YWxpZCBhZ2UgcmFuZ2UgZm9yIEVVJykge1xuICAgICAgICAgICAgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkZPUk1fQUdFX0NPTlRBSU5FUikgYXMgSFRNTEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuRVJST1IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmZvcm0uY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5FUlJPUik7XG4gICAgICAgICAgdGhpcy5mb3JtU3VibWl0LmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuU0FWSU5HKTtcbiAgICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIHNldFByb2ZpbGVDb21wbGV0ZSgpIHtcbiAgICB0aGlzLnByb2ZpbGVXaWRnZXRzLmZvckVhY2goKHdpZGdldCkgPT4ge1xuICAgICAgKHdpZGdldC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TVEFUVVNfSU5DT01QTEVURV9JTkRJQ0FUT1IpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgICAgKHdpZGdldC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TVEFUVVNfQ09NUExFVEVfSU5ESUNBVE9SKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB9KTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBzZXRQcm9maWxlSW5jb21wbGV0ZSgpIHtcbiAgICB0aGlzLnByb2ZpbGVXaWRnZXRzLmZvckVhY2goKHdpZGdldCkgPT4ge1xuICAgICAgKHdpZGdldC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TVEFUVVNfSU5DT01QTEVURV9JTkRJQ0FUT1IpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAuY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgICAgKHdpZGdldC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TVEFUVVNfQ09NUExFVEVfSU5ESUNBVE9SKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZURlbGV0ZShlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGF4aW9zSW5zdGFuY2UucG9zdChERUxFVEVfQUNUSU9OX1VSTClcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3JzKSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgZXJyb3JzIGhlcmVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBMT0dPVVRfVVJMO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gIH1cblxufVxuIiwiZGVjbGFyZSB2YXIgVHdlZW5NYXg6IGFueTtcbmltcG9ydCBDb3JlIGZyb20gJy4uL0NvcmUnO1xuaW1wb3J0IHtcbiAgQUNUSU9OX0NMQVNTRVMsXG4gIG5vZGVMaXN0VG9BcnJheSxcbiAgYXhpb3NJbnN0YW5jZSxcbn0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycyc7XG5pbXBvcnQgeyBDS0VkaXQsIFN0ZXBOYXYsIFNuYWNrQmFyLCBTdGlja3lCYXIgfSBmcm9tICcuLi9jb21wb25lbnRzJztcblxuY29uc3QgU0VMRUNUT1JTID0ge1xuICBGT1JNOiAnLmpzLWZvcm0nLFxuICBQUk9KRUNUX0lEX0lOUFVUOiAnLmpzLXByb2plY3QtaWQnLFxuICBQUk9KRUNUX1NJVEVfSURfSU5QVVQ6ICcuanMtcHJvamVjdC1zaXRlLWlkJyxcbiAgTUFJTl9URVhUQVJFQTogJy5qcy1yaWNoLXRleHRhcmVhJyxcbiAgU0FWRUQ6ICcuanMtc3RhdHVzLWJhci1zYXZlZCcsXG4gIFNBVklORzogJy5qcy1zdGF0dXMtYmFyLXNhdmluZycsXG4gIEVNUFRZOiAnLmpzLXN0YXR1cy1iYXItZW1wdHknLFxuICBFRElURURfSEFTSDogJy5qcy1sYXN0LWVkaXRlZCcsXG4gIEJBRF9IQVNIOiAnLmpzLWJhZC1oYXNoJyxcbiAgUkVMT0FEX0NUQTogJy5qcy1yZWxvYWQtY3RhJyxcbn07XG5cbmNvbnN0IEZPUk1fVVJMID0gJy9hcGkvc2l0ZXMvdXBkYXRlJztcbmNvbnN0IEFVVE9TQVZFX1RJTUVPVVQgPSAyMDAwO1xuY29uc3QgU05BQ0tCQVJfVElNRU9VVCA9IDgwMDA7XG5cbmV4cG9ydCBjbGFzcyBTdGVwRm9ybSB7XG4gIGNvcmU6IENvcmU7XG4gIGZvcm06IEhUTUxGb3JtRWxlbWVudDtcbiAgaW5wdXRzOiBBcnJheTxIVE1MRWxlbWVudD47XG4gIHByb2plY3RTaXRlSWQ6IHN0cmluZztcbiAgY2tFZGl0OiBDS0VkaXQ7XG4gIG5hbWUgPSAnJztcbiAgbWFpblRleHRBcmVhID0gJyc7XG4gIHN0ZXBOYXY6IFN0ZXBOYXY7XG4gIHRpbWVvdXQ6IGFueTtcbiAgc2F2ZWRTdGF0dXM6IEhUTUxFbGVtZW50O1xuICBzYXZpbmdTdGF0dXM6IEhUTUxFbGVtZW50O1xuICBlbXB0eVN0YXR1czogSFRNTEVsZW1lbnQ7XG4gIGlzRm9ybVNhdmVkOiBib29sZWFuO1xuICBzbmFja0JhcjogU25hY2tCYXI7XG4gIHN0aWNreUJhcjogU3RpY2t5QmFyO1xuICBjdXJyZW50RWRpdEhhc2g/OiBzdHJpbmcgfCBudWxsO1xuICBiYWRIYXNoV2FybmluZ0VsOiBIVE1MRWxlbWVudDtcbiAgZWRpdFRpbWVvdXQ/OiBudW1iZXI7XG4gIHJlbG9hZENUQTogSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIEZvcm1zIGNvbnN0cnVjdG9yXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoY29yZTogQ29yZSkge1xuICAgIHRoaXMuY29yZSA9IGNvcmU7XG4gICAgdGhpcy5uYW1lID0gKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLk1BSU5fVEVYVEFSRUEpIGFzIEhUTUxFbGVtZW50KS5pZDtcbiAgICB0aGlzLmNrRWRpdCA9IG5ldyBDS0VkaXQoY29yZSwgdGhpcy5oYW5kbGVDS0VkaXRDaGFuZ2UpO1xuICAgIHRoaXMuZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkZPUk0pIGFzIEhUTUxGb3JtRWxlbWVudDtcbiAgICB0aGlzLmlucHV0cyA9IG5vZGVMaXN0VG9BcnJheSh0aGlzLmZvcm0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QnKSk7XG4gICAgdGhpcy5wcm9qZWN0U2l0ZUlkID0gKGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuUFJPSkVDVF9TSVRFX0lEX0lOUFVUKSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICB0aGlzLnN0ZXBOYXYgPSBuZXcgU3RlcE5hdih0aGlzLmNvcmUpO1xuICAgIHRoaXMuc2F2ZWRTdGF0dXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TQVZFRCkgYXMgSFRNTFNwYW5FbGVtZW50O1xuICAgIHRoaXMuc2F2aW5nU3RhdHVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuU0FWSU5HKSBhcyBIVE1MU3BhbkVsZW1lbnQ7XG4gICAgdGhpcy5lbXB0eVN0YXR1cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkVNUFRZKSBhcyBIVE1MU3BhbkVsZW1lbnQ7XG4gICAgY29uc3QgZWRpdEhhc2hJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkVESVRFRF9IQVNIKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIHRoaXMuYmFkSGFzaFdhcm5pbmdFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkJBRF9IQVNIKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLnJlbG9hZENUQSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlJFTE9BRF9DVEEpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgIGlmIChlZGl0SGFzaElucHV0ICYmIGVkaXRIYXNoSW5wdXQudmFsdWUgPT09ICcnKSB7XG4gICAgICB0aGlzLmN1cnJlbnRFZGl0SGFzaCA9IG51bGw7XG4gICAgfSBlbHNlIGlmIChlZGl0SGFzaElucHV0KSB7XG4gICAgICB0aGlzLmN1cnJlbnRFZGl0SGFzaCA9IGVkaXRIYXNoSW5wdXQudmFsdWU7XG4gICAgfVxuXG4gICAgdGhpcy5pc0Zvcm1TYXZlZCA9IHRydWU7XG4gICAgdGhpcy5zbmFja0JhciA9IG5ldyBTbmFja0Jhcih0aGlzLmNvcmUpO1xuICAgIHRoaXMuc3RpY2t5QmFyID0gbmV3IFN0aWNreUJhcih0cnVlKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBpbml0KCk6IHZvaWQge1xuICAgIHRoaXMubWFpblRleHRBcmVhID0gQ0tFRElUT1IuaW5zdGFuY2VzW3RoaXMubmFtZV0gJiYgQ0tFRElUT1IuaW5zdGFuY2VzW3RoaXMubmFtZV0uZ2V0RGF0YSgpO1xuICAgIHRoaXMucmVsb2FkQ1RBLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVSZWxvYWRDVEEpO1xuICAgIENLRURJVE9SLm9uKCdpbnN0YW5jZVJlYWR5JywgKCBldiApID0+IHtcbiAgICAgIGV2LmVkaXRvci5vbignZm9jdXMnLCB0aGlzLmNoZWNrTGFzdEVkaXRlZCk7XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHRoaXMuaGFuZGxlQmVmb3JlVW5sb2FkKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBjaGVja0xhc3RFZGl0ZWQoKSB7XG4gICAgY29uc3QgcHJvamVjdFVybCA9IGAvYXBpL3NpdGVzL2dldD9oYXNob25seT0ke3RoaXMubmFtZX1gO1xuICAgIGF4aW9zSW5zdGFuY2UuZ2V0KHByb2plY3RVcmwpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zdCBzYW5pdGl6ZWREYXRhID0gcmVzcG9uc2UuZGF0YS5yZXBsYWNlKC9eXFwpXX0nLC8sICcnKTtcbiAgICAgIGNvbnN0IGpzb25SZXNwb25zZSA9IEpTT04ucGFyc2Uoc2FuaXRpemVkRGF0YSk7XG4gICAgICBjb25zdCBoYXNoID0ganNvblJlc3BvbnNlW2Ake3RoaXMubmFtZX1faGFzaGBdO1xuICAgICAgaWYgKGhhc2ggPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGhhc2ggIT09IHRoaXMuY3VycmVudEVkaXRIYXNoKSB7XG4gICAgICAgIC8vIFRoaXMgbWVhbnMgc29tZW9uZSBlbHNlIGhhcyBlZGl0ZWQgdGhlIHByb2plY3QgYW5kIHdlIG5lZWQgdG8gdHVybiBpdFxuICAgICAgICAvLyB0byByZWFkIG9ubHkgYW5kIHNob3cgYSB3YXJuaW5nXG4gICAgICAgIHRoaXMuY2tFZGl0LmVkaXRvciAmJiB0aGlzLmNrRWRpdC5lZGl0b3Iuc2V0UmVhZE9ubHkoKTtcbiAgICAgICAgdGhpcy5iYWRIYXNoV2FybmluZ0VsLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICAgICAgVHdlZW5NYXgudG8od2luZG93LCAxLCB7XG4gICAgICAgICAgc2Nyb2xsVG86IHtcbiAgICAgICAgICAgIHk6IHdpbmRvdy5zY3JvbGxZICsgdGhpcy5iYWRIYXNoV2FybmluZ0VsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIDg1LFxuICAgICAgICAgICAgYXV0b0tpbGw6IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUNLRWRpdENoYW5nZShlOiBDS0VESVRPUi5ldmVudEluZm8pIHtcbiAgICB0aGlzLm5hbWUgPSBlLmVkaXRvci5uYW1lO1xuICAgIHRoaXMubWFpblRleHRBcmVhID0gZS5lZGl0b3IuZ2V0RGF0YSgpO1xuICAgIHRoaXMuY2hlY2tBdXRvU2F2ZSgpO1xuICAgIHRoaXMuZW1wdHlTdGF0dXMuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgIHRoaXMuc2F2ZWRTdGF0dXMuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgIHRoaXMuc2F2aW5nU3RhdHVzLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVCZWZvcmVVbmxvYWQoZTogQmVmb3JlVW5sb2FkRXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuaXNGb3JtU2F2ZWQpIHtcbiAgICAgIC8vIE1vc3QgYnJvd3NlcnMuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyBDaHJvbWUvQ2hyb21pdW0gYmFzZWQgYnJvd3NlcnMgc3RpbGwgbmVlZCBhIHN0cmluZywgYnV0IHdvbid0IGJlIHZpc2libGUuXG4gICAgICBlLnJldHVyblZhbHVlID0gJ0dTRjIwMTgnO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVSZWxvYWRDVEEoZTogRXZlbnQpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZG9jdW1lbnQubG9jYXRpb24ucmVsb2FkKCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgY2hlY2tBdXRvU2F2ZSgpIHtcbiAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICB0aGlzLmlzRm9ybVNhdmVkID0gZmFsc2U7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICB9XG4gICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZVN1Ym1pdCgpO1xuICAgIH0sIEFVVE9TQVZFX1RJTUVPVVQpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVN1Ym1pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmZvcm0ucmVwb3J0VmFsaWRpdHkoKTtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBpZDogdGhpcy5wcm9qZWN0U2l0ZUlkLFxuICAgICAgW3RoaXMubmFtZV06IHRoaXMubWFpblRleHRBcmVhLFxuICAgICAgW2Ake3RoaXMubmFtZX1faGFzaGBdOiB0aGlzLmN1cnJlbnRFZGl0SGFzaCxcbiAgICB9O1xuICAgIGF4aW9zSW5zdGFuY2UucG9zdChGT1JNX1VSTCwgSlNPTi5zdHJpbmdpZnkocGFyYW1zKSlcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcnMpIHtcbiAgICAgICAgICB0aGlzLmNoZWNrTGFzdEVkaXRlZCgpO1xuICAgICAgICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkVSUk9SKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmZvcm0uY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5TVUJNSVRURUQpO1xuICAgICAgICAgIHRoaXMuc2F2aW5nU3RhdHVzLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICAgICAgICAvLyBTZXQgYmFjayB0byBFTVBUWSBpZiB0ZXh0YXJlYSB3YXMgY2xlYXJlZFxuICAgICAgICAgIGlmICh0aGlzLm1haW5UZXh0QXJlYSA9PT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMuZW1wdHlTdGF0dXMuY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNhdmVkU3RhdHVzLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pc0Zvcm1TYXZlZCA9IHRydWU7XG4gICAgICAgICAgLy8gUmVzZXQgbmV3IGhhc2hcbiAgICAgICAgICB0aGlzLmN1cnJlbnRFZGl0SGFzaCA9IHJlc3BvbnNlLmRhdGFbYCR7dGhpcy5uYW1lfV9oYXNoYF07XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIC8vIENhdGNoIG5ldHdvcmsgZXJyb3JcbiAgICAgICAgdGhpcy5jaGVja0xhc3RFZGl0ZWQoKTtcbiAgICAgICAgaWYgKCFlcnJvci5yZXNwb25zZS5kYXRhLmVycm9ycy5zdGFydHNXaXRoKCdFZGl0IGNvbGxpc2lvbicpKSB7XG4gICAgICAgICAgdGhpcy5zbmFja0Jhci5zbmFja0JhclRyaWdnZXIodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU05BQ0tCQVJfVElNRU9VVCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mb3JtLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuRVJST1IpO1xuICAgICAgfSk7XG4gIH1cbn1cbiIsImRlY2xhcmUgdmFyIFR3ZWVuTWF4OiBhbnk7XG5pbXBvcnQgQ29yZSBmcm9tICcuLi9Db3JlJztcbmltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJztcbmltcG9ydCB7XG4gIEFDVElPTl9DTEFTU0VTLFxuICBheGlvc0luc3RhbmNlLFxuICBub2RlTGlzdFRvQXJyYXksXG59IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgQ0tFZGl0LCBTdGVwTmF2LCBTbmFja0JhciwgU3RpY2t5QmFyIH0gZnJvbSAnLi4vY29tcG9uZW50cyc7XG5cbmNvbnN0IFNFTEVDVE9SUyA9IHtcbiAgRk9STTogJy5qcy1mb3JtJyxcbiAgUFJPSkVDVF9JRF9JTlBVVDogJy5qcy1wcm9qZWN0LWlkJyxcbiAgUFJPSkVDVF9TSVRFX0lEX0lOUFVUOiAnLmpzLXByb2plY3Qtc2l0ZS1pZCcsXG4gIE1BSU5fVEVYVEFSRUE6ICcuanMtbWFpbi10ZXh0YXJlYScsXG4gIFBST0pFQ1RfTkFNRTogJy5qcy1wcm9qZWN0LW5hbWUnLFxuICBQUk9KRUNUX0NBVEVHT1JZOiAnLmpzLW1haW4tY2F0ZWdvcnknLFxuICBGT1JNX1NVQl9DQVRFR09SWTogJy5qcy1zZWNvbmRhcnktY2F0ZWdvcnknLFxuICBQUk9KRUNUX1NVQl9DQVRFR09SSUVTOiAnLmpzLXN1Yi1jYXRlZ29yaWVzJyxcbiAgUFJPSkVDVF9ERVNDUklQVElPTjogJy5qcy1kZXNjcmlwdGlvbicsXG4gIFNBVkVEOiAnLmpzLXN0YXR1cy1iYXItc2F2ZWQnLFxuICBTQVZJTkc6ICcuanMtc3RhdHVzLWJhci1zYXZpbmcnLFxuICBFTVBUWTogJy5qcy1zdGF0dXMtYmFyLWVtcHR5JyxcbiAgSU5DT01QTEVURTogJy5qcy1zdGF0dXMtYmFyLWluY29tcGxldGUnLFxuICBFRElURURfSEFTSDogJy5qcy1sYXN0LWVkaXRlZCcsXG4gIEJBRF9IQVNIOiAnLmpzLWJhZC1oYXNoJyxcbiAgUkVMT0FEX0NUQTogJy5qcy1yZWxvYWQtY3RhJyxcbn07XG5cbmNvbnN0IFNJVEVTX0ZPUk1fVVJMID0gJy9hcGkvc2l0ZXMvdXBkYXRlJztcbmNvbnN0IFBST0pFQ1RfRk9STV9VUkwgPSAnL2FwaS9wcm9qZWN0cy91cGRhdGUnO1xuY29uc3QgQVVUT1NBVkVfVElNRU9VVCA9IDIwMDA7XG5cbmV4cG9ydCBjbGFzcyBTdGVwU3VtbWFyeUZvcm0ge1xuICBjb3JlOiBDb3JlO1xuICBja0VkaXQ6IENLRWRpdDtcbiAgZm9ybTogSFRNTEZvcm1FbGVtZW50O1xuICBwcm9qZWN0U2l0ZUlkOiBzdHJpbmc7XG4gIHByb2plY3RJZDogc3RyaW5nO1xuICBjYXRlZ29yeTogSFRNTFNlbGVjdEVsZW1lbnQ7XG4gIHN1YkNhdGVnb3J5Rm9ybTogSFRNTEVsZW1lbnQ7XG4gIHN1YkNhdGVnb3JpZXM6IEFycmF5PEhUTUxJbnB1dEVsZW1lbnQ+O1xuICBzdGVwTmF2OiBTdGVwTmF2O1xuICBzdW1tYXJ5ID0gJyc7XG4gIG5hbWUgPSAnJztcbiAgZGVzY3JpcHRpb24gPSAnJztcbiAgdGltZW91dDogYW55O1xuICBzYXZlZFN0YXR1czogSFRNTEVsZW1lbnQ7XG4gIHNhdmluZ1N0YXR1czogSFRNTEVsZW1lbnQ7XG4gIGVtcHR5U3RhdHVzOiBIVE1MRWxlbWVudDtcbiAgaW5jb21wbGV0ZVN0YXR1czogSFRNTEVsZW1lbnQ7XG4gIHN1YkNhdGVnb3JpZXNDaGVja2VkOiBudW1iZXI7XG4gIGlzRm9ybVNhdmVkOiBib29sZWFuO1xuICBzbmFja0JhcjogU25hY2tCYXI7XG4gIHN0aWNreUJhcjogU3RpY2t5QmFyO1xuICBpc1NpdGVzUG9zdFN1Y2Nlc3M6IGJvb2xlYW47XG4gIGlzUHJvamVjdFBvc3RTdWNjZXNzOiBib29sZWFuO1xuICBjdXJyZW50RWRpdEhhc2g/OiBzdHJpbmcgfCBudWxsO1xuICBiYWRIYXNoV2FybmluZ0VsOiBIVE1MRWxlbWVudDtcbiAgZWRpdFRpbWVvdXQ/OiBudW1iZXI7XG4gIHJlbG9hZENUQTogSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIEZvcm1zIGNvbnN0cnVjdG9yXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoY29yZTogQ29yZSkge1xuICAgIHRoaXMuY29yZSA9IGNvcmU7XG4gICAgdGhpcy5ja0VkaXQgPSBuZXcgQ0tFZGl0KGNvcmUsIHRoaXMuaGFuZGxlQ0tFZGl0Q2hhbmdlKTtcbiAgICB0aGlzLmZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5GT1JNKSBhcyBIVE1MRm9ybUVsZW1lbnQ7XG4gICAgdGhpcy5wcm9qZWN0U2l0ZUlkID0gKGRvY3VtZW50XG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5QUk9KRUNUX1NJVEVfSURfSU5QVVQpIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICAgIHRoaXMucHJvamVjdElkID0gKGRvY3VtZW50XG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5QUk9KRUNUX0lEX0lOUFVUKSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICB0aGlzLmNhdGVnb3J5ID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlBST0pFQ1RfQ0FURUdPUlkpIGFzIEhUTUxTZWxlY3RFbGVtZW50O1xuICAgIHRoaXMuc3ViQ2F0ZWdvcmllcyA9IG5vZGVMaXN0VG9BcnJheSh0aGlzLmZvcm0ucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgU0VMRUNUT1JTLlBST0pFQ1RfU1VCX0NBVEVHT1JJRVMpKSBhcyBBcnJheTxIVE1MSW5wdXRFbGVtZW50PjtcbiAgICB0aGlzLnN1YkNhdGVnb3J5Rm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkZPUk1fU1VCX0NBVEVHT1JZKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLnN0ZXBOYXYgPSBuZXcgU3RlcE5hdih0aGlzLmNvcmUpO1xuICAgIHRoaXMuc2F2ZWRTdGF0dXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TQVZFRCkgYXMgSFRNTFNwYW5FbGVtZW50O1xuICAgIHRoaXMuc2F2aW5nU3RhdHVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuU0FWSU5HKSBhcyBIVE1MU3BhbkVsZW1lbnQ7XG4gICAgdGhpcy5lbXB0eVN0YXR1cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkVNUFRZKSBhcyBIVE1MU3BhbkVsZW1lbnQ7XG4gICAgdGhpcy5pbmNvbXBsZXRlU3RhdHVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuSU5DT01QTEVURSkgYXMgSFRNTFNwYW5FbGVtZW50O1xuICAgIGNvbnN0IGVkaXRIYXNoSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5FRElURURfSEFTSCkgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICB0aGlzLmJhZEhhc2hXYXJuaW5nRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5CQURfSEFTSCkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgdGhpcy5yZWxvYWRDVEEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5SRUxPQURfQ1RBKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBpZiAoZWRpdEhhc2hJbnB1dCAmJiBlZGl0SGFzaElucHV0LnZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy5jdXJyZW50RWRpdEhhc2ggPSBudWxsO1xuICAgIH0gZWxzZSBpZiAoZWRpdEhhc2hJbnB1dCkge1xuICAgICAgdGhpcy5jdXJyZW50RWRpdEhhc2ggPSBlZGl0SGFzaElucHV0LnZhbHVlO1xuICAgIH1cbiAgICB0aGlzLnN1YkNhdGVnb3JpZXNDaGVja2VkID0gMDtcbiAgICB0aGlzLmlzU2l0ZXNQb3N0U3VjY2VzcyA9IHRydWU7XG4gICAgdGhpcy5pc1Byb2plY3RQb3N0U3VjY2VzcyA9IHRydWU7XG4gICAgdGhpcy5pc0Zvcm1TYXZlZCA9IHRoaXMuaXNTaXRlc1Bvc3RTdWNjZXNzICYmIHRoaXMuaXNQcm9qZWN0UG9zdFN1Y2Nlc3M7XG4gICAgdGhpcy5zbmFja0JhciA9IG5ldyBTbmFja0Jhcih0aGlzLmNvcmUpO1xuICAgIHRoaXMuc3RpY2t5QmFyID0gbmV3IFN0aWNreUJhcih0cnVlKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBpbml0KCk6IHZvaWQge1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBDS0VESVRPUi5pbnN0YW5jZXMuZGVzY3JpcHRpb24gJiYgQ0tFRElUT1IuaW5zdGFuY2VzLmRlc2NyaXB0aW9uLmdldERhdGEoKTtcbiAgICB0aGlzLm5hbWUgPSBDS0VESVRPUi5pbnN0YW5jZXMucHJvamVjdF9uYW1lICYmIENLRURJVE9SLmluc3RhbmNlcy5wcm9qZWN0X25hbWUuZ2V0RGF0YSgpO1xuICAgIHRoaXMuc3VtbWFyeSA9IENLRURJVE9SLmluc3RhbmNlcy5zdW1tYXJ5ICYmIENLRURJVE9SLmluc3RhbmNlcy5zdW1tYXJ5LmdldERhdGEoKTtcbiAgICBpZiAodGhpcy5jYXRlZ29yeS52YWx1ZSkge1xuICAgICAgdGhpcy5zdWJDYXRlZ29yeUZvcm0uY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5BQ1RJVkUpO1xuICAgIH1cbiAgICB0aGlzLmNhdGVnb3J5LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlQ2F0ZWdvcnlDaGFuZ2UpO1xuICAgIGZvciAobGV0IHN1YkNhdGVnb3J5IG9mIHRoaXMuc3ViQ2F0ZWdvcmllcykge1xuICAgICAgc3ViQ2F0ZWdvcnkuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVTZWNvbmRhcnlDYXRlZ29yeUNoYW5nZSk7XG4gICAgfVxuICAgIHRoaXMuc3ViQ2F0ZWdvcmllc0NoZWNrZWQgPSB0aGlzLnN1YkNhdGVnb3JpZXMuZmlsdGVyKChjKSA9PiBjLmNoZWNrZWQpLmxlbmd0aDtcbiAgICB0aGlzLnJlbW92ZVN1YkNhdGVnb3J5RnJvbUxpc3QoKTtcbiAgICB0aGlzLmRpc2FibGVTdWJDYXRlZ29yaWVzKCk7XG4gICAgdGhpcy5yZWxvYWRDVEEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZVJlbG9hZENUQSk7XG4gICAgQ0tFRElUT1Iub24oJ2luc3RhbmNlUmVhZHknLCAoIGV2ICkgPT4ge1xuICAgICAgZXYuZWRpdG9yLm9uKCdmb2N1cycsIHRoaXMuY2hlY2tMYXN0RWRpdGVkKTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdGhpcy5oYW5kbGVCZWZvcmVVbmxvYWQpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGNoZWNrTGFzdEVkaXRlZCgpIHtcbiAgICBjb25zdCBwcm9qZWN0VXJsID0gYC9hcGkvc2l0ZXMvZ2V0P2hhc2hvbmx5PXN1bW1hcnlgO1xuICAgIGF4aW9zSW5zdGFuY2UuZ2V0KHByb2plY3RVcmwpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zdCBzYW5pdGl6ZWREYXRhID0gcmVzcG9uc2UuZGF0YS5yZXBsYWNlKC9eXFwpXX0nLC8sICcnKTtcbiAgICAgIGNvbnN0IGpzb25SZXNwb25zZSA9IEpTT04ucGFyc2Uoc2FuaXRpemVkRGF0YSk7XG4gICAgICBjb25zdCBoYXNoID0ganNvblJlc3BvbnNlW2Ake3RoaXMubmFtZX1faGFzaGBdO1xuICAgICAgaWYgKGhhc2ggPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGhhc2ggIT09IHRoaXMuY3VycmVudEVkaXRIYXNoKSB7XG4gICAgICAgIC8vIFRoaXMgbWVhbnMgc29tZW9uZSBlbHNlIGhhcyBlZGl0ZWQgdGhlIHByb2plY3QgYW5kIHdlIG5lZWQgdG8gdHVybiBpdFxuICAgICAgICAvLyB0byByZWFkIG9ubHkgYW5kIHNob3cgYSB3YXJuaW5nXG4gICAgICAgIHRoaXMuY2tFZGl0LmVkaXRvciAmJiB0aGlzLmNrRWRpdC5lZGl0b3Iuc2V0UmVhZE9ubHkoKTtcbiAgICAgICAgdGhpcy5iYWRIYXNoV2FybmluZ0VsLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICAgICAgVHdlZW5NYXgudG8od2luZG93LCAxLCB7XG4gICAgICAgICAgc2Nyb2xsVG86IHtcbiAgICAgICAgICAgIHk6IHdpbmRvdy5zY3JvbGxZICsgdGhpcy5iYWRIYXNoV2FybmluZ0VsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIDg1LFxuICAgICAgICAgICAgYXV0b0tpbGw6IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUNLRWRpdENoYW5nZShlOiBDS0VESVRPUi5ldmVudEluZm8gKSB7XG4gICAgY29uc3QgZGF0YSA9IGUuZWRpdG9yLmdldERhdGEoKTtcbiAgICBjb25zdCBuYW1lID0gZS5lZGl0b3IubmFtZTtcbiAgICB0aGlzLmNoZWNrQXV0b1NhdmUoKTtcbiAgICB0aGlzLmVtcHR5U3RhdHVzLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB0aGlzLnNhdmVkU3RhdHVzLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB0aGlzLnNhdmluZ1N0YXR1cy5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLkhJRERFTik7XG4gICAgdGhpcy5pbmNvbXBsZXRlU3RhdHVzLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgJ3Byb2plY3RfbmFtZSc6XG4gICAgICAgIHRoaXMubmFtZSA9IGRhdGE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZGVzY3JpcHRpb24nOlxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGF0YTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzdW1tYXJ5JzpcbiAgICAgICAgdGhpcy5zdW1tYXJ5ID0gZGF0YTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVJlbG9hZENUQShlOiBFdmVudCkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBkb2N1bWVudC5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVCZWZvcmVVbmxvYWQoZTogQmVmb3JlVW5sb2FkRXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuaXNGb3JtU2F2ZWQpIHtcbiAgICAgIC8vIE1vc3QgYnJvd3NlcnMuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyBDaHJvbWUvQ2hyb21pdW0gYmFzZWQgYnJvd3NlcnMgc3RpbGwgbmVlZCBhIHN0cmluZywgYnV0IHdvbid0IGJlIHZpc2libGUuXG4gICAgICBlLnJldHVyblZhbHVlID0gJ0dTRjIwMTgnO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVDYXRlZ29yeUNoYW5nZShldmVudDogRXZlbnQpIHtcbiAgICB0aGlzLnN1YkNhdGVnb3J5Rm9ybS5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkFDVElWRSk7XG4gICAgdGhpcy5yZW1vdmVTdWJDYXRlZ29yeUZyb21MaXN0KCk7XG4gICAgdGhpcy5jaGVja0F1dG9TYXZlKCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlU2Vjb25kYXJ5Q2F0ZWdvcnlDaGFuZ2UoZXZlbnQ6IEV2ZW50KSB7XG4gICAgdGhpcy5zdWJDYXRlZ29yaWVzQ2hlY2tlZCA9IHRoaXMuc3ViQ2F0ZWdvcmllcy5maWx0ZXIoKGMpID0+IGMuY2hlY2tlZCkubGVuZ3RoO1xuICAgIGxldCBjYXRlZ29yeSA9IGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGNhdGVnb3J5LmNoZWNrZWQgPyB0aGlzLmRpc2FibGVTdWJDYXRlZ29yaWVzKCkgOiB0aGlzLmVuYWJsZVN1YkNhdGVnb3JpZXMoKTtcbiAgICB0aGlzLmNoZWNrQXV0b1NhdmUoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBkaXNhYmxlU3ViQ2F0ZWdvcmllcygpIHtcbiAgICBpZiAodGhpcy5zdWJDYXRlZ29yaWVzQ2hlY2tlZCA9PT0gMikge1xuICAgICAgZm9yIChsZXQgc3ViQ2F0ZWdvcnkgb2YgdGhpcy5zdWJDYXRlZ29yaWVzKSB7XG4gICAgICAgIGlmICghc3ViQ2F0ZWdvcnkuY2hlY2tlZCkge1xuICAgICAgICAgIHN1YkNhdGVnb3J5LmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBlbmFibGVTdWJDYXRlZ29yaWVzKCkge1xuICAgIGZvciAobGV0IHN1YkNhdGVnb3J5IG9mIHRoaXMuc3ViQ2F0ZWdvcmllcykge1xuICAgICAgc3ViQ2F0ZWdvcnkuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5kaXNhYmxlU3ViQ2F0ZWdvcmllcygpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIHJlbW92ZVN1YkNhdGVnb3J5RnJvbUxpc3QoKSB7XG4gICAgZm9yIChsZXQgc3ViQ2F0ZWdvcnkgb2YgdGhpcy5zdWJDYXRlZ29yaWVzKSB7XG4gICAgICBjb25zdCBwYXJlbnREaXYgPSBzdWJDYXRlZ29yeS5wYXJlbnROb2RlIGFzIEhUTUxFbGVtZW50O1xuICAgICAgaWYgKHN1YkNhdGVnb3J5LnZhbHVlID09PSB0aGlzLmNhdGVnb3J5LnZhbHVlKSB7XG4gICAgICAgIHBhcmVudERpdi5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkhJRERFTik7XG4gICAgICAgIGlmIChzdWJDYXRlZ29yeS5jaGVja2VkKSB7XG4gICAgICAgICAgc3ViQ2F0ZWdvcnkuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnREaXYuY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnN1YkNhdGVnb3JpZXNDaGVja2VkID0gdGhpcy5zdWJDYXRlZ29yaWVzLmZpbHRlcigoYykgPT4gYy5jaGVja2VkKS5sZW5ndGg7XG4gICAgdGhpcy5lbmFibGVTdWJDYXRlZ29yaWVzKCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgY2hlY2tBdXRvU2F2ZSgpIHtcbiAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICB0aGlzLmlzRm9ybVNhdmVkID0gZmFsc2U7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICB9XG4gICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZVN1Ym1pdCgpO1xuICAgIH0sIEFVVE9TQVZFX1RJTUVPVVQpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGNoZWNrU3RhdHVzKHByb2plY3RQYXJhbXM6IGFueSwgc2l0ZXNQYXJhbXM6IGFueSkge1xuICAgIGlmICh0aGlzLmlzRm9ybVNhdmVkKSB7XG4gICAgICB0aGlzLnNhdmluZ1N0YXR1cy5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkhJRERFTik7XG4gICAgICBpZiAocHJvamVjdFBhcmFtcy5wcm9qZWN0X25hbWUgJiYgcHJvamVjdFBhcmFtcy5kZXNjcmlwdGlvbiAmJlxuICAgICAgICBwcm9qZWN0UGFyYW1zLm1haW5fY2F0ZWdvcnkgJiYgc2l0ZXNQYXJhbXMuc3VtbWFyeSkge1xuICAgICAgICB0aGlzLnNhdmVkU3RhdHVzLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuSElEREVOKTsgLy8gQ09NUExFVEUgKyBTQVZFRFxuICAgICAgfSBlbHNlIGlmICghcHJvamVjdFBhcmFtcy5wcm9qZWN0X25hbWUgfHwgIXByb2plY3RQYXJhbXMuZGVzY3JpcHRpb24gfHxcbiAgICAgICAgIXByb2plY3RQYXJhbXMubWFpbl9jYXRlZ29yeSB8fCAhc2l0ZXNQYXJhbXMuc3VtbWFyeSkge1xuICAgICAgICB0aGlzLmluY29tcGxldGVTdGF0dXMuY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5ISURERU4pOyAvLyBJTkNPTVBMRVRFXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVtcHR5U3RhdHVzLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuSElEREVOKTsgLy8gRU1QVFlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgYXN5bmMgc2VuZFByb2plY3REYXRhKHByb2plY3RQYXJhbXM6IGFueSkge1xuICAgIHJldHVybiBheGlvc0luc3RhbmNlLnBvc3QoUFJPSkVDVF9GT1JNX1VSTCwgSlNPTi5zdHJpbmdpZnkocHJvamVjdFBhcmFtcykpXG4gICAgICAudGhlbigocHJvamVjdFJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmIChwcm9qZWN0UmVzcG9uc2UuZGF0YS5lcnJvcnMpIHtcbiAgICAgICAgICB0aGlzLmNoZWNrTGFzdEVkaXRlZCgpO1xuICAgICAgICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkVSUk9SKTtcbiAgICAgICAgICB0aGlzLmlzUHJvamVjdFBvc3RTdWNjZXNzID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5mb3JtLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuRVJST1IpO1xuICAgICAgICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLlNVQk1JVFRFRCk7XG4gICAgICAgICAgdGhpcy5pc1Byb2plY3RQb3N0U3VjY2VzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIHRoaXMuY2hlY2tMYXN0RWRpdGVkKCk7XG4gICAgICAgIC8vIENhdGNoIG5ldHdvcmsgZXJyb3JcbiAgICAgICAgaWYgKCFlcnJvci5yZXNwb25zZS5kYXRhLmVycm9ycy5zdGFydHNXaXRoKCdFZGl0IGNvbGxpc2lvbicpKSB7XG4gICAgICAgICAgdGhpcy5zbmFja0Jhci5zbmFja0JhclRyaWdnZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZvcm0uY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5FUlJPUik7XG4gICAgICAgIHRoaXMuaXNQcm9qZWN0UG9zdFN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgIH0pO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGFzeW5jIHNlbmRTaXRlRGF0YShzaXRlc1BhcmFtczogYW55KSB7XG4gICAgcmV0dXJuIGF4aW9zSW5zdGFuY2UucG9zdChTSVRFU19GT1JNX1VSTCwgSlNPTi5zdHJpbmdpZnkoc2l0ZXNQYXJhbXMpKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9ycykge1xuICAgICAgICAgIHRoaXMuY2hlY2tMYXN0RWRpdGVkKCk7XG4gICAgICAgICAgdGhpcy5mb3JtLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuRVJST1IpO1xuICAgICAgICAgIHRoaXMuaXNTaXRlc1Bvc3RTdWNjZXNzID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5mb3JtLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuRVJST1IpO1xuICAgICAgICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLlNVQk1JVFRFRCk7XG4gICAgICAgICAgdGhpcy5pc1NpdGVzUG9zdFN1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICB0aGlzLmNoZWNrTGFzdEVkaXRlZCgpO1xuICAgICAgICAvLyBDYXRjaCBuZXR3b3JrIGVycm9yXG4gICAgICAgIGlmICghZXJyb3IucmVzcG9uc2UuZGF0YS5lcnJvcnMuc3RhcnRzV2l0aCgnRWRpdCBjb2xsaXNpb24nKSkge1xuICAgICAgICAgIHRoaXMuc25hY2tCYXIuc25hY2tCYXJUcmlnZ2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mb3JtLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuRVJST1IpO1xuICAgICAgICB0aGlzLmlzU2l0ZXNQb3N0U3VjY2VzcyA9IGZhbHNlO1xuICAgICAgfSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgYXN5bmMgaGFuZGxlU3VibWl0KCkge1xuICAgIHRoaXMuZW1wdHlTdGF0dXMuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgIHRoaXMuc2F2ZWRTdGF0dXMuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgIHRoaXMuaW5jb21wbGV0ZVN0YXR1cy5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkhJRERFTik7XG4gICAgdGhpcy5zYXZpbmdTdGF0dXMuY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgIGNvbnN0IHNpdGVzUGFyYW1zID0ge1xuICAgICAgaWQ6IHRoaXMucHJvamVjdFNpdGVJZCxcbiAgICAgIHN1bW1hcnk6IHRoaXMuc3VtbWFyeSxcbiAgICAgIHN1bW1hcnlfaGFzaDogdGhpcy5jdXJyZW50RWRpdEhhc2gsXG4gICAgfTtcbiAgICBjb25zdCBzdWJDYXRWYWx1ZXMgPSB0aGlzLnN1YkNhdGVnb3JpZXMucmVkdWNlKChhY2MsIGN1cjogYW55KSA9PiB7XG4gICAgICBpZiAoY3VyLmNoZWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIFsuLi5hY2MsIGN1ci52YWx1ZV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdIGFzIEFycmF5PHN0cmluZz4pO1xuICAgIGNvbnN0IHByb2plY3RQYXJhbXMgPSB7XG4gICAgICBpZDogdGhpcy5wcm9qZWN0SWQsXG4gICAgICBwcm9qZWN0X25hbWU6IHRoaXMubmFtZS50cmltKCksXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbi50cmltKCksXG4gICAgICBtYWluX2NhdGVnb3J5OiB0aGlzLmNhdGVnb3J5LnZhbHVlLFxuICAgICAgc2Vjb25kYXJ5X2NhdGVnb3JpZXM6IHN1YkNhdFZhbHVlcyxcbiAgICB9O1xuICAgIGF3YWl0IHRoaXMuc2VuZFByb2plY3REYXRhKHByb2plY3RQYXJhbXMpO1xuICAgIGF3YWl0IHRoaXMuc2VuZFNpdGVEYXRhKHNpdGVzUGFyYW1zKTtcbiAgICB0aGlzLmlzRm9ybVNhdmVkID0gdGhpcy5pc1Byb2plY3RQb3N0U3VjY2VzcyAmJiB0aGlzLmlzU2l0ZXNQb3N0U3VjY2VzcztcbiAgICB0aGlzLmNoZWNrU3RhdHVzKHByb2plY3RQYXJhbXMsIHNpdGVzUGFyYW1zKTtcbiAgfVxufVxuIiwiaW1wb3J0IENvcmUgZnJvbSAnLi4vQ29yZSc7XG5pbXBvcnQgeyBub2RlTGlzdFRvQXJyYXksIGF4aW9zSW5zdGFuY2UsIEFDVElPTl9DTEFTU0VTIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycyc7XG5pbXBvcnQgQ2xpcGJvYXJkSlMgPSByZXF1aXJlKCdjbGlwYm9hcmQnKTtcbmltcG9ydCB7IFNuYWNrQmFyIH0gZnJvbSAnLi4vY29tcG9uZW50cyc7XG5cbmNvbnN0IFNFTEVDVE9SUyA9IHtcbiAgQ0FOQ0VMX0lOVklURTogJy5qcy1jYW5jZWwtaW52aXRlJyxcbiAgQ0FOQ0VMX1NOQUNLQkFSOiAnLmpzLWNhbmNlbC1zbmFja2JhcicsXG4gIENPUFlfU05BQ0tCQVI6ICcuanMtY29weS1zbmFja2JhcicsXG4gIFNBVkVEX1NOQUNLQkFSOiAnLmpzLXNhdmVkLXNuYWNrYmFyJyxcbiAgQ09QWV9URUFNX0NPREU6ICcuanMtY29weS10ZWFtLWNvZGUnLFxuICBURUFNX0NPREVfQ09OVEFJTkVSUzogJy5qcy10ZWFtLWludml0ZS1jb250YWluZXInLFxuICBDUkVBVEVfVEVBTV9DT05UQUlORVI6ICcuanMtY3JlYXRlLXRlYW0tY29udGFpbmVyJyxcbiAgQ1JFQVRFX1RFQU06ICcuanMtY3JlYXRlLXRlYW0nLFxuICBGT1JNOiAnLmpzLWZvcm0nLFxuICBJTlZJVEVfQ09OVEFJTkVSOiAnLmpzLWludml0ZS1jb250YWluZXInLFxuICBJTlZJVEVfU0VOVF9DT05UQUlORVI6ICcuanMtaW52aXRlLXNlbnQtY29udGFpbmVyJyxcbiAgVEVBTV9DT0RFX0RJU1BMQVk6ICcuanMtdGVhbS1jb2RlLWRpc3BsYXknLFxuICBKT0lOX1RFQU1fQ09OVEFJTkVSOiAnLmpzLXRlYW0tY29kZS1jb250YWluZXInLFxuICBKT0lOX1RFQU06ICcuanMtam9pbi10ZWFtJyxcbiAgTEVBVkVfVEVBTTogJy5qcy1sZWF2ZS1tb2RhbC1jb250YWluZXInLFxuICBQUk9KRUNUX0lEX0lOUFVUOiAnLmpzLXByb2plY3QtaWQnLFxuICBSRV9TRU5EX0lOVklURTogJy5qcy1yZS1zZW5kLWludml0ZScsXG4gIFJFTU9WRV9DT05UQUlORVJTOiAnLmpzLXJlbW92ZS1tb2RhbC1jb250YWluZXInLFxuICBVUERBVEVfVEVBTV9DT05UQUlOVEVSOiAnLmpzLXVwZGF0ZS10ZWFtLWNvZGUtY29udGFpbmVyJyxcbiAgVVBEQVRFX1RFQU1fTkFNRTogJy5qcy1zdWJtaXQtLXRlYW0tZm9ybScsXG59O1xuY29uc3QgU05BQ0tCQVJfREVMQVkgPSA1MDAwO1xuY29uc3QgSk9JTl9VUkwgPSAnL2FwaS9tZW1iZXJzL2pvaW5fdGVhbSc7XG5jb25zdCBDUkVBVEVfVVJMID0gJy9hcGkvcHJvamVjdHMvdXBkYXRlJztcbmNvbnN0IElOVklURV9VUkwgPSAnL2FwaS9wcm9qZWN0cy9pbnZpdGUnO1xuY29uc3QgQ0FOQ0VMX1VSTCA9ICcvYXBpL3Byb2plY3RzL3JlbW92ZSc7XG5jb25zdCBQUk9KRUNUX1VSTCA9ICcvYXBpL3Byb2plY3RzL2dldCc7XG5cbmV4cG9ydCBjbGFzcyBUZWFtRm9ybSB7XG4gIHNuYWNrQmFyOiBTbmFja0JhcjtcbiAgY2FuY2VsU25hY2tCYXI6IFNuYWNrQmFyO1xuICBzYXZlZFNuYWNrQmFyOiBTbmFja0JhcjtcbiAgY2xpcEJvYXJkPzogQ2xpcGJvYXJkSlM7XG4gIGNvcmU6IENvcmU7XG4gIGNyZWF0ZVRlYW1CdXR0b24/OiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgY3JlYXRlVGVhbUlucHV0PzogSFRNTElucHV0RWxlbWVudDtcbiAgZm9ybTogSFRNTEZvcm1FbGVtZW50O1xuICBpbnB1dHM6IEFycmF5PEhUTUxFbGVtZW50PjtcbiAgaW52aXRlQ29udGFpbmVyPzogQXJyYXk8SFRNTEVsZW1lbnQ+O1xuICBpbnZpdGVTZW50Q29udGFpbmVyPzogQXJyYXk8SFRNTEVsZW1lbnQ+O1xuICBqb2luVGVhbUJ1dHRvbj86IEhUTUxCdXR0b25FbGVtZW50O1xuICBqb2luVGVhbUlucHV0PzogSFRNTElucHV0RWxlbWVudDtcbiAgbGVhdmVUZWFtPzogSFRNTEVsZW1lbnQ7XG4gIG9yaWdpbmFsVGVhbU5hbWU/OiBzdHJpbmc7XG4gIHByb2plY3RJZDogc3RyaW5nO1xuICByZW1vdmVNZW1iZXJzPzogQXJyYXk8SFRNTEVsZW1lbnQ+O1xuICB0ZWFtQ29kZUNvbnRhaW5lcnM/OiBBcnJheTxIVE1MRWxlbWVudD47XG4gIHRlYW1Db2RlQnV0dG9ucz86IEFycmF5PEhUTUxFbGVtZW50PjtcbiAgdXBkYXRlVGVhbUJ1dHRvbj86IEhUTUxCdXR0b25FbGVtZW50O1xuICB1cGRhdGVUZWFtSW5wdXQ/OiBIVE1MSW5wdXRFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBGb3JtcyBjb25zdHJ1Y3RvclxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6IENvcmUpIHtcbiAgICB0aGlzLmNvcmUgPSBjb3JlO1xuICAgIHRoaXMuZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkZPUk0pIGFzIEhUTUxGb3JtRWxlbWVudDtcbiAgICB0aGlzLnByb2plY3RJZCA9IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5QUk9KRUNUX0lEX0lOUFVUKSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICB0aGlzLmlucHV0cyA9IG5vZGVMaXN0VG9BcnJheSh0aGlzLmZvcm0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QnKSk7XG4gICAgdGhpcy5qb2luVGVhbUlucHV0ID0gdGhpcy5mb3JtXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKGAke1NFTEVDVE9SUy5KT0lOX1RFQU1fQ09OVEFJTkVSfSBpbnB1dGApIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgdGhpcy5qb2luVGVhbUJ1dHRvbiA9IHRoaXMuZm9ybVxuICAgICAgICAucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuSk9JTl9URUFNKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICB0aGlzLmNyZWF0ZVRlYW1JbnB1dCA9IHRoaXMuZm9ybVxuICAgICAgICAucXVlcnlTZWxlY3RvcihgJHtTRUxFQ1RPUlMuQ1JFQVRFX1RFQU1fQ09OVEFJTkVSfSBpbnB1dGApIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgdGhpcy5jcmVhdGVUZWFtQnV0dG9uID0gdGhpcy5mb3JtXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5DUkVBVEVfVEVBTSkgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgdGhpcy51cGRhdGVUZWFtSW5wdXQgPSAodGhpcy5mb3JtXG4gICAgICAucXVlcnlTZWxlY3RvcihgJHtTRUxFQ1RPUlMuVVBEQVRFX1RFQU1fQ09OVEFJTlRFUn0gaW5wdXRgKSBhcyBIVE1MSW5wdXRFbGVtZW50KTtcbiAgICB0aGlzLnVwZGF0ZVRlYW1CdXR0b24gPSB0aGlzLmZvcm1cbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlVQREFURV9URUFNX05BTUUpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgIHRoaXMudGVhbUNvZGVDb250YWluZXJzID0gbm9kZUxpc3RUb0FycmF5KGRvY3VtZW50XG4gICAgICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1JTLlRFQU1fQ09ERV9DT05UQUlORVJTKSk7XG4gICAgdGhpcy5vcmlnaW5hbFRlYW1OYW1lID0gdGhpcy51cGRhdGVUZWFtSW5wdXQgJiYgdGhpcy51cGRhdGVUZWFtSW5wdXQudmFsdWU7XG4gICAgdGhpcy5sZWF2ZVRlYW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5MRUFWRV9URUFNKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLnJlbW92ZU1lbWJlcnMgPSBub2RlTGlzdFRvQXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUlMuUkVNT1ZFX0NPTlRBSU5FUlMpKTtcbiAgICB0aGlzLmludml0ZUNvbnRhaW5lciA9IG5vZGVMaXN0VG9BcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SUy5JTlZJVEVfQ09OVEFJTkVSKSk7XG4gICAgdGhpcy5pbnZpdGVTZW50Q29udGFpbmVyID0gbm9kZUxpc3RUb0FycmF5KGRvY3VtZW50XG4gICAgICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1JTLklOVklURV9TRU5UX0NPTlRBSU5FUikpO1xuICAgIHRoaXMuY2FuY2VsU25hY2tCYXIgPSBuZXcgU25hY2tCYXIoXG4gICAgICB0aGlzLmNvcmUsXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5DQU5DRUxfU05BQ0tCQVIpIGFzIEhUTUxFbGVtZW50LFxuICAgICk7XG4gICAgdGhpcy5zbmFja0JhciA9IG5ldyBTbmFja0JhcihcbiAgICAgIHRoaXMuY29yZSxcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkNPUFlfU05BQ0tCQVIpIGFzIEhUTUxFbGVtZW50LFxuICAgICk7XG4gICAgdGhpcy5zYXZlZFNuYWNrQmFyID0gbmV3IFNuYWNrQmFyKFxuICAgICAgdGhpcy5jb3JlLFxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuU0FWRURfU05BQ0tCQVIpIGFzIEhUTUxFbGVtZW50LFxuICAgICk7XG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkNPUFlfVEVBTV9DT0RFKSkge1xuICAgICAgdGhpcy5jbGlwQm9hcmQgPSBuZXcgQ2xpcGJvYXJkSlMoU0VMRUNUT1JTLkNPUFlfVEVBTV9DT0RFKTtcbiAgICAgIHRoaXMuY2xpcEJvYXJkLm9uKCdzdWNjZXNzJywgdGhpcy5zbmFja0Jhci5zbmFja0JhclRyaWdnZXIuXG4gICAgICAgIGJpbmQodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCkpO1xuICAgIH1cbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBpbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmpvaW5UZWFtQnV0dG9uICYmIHRoaXMuam9pblRlYW1JbnB1dCkge1xuICAgICAgdGhpcy5qb2luVGVhbUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24pO1xuICAgICAgdGhpcy5qb2luVGVhbUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlSm9pblRlYW1CdXR0b24pO1xuICAgICAgaWYgKHRoaXMuam9pblRlYW1JbnB1dC52YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgdGhpcy5qb2luVGVhbUJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLmpvaW5UZWFtSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLmhhbmRsZUpvaW5JbnB1dCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnVwZGF0ZVRlYW1CdXR0b24gJiYgdGhpcy51cGRhdGVUZWFtSW5wdXQpIHtcbiAgICAgIHRoaXMudXBkYXRlVGVhbUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5oYW5kbGVVcGRhdGVUZWFtSW5wdXQpO1xuICAgICAgdGhpcy51cGRhdGVUZWFtSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bik7XG4gICAgICB0aGlzLnVwZGF0ZVRlYW1CdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgdGhpcy51cGRhdGVUZWFtQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVVcGRhdGVUZWFtKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY3JlYXRlVGVhbUJ1dHRvbiAmJiB0aGlzLmNyZWF0ZVRlYW1JbnB1dCkge1xuICAgICAgdGhpcy5jcmVhdGVUZWFtSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bik7XG4gICAgICB0aGlzLmNyZWF0ZVRlYW1CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNyZWF0ZVRlYW1CdXR0b24pO1xuICAgICAgdGhpcy5jcmVhdGVUZWFtSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLmhhbmRsZUNyZWF0ZUlucHV0KTtcbiAgICAgIGlmICh0aGlzLmNyZWF0ZVRlYW1JbnB1dC52YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVUZWFtQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuaW52aXRlQ29udGFpbmVyKSB7XG4gICAgICB0aGlzLmludml0ZUNvbnRhaW5lci5mb3JFYWNoKChpbnZpdGUpID0+IHtcbiAgICAgICAgY29uc3QgaW5wdXQgPSBpbnZpdGUucXVlcnlTZWxlY3RvcignaW5wdXQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICBjb25zdCBidXR0b24gPSBpbnZpdGUucXVlcnlTZWxlY3RvcignYnV0dG9uJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgICAgIGlmIChpbnB1dC52YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICBidXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5oYW5kbGVJbnZpdGVJbnB1dC5iaW5kKHRoaXMsIGJ1dHRvbikpO1xuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlEb3duKTtcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5TQVZJTkcpO1xuICAgICAgICAgIHRoaXMuaGFuZGxlSW52aXRlQnV0dG9uKGlucHV0LCBpbnZpdGUsIGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5pbnZpdGVTZW50Q29udGFpbmVyKSB7XG4gICAgICB0aGlzLmludml0ZVNlbnRDb250YWluZXIuZm9yRWFjaCgoaW52aXRlKSA9PiB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gaW52aXRlLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgY29uc3Qgc2VuZEJ1dHRvbiA9IGludml0ZS5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5SRV9TRU5EX0lOVklURSkgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IGludml0ZS5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5DQU5DRUxfSU5WSVRFKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICAgICAgc2VuZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICBzZW5kQnV0dG9uLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuU0FWSU5HKTtcbiAgICAgICAgICB0aGlzLnNlbmRJbnZpdGUoaW5wdXQsIGludml0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjYW5jZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5jYW5jZWxTbmFja0JhclxuICAgICAgICAgICAgLnNuYWNrQmFyVHJpZ2dlcihcbiAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHRoaXMuY2FuY2VsSW52aXRlLmJpbmQodGhpcywgaW5wdXQsIGludml0ZSksIFNOQUNLQkFSX0RFTEFZLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMucmVtb3ZlTWVtYmVycykge1xuICAgICAgdGhpcy5yZW1vdmVNZW1iZXJzLmZvckVhY2goKGNvbnRhaW5lcikgPT4ge1xuICAgICAgICBjb25zdCBpbnB1dCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHJlbW92ZUJ1dHRvbiA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdidXR0b24nKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICAgICAgcmVtb3ZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5yZW1vdmVNZW1iZXJcbiAgICAgICAgICAgIC5iaW5kKHRoaXMsIGlucHV0LCBjb250YWluZXIpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5sZWF2ZVRlYW0pIHtcbiAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5sZWF2ZVRlYW0ucXVlcnlTZWxlY3RvcignaW5wdXQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgY29uc3QgcmVtb3ZlQnV0dG9uID0gdGhpcy5sZWF2ZVRlYW0ucXVlcnlTZWxlY3RvcignYnV0dG9uJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgICByZW1vdmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnJlbW92ZU1lbWJlclxuICAgICAgICAgIC5iaW5kKHRoaXMsIGlucHV0LCB0aGlzLmxlYXZlVGVhbSkpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRlYW1Db2RlQ29udGFpbmVycykge1xuICAgICAgdGhpcy50ZWFtQ29kZUNvbnRhaW5lcnMuZm9yRWFjaCgoY29udGFpbmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5DT1BZX1RFQU1fQ09ERSkgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHNwYW4gPSBjb250YWluZXIucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuVEVBTV9DT0RFX0RJU1BMQVkpIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICBpZiAoYnV0dG9uLmRhdGFzZXQuY2xpcGJvYXJkVGV4dCA9PT0gJ05vbmUnIHx8IHNwYW4uaW5uZXJUZXh0ID09PSAnTm9uZScpIHtcbiAgICAgICAgICB0aGlzLnBvbGxDb2RlKGJ1dHRvbiwgc3Bhbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBwb2xsQ29kZShidXR0b246IEhUTUxCdXR0b25FbGVtZW50LCBzcGFuOiBIVE1MRWxlbWVudCkge1xuICAgIGNsZWFyVGltZW91dCgpO1xuICAgIGF4aW9zSW5zdGFuY2UuZ2V0KFBST0pFQ1RfVVJMKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBpZiAoIXJlc3BvbnNlLmRhdGEuZXJyb3JzKSB7XG4gICAgICAgICAgICBjb25zdCBzYW5pdGl6ZWREYXRhID0gcmVzcG9uc2UuZGF0YS5yZXBsYWNlKC9eXFwpXX0nLC8sICcnKTtcbiAgICAgICAgICAgIGNvbnN0IGpzb25SZXNwb25zZSA9IEpTT04ucGFyc2Uoc2FuaXRpemVkRGF0YSk7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0ganNvblJlc3BvbnNlWyhidXR0b24uZGF0YXNldC5zbG90bmFtZSBhcyBzdHJpbmcpXTtcbiAgICAgICAgICAgIGlmICh0ZXh0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQodGhpcy5wb2xsQ29kZS5iaW5kKHRoaXMsIGJ1dHRvbiwgc3BhbiksIDIwMDApO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNwYW4uaW5uZXJUZXh0ID0gdGV4dDtcbiAgICAgICAgICAgIGJ1dHRvbi5kYXRhc2V0LmNsaXBib2FyZFRleHQgPSB0ZXh0O1xuICAgICAgICAgICAgYnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNsaXBCb2FyZCkge1xuICAgICAgICAgICAgICB0aGlzLmNsaXBCb2FyZC5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNsaXBCb2FyZCA9IG5ldyBDbGlwYm9hcmRKUyhTRUxFQ1RPUlMuQ09QWV9URUFNX0NPREUpO1xuICAgICAgICAgICAgdGhpcy5jbGlwQm9hcmQub24oJ3N1Y2Nlc3MnLCB0aGlzLnNuYWNrQmFyLnNuYWNrQmFyVHJpZ2dlclxuICAgICAgICAgICAgICAuYmluZCh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKF9lcnJvcikgPT4ge1xuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yJyk7XG4gICAgICAgIH0pO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUtleURvd24oZTogS2V5Ym9hcmRFdmVudCkge1xuICAgIGNvbnN0IGtleU5hbWUgPSBlLmtleTtcbiAgICBpZiAoa2V5TmFtZSA9PT0gJ0VudGVyJykge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICBzd2l0Y2ggKHRhcmdldC5pZCkge1xuICAgICAgICBjYXNlICd0ZWFtLWNvZGUnOlxuICAgICAgICAgIHRoaXMuam9pblRlYW0oKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndGVhbS1uYW1lJzpcbiAgICAgICAgICB0aGlzLmhhbmRsZVVwZGF0ZVRlYW0oKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY3JlYXRlLW5hbWUnOlxuICAgICAgICAgIHRoaXMuaGFuZGxlQ3JlYXRlVGVhbUJ1dHRvbigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd0ZWFtLW1lbWJlcjInOlxuICAgICAgICBjYXNlICd0ZWFtLW1lbWJlcjMnOlxuICAgICAgICAgIHRoaXMuaGFuZGxlSW52aXRlQnV0dG9uKHRhcmdldCwgdGFyZ2V0LmNsb3Nlc3QoJy5qcy1pbnZpdGUtY29udGFpbmVyJykgYXMgSFRNTEVsZW1lbnQsIGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVJbnZpdGVJbnB1dChidXR0b246IEhUTUxCdXR0b25FbGVtZW50LCBlOiBFdmVudCkge1xuICAgIGlmICgoZS5jdXJyZW50VGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrVmFsaWRpdHkoKSkge1xuICAgICAgYnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUludml0ZUJ1dHRvbihpbnB1dDogSFRNTElucHV0RWxlbWVudCwgY29udGFpbmVyOiBIVE1MRWxlbWVudCwgZTogRXZlbnQpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5zZW5kSW52aXRlKGlucHV0LCBjb250YWluZXIpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUpvaW5JbnB1dCgpIHtcbiAgICBpZiAoIXRoaXMuam9pblRlYW1CdXR0b24gfHwgIXRoaXMuam9pblRlYW1JbnB1dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5qb2luVGVhbUlucHV0LnZhbHVlICE9PSAnJykge1xuICAgICAgdGhpcy5qb2luVGVhbUJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmpvaW5UZWFtQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlQ3JlYXRlSW5wdXQoKSB7XG4gICAgaWYgKCF0aGlzLmNyZWF0ZVRlYW1CdXR0b24gfHwgIXRoaXMuY3JlYXRlVGVhbUlucHV0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmNyZWF0ZVRlYW1JbnB1dC52YWx1ZSAhPT0gJycpIHtcbiAgICAgIHRoaXMuY3JlYXRlVGVhbUJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNyZWF0ZVRlYW1CdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVVcGRhdGVUZWFtSW5wdXQoKSB7XG4gICAgaWYgKCF0aGlzLnVwZGF0ZVRlYW1JbnB1dCB8fCAhdGhpcy51cGRhdGVUZWFtQnV0dG9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnVwZGF0ZVRlYW1JbnB1dC52YWx1ZSA9PT0gdGhpcy5vcmlnaW5hbFRlYW1OYW1lIHx8IHRoaXMudXBkYXRlVGVhbUlucHV0LnZhbHVlID09PSAnJykge1xuICAgICAgdGhpcy51cGRhdGVUZWFtQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cGRhdGVUZWFtQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVVwZGF0ZVRlYW0oKSB7XG4gICAgaWYgKHRoaXMudXBkYXRlVGVhbUlucHV0ICYmIHRoaXMudXBkYXRlVGVhbUJ1dHRvbikge1xuICAgICAgdGhpcy51cGRhdGVUZWFtQnV0dG9uLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuU0FWSU5HKTtcbiAgICAgIHRoaXMuY3JlYXRlVGVhbSh0aGlzLnVwZGF0ZVRlYW1JbnB1dC52YWx1ZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUpvaW5UZWFtQnV0dG9uKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5qb2luVGVhbSgpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUNyZWF0ZVRlYW1CdXR0b24oZT86IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBlICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAodGhpcy5jcmVhdGVUZWFtSW5wdXQpIHtcbiAgICAgIHRoaXMuY3JlYXRlVGVhbSh0aGlzLmNyZWF0ZVRlYW1JbnB1dC52YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGpvaW5UZWFtKCk6IHZvaWQge1xuICAgIHRoaXMuam9pblRlYW1CdXR0b24gJiYgdGhpcy5qb2luVGVhbUJ1dHRvbi5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLlNBVklORyk7XG4gICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgaW52aXRlX2NvZGU6IHRoaXMuam9pblRlYW1JbnB1dCAmJiB0aGlzLmpvaW5UZWFtSW5wdXQudmFsdWUsXG4gICAgfTtcbiAgICBheGlvc0luc3RhbmNlLnBvc3QoSk9JTl9VUkwsIEpTT04uc3RyaW5naWZ5KHBhcmFtcykpXG4gICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9ycykge1xuICAgICAgICAgICAgKHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5KT0lOX1RFQU1fQ09OVEFJTkVSKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgICAgICAgICAuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5FUlJPUik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLlNVQk1JVFRFRCk7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKF9lcnJvcikgPT4ge1xuICAgICAgICAgICh0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuSk9JTl9URUFNX0NPTlRBSU5FUikgYXMgSFRNTEVsZW1lbnQpXG4gICAgICAgICAgICAgIC5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkVSUk9SKTtcbiAgICAgICAgICB0aGlzLnJlc2V0QWN0aXZlQnV0dG9ucygpO1xuICAgICAgICB9KTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBjcmVhdGVUZWFtKHRlYW1OYW1lOiBzdHJpbmcsIGlzRXhpc3RpbmdUZWFtPzogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuY3JlYXRlVGVhbUJ1dHRvbiAmJiB0aGlzLmNyZWF0ZVRlYW1CdXR0b24uY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5TQVZJTkcpO1xuICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgIGlkOiBwYXJzZUludCh0aGlzLnByb2plY3RJZCwgMTApLFxuICAgICAgdGVhbV9uYW1lOiB0ZWFtTmFtZSxcbiAgICB9O1xuICAgIGF4aW9zSW5zdGFuY2UucG9zdChDUkVBVEVfVVJMLCBKU09OLnN0cmluZ2lmeShwYXJhbXMpKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcnMpIHtcbiAgICAgICAgICAgICh0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuQ1JFQVRFX1RFQU1fQ09OVEFJTkVSKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgICAgICAgICAuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5FUlJPUik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLlNVQk1JVFRFRCk7XG4gICAgICAgICAgICBpZiAoaXNFeGlzdGluZ1RlYW0pIHtcbiAgICAgICAgICAgICAgdGhpcy5zYXZlZFNuYWNrQmFyLnNuYWNrQmFyVHJpZ2dlcigpO1xuICAgICAgICAgICAgICB0aGlzLnJlc2V0QWN0aXZlQnV0dG9ucygpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucmVzZXRBY3RpdmVCdXR0b25zKCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoX2Vycm9yKSA9PiB7XG4gICAgICAgICAgKHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5DUkVBVEVfVEVBTV9DT05UQUlORVIpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAgICAgICAuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5FUlJPUik7XG4gICAgICAgICAgdGhpcy5yZXNldEFjdGl2ZUJ1dHRvbnMoKTtcbiAgICAgICAgfSk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgc2VuZEludml0ZShpbnB1dDogSFRNTElucHV0RWxlbWVudCwgY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgIGxvY2FsZTogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcsXG4gICAgICBbaW5wdXQubmFtZV06IGlucHV0LnZhbHVlLFxuICAgIH07XG4gICAgYXhpb3NJbnN0YW5jZS5wb3N0KElOVklURV9VUkwsIEpTT04uc3RyaW5naWZ5KHBhcmFtcykpXG4gICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9ycykge1xuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuRVJST1IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZvcm0uY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5TVUJNSVRURUQpO1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnJlc2V0QWN0aXZlQnV0dG9ucygpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKF9lcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkVSUk9SKTtcbiAgICAgICAgICB0aGlzLnJlc2V0QWN0aXZlQnV0dG9ucygpO1xuICAgICAgICB9KTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBjYW5jZWxJbnZpdGUoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQsIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBbaW5wdXQubmFtZV06IGlucHV0LnZhbHVlLFxuICAgIH07XG4gICAgYXhpb3NJbnN0YW5jZS5wb3N0KENBTkNFTF9VUkwsIEpTT04uc3RyaW5naWZ5KHBhcmFtcykpXG4gICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9ycykge1xuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuRVJST1IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZvcm0uY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5TVUJNSVRURUQpO1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnJlc2V0QWN0aXZlQnV0dG9ucygpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKF9lcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkVSUk9SKTtcbiAgICAgICAgICB0aGlzLnJlc2V0QWN0aXZlQnV0dG9ucygpO1xuICAgICAgICB9KTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICByZW1vdmVNZW1iZXIoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQsIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBbaW5wdXQubmFtZV06IGlucHV0LnZhbHVlLFxuICAgIH07XG4gICAgYXhpb3NJbnN0YW5jZS5wb3N0KENBTkNFTF9VUkwsIEpTT04uc3RyaW5naWZ5KHBhcmFtcykpXG4gICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9ycykge1xuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuRVJST1IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZvcm0uY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5TVUJNSVRURUQpO1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnJlc2V0QWN0aXZlQnV0dG9ucygpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKF9lcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkVSUk9SKTtcbiAgICAgICAgICB0aGlzLnJlc2V0QWN0aXZlQnV0dG9ucygpO1xuICAgICAgICB9KTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICByZXNldEFjdGl2ZUJ1dHRvbnMoKSB7XG4gICAgbm9kZUxpc3RUb0FycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpKS5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLlNBVklORyk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImRlY2xhcmUgdmFyIFR3ZWVuTWF4OiBhbnk7XG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycyc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IENvcmUgZnJvbSAnLi4vQ29yZSc7XG5pbXBvcnQgeyBub2RlTGlzdFRvQXJyYXkgfSBmcm9tICcuLi91dGlsJztcblxuY29uc3QgU0VMRUNUT1JTID0ge1xuICBURUFTRVJfRk9STTogJy5qcy10ZWFzZXItZm9ybScsXG4gIFRFQVNFUl9GT1JNX1NVQk1JVDogJy5qcy10ZWFzZXItZm9ybS1zdWJtaXQnLFxuICBURUFTRVJfRk9STV9URVhUX0lOUFVUOiAnLmZvcm0tLXRleHQtaW5wdXQnLFxuICBURUFTRVJfRk9STV9FTUFJTDogJy5qcy1lbWFpbC1jb250YWluZXInLFxuICBURUFTRVJfRk9STV9SQURJTzogJy5qcy1yYWRpby1jb250YWluZXInLFxuICBURUFTRVJfRk9STV9MRUdBTDogJy5qcy10ZXJtcy1jb250YWluZXInLFxuICBURUFTRVJfRk9STV9TVUNDRVNTOiAnLmpzLXRlYXNlci1mb3JtLXN1Y2Nlc3MnLFxuICBURUFTRVJfRk9STV9DT05UQUlORVI6ICcuanMtdGVhc2VyLWZvcm0tY29udGFpbmVyJyxcbiAgVEVBU0VSX0ZPUk1fQ09VTlRSWTogJy5qcy1jb3VudHJ5LWlucHV0JyxcbiAgVEVBU0VSX0ZPUk1fTEFOR1VBR0U6ICcuanMtbGFuZ3VhZ2UtaW5wdXQnLFxufTtcblxuaW50ZXJmYWNlIElQYXJhbXMge1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbmNvbnN0IFRFQVNFUl9GT1JNX1VSTCA9ICdodHRwczovL3NlcnZpY2VzLmdvb2dsZS5jb20vZmIvc3VibWlzc2lvbnMvZ29vZ2xlc2NpZW5jZWZhaXItdGVhc2VyLyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFuaW1hdGlvbkRhdGEge1xuICBhZGRFdmVudExpc3RlbmVyPzogYW55O1xuICBjb250YWluZXI6IEhUTUxFbGVtZW50O1xuICByZW5kZXJlcjogJ3N2Zyd8J2NhbnZhcyc7XG4gIGxvb3A6IGJvb2xlYW47XG4gIGF1dG9wbGF5OiBib29sZWFuO1xuICBwYXRoOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlYXNlckZvcm0ge1xuICBjb3JlOiBDb3JlO1xuICB0ZWFzZXJGb3JtOiBIVE1MRm9ybUVsZW1lbnQ7XG4gIHRlYXNlckZvcm1TdWJtaXQ6IEhUTUxCdXR0b25FbGVtZW50O1xuICB0ZWFzZXJGb3JtU3VjY2VzczogSFRNTEVsZW1lbnQ7XG4gIHRlYXNlckZvcm1Db250YWluZXI6IEhUTUxFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBUZWFzZXIgY29uc3RydWN0b3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBDb3JlKSB7XG4gICAgdGhpcy5jb3JlID0gY29yZTtcbiAgICB0aGlzLnRlYXNlckZvcm1Db250YWluZXIgPSBkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fQ09OVEFJTkVSKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLnRlYXNlckZvcm0gPSB0aGlzLnRlYXNlckZvcm1Db250YWluZXJcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlRFQVNFUl9GT1JNKSBhcyBIVE1MRm9ybUVsZW1lbnQ7XG4gICAgdGhpcy50ZWFzZXJGb3JtU3VibWl0ID0gdGhpcy50ZWFzZXJGb3JtQ29udGFpbmVyXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5URUFTRVJfRk9STV9TVUJNSVQpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgIHRoaXMudGVhc2VyRm9ybVN1Y2Nlc3MgPSBkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fU1VDQ0VTUykgYXMgSFRNTEVsZW1lbnQ7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnRlYXNlckZvcm0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVGb3JtQ2hhbmdlKTtcbiAgICB0aGlzLnRlYXNlckZvcm1TdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZVN1Ym1pdCk7XG4gICAgKHRoaXMudGVhc2VyRm9ybS5xdWVyeVNlbGVjdG9yKGAke1NFTEVDVE9SUy5URUFTRVJfRk9STV9FTUFJTH0gaW5wdXRgKSBhcyBIVE1MSW5wdXRFbGVtZW50KVxuICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMuaGFuZGxlRW1haWxCbHVyKTtcbiAgICAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoYCR7U0VMRUNUT1JTLlRFQVNFUl9GT1JNX0xFR0FMfSBpbnB1dGApIGFzIEhUTUxJbnB1dEVsZW1lbnQpXG4gICAgICAgIC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZUxlZ2FsQmx1cik7XG5cbiAgICAobm9kZUxpc3RUb0FycmF5KHRoaXMudGVhc2VyRm9ybVxuICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgnLmpzLW1vZGFsLWxpbmsnKSkgYXMgQXJyYXk8SFRNTEFuY2hvckVsZW1lbnQ+KVxuICAgICAgICAuZm9yRWFjaCgobGluaykgPT4gbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucmVzZXRNb2RhbCkpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIHJlc2V0TW9kYWwoZTogTW91c2VFdmVudCk6IHZvaWQge1xuICAgICh0aGlzLnRlYXNlckZvcm0ucXVlcnlTZWxlY3RvcignLmdsdWUtYXBwLXJlYWR5IC5nbHVlLWMtbW9kYWxfX292ZXJsYXknKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVN1Ym1pdChlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICh0aGlzLmlzRm9ybVZhbGlkKCkpIHtcbiAgICAgIGNvbnN0IHBhcmFtczogSVBhcmFtcyA9IHtcbiAgICAgICAgJ2dzZi1jb3VudHJ5JzogKHRoaXMudGVhc2VyRm9ybS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgU0VMRUNUT1JTLlRFQVNFUl9GT1JNX0NPVU5UUlkpYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUsXG4gICAgICAgICdnc2YtZW1haWwnOiAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fVEVYVF9JTlBVVClhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSxcbiAgICAgICAgJ2dzZi1pLWFtLWEnOiAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBgJHtTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fUkFESU99IGlucHV0OmNoZWNrZWRgKWFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlLFxuICAgICAgICAnZ3NmLWlzLWxlZ2FsLWNoZWNrZWQnOiAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBgJHtTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fTEVHQUx9IGlucHV0YClhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSxcbiAgICAgICAgJ2dzZi1sYW5ndWFnZSc6ICh0aGlzLnRlYXNlckZvcm0ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIFNFTEVDVE9SUy5URUFTRVJfRk9STV9MQU5HVUFHRSlhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSxcbiAgICAgIH07XG4gICAgICBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbJ0NvbnRlbnQtVHlwZSddID1cbiAgICAgICAgICAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJztcbiAgICAgIGF4aW9zLnBvc3QoVEVBU0VSX0ZPUk1fVVJMLCBPYmplY3Qua2V5cyhwYXJhbXMpXG4gICAgICAgICAgLm1hcChrZXkgPT4gYCR7a2V5fT0ke2VuY29kZVVSSUNvbXBvbmVudCgocGFyYW1zW2tleV0pKX1gKS5qb2luKCcmJykpXG4gICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3JzWydnc2YtZW1haWwnXSkge1xuICAgICAgICAgICAgICAgICh0aGlzLnRlYXNlckZvcm0ucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fRU1BSUwpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NMaXN0LmFkZCgnLWVycm9yJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3JzWydnc2YtaS1hbS1hJ10pIHtcbiAgICAgICAgICAgICAgICAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlRFQVNFUl9GT1JNX1JBRElPKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzTGlzdC5hZGQoJy1lcnJvcicpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yc1snZ3NmLWlzLWxlZ2FsLWNoZWNrZWQnXSkge1xuICAgICAgICAgICAgICAgICh0aGlzLnRlYXNlckZvcm0ucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fTEVHQUwpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NMaXN0LmFkZCgnLWVycm9yJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMudGVhc2VyRm9ybUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCctc3VibWl0dGVkJyk7XG4gICAgICAgICAgICAgIHRoaXMudGVhc2VyRm9ybVN1Y2Nlc3Muc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgVHdlZW5NYXgudG8od2luZG93LCAuMTUsIHtcbiAgICAgICAgICAgICAgICAgIHNjcm9sbFRvOiB7XG4gICAgICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9LaWxsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy50ZWFzZXJGb3JtU3VjY2Vzcy5jbGFzc0xpc3QuYWRkKCctYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy50ZWFzZXJGb3JtQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICAgICAgdGhpcy50ZWFzZXJGb3JtQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRlYXNlckZvcm0uY2xhc3NMaXN0LmFkZCgnLWVycm9yJyk7XG4gICAgICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZXRGb3JtU3RhdGVzKCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaXNFbWFpbFZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGVtYWlsRmllbGQgPSB0aGlzLnRlYXNlckZvcm1cbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlRFQVNFUl9GT1JNX1RFWFRfSU5QVVQpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgcmV0dXJuIGVtYWlsRmllbGQudmFsaWRpdHkudmFsaWQ7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaXNDYXRlZ29yeVZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNhdGVnb3J5RmllbGRzID0gbm9kZUxpc3RUb0FycmF5KHRoaXMudGVhc2VyRm9ybVxuICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgnLmZvcm0tLXJhZGlvLWdyb3VwIGlucHV0JykpIGFzIEFycmF5PEhUTUxJbnB1dEVsZW1lbnQ+O1xuICAgIHJldHVybiBjYXRlZ29yeUZpZWxkcy5maW5kKChmaWVsZCkgPT4gZmllbGQuY2hlY2tlZCA9PT0gdHJ1ZSkgIT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBpc0xlZ2FsQ2hlY2tlZCgpOiBib29sZWFuIHtcbiAgICBjb25zdCBsZWdhbENoZWNrID0gdGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoJyNpc0xlZ2FsQ2hlY2tlZCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgcmV0dXJuIGxlZ2FsQ2hlY2suY2hlY2tlZCA9PT0gdHJ1ZTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBpc0Zvcm1WYWxpZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc0VtYWlsVmFsaWQoKSAmJiB0aGlzLmlzQ2F0ZWdvcnlWYWxpZCgpICYmIHRoaXMuaXNMZWdhbENoZWNrZWQoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBzZXRGb3JtU3RhdGVzKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0VtYWlsVmFsaWQoKSkge1xuICAgICAgKHRoaXMudGVhc2VyRm9ybS5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5URUFTRVJfRk9STV9FTUFJTCkgYXMgSFRNTEVsZW1lbnQpXG4gICAgICAgICAgLmNsYXNzTGlzdC5hZGQoJy1lcnJvcicpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc0NhdGVnb3J5VmFsaWQoKSkge1xuICAgICAgKHRoaXMudGVhc2VyRm9ybS5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5URUFTRVJfRk9STV9SQURJTykgYXMgSFRNTEVsZW1lbnQpXG4gICAgICAgICAgLmNsYXNzTGlzdC5hZGQoJy1lcnJvcicpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc0xlZ2FsQ2hlY2tlZCgpKSB7XG4gICAgICAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlRFQVNFUl9GT1JNX0xFR0FMKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgICAuY2xhc3NMaXN0LmFkZCgnLWVycm9yJyk7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUZvcm1DaGFuZ2UoKTogdm9pZCB7XG4gICAgdGhpcy50ZWFzZXJGb3JtU3VibWl0LmRpc2FibGVkID0gIXRoaXMuaXNGb3JtVmFsaWQoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVFbWFpbEJsdXIoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzRW1haWxWYWxpZCgpKSB7XG4gICAgICAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlRFQVNFUl9GT1JNX0VNQUlMKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgICAuY2xhc3NMaXN0LmFkZCgnLWVycm9yJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh0aGlzLnRlYXNlckZvcm0ucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fRU1BSUwpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAgIC5jbGFzc0xpc3QucmVtb3ZlKCctZXJyb3InKTtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlTGVnYWxCbHVyKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0xlZ2FsQ2hlY2tlZCgpKSB7XG4gICAgICAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlRFQVNFUl9GT1JNX0xFR0FMKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgICAuY2xhc3NMaXN0LmFkZCgnLWVycm9yJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh0aGlzLnRlYXNlckZvcm0ucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fTEVHQUwpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAgIC5jbGFzc0xpc3QucmVtb3ZlKCctZXJyb3InKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEZvcm1zIH0gZnJvbSAnLi9Gb3Jtcyc7XG5pbXBvcnQgeyBTdGVwRm9ybSB9IGZyb20gJy4vU3RlcEZvcm0nO1xuaW1wb3J0IHsgU3RlcFN1bW1hcnlGb3JtIH0gZnJvbSAnLi9TdGVwU3VtbWFyeUZvcm0nO1xuaW1wb3J0IHsgVGVhbUZvcm0gfSBmcm9tICcuL1RlYW1Gb3JtJztcbmltcG9ydCB7IENvbnNlbnRGb3JtIH0gZnJvbSAnLi9Db25zZW50Rm9ybSc7XG5pbXBvcnQgeyBDaGVja0xpc3QgfSBmcm9tICcuL0NoZWNrTGlzdCc7XG5pbXBvcnQgeyBQYXJlbnRhbENvbnNlbnQgfSBmcm9tICcuL1BhcmVudGFsQ29uc2VudCc7XG5pbXBvcnQgeyBQcm9maWxlIH0gZnJvbSAnLi9Qcm9maWxlJztcbmltcG9ydCB7IEluc3BpcmluZ0VkdWNhdG9yIH0gZnJvbSAnLi9JbnNwaXJpbmdFZHVjYXRvcic7XG5pbXBvcnQgVGVhc2VyRm9ybSBmcm9tICcuL1RlYXNlckZvcm0nO1xuXG5leHBvcnQge1xuICBDaGVja0xpc3QsXG4gIENvbnNlbnRGb3JtLFxuICBGb3JtcyxcbiAgSW5zcGlyaW5nRWR1Y2F0b3IsXG4gIFBhcmVudGFsQ29uc2VudCxcbiAgUHJvZmlsZSxcbiAgU3RlcEZvcm0sXG4gIFN0ZXBTdW1tYXJ5Rm9ybSxcbiAgVGVhbUZvcm0sXG4gIFRlYXNlckZvcm0sXG59O1xuIiwiaW1wb3J0IENvcmUgZnJvbSAnLi4vQ29yZSc7XG5cbmNvbnN0IFNFTEVDVE9SUyA9IHtcbiAgTU9EQUxfTElOSzogJy5qcy1tb2RhbC1saW5rJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhc2hib2FyZCB7XG4gIGNvcmU6IENvcmU7XG4gIG1vZGFsTGluazogSFRNTEFuY2hvckVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoY29yZTogQ29yZSkge1xuICAgIHRoaXMuY29yZSA9IGNvcmU7XG4gICAgdGhpcy5tb2RhbExpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5NT0RBTF9MSU5LKSBhcyBIVE1MQW5jaG9yRWxlbWVudDtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoID09PSAnI3RvcC10aXBzJykge1xuICAgICAgdGhpcy5tb2RhbExpbmsgJiYgdGhpcy5tb2RhbExpbmsuY2xpY2soKTtcbiAgICB9XG4gIH1cblxufVxuIiwiZGVjbGFyZSB2YXIgYm9keW1vdmluOiBhbnk7XG5pbXBvcnQgQ29yZSBmcm9tICcuLi9Db3JlJztcblxuaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICdjb3JlLWRlY29yYXRvcnMnO1xuaW1wb3J0IHsgSUFuaW1hdGlvbkRhdGEgfSBmcm9tICcuLi9tb2RlbHMvSW50ZXJmYWNlJztcbmltcG9ydCB7IEludGVyYWN0aXZlTG9nbyB9IGZyb20gJy4uL2NvbXBvbmVudHMnO1xuaW1wb3J0IHsgQUNUSU9OX0NMQVNTRVMgfSBmcm9tICcuLi91dGlsJztcblxuY29uc3QgU0VMRUNUT1JTID0ge1xuICBQQVJFTlRfTE9HT19DT05UQUlORVI6ICcuanMtcGFyZW50LWxvZ28tY29udGFpbmVyJyxcbiAgTE9HT19DT05UQUlORVI6ICcuanMtbG9nby1jb250YWluZXInLFxuICBJTlRFUkFDVElWRV9MT0dPX0NPTlRBSU5FUjogJy5qcy1pbnRlcmFjdGl2ZS1sb2dvLWNvbnRhaW5lcicsXG4gIENPTVBBU1NfQ09OVEFJTkVSOiAnLmpzLWFuaW1hdGUtY29tcGFzcycsXG4gIExPR09fV0hFTl9TQ1JPTExFRDogJy5qcy1sb2dvLXdoZW4tc2Nyb2xsZWQnLFxuICBNT0RBTF9MSU5LOiAnLmpzLWVycm9yLW1vZGFsLWxpbmsnLFxuICBVUERBVEVTX01PREFMX0xJTks6ICdhW2RhdGEtZ2x1ZS1tb2RhbC10cmlnZ2VyPVwidXBkYXRlcy1tb2RhbFwiXScsXG59O1xuXG5jb25zdCBIRUFERVJfSEVJR0hUID0gODA7XG5jb25zdCBTQ1JPTExfSEVBREVSX0lOVEVSQUNUSU9OX0NMQVNTID0gJy13aWxsLXRyYW5zaXRpb24tb24tc2Nyb2xsJztcbmNvbnN0IFNDUk9MTF9IRUFERVJfVklTSUJMRV9DTEFTUyA9ICctc2hvdWxkLXNob3cnO1xuY29uc3QgU0NST0xMX0hFQURFUl9JTlZJU0lCTEVfQ0xBU1MgPSAnLXNob3VsZC1oaWRlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSG9tZSB7XG4gIGNvcmU6IENvcmU7XG4gIGxvZ29BbmltYXRpb25PYmplY3Q6IGFueTtcbiAgaW50ZXJhY3RpdmVMb2dvQW5pbWF0aW9uT2JqZWN0OiBhbnk7XG4gIGxvZ29BbmltYXRpb25EYXRhOiBJQW5pbWF0aW9uRGF0YTtcbiAgaW50ZXJhY3RpdmVMb2dvQW5pbWF0aW9uRGF0YTogSUFuaW1hdGlvbkRhdGE7XG4gIGxvZ29BbmltYXRpb25Db250YWluZXI6IEhUTUxFbGVtZW50O1xuICBpbnRlcmFjdGl2ZUxvZ29BbmltYXRpb25Db250YWluZXI6IEhUTUxFbGVtZW50O1xuICBpbnRlcmFjdGl2ZUxvZ28/OiBJbnRlcmFjdGl2ZUxvZ287XG4gIGNvbXBhc3NBbmltYXRpb25Db250YWluZXI/OiBIVE1MRWxlbWVudDtcbiAgY29tcGFzc0FuaW1hdGlvbkRhdGE/OiBJQW5pbWF0aW9uRGF0YTtcbiAgY29tcGFzc0FuaW1hdGlvbk9iamVjdDogYW55O1xuICBtZWRTY3JlZW46IGJvb2xlYW47XG4gIGhlYWRlckxvZ286IEhUTUxFbGVtZW50O1xuICBwYXJlbnRMb2dvQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgaGVhZGVySXNTY3JvbGxlZCA9IGZhbHNlO1xuICBjb21wYXNzSGFzUGxheWVkID0gZmFsc2U7XG4gIGVycm9yTW9kYWxMaW5rOiBIVE1MQW5jaG9yRWxlbWVudDtcbiAgdXBkYXRlc01vZGFsTGluazogSFRNTEFuY2hvckVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIEhvbWUgY29uc3RydWN0b3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBDb3JlKSB7XG4gICAgdGhpcy5jb3JlID0gY29yZTtcbiAgICB0aGlzLm1lZFNjcmVlbiA9IHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOiA2MDBweCknKS5tYXRjaGVzO1xuICAgIHRoaXMubG9nb0FuaW1hdGlvbkNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkxPR09fQ09OVEFJTkVSKSBhcyBIVE1MRWxlbWVudDtcbiAgICBpZiAodGhpcy5sb2dvQW5pbWF0aW9uQ29udGFpbmVyKSB7XG4gICAgICB0aGlzLmxvZ29BbmltYXRpb25Db250YWluZXIuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5BQ1RJVkUpO1xuICAgIH1cblxuICAgIHRoaXMuaW50ZXJhY3RpdmVMb2dvQW5pbWF0aW9uQ29udGFpbmVyID1cbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuSU5URVJBQ1RJVkVfTE9HT19DT05UQUlORVIpIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMubG9nb0FuaW1hdGlvbkRhdGEgPSB7XG4gICAgICBjb250YWluZXI6IHRoaXMubG9nb0FuaW1hdGlvbkNvbnRhaW5lcixcbiAgICAgIHJlbmRlcmVyOiAnc3ZnJyxcbiAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgYXV0b3BsYXk6IHRydWUsXG4gICAgICBwYXRoOiB0aGlzLm1lZFNjcmVlbiA/XG4gICAgICAgICAgJy9zdGF0aWMvZGF0YS9HU0ZfbG9nbzcuanNvbicgOiAnL3N0YXRpYy9kYXRhL0dTRl9sb2dvX21vYmlsZS5qc29uJyxcbiAgICB9O1xuXG4gICAgdGhpcy5pbnRlcmFjdGl2ZUxvZ29BbmltYXRpb25EYXRhID0ge1xuICAgICAgY29udGFpbmVyOiB0aGlzLmludGVyYWN0aXZlTG9nb0FuaW1hdGlvbkNvbnRhaW5lcixcbiAgICAgIHJlbmRlcmVyOiAnc3ZnJyxcbiAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgcGF0aDogJy9zdGF0aWMvZGF0YS9HU0ZfaW50ZXJhY3RpdmVfbG9nby5qc29uJyxcbiAgICB9O1xuXG4gICAgdGhpcy5wYXJlbnRMb2dvQ29udGFpbmVyID1cbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuUEFSRU5UX0xPR09fQ09OVEFJTkVSKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLmhlYWRlckxvZ28gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5MT0dPX1dIRU5fU0NST0xMRUQpIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgdGhpcy5jb21wYXNzQW5pbWF0aW9uQ29udGFpbmVyID1cbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuQ09NUEFTU19DT05UQUlORVIpIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgdGhpcy5jb21wYXNzQW5pbWF0aW9uRGF0YSA9IHtcbiAgICAgIGNvbnRhaW5lcjogdGhpcy5jb21wYXNzQW5pbWF0aW9uQ29udGFpbmVyLFxuICAgICAgcmVuZGVyZXI6ICdzdmcnLFxuICAgICAgbG9vcDogZmFsc2UsXG4gICAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgICBwYXRoOiAnL3N0YXRpYy9kYXRhL2NvbXBhc3MuanNvbicsXG4gICAgfTtcblxuICAgIHRoaXMuZXJyb3JNb2RhbExpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5NT0RBTF9MSU5LKSBhcyBIVE1MQW5jaG9yRWxlbWVudDtcbiAgICB0aGlzLnVwZGF0ZXNNb2RhbExpbmsgPVxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuVVBEQVRFU19NT0RBTF9MSU5LKSBhcyBIVE1MQW5jaG9yRWxlbWVudDtcblxuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhvbWUgY29uc3RydWN0b3JcbiAgICogQGluaXRcbiAgICovXG4gIEBhdXRvYmluZFxuICBpbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaW50ZXJhY3RpdmVMb2dvQW5pbWF0aW9uT2JqZWN0ID1cbiAgICAgICAgYm9keW1vdmluLmxvYWRBbmltYXRpb24odGhpcy5pbnRlcmFjdGl2ZUxvZ29BbmltYXRpb25EYXRhKTtcbiAgICB0aGlzLmludGVyYWN0aXZlTG9nbyA9IG5ldyBJbnRlcmFjdGl2ZUxvZ28oXG4gICAgICAgIHRoaXMuaW50ZXJhY3RpdmVMb2dvQW5pbWF0aW9uQ29udGFpbmVyLFxuICAgICAgICB0aGlzLmludGVyYWN0aXZlTG9nb0FuaW1hdGlvbk9iamVjdCxcbiAgICApO1xuXG4gICAgaWYgKHRoaXMuY29yZS5wcmVmZXJzUmVkdWNlZE1vdGlvbikge1xuICAgICAgdGhpcy5sb2dvQW5pbWF0aW9uQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuQUNUSVZFKTtcbiAgICAgIGlmICh0aGlzLmludGVyYWN0aXZlTG9nbykge1xuICAgICAgICB0aGlzLmludGVyYWN0aXZlTG9nby5pbml0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nb0FuaW1hdGlvbk9iamVjdCA9IGJvZHltb3Zpbi5sb2FkQW5pbWF0aW9uKHRoaXMubG9nb0FuaW1hdGlvbkRhdGEpO1xuICAgICAgdGhpcy5hbmltYXRlTG9nbygpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhlYWRlckxvZ28gJiYgdGhpcy5wYXJlbnRMb2dvQ29udGFpbmVyKSB7XG4gICAgICB0aGlzLnBhcmVudExvZ29Db250YWluZXIuY2xhc3NMaXN0LmFkZChTQ1JPTExfSEVBREVSX0lOVEVSQUNUSU9OX0NMQVNTKTtcbiAgICAgIHRoaXMuaGVhZGVyTG9nby5jbGFzc0xpc3QuYWRkKFNDUk9MTF9IRUFERVJfSU5URVJBQ1RJT05fQ0xBU1MpO1xuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5vblNjcm9sbCk7XG4gICAgICB0aGlzLm9uU2Nyb2xsKCk7XG5cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplKTtcbiAgICAgIHRoaXMub25SZXNpemUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb21wYXNzQW5pbWF0aW9uQ29udGFpbmVyKSB7XG4gICAgICB0aGlzLmNvbXBhc3NBbmltYXRpb25PYmplY3QgPSBib2R5bW92aW4ubG9hZEFuaW1hdGlvbih0aGlzLmNvbXBhc3NBbmltYXRpb25EYXRhKTtcbiAgICB9XG5cbiAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICcjc2lnbi1pbicpIHtcbiAgICAgIHRoaXMuZXJyb3JNb2RhbExpbmsgJiYgdGhpcy5lcnJvck1vZGFsTGluay5jbGljaygpO1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICcjZ2V0LW5vdGlmaWNhdGlvbnMnKSB7XG4gICAgICB0aGlzLnVwZGF0ZXNNb2RhbExpbmsgJiYgdGhpcy51cGRhdGVzTW9kYWxMaW5rLmNsaWNrKCk7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBLaWNrcyBvZmYgbG9nbyBhbmltYXRpb25cbiAgICogQGFuaW1hdGVMb2dvXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgYW5pbWF0ZUxvZ28oKTogdm9pZCB7XG4gICAgdGhpcy5sb2dvQW5pbWF0aW9uT2JqZWN0LnBsYXkoKTtcbiAgICB0aGlzLmxvZ29BbmltYXRpb25PYmplY3QuYWRkRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCAoKSA9PiB7XG4gICAgICB0aGlzLmxvZ29BbmltYXRpb25Db250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5BQ1RJVkUpO1xuXG4gICAgICBpZiAodGhpcy5pbnRlcmFjdGl2ZUxvZ28pIHtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGl2ZUxvZ28uaW5pdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIG9uU2Nyb2xsKCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmhhbmRsZVNjcm9sbCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlU2Nyb2xsKCkge1xuICAgIGlmICh0aGlzLmNvcmUucHJlZmVyc1JlZHVjZWRNb3Rpb24gJiYgIXRoaXMuY29tcGFzc0hhc1BsYXllZCkge1xuICAgICAgdGhpcy5jb21wYXNzQW5pbWF0aW9uT2JqZWN0LmdvVG9BbmRTdG9wKHRoaXMuY29tcGFzc0FuaW1hdGlvbk9iamVjdC50b3RhbEZyYW1lcywgdHJ1ZSk7XG4gICAgICB0aGlzLmNvbXBhc3NIYXNQbGF5ZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5jb21wYXNzQW5pbWF0aW9uQ29udGFpbmVyICYmICF0aGlzLmNvbXBhc3NIYXNQbGF5ZWQpIHtcbiAgICAgICAgY29uc3QgY29tcGFzc1RvcCA9IHRoaXMuY29tcGFzc0FuaW1hdGlvbkNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgIGlmIChjb21wYXNzVG9wIDwgd2luZG93LmlubmVySGVpZ2h0KSB7XG4gICAgICAgICAgdGhpcy5jb21wYXNzQW5pbWF0aW9uT2JqZWN0LnBsYXkoKTtcbiAgICAgICAgICB0aGlzLmNvbXBhc3NIYXNQbGF5ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm1lZFNjcmVlbikgeyByZXR1cm47IH1cblxuICAgIGNvbnN0IHRvcCA9IHRoaXMuaW50ZXJhY3RpdmVMb2dvQW5pbWF0aW9uQ29udGFpbmVyXG4gICAgICAgIC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICBpZiAodG9wIDwgSEVBREVSX0hFSUdIVCAmJiAhdGhpcy5oZWFkZXJJc1Njcm9sbGVkKSB7XG4gICAgICAvLyB0aGlzLnBhcmVudExvZ29Db250YWluZXIuY2xhc3NMaXN0LmFkZChTQ1JPTExfSEVBREVSX0lOVklTSUJMRV9DTEFTUyk7XG4gICAgICB0aGlzLmhlYWRlckxvZ28uY2xhc3NMaXN0LmFkZChTQ1JPTExfSEVBREVSX1ZJU0lCTEVfQ0xBU1MpO1xuICAgICAgdGhpcy5oZWFkZXJJc1Njcm9sbGVkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRvcCA+PSBIRUFERVJfSEVJR0hUICYmIHRoaXMuaGVhZGVySXNTY3JvbGxlZCkge1xuICAgICAgdGhpcy5wYXJlbnRMb2dvQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoU0NST0xMX0hFQURFUl9JTlZJU0lCTEVfQ0xBU1MpO1xuICAgICAgdGhpcy5oZWFkZXJMb2dvLmNsYXNzTGlzdC5yZW1vdmUoU0NST0xMX0hFQURFUl9WSVNJQkxFX0NMQVNTKTtcbiAgICAgIHRoaXMuaGVhZGVySXNTY3JvbGxlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBvblJlc2l6ZSgpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5oYW5kbGVSZXNpemUpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVJlc2l6ZSgpIHtcbiAgICB0aGlzLm1lZFNjcmVlbiA9IHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOiA2MDBweCknKS5tYXRjaGVzO1xuICB9XG5cbn1cbiIsImltcG9ydCBDb3JlIGZyb20gJy4uL0NvcmUnO1xuaW1wb3J0IENsaXBib2FyZEpTID0gcmVxdWlyZSgnY2xpcGJvYXJkJyk7XG5pbXBvcnQgeyBTbmFja0JhciB9IGZyb20gJy4uL2NvbXBvbmVudHMnO1xuXG5jb25zdCBTRUxFQ1RPUlMgPSB7XG4gIENPUFlfU05BQ0tCQVI6ICcuanMtY29weS1zbmFja2JhcicsXG4gIENPUFlfVVJMOiAnLmpzLWNvcHktdXJsJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2plY3RQcmV2aWV3IHtcbiAgY29yZTogQ29yZTtcbiAgY2xpcEJvYXJkPzogQ2xpcGJvYXJkSlM7XG4gIHNuYWNrQmFyPzogU25hY2tCYXI7XG5cbiAgY29uc3RydWN0b3IoY29yZTogQ29yZSkge1xuICAgIHRoaXMuY29yZSA9IGNvcmU7XG4gICAgY29uc3Qgc25hY2tCYXJDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5DT1BZX1NOQUNLQkFSKSBhcyBIVE1MRWxlbWVudDtcbiAgICBpZiAoIXNuYWNrQmFyQ29udGFpbmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc25hY2tCYXIgPSBuZXcgU25hY2tCYXIoXG4gICAgICB0aGlzLmNvcmUsXG4gICAgICBzbmFja0JhckNvbnRhaW5lcixcbiAgICApO1xuICAgIHRoaXMuY2xpcEJvYXJkID0gbmV3IENsaXBib2FyZEpTKFNFTEVDVE9SUy5DT1BZX1VSTCk7XG4gICAgdGhpcy5jbGlwQm9hcmQub24oJ3N1Y2Nlc3MnLCB0aGlzLnNuYWNrQmFyLnNuYWNrQmFyVHJpZ2dlclxuICAgICAgLmJpbmQodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCkpO1xuICB9XG59XG4iLCJpbXBvcnQgQ29yZSBmcm9tICcuLi9Db3JlJztcbmltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJztcbmltcG9ydCB7XG4gIG5vZGVMaXN0VG9BcnJheSxcbiAgYXhpb3NJbnN0YW5jZSxcbiAgQUNUSU9OX0NMQVNTRVMsXG59IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgVG9vbFRpcCB9IGZyb20gJy4uL2NvbXBvbmVudHMnO1xuaW1wb3J0IEFnZVJhbmdlUmVzdHJpY3Rpb25zIGZyb20gJy4uL2NvbXBvbmVudHMvQWdlUmFuZ2VSZXN0cmljdGlvbic7XG5cbmNvbnN0IFNFTEVDVE9SUyA9IHtcbiAgRk9STTogJy5qcy1yZWdpc3Rlci1mb3JtJyxcbiAgRk9STV9TVUJNSVQ6ICcuanMtZm9ybS1zdWJtaXQnLFxuICBGT1JNX1RFWFRfSU5QVVQ6ICcuZm9ybS0tdGV4dC1pbnB1dCcsXG4gIEZPUk1fUkFESU86ICcuanMtcmFkaW8tZ3JvdXAnLFxuICBGT1JNX0xFR0FMOiAnLmpzLXRlcm1zLWNvbnRhaW5lcicsXG4gIEZPUk1fRklSU1RfTkFNRTogJy5qcy1maXJzdC1uYW1lLWNvbnRhaW5lcicsXG4gIEZPUk1fTEFTVF9OQU1FOiAnLmpzLWxhc3QtbmFtZS1jb250YWluZXInLFxuICBGT1JNX1NVQ0NFU1M6ICcuanMtZm9ybS1zdWNjZXNzJyxcbiAgRk9STV9DT05UQUlORVI6ICcuanMtZm9ybS1jb250YWluZXInLFxuICBGT1JNX0NPVU5UUlk6ICcuanMtY291bnRyeS1pbnB1dCcsXG4gIEZPUk1fU1RBVEU6ICcuanMtc3RhdGUtaW5wdXQnLFxuICBGT1JNX0xBTkdVQUdFOiAnLmpzLWxhbmd1YWdlLWlucHV0JyxcbiAgRk9STV9URUFNX0NPREU6ICcuanMtdGVhbS1pbnB1dCcsXG4gIEZPUk1fUElDVFVSRV9VUkw6ICcjcGljdHVyZVVybCcsXG4gIERBVEFfVElQX1NFTEVDVE9SOiAnLmpzLXRvb2x0aXAtdHJpZ2dlcicsXG4gIFJFR0lTVEVSX1RFUk1TOiAnLmpzLXJlZ2lzdGVyLXRlcm1zJyxcbiAgUkVDRUlWRURfVEVBTV9DT0RFOiAnLmpzLXJlY2VpdmVkLXRlYW0tY29kZScsXG4gIFNURVBfMTogJy5qcy1zdGVwLTEnLFxuICBTVEVQXzI6ICcuanMtc3RlcC0yJyxcbiAgQ09OVElOVUVfQlVUVE9OOiAnLmpzLWNvbnRpbnVlJyxcbn07XG5cbmNvbnN0IEZPUk1fVVJMID0gJy9hcGkvbWVtYmVycy9jcmVhdGUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWdpc3RlciB7XG4gIGNvcmU6IENvcmU7XG4gIGZvcm06IEhUTUxGb3JtRWxlbWVudDtcbiAgZm9ybVN1Ym1pdDogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gIGZvcm1TdWNjZXNzOiBIVE1MRWxlbWVudDtcbiAgZm9ybUNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gIGNvdW50cnk6IEhUTUxTZWxlY3RFbGVtZW50O1xuICBjb250aW51ZUJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gIGZpcnN0TmFtZTogSFRNTElucHV0RWxlbWVudDtcbiAgYWdlUmFuZ2VDb250YWluZXI6IEhUTUxFbGVtZW50O1xuICBhZ2VSYW5nZVJlc3RyaWN0aW9uczogQWdlUmFuZ2VSZXN0cmljdGlvbnM7XG4gIHJlZ2lzdGVyVGVybXM6IEhUTUxFbGVtZW50O1xuICBzdGF0ZTogSFRNTFNlbGVjdEVsZW1lbnQ7XG4gIHN0YXRlQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgc3VybmFtZTogSFRNTElucHV0RWxlbWVudDtcbiAgdGVhbUNvZGU6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gIHRlYW1Db2RlQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgYWNjZXB0UHJpdmFjeTogSFRNTElucHV0RWxlbWVudDtcbiAgcGljdHVyZVVybDogSFRNTElucHV0RWxlbWVudDtcbiAgcmVjZWl2ZWRUZWFtQ29kZTogSFRNTElucHV0RWxlbWVudDtcbiAgc3RlcE9uZUNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gIHN0ZXBUd29Db250YWluZXI6IEhUTUxFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBjb25zdHJ1Y3RvclxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6IENvcmUpIHtcbiAgICB0aGlzLmNvcmUgPSBjb3JlO1xuICAgIHRoaXMuZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkZPUk0pIGFzIEhUTUxGb3JtRWxlbWVudDtcbiAgICB0aGlzLmZvcm1TdWJtaXQgPSB0aGlzLmZvcm1cbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkZPUk1fU1VCTUlUKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICB0aGlzLmZvcm1TdWNjZXNzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuRk9STV9TVUNDRVNTKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLmZvcm1Db250YWluZXIgPSBkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuRk9STV9DT05UQUlORVIpIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMuY291bnRyeSA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKGAke1NFTEVDVE9SUy5GT1JNX0NPVU5UUll9IHNlbGVjdGApIGFzIEhUTUxTZWxlY3RFbGVtZW50O1xuICAgIHRoaXMuc3RhdGVDb250YWluZXIgPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuRk9STV9TVEFURSkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMuc3RhdGVDb250YWluZXJcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoYCR7U0VMRUNUT1JTLkZPUk1fU1RBVEV9IHNlbGVjdGApIGFzIEhUTUxTZWxlY3RFbGVtZW50O1xuICAgIHRoaXMuZmlyc3ROYW1lID0gdGhpcy5mb3JtXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKGAke1NFTEVDVE9SUy5GT1JNX0ZJUlNUX05BTUV9IGlucHV0YCkgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICB0aGlzLnN1cm5hbWUgPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihgJHtTRUxFQ1RPUlMuRk9STV9MQVNUX05BTUV9IGlucHV0YCkgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICB0aGlzLnRlYW1Db2RlQ29udGFpbmVyID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkZPUk1fVEVBTV9DT0RFKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLnRlYW1Db2RlID0gdGhpcy50ZWFtQ29kZUNvbnRhaW5lclxuICAgICAgICAucXVlcnlTZWxlY3RvcignaW5wdXQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIHRoaXMuYWNjZXB0UHJpdmFjeSA9IHRoaXMuZm9ybVxuICAgICAgICAucXVlcnlTZWxlY3RvcihgJHtTRUxFQ1RPUlMuRk9STV9MRUdBTH0gaW5wdXRgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIHRoaXMucGljdHVyZVVybCA9IHRoaXMuZm9ybVxuICAgICAgICAucXVlcnlTZWxlY3RvcihgaW5wdXQke1NFTEVDVE9SUy5GT1JNX1BJQ1RVUkVfVVJMfWApIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgdGhpcy5yZWdpc3RlclRlcm1zID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlJFR0lTVEVSX1RFUk1TKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLnJlY2VpdmVkVGVhbUNvZGUgPSB0aGlzLmZvcm1cbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoYCR7U0VMRUNUT1JTLlJFQ0VJVkVEX1RFQU1fQ09ERX0gaW5wdXRgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIHRoaXMuc3RlcE9uZUNvbnRhaW5lciA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TVEVQXzEpIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMuc3RlcFR3b0NvbnRhaW5lciA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TVEVQXzIpIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMuY29udGludWVCdXR0b24gPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuQ09OVElOVUVfQlVUVE9OKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICB0aGlzLmFnZVJhbmdlQ29udGFpbmVyID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkZPUk1fUkFESU8pIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMuYWdlUmFuZ2VSZXN0cmljdGlvbnMgPSBuZXcgQWdlUmFuZ2VSZXN0cmljdGlvbnMoXG4gICAgICB0aGlzLmNvdW50cnksXG4gICAgICB0aGlzLmFnZVJhbmdlQ29udGFpbmVyLFxuICAgICAgdGhpcy5yZWdpc3RlclRlcm1zLFxuICAgICk7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24pO1xuICAgIHRoaXMuZm9ybVN1Ym1pdC5kaXNhYmxlZCA9IHRydWU7XG4gICAgdGhpcy5jb250aW51ZUJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgdGhpcy5zdGVwVHdvQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB0aGlzLmZvcm1TdWJtaXQuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgIHRoaXMuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZUZvcm1DaGFuZ2UpO1xuICAgIHRoaXMuZm9ybVN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlU3VibWl0KTtcblxuICAgIHRoaXMuY29udGludWVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNvbnRpbnVlKTtcbiAgICBjb25zdCB0b29sVGlwRWxlbWVudHMgPSBub2RlTGlzdFRvQXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUlMuREFUQV9USVBfU0VMRUNUT1IpKTtcbiAgICB0b29sVGlwRWxlbWVudHMuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGNvbnN0IHRvb2x0aXAgPSBuZXcgVG9vbFRpcCh0aGlzLmNvcmUsIGVsKTtcblxuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgdG9vbHRpcC5kb21TaG93KTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0b29sdGlwLmRvbUhpZGUpO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b29sdGlwLmRvbVNob3cpO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChlLmNvZGUgPT09ICdFbnRlcicgfHwgZS5jb2RlID09PSAnU3BhY2UnKSB7XG4gICAgICAgICAgaWYgKHRvb2x0aXAuaXNPcGVuKSB7XG4gICAgICAgICAgICB0b29sdGlwLmRvbUhpZGUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9vbHRpcC5kb21TaG93KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlLmNvZGUgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgdG9vbHRpcC5kb21IaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuY291bnRyeS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZUNvdW50cnlDaGFuZ2UpO1xuICAgIHRoaXMuc3RhdGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVGb3JtQ2hhbmdlKTtcbiAgICB0aGlzLnJlY2VpdmVkVGVhbUNvZGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5zZXRUZWFtQ29kZVZpc2liaWxpdHkpO1xuICAgIHRoaXMuZmlyc3ROYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5oYW5kbGVGb3JtQ2hhbmdlKTtcbiAgICB0aGlzLnN1cm5hbWUuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLmhhbmRsZUZvcm1DaGFuZ2UpO1xuICAgIHRoaXMudGVhbUNvZGUuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLmhhbmRsZUZvcm1DaGFuZ2UpO1xuICAgIHRoaXMuc2V0U3RhdGVWaXNpYmlsaXR5KCk7XG4gICAgdGhpcy5zZXRUZWFtQ29kZVZpc2liaWxpdHkoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVLZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBjb25zdCBrZXlOYW1lID0gZS5rZXk7XG5cbiAgICBpZiAoa2V5TmFtZSA9PT0gJ0VudGVyJykge1xuICAgICAgaWYgKHRoaXMuaXNTdGVwT25lVmFsaWQoKSAmJiAhdGhpcy5pc1N0ZXBUd29WYWxpZCgpKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlQ29udGludWUoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1N0ZXBPbmVWYWxpZCgpICYmIHRoaXMuaXNTdGVwVHdvVmFsaWQoKSkge1xuICAgICAgICB0aGlzLmhhbmRsZVN1Ym1pdCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBhdXRvYmluZFxuICBzZXRTdGF0ZVZpc2liaWxpdHkoKSB7XG4gICAgaWYgKHRoaXMuY291bnRyeS52YWx1ZSA9PT0gJ1VTJykge1xuICAgICAgdGhpcy5zdGF0ZUNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLkhJRERFTik7XG4gICAgICB0aGlzLnN0YXRlLnJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0ZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkhJRERFTik7XG4gICAgICB0aGlzLnN0YXRlLnJlcXVpcmVkID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIHNldFRlYW1Db2RlVmlzaWJpbGl0eSgpIHtcbiAgICBpZiAodGhpcy5yZWNlaXZlZFRlYW1Db2RlLmNoZWNrZWQpIHtcbiAgICAgIHRoaXMudGVhbUNvZGVDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgICAgdGhpcy50ZWFtQ29kZS5yZXF1aXJlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGVhbUNvZGVDb250YWluZXIuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgICAgdGhpcy50ZWFtQ29kZS5yZXF1aXJlZCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmhhbmRsZUZvcm1DaGFuZ2UoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVDb3VudHJ5Q2hhbmdlKCkge1xuICAgIHRoaXMuc2V0U3RhdGVWaXNpYmlsaXR5KCk7XG4gICAgdGhpcy5oYW5kbGVGb3JtQ2hhbmdlKCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlRm9ybUNoYW5nZSgpIHtcbiAgICB0aGlzLmNvbnRpbnVlQnV0dG9uLmRpc2FibGVkID0gIXRoaXMuaXNTdGVwT25lVmFsaWQoKTtcbiAgICB0aGlzLmZvcm1TdWJtaXQuZGlzYWJsZWQgPSAhdGhpcy5pc1N0ZXBUd29WYWxpZCgpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUNvbnRpbnVlKCkge1xuICAgIHRoaXMuc3RlcE9uZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKEFDVElPTl9DTEFTU0VTLkhJRERFTik7XG4gICAgdGhpcy5zdGVwVHdvQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB0aGlzLmNvbnRpbnVlQnV0dG9uLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuSElEREVOKTtcbiAgICB0aGlzLmZvcm1TdWJtaXQuY2xhc3NMaXN0LnJlbW92ZShBQ1RJT05fQ0xBU1NFUy5ISURERU4pO1xuICAgIHRoaXMuZmlyc3ROYW1lLmZvY3VzKCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaXNTdGVwT25lVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY291bnRyeUlzVmFsaWQgPSB0aGlzLmNvdW50cnkuY2hlY2tWYWxpZGl0eSgpO1xuICAgIGNvbnN0IHN0YXRlSXNWYWxpZCA9IHRoaXMuc3RhdGUucmVxdWlyZWQgPyB0aGlzLnN0YXRlLmNoZWNrVmFsaWRpdHkoKSA6IHRydWU7XG4gICAgY29uc3QgYWdlSXNWYWxpZCA9IHRoaXMuYWdlUmFuZ2VSZXN0cmljdGlvbnMuYWdlUmFuZ2UgIT09ICcnO1xuXG4gICAgcmV0dXJuIGNvdW50cnlJc1ZhbGlkICYmIHN0YXRlSXNWYWxpZCAmJiBhZ2VJc1ZhbGlkO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGlzU3RlcFR3b1ZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGZpcnN0TmFtZUlzVmFsaWQgPSB0aGlzLmZpcnN0TmFtZS5jaGVja1ZhbGlkaXR5KCk7XG4gICAgY29uc3Qgc3VyTmFtZUlzVmFsaWQgPSB0aGlzLnN1cm5hbWUuY2hlY2tWYWxpZGl0eSgpO1xuICAgIGNvbnN0IGlzVGVhbUNvZGVWYWxpZCA9IHRoaXMucmVjZWl2ZWRUZWFtQ29kZS5jaGVja2VkID8gdGhpcy50ZWFtQ29kZS5jaGVja1ZhbGlkaXR5KCkgOiB0cnVlO1xuICAgIGNvbnN0IGlzVGVybXNWYWxpZCA9IHRoaXMuYWNjZXB0UHJpdmFjeS5jaGVja2VkO1xuICAgIHJldHVybiBmaXJzdE5hbWVJc1ZhbGlkICYmIHN1ck5hbWVJc1ZhbGlkICYmIGlzVGVhbUNvZGVWYWxpZCAmJiBpc1Rlcm1zVmFsaWQ7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaXNGb3JtVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNTdGVwT25lVmFsaWQoKSAmJiB0aGlzLmlzU3RlcFR3b1ZhbGlkKCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlU3VibWl0KCkge1xuICAgIHRoaXMuZm9ybS5yZXBvcnRWYWxpZGl0eSgpO1xuICAgIGlmICh0aGlzLmZvcm0uY2hlY2tWYWxpZGl0eSgpKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgIGNvdW50cnk6IHRoaXMuY291bnRyeS52YWx1ZSxcbiAgICAgICAgaG9tZV9zdGF0ZTogdGhpcy5zdGF0ZS52YWx1ZSxcbiAgICAgICAgZmlyc3RuYW1lOiB0aGlzLmZpcnN0TmFtZS52YWx1ZSxcbiAgICAgICAgc3VybmFtZTogdGhpcy5zdXJuYW1lLnZhbHVlLFxuICAgICAgICBpbnZpdGVfY29kZTogdGhpcy5yZWNlaXZlZFRlYW1Db2RlLmNoZWNrZWQgPyB0aGlzLnRlYW1Db2RlLnZhbHVlIDogbnVsbCxcbiAgICAgICAgbG9jYWxlOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZyxcbiAgICAgICAgYWNjZXB0X3ByaXZhY3k6IHRoaXMuYWNjZXB0UHJpdmFjeS5jaGVja2VkLFxuICAgICAgICBhZ2VfcmFuZ2U6IHRoaXMuYWdlUmFuZ2VSZXN0cmljdGlvbnMuYWdlUmFuZ2UsXG4gICAgICAgIHBpY3R1cmVfdXJsOiB0aGlzLnBpY3R1cmVVcmwudmFsdWUsXG4gICAgICB9O1xuXG4gICAgICBheGlvc0luc3RhbmNlLnBvc3QoRk9STV9VUkwsIEpTT04uc3RyaW5naWZ5KHBhcmFtcykpXG4gICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgdGhpcy5mb3JtLmNsYXNzTGlzdC5hZGQoJy1lcnJvcicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5mb3JtQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJy1zdWJtaXR0ZWQnKTtcbiAgICAgICAgICAgICAgLy8gVE9ETzogaXMgdGhlcmUgYSBiZXR0ZXIgd2F5IHRvIHJlZGlyZWN0IG9yIGJ1aWxkIHVybD9cbiAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL3lvdXItcHJvamVjdCN0b3AtdGlwcyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZvcm0uY2xhc3NMaXN0LmFkZCgnLWVycm9yJyk7XG4gICAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UuZGF0YS5lcnJvcnMgPT09ICdDb2RlIG5vdCBmb3VuZCcpIHtcbiAgICAgICAgICAgICAgKHRoaXMudGVhbUNvZGVDb250YWluZXIucXVlcnlTZWxlY3RvcignLmZvcm0tLWlucHV0LWNvbnRhaW5lcicpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgLmNsYXNzTGlzdC5hZGQoQUNUSU9OX0NMQVNTRVMuRVJST1IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG59XG4iLCJpbXBvcnQgQ29yZSBmcm9tICcuLi9Db3JlJztcbmltcG9ydCB7IG5vZGVMaXN0VG9BcnJheSwgR0xPQkFMX1NFTEVDVE9SUyB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgU25hY2tCYXIgfSBmcm9tICcuLi9jb21wb25lbnRzJztcbmltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJztcblxuY29uc3QgU0VMRUNUT1JTID0ge1xuICBTTkFDS0JBUjogJy5qcy1sYXVuY2gtc25hY2tiYXInLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3R5bGVndWlkZSB7XG4gIGNvcmU6IENvcmU7XG4gIHRleHRhcmVhczogSFRNTFRleHRBcmVhRWxlbWVudFtdO1xuICBzbmFja0JhcjogU25hY2tCYXI7XG4gIHNuYWNrQmFyVHJpZ2dlcjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIEhvbWUgY29uc3RydWN0b3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBDb3JlKSB7XG4gICAgdGhpcy5jb3JlID0gY29yZTtcbiAgICB0aGlzLnRleHRhcmVhcyA9IG5vZGVMaXN0VG9BcnJheShcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChHTE9CQUxfU0VMRUNUT1JTLlJJQ0hfVEVYVEFSRUEpKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50W107XG4gICAgdGhpcy5zbmFja0JhclRyaWdnZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TTkFDS0JBUikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgdGhpcy5zbmFja0JhciA9IG5ldyBTbmFja0Jhcih0aGlzLmNvcmUpO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgaW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNuYWNrQmFyVHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlU25hY2tCYXJUcmlnZ2VyKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVTbmFja0JhclRyaWdnZXIoKTogdm9pZCB7XG4gICAgdGhpcy5zbmFja0Jhci5zbmFja0JhclRyaWdnZXIoKTtcbiAgfVxufVxuIiwiZGVjbGFyZSB2YXIgYm9keW1vdmluOiBhbnk7XG5kZWNsYXJlIHZhciBUd2Vlbk1heDogYW55O1xuaW1wb3J0IHsgYXV0b2JpbmQgfSBmcm9tICdjb3JlLWRlY29yYXRvcnMnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBDb3JlIGZyb20gJy4uL0NvcmUnO1xuaW1wb3J0IHsgTmF2SW5QYWdlIH0gZnJvbSAnLi4vY29tcG9uZW50cyc7XG5pbXBvcnQgeyBub2RlTGlzdFRvQXJyYXksIEFDVElPTl9DTEFTU0VTIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IFNFTEVDVE9SUyA9IHtcbiAgSUxMVVNUUkFUSU9OOiAnLmpzLXNjcm9sbC1pbGx1c3RyYXRpb24nLFxuICBTQ1JPTExfQ09OVEFJTkVSOiAnLmpzLXNjcm9sbC1jb250YWluZXInLFxuICBTQ1JPTExfRU5EOiAnLmpzLXNjcm9sbC1lbmQnLFxuICBTQ1JPTExfU1RBUlQ6ICcuanMtZmlyc3Qtc2Nyb2xsJyxcbiAgTE9HT19DT05UQUlORVI6ICcuanMtbG9nby1jb250YWluZXInLFxuICBTVUJNSVNTSU9OU19PUEVOOiAnLmpzLXN1Ym1pc3Npb25zLW9wZW4nLFxuICBSRVNPVVJDRV9DQVJEX0NPTlRBSU5FUjogJy5qcy1yZXNvdXJjZS1jYXJkLWNvbnRhaW5lcicsXG4gIFJFU09VUkNFX0NBUkQ6ICcuanMtcmVzb3VyY2UtY2FyZC1hbHQnLFxuICBURUFTRVJfRk9STTogJy5qcy10ZWFzZXItZm9ybScsXG4gIFRFQVNFUl9GT1JNX1NVQk1JVDogJy5qcy10ZWFzZXItZm9ybS1zdWJtaXQnLFxuICBURUFTRVJfRk9STV9URVhUX0lOUFVUOiAnLmZvcm0tLXRleHQtaW5wdXQnLFxuICBURUFTRVJfRk9STV9FTUFJTDogJy5qcy1lbWFpbC1jb250YWluZXInLFxuICBURUFTRVJfRk9STV9SQURJTzogJy5qcy1yYWRpby1jb250YWluZXInLFxuICBURUFTRVJfRk9STV9MRUdBTDogJy5qcy10ZXJtcy1jb250YWluZXInLFxuICBURUFTRVJfRk9STV9TVUNDRVNTOiAnLmpzLXRlYXNlci1mb3JtLXN1Y2Nlc3MnLFxuICBURUFTRVJfRk9STV9DT05UQUlORVI6ICcuanMtdGVhc2VyLWZvcm0tY29udGFpbmVyJyxcbiAgVEVBU0VSX0ZPUk1fQ09VTlRSWTogJy5qcy1jb3VudHJ5LWlucHV0JyxcbiAgVEVBU0VSX0ZPUk1fTEFOR1VBR0U6ICcuanMtbGFuZ3VhZ2UtaW5wdXQnLFxuICBIRUFERVI6ICcuanMtaGVhZGVyJyxcbiAgRUxTX1dJVEhfVkg6ICcuanMtdmgnLFxufTtcblxuaW50ZXJmYWNlIElQYXJhbXMge1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbmNvbnN0IFRFQVNFUl9GT1JNX1VSTCA9ICdodHRwczovL3NlcnZpY2VzLmdvb2dsZS5jb20vZmIvc3VibWlzc2lvbnMvZ29vZ2xlc2NpZW5jZWZhaXItdGVhc2VyLyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFuaW1hdGlvbkRhdGEge1xuICBhZGRFdmVudExpc3RlbmVyPzogYW55O1xuICBjb250YWluZXI6IEhUTUxFbGVtZW50O1xuICByZW5kZXJlcjogJ3N2Zyd8J2NhbnZhcyc7XG4gIGxvb3A6IGJvb2xlYW47XG4gIGF1dG9wbGF5OiBib29sZWFuO1xuICBwYXRoOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlYXNlciB7XG4gIGFuaW1hdGlvbkRhdGE6IElBbmltYXRpb25EYXRhO1xuICBhbmltYXRpb25EdXJhdGlvbjogbnVtYmVyO1xuICBhbmltYXRpb25PYmplY3Q6IGFueTtcbiAgY29yZTogQ29yZTtcbiAgaGVhZGVyOiBIVE1MRWxlbWVudDtcbiAgaGVhZGVySGVpZ2h0OiBudW1iZXI7XG4gIGhlYWRlckhhc1NoYWRvdzogYm9vbGVhbjtcbiAgaWxsdXN0cmF0aW9uQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgc3VibWlzc2lvbnNPcGVuRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIGlzSU9TOiBib29sZWFuO1xuICBpc0xvY2tlZFRvcDogYm9vbGVhbjtcbiAgaXNMb2NrZWRCb3R0b206IGJvb2xlYW47XG4gIG5hdkluUGFnZTogTmF2SW5QYWdlO1xuICBzY3JvbGxFbmQ6IEhUTUxFbGVtZW50O1xuICBzY3JvbGxDb250YWluZXI6IEhUTUxFbGVtZW50O1xuICBzY3JvbGxDb250YWluZXJUb3A6IG51bWJlcjtcbiAgc2Nyb2xsQ29udGFpbmVySGVpZ2h0OiBudW1iZXI7XG4gIHdpbmRvd0hlaWdodDogbnVtYmVyO1xuICB3aW5kb3dXaWR0aDogbnVtYmVyO1xuICBsYXJnZVNjcmVlbjogYm9vbGVhbjtcbiAgbWVkU2NyZWVuOiBib29sZWFuO1xuICBzbWFsbFNjcmVlbjogYm9vbGVhbjtcbiAgbG9nb0FuaW1hdGlvbkRhdGE6IElBbmltYXRpb25EYXRhO1xuICBsb2dvQW5pbWF0aW9uQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgbG9nb0FuaW1hdGlvbk9iamVjdDogYW55O1xuICB0ZWFzZXJGb3JtOiBIVE1MRm9ybUVsZW1lbnQ7XG4gIHRlYXNlckZvcm1TdWJtaXQ6IEhUTUxCdXR0b25FbGVtZW50O1xuICB0ZWFzZXJGb3JtU3VjY2VzczogSFRNTEVsZW1lbnQ7XG4gIHRlYXNlckZvcm1Db250YWluZXI6IEhUTUxFbGVtZW50O1xuICBlbHNXaXRoVmg6IEFycmF5PEhUTUxFbGVtZW50PjtcbiAgc3ZnSGVpZ2h0OiBudW1iZXI7XG4gIHJlc291cmNlQ2FyZDogSFRNTEVsZW1lbnQ7XG4gIHJlc291cmNlQ2FyZENvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gIGlzUmVzb3VyY2VDYXJkU2V0OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUZWFzZXIgY29uc3RydWN0b3JcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBDb3JlKSB7XG4gICAgdGhpcy5jb3JlID0gY29yZTtcbiAgICB0aGlzLndpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB0aGlzLm1lZFNjcmVlbiA9IHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOiA2MDBweCknKS5tYXRjaGVzO1xuICAgIHRoaXMubGFyZ2VTY3JlZW4gPSB3aW5kb3cubWF0Y2hNZWRpYSgnKG1pbi13aWR0aDogMTAyNHB4KScpLm1hdGNoZXM7XG4gICAgdGhpcy5zbWFsbFNjcmVlbiA9ICF0aGlzLm1lZFNjcmVlbjtcbiAgICB0aGlzLndpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgdGhpcy5oZWFkZXJIYXNTaGFkb3cgPSBmYWxzZTtcbiAgICB0aGlzLmlzSU9TID0gZmFsc2U7XG4gICAgdGhpcy5pbGx1c3RyYXRpb25Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5JTExVU1RSQVRJT04pIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMubG9nb0FuaW1hdGlvbkNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLkxPR09fQ09OVEFJTkVSKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLnNjcm9sbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlNDUk9MTF9DT05UQUlORVIpIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMudGVhc2VyRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlRFQVNFUl9GT1JNKSBhcyBIVE1MRm9ybUVsZW1lbnQ7XG4gICAgdGhpcy50ZWFzZXJGb3JtU3VibWl0ID0gdGhpcy50ZWFzZXJGb3JtXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5URUFTRVJfRk9STV9TVUJNSVQpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgIHRoaXMuc3VibWlzc2lvbnNPcGVuRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlNVQk1JU1NJT05TX09QRU4pIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMudGVhc2VyRm9ybVN1Y2Nlc3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5URUFTRVJfRk9STV9TVUNDRVNTKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLnRlYXNlckZvcm1Db250YWluZXIgPSBkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fQ09OVEFJTkVSKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLmVsc1dpdGhWaCA9IG5vZGVMaXN0VG9BcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SUy5FTFNfV0lUSF9WSCkpO1xuICAgIHRoaXMucmVzb3VyY2VDYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuUkVTT1VSQ0VfQ0FSRCkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgdGhpcy5yZXNvdXJjZUNhcmRDb250YWluZXIgPSBkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuUkVTT1VSQ0VfQ0FSRF9DT05UQUlORVIpIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMubmF2SW5QYWdlID0gbmV3IE5hdkluUGFnZShjb3JlKTtcbiAgICB0aGlzLnNjcm9sbENvbnRhaW5lclRvcCA9IHRoaXMuc2Nyb2xsQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICB0aGlzLnNjcm9sbEVuZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7U0VMRUNUT1JTLlNDUk9MTF9FTkR9ID4gcGApIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMuc2Nyb2xsQ29udGFpbmVySGVpZ2h0ID0gKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlNDUk9MTF9FTkQpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgIHRoaXMuaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuSEVBREVSKSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLmhlYWRlckhlaWdodCA9IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGVhc2VycGFnZS0taGVhZGVyJykgYXMgSFRNTEVsZW1lbnQpXG4gICAgICAgIC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgdGhpcy5hbmltYXRpb25EdXJhdGlvbiA9IHRoaXMuc2Nyb2xsQ29udGFpbmVySGVpZ2h0ICsgKHRoaXMuaGVhZGVySGVpZ2h0IC8gNCk7XG4gICAgdGhpcy5hbmltYXRpb25EYXRhID0ge1xuICAgICAgY29udGFpbmVyOiB0aGlzLmlsbHVzdHJhdGlvbkNvbnRhaW5lcixcbiAgICAgIHJlbmRlcmVyOiAnc3ZnJyxcbiAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgcGF0aDogJy9zdGF0aWMvaW1hZ2VzL0dTRl90ZXN0MTMuanNvbicsXG4gICAgfTtcbiAgICB0aGlzLmFuaW1hdGlvbk9iamVjdCA9IGJvZHltb3Zpbi5sb2FkQW5pbWF0aW9uKHRoaXMuYW5pbWF0aW9uRGF0YSk7XG4gICAgdGhpcy5sb2dvQW5pbWF0aW9uRGF0YSA9IHtcbiAgICAgIGNvbnRhaW5lcjogdGhpcy5sb2dvQW5pbWF0aW9uQ29udGFpbmVyLFxuICAgICAgcmVuZGVyZXI6ICdzdmcnLFxuICAgICAgbG9vcDogZmFsc2UsXG4gICAgICBhdXRvcGxheTogdHJ1ZSxcbiAgICAgIHBhdGg6IHRoaXMubWVkU2NyZWVuID9cbiAgICAgICAgICAnL3N0YXRpYy9pbWFnZXMvR1NGX2xvZ282Lmpzb24nIDogJy9zdGF0aWMvaW1hZ2VzL0dTRl9sb2dvX21vYmlsZS5qc29uJyxcbiAgICB9O1xuICAgIHRoaXMubG9nb0FuaW1hdGlvbk9iamVjdCA9IGJvZHltb3Zpbi5sb2FkQW5pbWF0aW9uKHRoaXMubG9nb0FuaW1hdGlvbkRhdGEpO1xuICAgIHRoaXMuaXNMb2NrZWRUb3AgPSBmYWxzZTtcbiAgICB0aGlzLmlzTG9ja2VkQm90dG9tID0gZmFsc2U7XG4gICAgdGhpcy5pc1Jlc291cmNlQ2FyZFNldCA9IGZhbHNlO1xuICAgIHRoaXMuc3ZnSGVpZ2h0ID0gMDtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBpbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaXNJT1MgPSAvKGlQYWR8aVBob25lfGlQb2QpLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHRoaXMuYW5pbWF0ZUxvZ28oKTtcbiAgICB0aGlzLmlsbHVzdHJhdGlvbkNvbnRhaW5lci5zdHlsZS53aWR0aCA9IGAke3dpbmRvdy5pbm5lcldpZHRofWA7XG4gICAgdGhpcy5pbGx1c3RyYXRpb25Db250YWluZXIuc3R5bGUuaGVpZ2h0ID0gYCR7d2luZG93LmlubmVySGVpZ2h0fWA7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuYW5pbWF0ZSk7XG4gICAgd2luZG93Lm9uYmVmb3JldW5sb2FkID0gKCkgPT4ge1xuICAgICAgdGhpcy5pbGx1c3RyYXRpb25Db250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICB9O1xuICAgIHRoaXMudGVhc2VyRm9ybS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZUZvcm1DaGFuZ2UpO1xuICAgIHRoaXMudGVhc2VyRm9ybVN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlU3VibWl0KTtcbiAgICAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoYCR7U0VMRUNUT1JTLlRFQVNFUl9GT1JNX0VNQUlMfSBpbnB1dGApIGFzIEhUTUxJbnB1dEVsZW1lbnQpXG4gICAgICAgIC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgdGhpcy5oYW5kbGVFbWFpbEJsdXIpO1xuICAgICh0aGlzLnRlYXNlckZvcm0ucXVlcnlTZWxlY3RvcihgJHtTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fTEVHQUx9IGlucHV0YCkgYXMgSFRNTElucHV0RWxlbWVudClcbiAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlTGVnYWxCbHVyKTtcbiAgICB0aGlzLmFuaW1hdGlvbk9iamVjdC5hZGRFdmVudExpc3RlbmVyKCdET01Mb2FkZWQnLCB0aGlzLnNldElsbHVzdHJhdGlvblJlYWR5KTtcbiAgICAobm9kZUxpc3RUb0FycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1tb2RhbC1saW5rJykpIGFzIEFycmF5PEhUTUxBbmNob3JFbGVtZW50PilcbiAgICAgICAgLmZvckVhY2goKGxpbmspID0+IGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnJlc2V0TW9kYWwpKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLmhhbmRsZU9yaWVudGF0aW9uQ2hhbmdlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICAgIGlmICh0aGlzLm1lZFNjcmVlbikge1xuICAgICAgdGhpcy5zZXRSZXNvdXJjZUNhcmQoKTtcbiAgICB9XG4gICAgdGhpcy5zZXRIZWlnaHRzRm9yVmgoKTtcbiAgICBpZiAoLyhlZHVjYXRvci1yZXNvdXJjZXMpLy50ZXN0KHdpbmRvdy5sb2NhdGlvbi5oYXNoKSkge1xuICAgICAgVHdlZW5NYXgudG8od2luZG93LCAxLCB7XG4gICAgICAgIHNjcm9sbFRvOiB7XG4gICAgICAgICAgeTogKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlZHVjYXRvci1yZXNvdXJjZXMnKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgICAgICAgLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCxcbiAgICAgICAgICBhdXRvS2lsbDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgc2V0UmVzb3VyY2VDYXJkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzUmVzb3VyY2VDYXJkU2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGlubmVySHRtbCA9IHRoaXMucmVzb3VyY2VDYXJkLmlubmVySFRNTDtcbiAgICBjb25zdCBuZXdMaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgbmV3TGkuY2xhc3NMaXN0LmFkZCgnaC1jLWNhcm91c2VsX19pdGVtJywgJ3Jlc291cmNlLWNhcmQnLCAncmVzb3VyY2UtY2FyZC1hbHQnKTtcbiAgICBuZXdMaS5pbm5lckhUTUwgPSBpbm5lckh0bWw7XG4gICAgdGhpcy5yZXNvdXJjZUNhcmRDb250YWluZXIuYXBwZW5kQ2hpbGQobmV3TGkpO1xuICAgIHRoaXMucmVzb3VyY2VDYXJkLnJlbW92ZSgpO1xuICAgIHRoaXMuaXNSZXNvdXJjZUNhcmRTZXQgPSB0cnVlO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVJlc2l6ZSgpOiB2b2lkIHtcbiAgICB0aGlzLndpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB0aGlzLm1lZFNjcmVlbiA9IHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOiA2MDBweCknKS5tYXRjaGVzO1xuICAgIHRoaXMubGFyZ2VTY3JlZW4gPSB3aW5kb3cubWF0Y2hNZWRpYSgnKG1pbi13aWR0aDogMTAyNHB4KScpLm1hdGNoZXM7XG5cbiAgICBpZiAodGhpcy5zbWFsbFNjcmVlbikge1xuICAgICAgaWYgKHRoaXMubWVkU2NyZWVuKSB7XG4gICAgICAgIHRoaXMuc21hbGxTY3JlZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sb2dvQW5pbWF0aW9uT2JqZWN0LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5sb2dvQW5pbWF0aW9uRGF0YS5wYXRoID0gJy9zdGF0aWMvaW1hZ2VzL0dTRl9sb2dvNi5qc29uJztcbiAgICAgICAgdGhpcy5sb2dvQW5pbWF0aW9uT2JqZWN0ID0gYm9keW1vdmluLmxvYWRBbmltYXRpb24odGhpcy5sb2dvQW5pbWF0aW9uRGF0YSk7XG4gICAgICAgIHRoaXMubG9nb0FuaW1hdGlvbk9iamVjdC5wbGF5KCk7XG4gICAgICAgIHRoaXMuc2V0UmVzb3VyY2VDYXJkKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdGhpcy5tZWRTY3JlZW4pIHtcbiAgICAgICAgdGhpcy5zbWFsbFNjcmVlbiA9IHRydWU7XG4gICAgICAgIHRoaXMubG9nb0FuaW1hdGlvbk9iamVjdC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMubG9nb0FuaW1hdGlvbkRhdGEucGF0aCA9ICcvc3RhdGljL2ltYWdlcy9HU0ZfbG9nb19tb2JpbGUuanNvbic7XG4gICAgICAgIHRoaXMubG9nb0FuaW1hdGlvbk9iamVjdCA9IGJvZHltb3Zpbi5sb2FkQW5pbWF0aW9uKHRoaXMubG9nb0FuaW1hdGlvbkRhdGEpO1xuICAgICAgICB0aGlzLmxvZ29BbmltYXRpb25PYmplY3QucGxheSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLndpbmRvd1dpZHRoICE9PSB3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgdGhpcy53aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLm9uUmVzaXplKTtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgcmVzZXRNb2RhbChlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5nbHVlLWFwcC1yZWFkeSAuZ2x1ZS1jLW1vZGFsX19vdmVybGF5JykgYXMgSFRNTEVsZW1lbnQpXG4gICAgICAgIC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVPcmllbnRhdGlvbkNoYW5nZSgpOiB2b2lkIHtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMub25SZXNpemUpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIHNldElsbHVzdHJhdGlvblJlYWR5KCk6IHZvaWQge1xuICAgIGNvbnN0IHN2ZyA9IHRoaXMuaWxsdXN0cmF0aW9uQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpIGFzIFNWR0VsZW1lbnQ7XG4gICAgdGhpcy5zdmdIZWlnaHQgPSB0aGlzLndpbmRvd0hlaWdodDtcbiAgICBzdmcuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy53aW5kb3dIZWlnaHR9YDtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBvblJlc2l6ZSgpOiB2b2lkIHtcbiAgICB0aGlzLm1lZFNjcmVlbiA9IHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOiA2MDBweCknKS5tYXRjaGVzO1xuICAgIHRoaXMubGFyZ2VTY3JlZW4gPSB3aW5kb3cubWF0Y2hNZWRpYSgnKG1pbi13aWR0aDogMTAyNHB4KScpLm1hdGNoZXM7XG4gICAgdGhpcy53aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgdGhpcy5zZXRJbGx1c3RyYXRpb25SZWFkeSgpO1xuICAgIHRoaXMuc2V0SGVpZ2h0c0ZvclZoKCk7XG4gICAgdGhpcy5zY3JvbGxDb250YWluZXJUb3AgPSB0aGlzLnNjcm9sbENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgdGhpcy5oZWFkZXJIZWlnaHQgPSAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlYXNlcnBhZ2UtLWhlYWRlcicpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgIHRoaXMuc2Nyb2xsQ29udGFpbmVySGVpZ2h0ID0gKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlNDUk9MTF9FTkQpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgIHRoaXMuYW5pbWF0ZSgpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGFuaW1hdGUoKTogdm9pZCB7XG4gICAgaWYgKHdpbmRvdy5zY3JvbGxZID4gMjAwICYmICF0aGlzLmhlYWRlckhhc1NoYWRvdykge1xuICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LmFkZChBQ1RJT05fQ0xBU1NFUy5IQVNfU0hBRE9XKTtcbiAgICAgIHRoaXMuaGVhZGVySGFzU2hhZG93ID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHdpbmRvdy5zY3JvbGxZIDwgMjAwICYmIHRoaXMuaGVhZGVySGFzU2hhZG93KSB7XG4gICAgICB0aGlzLmhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKEFDVElPTl9DTEFTU0VTLkhBU19TSEFET1cpO1xuICAgICAgdGhpcy5oZWFkZXJIYXNTaGFkb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBzY3JvbGxQb3NpdGlvbiA9IHdpbmRvdy5zY3JvbGxZIC0gKHRoaXMuaGVhZGVySGVpZ2h0IC8gMik7XG4gICAgY29uc3Qgc2Nyb2xsZWRJbkNvbnRhaW5lciA9IHRoaXMuc2Nyb2xsQ29udGFpbmVySGVpZ2h0IC0gKHRoaXMuaGVhZGVySGVpZ2h0IC8gMilcbiAgICAgICAgLSAodGhpcy53aW5kb3dIZWlnaHQgLyA0KTtcbiAgICBjb25zdCBtYXhGcmFtZXMgPSB0aGlzLmFuaW1hdGlvbk9iamVjdC50b3RhbEZyYW1lcztcbiAgICBjb25zdCBmcmFtZSA9IChtYXhGcmFtZXMgLyAxMDApICpcbiAgICAgICAgKHNjcm9sbFBvc2l0aW9uIC8gKHNjcm9sbGVkSW5Db250YWluZXIgLyAxMDApKTtcbiAgICB0aGlzLmFuaW1hdGlvbk9iamVjdC5nb1RvQW5kU3RvcChmcmFtZSwgdHJ1ZSk7XG4gICAgY29uc3QgbmF2SGVpZ2h0ID0gdGhpcy5tZWRTY3JlZW4gPyA4MCA6IDY0O1xuICAgIGNvbnN0IGlsbHVzdHJhdGlvblRvcCA9IHRoaXMuc2Nyb2xsQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxuICAgICAgICAtICh3aW5kb3cuaW5uZXJIZWlnaHQgKiAuNSkgLSBuYXZIZWlnaHQ7XG4gICAgaWYgKHRoaXMuc2Nyb2xsRW5kLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCA8XG4gICAgICAgICh0aGlzLndpbmRvd0hlaWdodCAqICh0aGlzLmxhcmdlU2NyZWVuID8gLjggOiAuNykpICsgbmF2SGVpZ2h0KSB7XG4gICAgICBpZiAodGhpcy5pc0xvY2tlZEJvdHRvbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmlsbHVzdHJhdGlvbkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCctbG9ja2VkJyk7XG4gICAgICB0aGlzLmlsbHVzdHJhdGlvbkNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCctZml4ZWQnKTtcbiAgICAgIGNvbnN0IGJvdHRvbSA9IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5TQ1JPTExfRU5EKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgICAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC0gKHRoaXMud2luZG93SGVpZ2h0IC8gMik7XG4gICAgICB0aGlzLmlsbHVzdHJhdGlvbkNvbnRhaW5lci5zdHlsZS50b3AgPSAnYXV0byc7XG4gICAgICB0aGlzLmlsbHVzdHJhdGlvbkNvbnRhaW5lci5zdHlsZS5ib3R0b20gPSBgJHtib3R0b20gKyBuYXZIZWlnaHR9cHhgO1xuICAgICAgdGhpcy5pc0xvY2tlZEJvdHRvbSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdGhpcy5pc0xvY2tlZEJvdHRvbSkge1xuICAgICAgICBpZiAoaWxsdXN0cmF0aW9uVG9wIDwgMSkge1xuICAgICAgICAgIGlmICh0aGlzLmlzTG9ja2VkVG9wKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuaWxsdXN0cmF0aW9uQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJy1maXhlZCcpO1xuICAgICAgICAgIHRoaXMuaWxsdXN0cmF0aW9uQ29udGFpbmVyLnN0eWxlLmJvdHRvbSA9ICcwJztcbiAgICAgICAgICB0aGlzLmlzTG9ja2VkVG9wID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXRoaXMuaXNMb2NrZWRUb3ApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pbGx1c3RyYXRpb25Db250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnLWZpeGVkJyk7XG4gICAgICAgICAgdGhpcy5pbGx1c3RyYXRpb25Db250YWluZXIuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2JvdHRvbScpO1xuICAgICAgICAgIHRoaXMuaXNMb2NrZWRUb3AgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmlsbHVzdHJhdGlvbkNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCctbG9ja2VkJyk7XG4gICAgICB0aGlzLmlsbHVzdHJhdGlvbkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCctZml4ZWQnKTtcbiAgICAgIHRoaXMuaWxsdXN0cmF0aW9uQ29udGFpbmVyLnN0eWxlLnJlbW92ZVByb3BlcnR5KCd0b3AnKTtcbiAgICAgIHRoaXMuaWxsdXN0cmF0aW9uQ29udGFpbmVyLnN0eWxlLmJvdHRvbSA9ICcwJztcbiAgICAgIHRoaXMuaXNMb2NrZWRCb3R0b20gPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgYW5pbWF0ZUxvZ28oKTogdm9pZCB7XG4gICAgdGhpcy5sb2dvQW5pbWF0aW9uT2JqZWN0LnBsYXkoKTtcbiAgICB0aGlzLmxvZ29BbmltYXRpb25PYmplY3QuYWRkRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCB0aGlzLm9uTG9nb0FuaW1hdGlvbkNvbXBsZXRlKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBvbkxvZ29BbmltYXRpb25Db21wbGV0ZSgpOiB2b2lkIHtcbiAgICB0aGlzLnN1Ym1pc3Npb25zT3BlbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnLWFjdGl2ZScpO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZVN1Ym1pdChlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICh0aGlzLmlzRm9ybVZhbGlkKCkpIHtcbiAgICAgIGNvbnN0IHBhcmFtczogSVBhcmFtcyA9IHtcbiAgICAgICAgJ2dzZi1jb3VudHJ5JzogKHRoaXMudGVhc2VyRm9ybS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgU0VMRUNUT1JTLlRFQVNFUl9GT1JNX0NPVU5UUlkpYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUsXG4gICAgICAgICdnc2YtZW1haWwnOiAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fVEVYVF9JTlBVVClhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSxcbiAgICAgICAgJ2dzZi1pLWFtLWEnOiAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBgJHtTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fUkFESU99IGlucHV0OmNoZWNrZWRgKWFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlLFxuICAgICAgICAnZ3NmLWlzLWxlZ2FsLWNoZWNrZWQnOiAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBgJHtTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fTEVHQUx9IGlucHV0YClhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSxcbiAgICAgICAgJ2dzZi1sYW5ndWFnZSc6ICh0aGlzLnRlYXNlckZvcm0ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIFNFTEVDVE9SUy5URUFTRVJfRk9STV9MQU5HVUFHRSlhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSxcbiAgICAgIH07XG4gICAgICBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbJ0NvbnRlbnQtVHlwZSddID1cbiAgICAgICAgICAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJztcbiAgICAgIGF4aW9zLnBvc3QoVEVBU0VSX0ZPUk1fVVJMLCBPYmplY3Qua2V5cyhwYXJhbXMpXG4gICAgICAgICAgLm1hcChrZXkgPT4gYCR7a2V5fT0ke2VuY29kZVVSSUNvbXBvbmVudCgocGFyYW1zW2tleV0pKX1gKS5qb2luKCcmJykpXG4gICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3JzWydnc2YtZW1haWwnXSkge1xuICAgICAgICAgICAgICAgICh0aGlzLnRlYXNlckZvcm0ucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fRU1BSUwpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NMaXN0LmFkZCgnLWVycm9yJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3JzWydnc2YtaS1hbS1hJ10pIHtcbiAgICAgICAgICAgICAgICAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlRFQVNFUl9GT1JNX1JBRElPKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzTGlzdC5hZGQoJy1lcnJvcicpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yc1snZ3NmLWlzLWxlZ2FsLWNoZWNrZWQnXSkge1xuICAgICAgICAgICAgICAgICh0aGlzLnRlYXNlckZvcm0ucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fTEVHQUwpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NMaXN0LmFkZCgnLWVycm9yJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMudGVhc2VyRm9ybUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCctc3VibWl0dGVkJyk7XG4gICAgICAgICAgICAgIHRoaXMudGVhc2VyRm9ybVN1Y2Nlc3Muc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgVHdlZW5NYXgudG8od2luZG93LCAuMTUsIHtcbiAgICAgICAgICAgICAgICAgIHNjcm9sbFRvOiB7XG4gICAgICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9LaWxsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy50ZWFzZXJGb3JtU3VjY2Vzcy5jbGFzc0xpc3QuYWRkKCctYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy50ZWFzZXJGb3JtQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICAgICAgdGhpcy50ZWFzZXJGb3JtQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRlYXNlckZvcm0uY2xhc3NMaXN0LmFkZCgnLWVycm9yJyk7XG4gICAgICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZXRGb3JtU3RhdGVzKCk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaXNFbWFpbFZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGVtYWlsRmllbGQgPSB0aGlzLnRlYXNlckZvcm1cbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlRFQVNFUl9GT1JNX1RFWFRfSU5QVVQpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgcmV0dXJuIGVtYWlsRmllbGQudmFsaWRpdHkudmFsaWQ7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaXNDYXRlZ29yeVZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNhdGVnb3J5RmllbGRzID0gbm9kZUxpc3RUb0FycmF5KHRoaXMudGVhc2VyRm9ybVxuICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgnLmZvcm0tLXJhZGlvLWdyb3VwIGlucHV0JykpIGFzIEFycmF5PEhUTUxJbnB1dEVsZW1lbnQ+O1xuICAgIHJldHVybiBjYXRlZ29yeUZpZWxkcy5maW5kKChmaWVsZCkgPT4gZmllbGQuY2hlY2tlZCA9PT0gdHJ1ZSkgIT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBpc0xlZ2FsQ2hlY2tlZCgpOiBib29sZWFuIHtcbiAgICBjb25zdCBsZWdhbENoZWNrID0gdGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoJyNpc0xlZ2FsQ2hlY2tlZCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgcmV0dXJuIGxlZ2FsQ2hlY2suY2hlY2tlZCA9PT0gdHJ1ZTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBpc0Zvcm1WYWxpZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc0VtYWlsVmFsaWQoKSAmJiB0aGlzLmlzQ2F0ZWdvcnlWYWxpZCgpICYmIHRoaXMuaXNMZWdhbENoZWNrZWQoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBzZXRGb3JtU3RhdGVzKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0VtYWlsVmFsaWQoKSkge1xuICAgICAgKHRoaXMudGVhc2VyRm9ybS5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5URUFTRVJfRk9STV9FTUFJTCkgYXMgSFRNTEVsZW1lbnQpXG4gICAgICAgICAgLmNsYXNzTGlzdC5hZGQoJy1lcnJvcicpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc0NhdGVnb3J5VmFsaWQoKSkge1xuICAgICAgKHRoaXMudGVhc2VyRm9ybS5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SUy5URUFTRVJfRk9STV9SQURJTykgYXMgSFRNTEVsZW1lbnQpXG4gICAgICAgICAgLmNsYXNzTGlzdC5hZGQoJy1lcnJvcicpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc0xlZ2FsQ2hlY2tlZCgpKSB7XG4gICAgICAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlRFQVNFUl9GT1JNX0xFR0FMKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgICAuY2xhc3NMaXN0LmFkZCgnLWVycm9yJyk7XG4gICAgfVxuICB9XG5cbiAgQGF1dG9iaW5kXG4gIGhhbmRsZUZvcm1DaGFuZ2UoKTogdm9pZCB7XG4gICAgdGhpcy50ZWFzZXJGb3JtU3VibWl0LmRpc2FibGVkID0gIXRoaXMuaXNGb3JtVmFsaWQoKTtcbiAgfVxuXG4gIEBhdXRvYmluZFxuICBoYW5kbGVFbWFpbEJsdXIoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzRW1haWxWYWxpZCgpKSB7XG4gICAgICAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlRFQVNFUl9GT1JNX0VNQUlMKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgICAuY2xhc3NMaXN0LmFkZCgnLWVycm9yJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh0aGlzLnRlYXNlckZvcm0ucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fRU1BSUwpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAgIC5jbGFzc0xpc3QucmVtb3ZlKCctZXJyb3InKTtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgaGFuZGxlTGVnYWxCbHVyKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0xlZ2FsQ2hlY2tlZCgpKSB7XG4gICAgICAodGhpcy50ZWFzZXJGb3JtLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JTLlRFQVNFUl9GT1JNX0xFR0FMKSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgICAuY2xhc3NMaXN0LmFkZCgnLWVycm9yJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh0aGlzLnRlYXNlckZvcm0ucXVlcnlTZWxlY3RvcihTRUxFQ1RPUlMuVEVBU0VSX0ZPUk1fTEVHQUwpIGFzIEhUTUxFbGVtZW50KVxuICAgICAgICAgIC5jbGFzc0xpc3QucmVtb3ZlKCctZXJyb3InKTtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgc2V0SGVpZ2h0c0ZvclZoKCk6IHZvaWQge1xuXG4gICAgdGhpcy5lbHNXaXRoVmguZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdoZWlnaHQnKTtcbiAgICAgIGlmICh0aGlzLmxhcmdlU2NyZWVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChlbC5jbGFzc0xpc3QuY29udGFpbnMoJ3RlYXNlcnBhZ2UtLXNjcm9sbC0tY29udGVudCcpKSB7XG4gICAgICAgIGVsLnN0eWxlLnBhZGRpbmcgPSBgJHt0aGlzLndpbmRvd0hlaWdodCAqICh0aGlzLmxhcmdlU2NyZWVuID8gLjMgOiAuMil9cHggMGA7XG4gICAgICB9XG4gICAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdqcy1zY3JvbGwtaWxsdXN0cmF0aW9uJykpIHtcbiAgICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy53aW5kb3dIZWlnaHR9cHhgO1xuICAgICAgfVxuICAgICAgaWYgKGVsLmNsYXNzTGlzdC5jb250YWlucygnanMtZmlyc3Qtc2Nyb2xsJykpIHtcbiAgICAgICAgZWwuc3R5bGUucGFkZGluZ1RvcCA9IGAke3RoaXMud2luZG93SGVpZ2h0ICogKHRoaXMubGFyZ2VTY3JlZW4gPyAuNSA6IC4zKX1weGA7XG4gICAgICB9XG4gICAgICBlbC5zdHlsZS5oZWlnaHQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuaGVpZ2h0O1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgSG9tZSBmcm9tICcuL0hvbWUnO1xuaW1wb3J0IFByb2plY3RQcmV2aWV3IGZyb20gJy4vUHJvamVjdFByZXZpZXcnO1xuaW1wb3J0IFJlZ2lzdGVyIGZyb20gJy4vUmVnaXN0ZXInO1xuaW1wb3J0IFN0eWxlZ3VpZGUgZnJvbSAnLi9TdHlsZWd1aWRlJztcbmltcG9ydCBUZWFzZXIgZnJvbSAnLi9UZWFzZXInO1xuaW1wb3J0IERhc2hib2FyZCBmcm9tICcuL0Rhc2hib2FyZCc7XG5cbmV4cG9ydCB7XG4gIERhc2hib2FyZCxcbiAgSG9tZSxcbiAgUHJvamVjdFByZXZpZXcsXG4gIFJlZ2lzdGVyLFxuICBTdHlsZWd1aWRlLFxuICBUZWFzZXIsXG59O1xuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuY29uc3QgYXhpb3NJbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7XG4gIGhlYWRlcnM6IHtcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCcsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYXhpb3NJbnN0YW5jZTtcbiIsImNvbnN0IHsgc3FydCB9ID0gTWF0aDtcblxuLyoqXG4gKiBEZXNjcmliZXMgYSBwb2ludCBpbiAyZCBzcGFjZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9pbnQge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRpc3RhbmNlIGZyb20gdGhpcyB0byBhbm90aGVyIHBvaW50LlxuICAgKi9cbiAgZGlzdGFuY2UocDogUG9pbnQpOiBudW1iZXIge1xuICAgIHJldHVybiBQb2ludC5kaXN0YW5jZSh0aGlzLngsIHRoaXMueSwgcC54LCBwLnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGlzdGFuY2UgZnJvbSB0aGlzIHRvIHRoZSBjb29yZGluYXRlcyBvZiBhbm90aGVyIHBvaW50LlxuICAgKi9cbiAgZGlzdGFuY2VUb0Nvb3Jkcyh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIFBvaW50LmRpc3RhbmNlKHRoaXMueCwgdGhpcy55LCB4LCB5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3JtYWxpemUgdGhpcyBwb2ludCB0byBhIHNwZWNpZmllZCBkaXN0YW5jZSBmcm9tIG9yaWdpbi5cbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyfSBbbGVuZ3RoPTFdXG4gICAqL1xuICBub3JtYWxpemUobGVuZ3RoPSAxLjApOiB2b2lkIHtcbiAgICBjb25zdCB4ID0gdGhpcy54O1xuICAgIGNvbnN0IHkgPSB0aGlzLnk7XG4gICAgY29uc3QgZCA9IHNxcnQoeCAqIHggKyB5ICogeSk7XG5cbiAgICB0aGlzLnggPSBsZW5ndGggKiB4IC8gZDtcbiAgICB0aGlzLnkgPSBsZW5ndGggKiB5IC8gZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZSB0aGUgcG9pbnQuXG4gICAqL1xuICBzY2FsZShzY2FsZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy54ICo9IHNjYWxlO1xuICAgIHRoaXMueSAqPSBzY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBuZXcgcG9pbnQgd2l0aCB0aGUgc2FtZSB2YWx1ZXMuXG4gICAqL1xuICBjbG9uZSgpOiBQb2ludCB7XG4gICAgcmV0dXJuIG5ldyBQb2ludChcbiAgICAgIHRoaXMueCxcbiAgICAgIHRoaXMueSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgY29vcmRpbmF0ZXMgb2YgdHdvIHBvaW50cy5cbiAgICovXG4gIHN0YXRpYyBkaXN0YW5jZSh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBkeCA9IHgxIC0geDI7XG4gICAgY29uc3QgZHkgPSB5MSAtIHkyO1xuXG4gICAgcmV0dXJuIHNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIExpbmVhcmx5IGludGVycG9sYXRlIGJldHdlZW4gdHdvIHBvaW50cy5cbiAgICovXG4gIHN0YXRpYyBsZXJwKHB0MTogUG9pbnQsIHB0MjogUG9pbnQsIGNvZWY6IG51bWJlcik6IFBvaW50IHtcbiAgICBjb25zdCBpcCA9IDEgLSBjb2VmO1xuXG4gICAgcmV0dXJuIG5ldyBQb2ludChcbiAgICAgIHB0MS54ICogaXAgKyBwdDIueCAqIGNvZWYsXG4gICAgICBwdDEueSAqIGlwICsgcHQyLnkgKiBjb2VmLFxuICAgICk7XG4gIH1cbn1cbiIsImNvbnN0IENLRURJVE9SX1NFVFRJTkdTID0ge1xuICBsYW5ndWFnZTogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcsXG4gIHVwbG9hZFVybDogJy9hcGkvdXBsb2FkJyxcbiAgcmVtb3ZlQnV0dG9uczogJ0N1dCxDb3B5LFBhc3RlLFN0cmlrZSxBYm91dCxBbmNob3InLFxufTtcblxuY29uc3QgR0xPQkFMX1NFTEVDVE9SUyA9IHtcbiAgUklDSF9URVhUQVJFQTogJy5qcy1yaWNoLXRleHRhcmVhJyxcbn07XG5cbmNvbnN0IE1FRElBX1FVRVJJRVMgPSB7XG4gIFNNQUxMOiAnKG1pbi13aWR0aDogNjAwcHgpJyxcbiAgTUVESVVNOiAnKG1pbi13aWR0aDogOTAwcHgpJyxcbiAgTEFSR0U6ICcobWluLXdpZHRoOiAxMDI0cHgpJyxcbiAgWEw6ICcobWluLXdpZHRoOiAxNDQwcHgpJyxcbn07XG5cbmNvbnN0IEFDVElPTl9DTEFTU0VTID0ge1xuICBBQ1RJVkU6ICctYWN0aXZlJyxcbiAgRU5BQkxFRDogJy1lbmFibGVkJyxcbiAgRElTQUJMRUQ6ICctZGlzYWJsZWQnLFxuICBFUlJPUjogJy1lcnJvcicsXG4gIEZPQ1VTRUQ6ICctZm9jdXNlZCcsXG4gIE5FRURTX0ZPQ1VTX1JJTkc6ICctbmVlZHMtZm9jdXMnLFxuICBTVUJNSVRURUQ6ICctc3VibWl0dGVkJyxcbiAgSU5BQ1RJVkU6ICctaW5hY3RpdmUnLFxuICBISURERU46ICctaGlkZGVuJyxcbiAgSEFTX1NIQURPVzogJy1oYXMtc2hhZG93JyxcbiAgU0FWSU5HOiAnLXNhdmluZycsXG4gIEhPVkVSRUQ6ICctaG92ZXJlZCcsXG4gIFJFRFVDRV9NT1RJT046ICctcmVkdWNlZC1tb3Rpb24nLFxufTtcblxuZXhwb3J0IHtcbiAgQ0tFRElUT1JfU0VUVElOR1MsXG4gIEdMT0JBTF9TRUxFQ1RPUlMsXG4gIEFDVElPTl9DTEFTU0VTLFxuICBNRURJQV9RVUVSSUVTLFxufTtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQVVESU9fTEVWRUwgPSAwLjU7XG4iLCJleHBvcnQgZnVuY3Rpb24gcmVhZENvb2tpZShuYW1lOiBzdHJpbmcpIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IFJlZ0V4cChgKD86Xnw7ICkke2VuY29kZVVSSUNvbXBvbmVudChuYW1lKX09KFteO10qKWApLmV4ZWMoZG9jdW1lbnQuY29va2llKTtcbiAgcmV0dXJuIHJlc3VsdCA/IHJlc3VsdFsxXSA6IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZUNvb2tpZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGRheXMgPSAzNjUpIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIChkYXlzICogMjQgKiA2MCAqIDYwICogMTAwMCkpO1xuICBkb2N1bWVudC5jb29raWUgPSBgJHtuYW1lfT1cIiR7dmFsdWV9XCI7IGV4cGlyZXM9JHtkYXRlLnRvVVRDU3RyaW5nKCl9OyBwYXRoPS9gO1xufVxuIiwiaW1wb3J0IHsgTURDUmlwcGxlIH0gZnJvbSAnQG1hdGVyaWFsL3JpcHBsZSc7XG5pbXBvcnQgbm9kZUxpc3RUb0FycmF5IGZyb20gJy4vbm9kZUxpc3RUb0FycmF5JztcbmltcG9ydCB7IHJlYWRDb29raWUsIHdyaXRlQ29va2llIH0gZnJvbSAnLi9jb29raWVzJztcbmltcG9ydCB7XG4gIENLRURJVE9SX1NFVFRJTkdTLFxuICBHTE9CQUxfU0VMRUNUT1JTLFxuICBBQ1RJT05fQ0xBU1NFUyxcbiAgTUVESUFfUVVFUklFUyxcbiAgREVGQVVMVF9BVURJT19MRVZFTCxcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IGF4aW9zSW5zdGFuY2UgZnJvbSAnLi9BeGlvc0luc3RhbmNlJztcbmltcG9ydCBQb2ludCBmcm9tICcuL1BvaW50JztcbmltcG9ydCB7IGlzSW5WaWV3cG9ydCB9IGZyb20gJy4vaXNJblZpZXdwb3J0JztcblxuY29uc3QgaXNJT1MgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUGhvbmV8aVBvZHxpUGFkLyk7XG5sZXQgc2hvdWxkTG9hZE1EQyA9IHRydWU7XG5cbmlmIChpc0lPUykge1xuICBjb25zdCB2ZXJzaW9uID1cbiAgICAgIChuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9cXGJbMC05XStfWzAtOV0rKD86X1swLTldKyk/XFxiLykgfHwgWycnXSlbMF0ucmVwbGFjZSgvXy9nLCAnLicpO1xuICBzaG91bGRMb2FkTURDID0gcGFyc2VJbnQodmVyc2lvbiwgMTApID4gMTA7XG59XG5cbmNvbnN0IFJpcHBsZSA9IHNob3VsZExvYWRNREMgPyBNRENSaXBwbGUgOiBudWxsO1xuXG5leHBvcnQge1xuICBBQ1RJT05fQ0xBU1NFUyxcbiAgYXhpb3NJbnN0YW5jZSxcbiAgQ0tFRElUT1JfU0VUVElOR1MsXG4gIERFRkFVTFRfQVVESU9fTEVWRUwsXG4gIEdMT0JBTF9TRUxFQ1RPUlMsXG4gIGlzSW5WaWV3cG9ydCxcbiAgTUVESUFfUVVFUklFUyxcbiAgUmlwcGxlLFxuICBub2RlTGlzdFRvQXJyYXksXG4gIHJlYWRDb29raWUsXG4gIHdyaXRlQ29va2llLFxuICBQb2ludCxcbn07XG4iLCJleHBvcnQgZnVuY3Rpb24gaXNJblZpZXdwb3J0KGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgY29uc3QgYm91bmRpbmcgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiAoXG4gICAgICAgIGJvdW5kaW5nLnRvcCA8PSAod2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpICYmXG4gICAgICAgIGJvdW5kaW5nLmxlZnQgPj0gMCAmJlxuICAgICAgICBib3VuZGluZy5ib3R0b20gPj0gMCAmJlxuICAgICAgICBib3VuZGluZy5yaWdodCA8PSAod2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKVxuICAgICk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2RlTGlzdFRvQXJyYXkobm9kZUxpc3Q6IE5vZGVMaXN0KSB7XG4gIGNvbnN0IGFycmF5RnJvbU5vZGVMaXN0ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBhcnJheUZyb21Ob2RlTGlzdC5wdXNoKG5vZGVMaXN0W2ldIGFzIEhUTUxFbGVtZW50KTtcbiAgfVxuICByZXR1cm4gYXJyYXlGcm9tTm9kZUxpc3Q7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9